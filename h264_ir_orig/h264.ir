; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.seq_parameter_set_rbsp_t = type { i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i32, i32, i32, [256 x i32], i32, i8, i32, i32, i8, i8, i8, i8, i32, i32, i32, i32, i8 }
%struct.pic_parameter_set_rbsp_t = type { i8, i32, i32, i8, i8, i32, i32, i32, i8, i8, i32, i32, i32, i8, i8, i8 }
%struct.slice_header_rbsp_t = type { i32, i8, i8, i32, i8, i8, i32, i32, i32, [2 x i32], i32, i8, i8, i8, i8, i8, i8, [5 x i8], [5 x i32], [5 x i8], [5 x i32], %struct.pred_weight_table_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t, i8, i32, i8, i32, i32 }
%struct.pred_weight_table_rbsp_t = type { i32, i32, [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]], [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]] }
%struct.dec_ref_pic_marking_rbsp_t = type { i8, i8, i8, [10 x i8], [10 x i32] }
%struct.ImageParameters = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i8, [3 x i32], [3 x i32], i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }
%struct.StorablePicture = type { i32, i8, i8, i8, i8 }
%struct.StorablePictureInfo = type { [22 x [18 x i8]], [22 x [18 x i8]], [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]] }

@lentab = dso_local constant [3 x [4 x [17 x i8]]] [[4 x [17 x i8]] [[17 x i8] c"\01\06\08\09\0A\0B\0D\0D\0D\0E\0E\0F\0F\10\10\10\10", [17 x i8] c"\00\02\06\08\09\0A\0B\0D\0D\0E\0E\0F\0F\0F\10\10\10", [17 x i8] c"\00\00\03\07\08\09\0A\0B\0D\0D\0E\0E\0F\0F\10\10\10", [17 x i8] c"\00\00\00\05\06\07\08\09\0A\0B\0D\0E\0E\0F\0F\10\10"], [4 x [17 x i8]] [[17 x i8] c"\02\06\06\07\08\08\09\0B\0B\0C\0C\0C\0D\0D\0D\0E\0E", [17 x i8] c"\00\02\05\06\06\07\08\09\0B\0B\0C\0C\0D\0D\0E\0E\0E", [17 x i8] c"\00\00\03\06\06\07\08\09\0B\0B\0C\0C\0D\0D\0D\0E\0E", [17 x i8] c"\00\00\00\04\04\05\06\06\07\09\0B\0B\0C\0D\0D\0D\0E"], [4 x [17 x i8]] [[17 x i8] c"\04\06\06\06\07\07\07\07\08\08\09\09\09\0A\0A\0A\0A", [17 x i8] c"\00\04\05\05\05\05\06\06\07\08\08\09\09\09\0A\0A\0A", [17 x i8] c"\00\00\04\05\05\05\06\06\07\07\08\08\09\09\0A\0A\0A", [17 x i8] c"\00\00\00\04\04\04\04\04\05\06\07\08\08\09\0A\0A\0A"]], align 16
@codtab = dso_local constant [3 x [4 x [17 x i8]]] [[4 x [17 x i8]] [[17 x i8] c"\01\05\07\07\07\07\0F\0B\08\0F\0B\0F\0B\0F\0B\07\04", [17 x i8] c"\00\01\04\06\06\06\06\0E\0A\0E\0A\0E\0A\01\0E\0A\06", [17 x i8] c"\00\00\01\05\05\05\05\05\0D\09\0D\09\0D\09\0D\09\05", [17 x i8] c"\00\00\00\03\03\04\04\04\04\04\0C\0C\08\0C\08\0C\08"], [4 x [17 x i8]] [[17 x i8] c"\03\0B\07\07\07\04\07\0F\0B\0F\0B\08\0F\0B\07\09\07", [17 x i8] c"\00\02\07\0A\06\06\06\06\0E\0A\0E\0A\0E\0A\0B\08\06", [17 x i8] c"\00\00\03\09\05\05\05\05\0D\09\0D\09\0D\09\06\0A\05", [17 x i8] c"\00\00\00\05\04\06\08\04\04\04\0C\08\0C\0C\08\01\04"], [4 x [17 x i8]] [[17 x i8] c"\0F\0F\0B\08\0F\0B\09\08\0F\0B\0F\0B\08\0D\09\05\01", [17 x i8] c"\00\0E\0F\0C\0A\08\0E\0A\0E\0E\0A\0E\0A\07\0C\08\04", [17 x i8] c"\00\00\0D\0E\0B\09\0D\09\0D\0A\0D\09\0D\09\0B\07\03", [17 x i8] c"\00\00\00\0C\0B\0A\09\08\0D\0C\0C\0C\08\0C\0A\06\02"]], align 16
@lentabDC = dso_local constant [4 x [5 x i8]] [[5 x i8] c"\02\06\06\06\06", [5 x i8] c"\00\01\06\07\08", [5 x i8] c"\00\00\03\07\08", [5 x i8] c"\00\00\00\06\07"], align 16
@codtabDC = dso_local constant [4 x [5 x i8]] [[5 x i8] c"\01\07\04\03\02", [5 x i8] c"\00\01\06\03\03", [5 x i8] c"\00\00\01\02\02", [5 x i8] c"\00\00\00\05\00"], align 16
@tzlentab = dso_local constant <{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }> <{ [16 x i8] c"\01\03\03\04\04\05\05\06\06\07\07\08\08\09\09\09", [16 x i8] c"\03\03\03\03\03\04\04\04\04\05\05\06\06\06\06\00", [16 x i8] c"\04\03\03\03\04\04\03\03\04\05\05\06\05\06\00\00", [16 x i8] c"\05\03\04\04\03\03\03\04\03\04\05\05\05\00\00\00", [16 x i8] c"\04\04\04\03\03\03\03\03\04\05\04\05\00\00\00\00", [16 x i8] c"\06\05\03\03\03\03\03\03\04\03\06\00\00\00\00\00", [16 x i8] c"\06\05\03\03\03\02\03\04\03\06\00\00\00\00\00\00", [16 x i8] c"\06\04\05\03\02\02\03\03\06\00\00\00\00\00\00\00", <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\06\06\04\02\02\03\02\05", [8 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 5, i8 5, i8 3, i8 2, i8 2, i8 2, i8 4, [9 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 4, i8 4, i8 3, i8 3, i8 1, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 4, i8 4, i8 2, i8 1, i8 3, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 3, i8 3, i8 1, i8 2, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 2, i8 2, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }> }>, align 16
@tzcodtab = dso_local constant <{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }> <{ [16 x i8] c"\01\03\02\03\02\03\02\03\02\03\02\03\02\03\02\01", [16 x i8] c"\07\06\05\04\03\05\04\03\02\03\02\03\02\01\00\00", [16 x i8] c"\05\07\06\05\04\03\04\03\02\03\02\01\01\00\00\00", [16 x i8] c"\03\07\05\04\06\05\04\03\03\02\02\01\00\00\00\00", [16 x i8] c"\05\04\03\07\06\05\04\03\02\01\01\00\00\00\00\00", [16 x i8] c"\01\01\07\06\05\04\03\02\01\01\00\00\00\00\00\00", [16 x i8] c"\01\01\05\04\03\03\02\01\01\00\00\00\00\00\00\00", <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\01\01\01\03\03\02\02\01", [8 x i8] zeroinitializer }>, <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\01\00\01\03\02\01\01\01", [8 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 1, i8 0, i8 1, i8 3, i8 2, i8 1, i8 1, [9 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 0, i8 1, i8 1, i8 2, i8 1, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 0, i8 1, i8 1, i8 1, i8 1, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 1, i8 1, i8 1, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 0, i8 1, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 0, i8 1, [14 x i8] zeroinitializer }> }>, align 16
@tzlentabDC = dso_local constant [3 x [4 x i8]] [[4 x i8] c"\01\02\03\03", [4 x i8] c"\01\02\02\00", [4 x i8] c"\01\01\00\00"], align 1
@tzcodtabDC = dso_local constant [3 x [4 x i8]] [[4 x i8] c"\01\01\01\00", [4 x i8] c"\01\01\00\00", [4 x i8] c"\01\00\00\00"], align 1
@rblentab = dso_local constant <{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }> <{ <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 1, i8 2, i8 2, [13 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 2, i8 2, i8 2, i8 2, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 2, i8 2, i8 2, i8 3, i8 3, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 2, i8 2, i8 3, i8 3, i8 3, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 2, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, [9 x i8] zeroinitializer }>, [16 x i8] c"\03\03\03\03\03\03\03\04\05\06\07\08\09\0A\0B\00" }>, align 16
@rbcodtab = dso_local constant <{ <{ i8, [15 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }> <{ <{ i8, [15 x i8] }> <{ i8 1, [15 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 3, i8 2, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 3, i8 2, i8 1, i8 1, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 3, i8 2, i8 3, i8 2, i8 1, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 3, i8 0, i8 1, i8 3, i8 2, i8 5, i8 4, [9 x i8] zeroinitializer }>, [16 x i8] c"\07\06\05\04\03\02\01\01\01\01\01\01\01\01\01\00" }>, align 16
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"nc_range too large!\00", align 1
@__const.residual_block_cavlc_16.framescan = private unnamed_addr constant [16 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\01\00", [2 x i8] c"\00\01", [2 x i8] c"\00\02", [2 x i8] c"\01\01", [2 x i8] c"\02\00", [2 x i8] c"\03\00", [2 x i8] c"\02\01", [2 x i8] c"\01\02", [2 x i8] c"\00\03", [2 x i8] c"\01\03", [2 x i8] c"\02\02", [2 x i8] c"\03\01", [2 x i8] c"\03\02", [2 x i8] c"\02\03", [2 x i8] c"\03\03"], align 16
@SPS_GLOBAL = common dso_local global %struct.seq_parameter_set_rbsp_t zeroinitializer, align 4
@PPS_GLOBAL = common dso_local global %struct.pic_parameter_set_rbsp_t zeroinitializer, align 4
@sliceHeader_inst = common dso_local global %struct.slice_header_rbsp_t zeroinitializer, align 4
@img_inst = common dso_local global %struct.ImageParameters* null, align 8
@inter_tab = dso_local constant [6 x [6 x i32]] [[6 x i32] [i32 1, i32 -5, i32 20, i32 20, i32 -5, i32 1], [6 x i32] [i32 -5, i32 25, i32 -100, i32 -100, i32 25, i32 -5], [6 x i32] [i32 20, i32 -100, i32 400, i32 400, i32 -100, i32 20], [6 x i32] [i32 20, i32 -100, i32 400, i32 400, i32 -100, i32 20], [6 x i32] [i32 -5, i32 25, i32 -100, i32 -100, i32 25, i32 -5], [6 x i32] [i32 1, i32 -5, i32 20, i32 20, i32 -5, i32 1]], align 16
@__const.processinterMbType.val_stepX = private unnamed_addr constant [30 x i8] c"\04\04\04\02\02\02\02\02\04\04\04\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\02", align 16
@__const.processinterMbType.val_stepY = private unnamed_addr constant [30 x i8] c"\04\04\02\04\02\02\02\02\04\04\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02", align 16
@__const.processinterMbType.val_listuse = private unnamed_addr constant [30 x [4 x i8]] [[4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\01\01\01\01", [4 x i8] c"\02\02\02\02", [4 x i8] c"\03\03\03\03", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\02\02\02\02", [4 x i8] c"\02\02\02\02", [4 x i8] c"\01\01\02\02", [4 x i8] c"\01\02\01\02", [4 x i8] c"\02\02\01\01", [4 x i8] c"\02\01\02\01", [4 x i8] c"\01\01\03\03", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\03\03", [4 x i8] c"\02\03\02\03", [4 x i8] c"\03\03\01\01", [4 x i8] c"\03\01\03\01", [4 x i8] c"\03\03\02\02", [4 x i8] c"\03\02\03\02", [4 x i8] c"\03\03\03\03", [4 x i8] c"\03\03\03\03", [4 x i8] zeroinitializer], align 16
@__const.processinterMbType.val_predir = private unnamed_addr constant [30 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] zeroinitializer], align 16
@__const.processinterMbType.val_sublistuse = private unnamed_addr constant [17 x i8] c"\01\01\01\01\00\01\02\03\01\01\02\02\03\03\01\02\03", align 16
@__const.processinterMbType.val_subX = private unnamed_addr constant [17 x i8] c"\02\02\01\01\02\02\02\02\02\01\02\01\02\01\01\01\01", align 16
@__const.processinterMbType.val_subY = private unnamed_addr constant [17 x i8] c"\02\01\02\01\02\02\02\02\01\02\01\02\01\02\01\01\01", align 16
@.str.1 = private unnamed_addr constant [46 x i8] c"Error: illegal intra_4x4 prediction mode: %d\0A\00", align 1
@bitstr = common dso_local global %struct._IO_FILE* null, align 8
@p_out = common dso_local global %struct._IO_FILE* null, align 8
@PINGPONGbuffer = common dso_local global %struct.NALU_t zeroinitializer, align 8
@Pic = common dso_local global [3 x %struct.StorablePicture] zeroinitializer, align 16
@Pic_Sluma = common dso_local global [3 x [176 x [144 x i8]]] zeroinitializer, align 16
@Pic_SChroma_0 = common dso_local global [3 x [88 x [72 x i8]]] zeroinitializer, align 16
@Pic_SChroma_1 = common dso_local global [3 x [88 x [72 x i8]]] zeroinitializer, align 16
@Pic_info = common dso_local global [3 x %struct.StorablePictureInfo] zeroinitializer, align 16
@PINGPONGbuffer_buf = common dso_local global [2450 x i8] zeroinitializer, align 16
@PINGPONGbuffer_bit_offset = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [51 x i8] c"ERROR: Usage %s <input_file.264> <golden_file.yuv>\00", align 1
@.str.1.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2.4 = private unnamed_addr constant [15 x i8] c"input/test.264\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"cannot find the corresponding file.\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"testresult.yuv\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@IsFirstByteStreamNALU = dso_local global i32 1, align 4
@LastAccessUnitExists = dso_local global i32 0, align 4
@NALUCount = dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [18 x i8] c"not enough memory\00", align 1
@.str.1.16 = private unnamed_addr constant [37 x i8] c"GetAnnexbNALU can't read start code\0A\00", align 1
@.str.2.17 = private unnamed_addr constant [66 x i8] c"GetAnnexbNALU: no Start Code at the begin of the NALU, return -1\0A\00", align 1
@.str.3.18 = private unnamed_addr constant [111 x i8] c"GetAnnexbNALU: The leading_zero_8bits syntax can only be present in the first byte stream NAL unit, return -1\0A\00", align 1
@.str.4.19 = private unnamed_addr constant [42 x i8] c" Panic: Error in next start code search \0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.5.20 = private unnamed_addr constant [54 x i8] c"GetAnnexbNALU: Cannot fseek %d in the bit stream file\00", align 1
@vt = dso_local constant [6 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 160, i32 208], [2 x i32] [i32 208, i32 256]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 224], [2 x i32] [i32 224, i32 288]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 256], [2 x i32] [i32 256, i32 320]], [2 x [2 x i32]] [[2 x i32] [i32 224, i32 288], [2 x i32] [i32 288, i32 368]], [2 x [2 x i32]] [[2 x i32] [i32 256, i32 320], [2 x i32] [i32 320, i32 400]], [2 x [2 x i32]] [[2 x i32] [i32 288, i32 368], [2 x i32] [i32 368, i32 464]]], align 16
@__const.get_LevelScale4x4.v = private unnamed_addr constant [6 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 160, i32 208], [2 x i32] [i32 208, i32 256]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 224], [2 x i32] [i32 224, i32 288]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 256], [2 x i32] [i32 256, i32 320]], [2 x [2 x i32]] [[2 x i32] [i32 224, i32 288], [2 x i32] [i32 288, i32 368]], [2 x [2 x i32]] [[2 x i32] [i32 256, i32 320], [2 x i32] [i32 320, i32 400]], [2 x [2 x i32]] [[2 x i32] [i32 288, i32 368], [2 x i32] [i32 368, i32 464]]], align 16
@__const.scale_and_inv_trans_Intra16x16DC.inv1 = private unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 1, i32 1, i32 1, i32 1], [4 x i32] [i32 1, i32 1, i32 -1, i32 -1], [4 x i32] [i32 1, i32 -1, i32 -1, i32 1], [4 x i32] [i32 1, i32 -1, i32 1, i32 -1]], align 16
@__const.ProcessSlice.qPCtable = private unnamed_addr constant [22 x i32] [i32 29, i32 30, i32 31, i32 32, i32 32, i32 33, i32 34, i32 34, i32 35, i32 35, i32 36, i32 36, i32 37, i32 37, i32 37, i32 38, i32 38, i32 38, i32 39, i32 39, i32 39, i32 39], align 16
@__const.ProcessSlice.power2 = private unnamed_addr constant [6 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32], align 16
@__const.ProcessSlice.intratypecutoff = private unnamed_addr constant [3 x i32] [i32 5, i32 23, i32 0], align 4
@NCBP = dso_local constant [48 x [2 x i8]] [[2 x i8] c"/\00", [2 x i8] c"\1F\10", [2 x i8] c"\0F\01", [2 x i8] c"\00\02", [2 x i8] c"\17\04", [2 x i8] c"\1B\08", [2 x i8] c"\1D ", [2 x i8] c"\1E\03", [2 x i8] c"\07\05", [2 x i8] c"\0B\0A", [2 x i8] c"\0D\0C", [2 x i8] c"\0E\0F", [2 x i8] c"'/", [2 x i8] c"+\07", [2 x i8] c"-\0B", [2 x i8] c".\0D", [2 x i8] c"\10\0E", [2 x i8] c"\03\06", [2 x i8] c"\05\09", [2 x i8] c"\0A\1F", [2 x i8] c"\0C#", [2 x i8] c"\13%", [2 x i8] c"\15*", [2 x i8] c"\1A,", [2 x i8] c"\1C!", [2 x i8] c"#\22", [2 x i8] c"%$", [2 x i8] c"*(", [2 x i8] c",'", [2 x i8] c"\01+", [2 x i8] c"\02-", [2 x i8] c"\04.", [2 x i8] c"\08\11", [2 x i8] c"\11\12", [2 x i8] c"\12\14", [2 x i8] c"\14\18", [2 x i8] c"\18\13", [2 x i8] c"\06\15", [2 x i8] c"\09\1A", [2 x i8] c"\16\1C", [2 x i8] c"\19\17", [2 x i8] c" \1B", [2 x i8] c"!\1D", [2 x i8] c"\22\1E", [2 x i8] c"$\16", [2 x i8] c"(\19", [2 x i8] c"&&", [2 x i8] c"))"], align 16
@.str.45 = private unnamed_addr constant [8 x i8] c"n <= 16\00", align 1
@.str.1.46 = private unnamed_addr constant [13 x i8] c"../src/vlc.c\00", align 1
@__PRETTY_FUNCTION__.u_n = private unnamed_addr constant [66 x i8] c"unsigned int u_n(int, NALU_t *, unsigned char *, unsigned long *)\00", align 1
@__PRETTY_FUNCTION__.showbits = private unnamed_addr constant [37 x i8] c"int showbits(int, unsigned int, int)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TrailingOnes_TotalCoeff(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8* %TotalCoeff, i8* %TrailingZeros, i8 zeroext %nC_range) #0 !prof !29 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %TotalCoeff.addr = alloca i8*, align 8
  %TrailingZeros.addr = alloca i8*, align 8
  %nC_range.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8* %TotalCoeff, i8** %TotalCoeff.addr, align 8
  store i8* %TrailingZeros, i8** %TrailingZeros.addr, align 8
  store i8 %nC_range, i8* %nC_range.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  %0 = load i8, i8* %nC_range.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.end, !prof !30

if.then:                                          ; preds = %entry
  %call = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i8, i8* %nC_range.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %if.then5, label %if.end15, !prof !31

if.then5:                                         ; preds = %if.end
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_n(i32 6, %struct.NALU_t* %2, i8* %3, i64* %4)
  store i32 %call6, i32* %cod, align 4
  %5 = load i32, i32* %cod, align 4
  %and = and i32 %5, 3
  %conv7 = trunc i32 %and to i8
  %6 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv7, i8* %6, align 1
  %7 = load i32, i32* %cod, align 4
  %shr = ashr i32 %7, 2
  %add = add nsw i32 %shr, 1
  %conv8 = trunc i32 %add to i8
  %8 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv8, i8* %8, align 1
  %9 = load i8*, i8** %TrailingZeros.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv9 = zext i8 %10 to i32
  %11 = load i8*, i8** %TotalCoeff.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv10 = zext i8 %12 to i32
  %cmp11 = icmp sgt i32 %conv9, %conv10
  br i1 %cmp11, label %if.then13, label %if.end14, !prof !32

if.then13:                                        ; preds = %if.then5
  %13 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 0, i8* %13, align 1
  %14 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 0, i8* %14, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.then5
  br label %return

if.end15:                                         ; preds = %if.end
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %15 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %16 = load i64, i64* %15, align 8
  %conv16 = trunc i64 %16 to i32
  store i32 %conv16, i32* %offset, align 4
  %17 = load i8*, i8** %nalu_buf.addr, align 8
  %18 = load i32, i32* %offset, align 4
  %div = sdiv i32 %18, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %19 = load i8, i8* %arrayidx, align 1
  store i8 %19, i8* %temp_1, align 1
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i32, i32* %offset, align 4
  %div17 = sdiv i32 %21, 8
  %add18 = add nsw i32 %div17, 1
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 %idxprom19
  %22 = load i8, i8* %arrayidx20, align 1
  store i8 %22, i8* %temp_2, align 1
  %23 = load i8*, i8** %nalu_buf.addr, align 8
  %24 = load i32, i32* %offset, align 4
  %div21 = sdiv i32 %24, 8
  %add22 = add nsw i32 %div21, 2
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %23, i64 %idxprom23
  %25 = load i8, i8* %arrayidx24, align 1
  store i8 %25, i8* %temp_3, align 1
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i32, i32* %offset, align 4
  %div25 = sdiv i32 %27, 8
  %add26 = add nsw i32 %div25, 3
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %26, i64 %idxprom27
  %28 = load i8, i8* %arrayidx28, align 1
  store i8 %28, i8* %temp_4, align 1
  %29 = load i8, i8* %temp_4, align 1
  %conv29 = zext i8 %29 to i32
  store i32 %conv29, i32* %temp, align 4
  %30 = load i32, i32* %temp, align 4
  %shl = shl i32 %30, 8
  %31 = load i8, i8* %temp_3, align 1
  %conv30 = zext i8 %31 to i32
  %or = or i32 %shl, %conv30
  store i32 %or, i32* %temp, align 4
  %32 = load i32, i32* %temp, align 4
  %shl31 = shl i32 %32, 8
  %33 = load i8, i8* %temp_2, align 1
  %conv32 = zext i8 %33 to i32
  %or33 = or i32 %shl31, %conv32
  store i32 %or33, i32* %temp, align 4
  %34 = load i32, i32* %temp, align 4
  %shl34 = shl i32 %34, 8
  %35 = load i8, i8* %temp_1, align 1
  %conv35 = zext i8 %35 to i32
  %or36 = or i32 %shl34, %conv35
  store i32 %or36, i32* %temp, align 4
  %36 = load i32, i32* %temp, align 4
  %call37 = call i32 @bytes_reverse_32(i32 %36)
  store i32 %call37, i32* %temp0, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc70, %if.end15
  %37 = load i32, i32* %j, align 4
  %cmp38 = icmp slt i32 %37, 4
  br i1 %cmp38, label %for.body, label %for.end72, !prof !33

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc, %for.body
  %38 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %38, 17
  br i1 %cmp41, label %for.body43, label %for.end, !prof !34

for.body43:                                       ; preds = %for.cond40
  %39 = load i8, i8* %nC_range.addr, align 1
  %idxprom44 = zext i8 %39 to i64
  %arrayidx45 = getelementptr inbounds [3 x [4 x [17 x i8]]], [3 x [4 x [17 x i8]]]* @lentab, i64 0, i64 %idxprom44
  %40 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %40 to i64
  %arrayidx47 = getelementptr inbounds [4 x [17 x i8]], [4 x [17 x i8]]* %arrayidx45, i64 0, i64 %idxprom46
  %41 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %41 to i64
  %arrayidx49 = getelementptr inbounds [17 x i8], [17 x i8]* %arrayidx47, i64 0, i64 %idxprom48
  %42 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %42 to i32
  store i32 %conv50, i32* %len, align 4
  %43 = load i8, i8* %nC_range.addr, align 1
  %idxprom51 = zext i8 %43 to i64
  %arrayidx52 = getelementptr inbounds [3 x [4 x [17 x i8]]], [3 x [4 x [17 x i8]]]* @codtab, i64 0, i64 %idxprom51
  %44 = load i32, i32* %j, align 4
  %idxprom53 = sext i32 %44 to i64
  %arrayidx54 = getelementptr inbounds [4 x [17 x i8]], [4 x [17 x i8]]* %arrayidx52, i64 0, i64 %idxprom53
  %45 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %45 to i64
  %arrayidx56 = getelementptr inbounds [17 x i8], [17 x i8]* %arrayidx54, i64 0, i64 %idxprom55
  %46 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %46 to i32
  store i32 %conv57, i32* %cod, align 4
  %47 = load i32, i32* %len, align 4
  %48 = load i32, i32* %temp0, align 4
  %49 = load i32, i32* %offset, align 4
  %call58 = call i32 @showbits(i32 %47, i32 %48, i32 %49)
  %50 = load i32, i32* %cod, align 4
  %cmp59 = icmp eq i32 %call58, %50
  %conv60 = zext i1 %cmp59 to i32
  %conv61 = trunc i32 %conv60 to i8
  store i8 %conv61, i8* %test, align 1
  %51 = load i32, i32* %j, align 4
  %52 = load i8, i8* %test, align 1
  %conv62 = zext i8 %52 to i32
  %mul = mul nsw i32 %51, %conv62
  %53 = load i32, i32* %a, align 4
  %add63 = add nsw i32 %53, %mul
  store i32 %add63, i32* %a, align 4
  %54 = load i32, i32* %i, align 4
  %55 = load i8, i8* %test, align 1
  %conv64 = zext i8 %55 to i32
  %mul65 = mul nsw i32 %54, %conv64
  %56 = load i32, i32* %b, align 4
  %add66 = add nsw i32 %56, %mul65
  store i32 %add66, i32* %b, align 4
  %57 = load i32, i32* %len, align 4
  %58 = load i8, i8* %test, align 1
  %conv67 = zext i8 %58 to i32
  %mul68 = mul nsw i32 %57, %conv67
  %59 = load i32, i32* %c, align 4
  %add69 = add nsw i32 %59, %mul68
  store i32 %add69, i32* %c, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body43
  %60 = load i32, i32* %i, align 4
  %inc = add nsw i32 %60, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond40

for.end:                                          ; preds = %for.cond40
  br label %for.inc70

for.inc70:                                        ; preds = %for.end
  %61 = load i32, i32* %j, align 4
  %inc71 = add nsw i32 %61, 1
  store i32 %inc71, i32* %j, align 4
  br label %for.cond

for.end72:                                        ; preds = %for.cond
  %62 = load i32, i32* %a, align 4
  %conv73 = trunc i32 %62 to i8
  %63 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv73, i8* %63, align 1
  %64 = load i32, i32* %b, align 4
  %conv74 = trunc i32 %64 to i8
  %65 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv74, i8* %65, align 1
  %66 = load i32, i32* %c, align 4
  %conv75 = sext i32 %66 to i64
  %67 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %68 = load i64, i64* %67, align 8
  %add76 = add i64 %68, %conv75
  store i64 %add76, i64* %67, align 8
  br label %return

return:                                           ; preds = %for.end72, %if.end14
  ret void
}

declare dso_local i32 @puts(i8*) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TrailingOnes_TotalCoeff_ChromaDc(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8* %TotalCoeff, i8* %TrailingZeros) #0 !prof !35 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %TotalCoeff.addr = alloca i8*, align 8
  %TrailingZeros.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8* %TotalCoeff, i8** %TotalCoeff.addr, align 8
  store i8* %TrailingZeros, i8** %TrailingZeros.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 4
  br i1 %cmp, label %for.body, label %for.end49, !prof !36

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc, %for.body
  %23 = load i32, i32* %j, align 4
  %cmp22 = icmp slt i32 %23, 5
  br i1 %cmp22, label %for.body24, label %for.end, !prof !37

for.body24:                                       ; preds = %for.cond21
  %24 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %24 to i64
  %arrayidx26 = getelementptr inbounds [4 x [5 x i8]], [4 x [5 x i8]]* @lentabDC, i64 0, i64 %idxprom25
  %25 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %25 to i64
  %arrayidx28 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx26, i64 0, i64 %idxprom27
  %26 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %26 to i32
  store i32 %conv29, i32* %len, align 4
  %27 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %27 to i64
  %arrayidx31 = getelementptr inbounds [4 x [5 x i8]], [4 x [5 x i8]]* @codtabDC, i64 0, i64 %idxprom30
  %28 = load i32, i32* %j, align 4
  %idxprom32 = sext i32 %28 to i64
  %arrayidx33 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx31, i64 0, i64 %idxprom32
  %29 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %29 to i32
  store i32 %conv34, i32* %cod, align 4
  %30 = load i32, i32* %len, align 4
  %31 = load i32, i32* %temp0, align 4
  %32 = load i32, i32* %offset, align 4
  %call35 = call i32 @showbits(i32 %30, i32 %31, i32 %32)
  %33 = load i32, i32* %cod, align 4
  %cmp36 = icmp eq i32 %call35, %33
  %conv37 = zext i1 %cmp36 to i32
  %conv38 = trunc i32 %conv37 to i8
  store i8 %conv38, i8* %test, align 1
  %34 = load i32, i32* %j, align 4
  %35 = load i8, i8* %test, align 1
  %conv39 = zext i8 %35 to i32
  %mul = mul nsw i32 %34, %conv39
  %36 = load i32, i32* %a, align 4
  %add40 = add nsw i32 %36, %mul
  store i32 %add40, i32* %a, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i8, i8* %test, align 1
  %conv41 = zext i8 %38 to i32
  %mul42 = mul nsw i32 %37, %conv41
  %39 = load i32, i32* %b, align 4
  %add43 = add nsw i32 %39, %mul42
  store i32 %add43, i32* %b, align 4
  %40 = load i32, i32* %len, align 4
  %41 = load i8, i8* %test, align 1
  %conv44 = zext i8 %41 to i32
  %mul45 = mul nsw i32 %40, %conv44
  %42 = load i32, i32* %c, align 4
  %add46 = add nsw i32 %42, %mul45
  store i32 %add46, i32* %c, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body24
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond21

for.end:                                          ; preds = %for.cond21
  br label %for.inc47

for.inc47:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %44, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  %45 = load i32, i32* %b, align 4
  %conv50 = trunc i32 %45 to i8
  %46 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv50, i8* %46, align 1
  %47 = load i32, i32* %a, align 4
  %conv51 = trunc i32 %47 to i8
  %48 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv51, i8* %48, align 1
  %49 = load i32, i32* %c, align 4
  %conv52 = sext i32 %49 to i64
  %50 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %51 = load i64, i64* %50, align 8
  %add53 = add i64 %51, %conv52
  store i64 %add53, i64* %50, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @total_zeros(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !38 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 15
  br i1 %cmp, label %for.body, label %for.end, !prof !39

for.body:                                         ; preds = %for.cond
  %23 = load i8, i8* %tzVLC.addr, align 1
  %conv21 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv21, 1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx23 = getelementptr inbounds [15 x [16 x i8]], [15 x [16 x i8]]* bitcast (<{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }>* @tzlentab to [15 x [16 x i8]]*), i64 0, i64 %idxprom22
  %24 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx23, i64 0, i64 %idxprom24
  %25 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %25 to i32
  store i32 %conv26, i32* %len, align 4
  %26 = load i8, i8* %tzVLC.addr, align 1
  %conv27 = zext i8 %26 to i32
  %sub28 = sub nsw i32 %conv27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [15 x [16 x i8]], [15 x [16 x i8]]* bitcast (<{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }>* @tzcodtab to [15 x [16 x i8]]*), i64 0, i64 %idxprom29
  %27 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %27 to i64
  %arrayidx32 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx30, i64 0, i64 %idxprom31
  %28 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %28 to i32
  store i32 %conv33, i32* %cod, align 4
  %29 = load i32, i32* %len, align 4
  %30 = load i32, i32* %temp0, align 4
  %31 = load i32, i32* %offset, align 4
  %call34 = call i32 @showbits(i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %cod, align 4
  %cmp35 = icmp eq i32 %call34, %32
  %conv36 = zext i1 %cmp35 to i32
  %conv37 = trunc i32 %conv36 to i8
  store i8 %conv37, i8* %test, align 1
  %33 = load i32, i32* %len, align 4
  %34 = load i8, i8* %test, align 1
  %conv38 = zext i8 %34 to i32
  %mul = mul nsw i32 %33, %conv38
  %35 = load i32, i32* %a, align 4
  %add39 = add nsw i32 %35, %mul
  store i32 %add39, i32* %a, align 4
  %36 = load i32, i32* %i, align 4
  %37 = load i8, i8* %test, align 1
  %conv40 = zext i8 %37 to i32
  %mul41 = mul nsw i32 %36, %conv40
  %38 = load i32, i32* %b, align 4
  %add42 = add nsw i32 %38, %mul41
  store i32 %add42, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i32, i32* %a, align 4
  %conv43 = sext i32 %40 to i64
  %41 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %42 = load i64, i64* %41, align 8
  %add44 = add i64 %42, %conv43
  store i64 %add44, i64* %41, align 8
  %43 = load i32, i32* %b, align 4
  %conv45 = trunc i32 %43 to i8
  ret i8 %conv45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @total_zeros_DC(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !40 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 4
  br i1 %cmp, label %for.body, label %for.end, !prof !41

for.body:                                         ; preds = %for.cond
  %23 = load i8, i8* %tzVLC.addr, align 1
  %conv21 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv21, 1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx23 = getelementptr inbounds [3 x [4 x i8]], [3 x [4 x i8]]* @tzlentabDC, i64 0, i64 %idxprom22
  %24 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i64 0, i64 %idxprom24
  %25 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %25 to i32
  store i32 %conv26, i32* %len, align 4
  %26 = load i8, i8* %tzVLC.addr, align 1
  %conv27 = zext i8 %26 to i32
  %sub28 = sub nsw i32 %conv27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [3 x [4 x i8]], [3 x [4 x i8]]* @tzcodtabDC, i64 0, i64 %idxprom29
  %27 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %27 to i64
  %arrayidx32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx30, i64 0, i64 %idxprom31
  %28 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %28 to i32
  store i32 %conv33, i32* %cod, align 4
  %29 = load i32, i32* %len, align 4
  %30 = load i32, i32* %temp0, align 4
  %31 = load i32, i32* %offset, align 4
  %call34 = call i32 @showbits(i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %cod, align 4
  %cmp35 = icmp eq i32 %call34, %32
  %conv36 = zext i1 %cmp35 to i32
  %conv37 = trunc i32 %conv36 to i8
  store i8 %conv37, i8* %test, align 1
  %33 = load i32, i32* %len, align 4
  %34 = load i8, i8* %test, align 1
  %conv38 = zext i8 %34 to i32
  %mul = mul nsw i32 %33, %conv38
  %35 = load i32, i32* %a, align 4
  %add39 = add nsw i32 %35, %mul
  store i32 %add39, i32* %a, align 4
  %36 = load i32, i32* %i, align 4
  %37 = load i8, i8* %test, align 1
  %conv40 = zext i8 %37 to i32
  %mul41 = mul nsw i32 %36, %conv40
  %38 = load i32, i32* %b, align 4
  %add42 = add nsw i32 %38, %mul41
  store i32 %add42, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i32, i32* %a, align 4
  %conv43 = sext i32 %40 to i64
  %41 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %42 = load i64, i64* %41, align 8
  %add44 = add i64 %42, %conv43
  store i64 %add44, i64* %41, align 8
  %43 = load i32, i32* %b, align 4
  %conv45 = trunc i32 %43 to i8
  ret i8 %conv45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @run_before(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !42 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i8 0, i8* %tmp, align 1
  %0 = load i8, i8* %tzVLC.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, 7
  br i1 %cmp, label %if.then, label %if.else, !prof !43

if.then:                                          ; preds = %entry
  store i8 6, i8* %tmp, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8, i8* %tzVLC.addr, align 1
  %conv2 = zext i8 %1 to i32
  %sub = sub nsw i32 %conv2, 1
  %conv3 = trunc i32 %sub to i8
  store i8 %conv3, i8* %tmp, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %conv4 = trunc i64 %3 to i32
  store i32 %conv4, i32* %offset, align 4
  %4 = load i8*, i8** %nalu_buf.addr, align 8
  %5 = load i32, i32* %offset, align 4
  %div = sdiv i32 %5, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp_1, align 1
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i32, i32* %offset, align 4
  %div5 = sdiv i32 %8, 8
  %add = add nsw i32 %div5, 1
  %idxprom6 = sext i32 %add to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i64 %idxprom6
  %9 = load i8, i8* %arrayidx7, align 1
  store i8 %9, i8* %temp_2, align 1
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %11, 8
  %add9 = add nsw i32 %div8, 2
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %12 = load i8, i8* %arrayidx11, align 1
  store i8 %12, i8* %temp_3, align 1
  %13 = load i8*, i8** %nalu_buf.addr, align 8
  %14 = load i32, i32* %offset, align 4
  %div12 = sdiv i32 %14, 8
  %add13 = add nsw i32 %div12, 3
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 %idxprom14
  %15 = load i8, i8* %arrayidx15, align 1
  store i8 %15, i8* %temp_4, align 1
  %16 = load i8, i8* %temp_4, align 1
  %conv16 = zext i8 %16 to i32
  store i32 %conv16, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl = shl i32 %17, 8
  %18 = load i8, i8* %temp_3, align 1
  %conv17 = zext i8 %18 to i32
  %or = or i32 %shl, %conv17
  store i32 %or, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl18 = shl i32 %19, 8
  %20 = load i8, i8* %temp_2, align 1
  %conv19 = zext i8 %20 to i32
  %or20 = or i32 %shl18, %conv19
  store i32 %or20, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %shl21 = shl i32 %21, 8
  %22 = load i8, i8* %temp_1, align 1
  %conv22 = zext i8 %22 to i32
  %or23 = or i32 %shl21, %conv22
  store i32 %or23, i32* %temp, align 4
  %23 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %23)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %24 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %24, 15
  br i1 %cmp24, label %for.body, label %for.end, !prof !44

for.body:                                         ; preds = %for.cond
  %25 = load i8, i8* %tmp, align 1
  %idxprom26 = zext i8 %25 to i64
  %arrayidx27 = getelementptr inbounds [7 x [16 x i8]], [7 x [16 x i8]]* bitcast (<{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }>* @rblentab to [7 x [16 x i8]]*), i64 0, i64 %idxprom26
  %26 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %26 to i64
  %arrayidx29 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx27, i64 0, i64 %idxprom28
  %27 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %27 to i32
  store i32 %conv30, i32* %len, align 4
  %28 = load i8, i8* %tmp, align 1
  %idxprom31 = zext i8 %28 to i64
  %arrayidx32 = getelementptr inbounds [7 x [16 x i8]], [7 x [16 x i8]]* bitcast (<{ <{ i8, [15 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }>* @rbcodtab to [7 x [16 x i8]]*), i64 0, i64 %idxprom31
  %29 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %29 to i64
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx32, i64 0, i64 %idxprom33
  %30 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %30 to i32
  store i32 %conv35, i32* %cod, align 4
  %31 = load i32, i32* %len, align 4
  %32 = load i32, i32* %temp0, align 4
  %33 = load i32, i32* %offset, align 4
  %call36 = call i32 @showbits(i32 %31, i32 %32, i32 %33)
  %34 = load i32, i32* %cod, align 4
  %cmp37 = icmp eq i32 %call36, %34
  %conv38 = zext i1 %cmp37 to i32
  %conv39 = trunc i32 %conv38 to i8
  store i8 %conv39, i8* %test, align 1
  %35 = load i32, i32* %len, align 4
  %36 = load i8, i8* %test, align 1
  %conv40 = zext i8 %36 to i32
  %mul = mul nsw i32 %35, %conv40
  %37 = load i32, i32* %a, align 4
  %add41 = add nsw i32 %37, %mul
  store i32 %add41, i32* %a, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i8, i8* %test, align 1
  %conv42 = zext i8 %39 to i32
  %mul43 = mul nsw i32 %38, %conv42
  %40 = load i32, i32* %b, align 4
  %add44 = add nsw i32 %40, %mul43
  store i32 %add44, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %41 = load i32, i32* %i, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load i32, i32* %a, align 4
  %conv45 = sext i32 %42 to i64
  %43 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %44 = load i64, i64* %43, align 8
  %add46 = add i64 %44, %conv45
  store i64 %add46, i64* %43, align 8
  %45 = load i32, i32* %b, align 4
  %conv47 = trunc i32 %45 to i8
  ret i8 %conv47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @unary_code(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !45 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 0, i8* %i, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %0, i8* %1, i64* %2)
  %conv = zext i8 %call to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end, !prof !46

while.body:                                       ; preds = %while.cond
  %3 = load i8, i8* %i, align 1
  %inc = add i8 %3, 1
  store i8 %inc, i8* %i, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i8, i8* %i, align 1
  ret i8 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @residual_block_cavlc_16([4 x i32]* %coeffLevel, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %startIdx, i32 %endIdx, i32 %nC) #0 !prof !29 {
entry:
  %coeffLevel.addr = alloca [4 x i32]*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %startIdx.addr = alloca i32, align 4
  %endIdx.addr = alloca i32, align 4
  %nC.addr = alloca i32, align 4
  %framescan = alloca [16 x [2 x i8]], align 16
  %i = alloca i32, align 4
  %trailingOnes = alloca i8, align 1
  %totalcoeff = alloca i8, align 1
  %nC_range = alloca i8, align 1
  %suffixLength = alloca i8, align 1
  %trailing_ones_sign_flag = alloca i8, align 1
  %level_prefix = alloca i8, align 1
  %level_suffix = alloca i8, align 1
  %SizesuffixLength = alloca i8, align 1
  %zeroLeft = alloca i8, align 1
  %levelCode = alloca i32, align 4
  %levelVal = alloca [16 x i32], align 16
  %runVal = alloca [16 x i8], align 16
  %coeffNum = alloca i32, align 4
  store [4 x i32]* %coeffLevel, [4 x i32]** %coeffLevel.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %startIdx, i32* %startIdx.addr, align 4
  store i32 %endIdx, i32* %endIdx.addr, align 4
  store i32 %nC, i32* %nC.addr, align 4
  %0 = bitcast [16 x [2 x i8]]* %framescan to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x [2 x i8]], [16 x [2 x i8]]* @__const.residual_block_cavlc_16.framescan, i32 0, i32 0, i32 0), i64 32, i1 false)
  store i32 0, i32* %i, align 4
  store i8 0, i8* %trailingOnes, align 1
  store i8 0, i8* %totalcoeff, align 1
  store i8 0, i8* %nC_range, align 1
  store i8 0, i8* %suffixLength, align 1
  store i8 0, i8* %trailing_ones_sign_flag, align 1
  store i8 0, i8* %level_suffix, align 1
  store i8 0, i8* %SizesuffixLength, align 1
  store i8 0, i8* %zeroLeft, align 1
  store i32 0, i32* %levelCode, align 4
  %1 = bitcast [16 x i32]* %levelVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 64, i1 false)
  %2 = bitcast [16 x i8]* %runVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 16, i1 false)
  %3 = load i32, i32* %nC.addr, align 4
  %div = sdiv i32 %3, 2
  %conv = trunc i32 %div to i8
  store i8 %conv, i8* %nC_range, align 1
  %4 = load i8, i8* %nC_range, align 1
  %conv1 = zext i8 %4 to i32
  %cmp = icmp sgt i32 %conv1, 3
  br i1 %cmp, label %if.then, label %if.else, !prof !31

if.then:                                          ; preds = %entry
  store i8 3, i8* %nC_range, align 1
  br label %if.end7

if.else:                                          ; preds = %entry
  %5 = load i8, i8* %nC_range, align 1
  %conv3 = zext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 3
  br i1 %cmp4, label %if.then6, label %if.end, !prof !47

if.then6:                                         ; preds = %if.else
  store i8 2, i8* %nC_range, align 1
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end7
  %6 = load i32, i32* %i, align 4
  %cmp8 = icmp slt i32 %6, 16
  br i1 %cmp8, label %for.body, label %for.end, !prof !48

for.body:                                         ; preds = %for.cond
  %7 = load [4 x i32]*, [4 x i32]** %coeffLevel.addr, align 8
  %8 = load i32, i32* %i, align 4
  %div10 = sdiv i32 %8, 4
  %idxprom = sext i32 %div10 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 %idxprom
  %9 = load i32, i32* %i, align 4
  %rem = srem i32 %9, 4
  %idxprom11 = sext i32 %rem to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom11
  store i32 0, i32* %arrayidx12, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %14 = load i8, i8* %nC_range, align 1
  call void @TrailingOnes_TotalCoeff(%struct.NALU_t* %11, i8* %12, i64* %13, i8* %totalcoeff, i8* %trailingOnes, i8 zeroext %14)
  %15 = load i8, i8* %totalcoeff, align 1
  %conv13 = zext i8 %15 to i32
  %cmp14 = icmp sgt i32 %conv13, 0
  br i1 %cmp14, label %if.then16, label %if.end211, !prof !49

if.then16:                                        ; preds = %for.end
  %16 = load i8, i8* %totalcoeff, align 1
  %conv17 = zext i8 %16 to i32
  %cmp18 = icmp sgt i32 %conv17, 10
  br i1 %cmp18, label %land.rhs, label %land.end, !prof !50

land.rhs:                                         ; preds = %if.then16
  %17 = load i8, i8* %trailingOnes, align 1
  %conv20 = zext i8 %17 to i32
  %cmp21 = icmp slt i32 %conv20, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then16
  %18 = phi i1 [ false, %if.then16 ], [ %cmp21, %land.rhs ]
  %19 = zext i1 %18 to i64
  %cond = select i1 %18, i32 1, i32 0
  %conv23 = trunc i32 %cond to i8
  store i8 %conv23, i8* %suffixLength, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc142, %land.end
  %20 = load i32, i32* %i, align 4
  %21 = load i8, i8* %totalcoeff, align 1
  %conv25 = zext i8 %21 to i32
  %cmp26 = icmp slt i32 %20, %conv25
  br i1 %cmp26, label %for.body28, label %for.end144, !prof !51

for.body28:                                       ; preds = %for.cond24
  %22 = load i32, i32* %i, align 4
  %23 = load i8, i8* %trailingOnes, align 1
  %conv29 = zext i8 %23 to i32
  %cmp30 = icmp slt i32 %22, %conv29
  br i1 %cmp30, label %if.then32, label %if.else36, !prof !52

if.then32:                                        ; preds = %for.body28
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %24, i8* %25, i64* %26)
  store i8 %call, i8* %trailing_ones_sign_flag, align 1
  %27 = load i8, i8* %trailing_ones_sign_flag, align 1
  %conv33 = zext i8 %27 to i32
  %mul = mul nsw i32 2, %conv33
  %sub = sub nsw i32 1, %mul
  %28 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %28 to i64
  %arrayidx35 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom34
  store i32 %sub, i32* %arrayidx35, align 4
  br label %if.end141

if.else36:                                        ; preds = %for.body28
  %29 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %30 = load i8*, i8** %nalu_buf.addr, align 8
  %31 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call zeroext i8 @unary_code(%struct.NALU_t* %29, i8* %30, i64* %31)
  store i8 %call37, i8* %level_prefix, align 1
  %32 = load i8, i8* %level_prefix, align 1
  %conv38 = zext i8 %32 to i32
  %33 = load i8, i8* %suffixLength, align 1
  %conv39 = zext i8 %33 to i32
  %shl = shl i32 %conv38, %conv39
  store i32 %shl, i32* %levelCode, align 4
  %34 = load i8, i8* %suffixLength, align 1
  %conv40 = zext i8 %34 to i32
  %cmp41 = icmp sgt i32 %conv40, 0
  br i1 %cmp41, label %if.then46, label %lor.lhs.false, !prof !53

lor.lhs.false:                                    ; preds = %if.else36
  %35 = load i8, i8* %level_prefix, align 1
  %conv43 = zext i8 %35 to i32
  %cmp44 = icmp sge i32 %conv43, 14
  br i1 %cmp44, label %if.then46, label %if.end69, !prof !54

if.then46:                                        ; preds = %lor.lhs.false, %if.else36
  %36 = load i8, i8* %level_prefix, align 1
  %conv47 = zext i8 %36 to i32
  %cmp48 = icmp eq i32 %conv47, 14
  br i1 %cmp48, label %land.lhs.true, label %if.else54, !prof !55

land.lhs.true:                                    ; preds = %if.then46
  %37 = load i8, i8* %suffixLength, align 1
  %conv50 = zext i8 %37 to i32
  %cmp51 = icmp eq i32 %conv50, 0
  br i1 %cmp51, label %if.then53, label %if.else54, !prof !56

if.then53:                                        ; preds = %land.lhs.true
  store i8 4, i8* %SizesuffixLength, align 1
  br label %if.end64

if.else54:                                        ; preds = %land.lhs.true, %if.then46
  %38 = load i8, i8* %level_prefix, align 1
  %conv55 = zext i8 %38 to i32
  %cmp56 = icmp sge i32 %conv55, 15
  br i1 %cmp56, label %if.then58, label %if.else62, !prof !57

if.then58:                                        ; preds = %if.else54
  %39 = load i8, i8* %level_prefix, align 1
  %conv59 = zext i8 %39 to i32
  %sub60 = sub nsw i32 %conv59, 3
  %conv61 = trunc i32 %sub60 to i8
  store i8 %conv61, i8* %SizesuffixLength, align 1
  br label %if.end63

if.else62:                                        ; preds = %if.else54
  %40 = load i8, i8* %suffixLength, align 1
  store i8 %40, i8* %SizesuffixLength, align 1
  br label %if.end63

if.end63:                                         ; preds = %if.else62, %if.then58
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then53
  %41 = load i8, i8* %SizesuffixLength, align 1
  %conv65 = zext i8 %41 to i32
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %43 = load i8*, i8** %nalu_buf.addr, align 8
  %44 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call66 = call i32 @u_n(i32 %conv65, %struct.NALU_t* %42, i8* %43, i64* %44)
  %conv67 = trunc i32 %call66 to i8
  store i8 %conv67, i8* %level_suffix, align 1
  %45 = load i8, i8* %level_suffix, align 1
  %conv68 = zext i8 %45 to i32
  %46 = load i32, i32* %levelCode, align 4
  %add = add nsw i32 %46, %conv68
  store i32 %add, i32* %levelCode, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.end64, %lor.lhs.false
  %47 = load i8, i8* %level_prefix, align 1
  %conv70 = zext i8 %47 to i32
  %cmp71 = icmp sge i32 %conv70, 15
  br i1 %cmp71, label %land.lhs.true73, label %if.end79, !prof !58

land.lhs.true73:                                  ; preds = %if.end69
  %48 = load i8, i8* %suffixLength, align 1
  %conv74 = zext i8 %48 to i32
  %cmp75 = icmp eq i32 %conv74, 0
  br i1 %cmp75, label %if.then77, label %if.end79, !prof !59

if.then77:                                        ; preds = %land.lhs.true73
  %49 = load i32, i32* %levelCode, align 4
  %add78 = add nsw i32 %49, 15
  store i32 %add78, i32* %levelCode, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then77, %land.lhs.true73, %if.end69
  %50 = load i8, i8* %level_prefix, align 1
  %conv80 = zext i8 %50 to i32
  %cmp81 = icmp sge i32 %conv80, 16
  br i1 %cmp81, label %if.then83, label %if.end89, !prof !60

if.then83:                                        ; preds = %if.end79
  %51 = load i8, i8* %level_prefix, align 1
  %conv84 = zext i8 %51 to i32
  %sub85 = sub nsw i32 %conv84, 3
  %shl86 = shl i32 1, %sub85
  %sub87 = sub nsw i32 %shl86, 4096
  %52 = load i32, i32* %levelCode, align 4
  %add88 = add nsw i32 %52, %sub87
  store i32 %add88, i32* %levelCode, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.then83, %if.end79
  %53 = load i32, i32* %i, align 4
  %54 = load i8, i8* %trailingOnes, align 1
  %conv90 = zext i8 %54 to i32
  %cmp91 = icmp eq i32 %53, %conv90
  br i1 %cmp91, label %land.lhs.true93, label %if.end99, !prof !61

land.lhs.true93:                                  ; preds = %if.end89
  %55 = load i8, i8* %trailingOnes, align 1
  %conv94 = zext i8 %55 to i32
  %cmp95 = icmp slt i32 %conv94, 3
  br i1 %cmp95, label %if.then97, label %if.end99, !prof !62

if.then97:                                        ; preds = %land.lhs.true93
  %56 = load i32, i32* %levelCode, align 4
  %add98 = add nsw i32 %56, 2
  store i32 %add98, i32* %levelCode, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %land.lhs.true93, %if.end89
  %57 = load i32, i32* %levelCode, align 4
  %rem100 = srem i32 %57, 2
  %cmp101 = icmp eq i32 %rem100, 0
  br i1 %cmp101, label %if.then103, label %if.else107, !prof !63

if.then103:                                       ; preds = %if.end99
  %58 = load i32, i32* %levelCode, align 4
  %add104 = add nsw i32 %58, 2
  %shr = ashr i32 %add104, 1
  %59 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %59 to i64
  %arrayidx106 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom105
  store i32 %shr, i32* %arrayidx106, align 4
  br label %if.end113

if.else107:                                       ; preds = %if.end99
  %60 = load i32, i32* %levelCode, align 4
  %sub108 = sub nsw i32 0, %60
  %sub109 = sub nsw i32 %sub108, 1
  %shr110 = ashr i32 %sub109, 1
  %61 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %61 to i64
  %arrayidx112 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom111
  store i32 %shr110, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else107, %if.then103
  %62 = load i8, i8* %suffixLength, align 1
  %conv114 = zext i8 %62 to i32
  %cmp115 = icmp eq i32 %conv114, 0
  br i1 %cmp115, label %if.then117, label %if.end118, !prof !64

if.then117:                                       ; preds = %if.end113
  store i8 1, i8* %suffixLength, align 1
  br label %if.end118

if.end118:                                        ; preds = %if.then117, %if.end113
  %63 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %63 to i64
  %arrayidx120 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom119
  %64 = load i32, i32* %arrayidx120, align 4
  %cmp121 = icmp sgt i32 %64, 0
  br i1 %cmp121, label %cond.true, label %cond.false, !prof !63

cond.true:                                        ; preds = %if.end118
  %65 = load i32, i32* %i, align 4
  %idxprom123 = sext i32 %65 to i64
  %arrayidx124 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom123
  %66 = load i32, i32* %arrayidx124, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end118
  %67 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %67 to i64
  %arrayidx126 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom125
  %68 = load i32, i32* %arrayidx126, align 4
  %sub127 = sub nsw i32 0, %68
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond128 = phi i32 [ %66, %cond.true ], [ %sub127, %cond.false ]
  %69 = load i8, i8* %suffixLength, align 1
  %conv129 = zext i8 %69 to i32
  %sub130 = sub nsw i32 %conv129, 1
  %shl131 = shl i32 3, %sub130
  %cmp132 = icmp sgt i32 %cond128, %shl131
  br i1 %cmp132, label %land.lhs.true134, label %if.end140, !prof !65

land.lhs.true134:                                 ; preds = %cond.end
  %70 = load i8, i8* %suffixLength, align 1
  %conv135 = zext i8 %70 to i32
  %cmp136 = icmp slt i32 %conv135, 6
  br i1 %cmp136, label %if.then138, label %if.end140, !prof !66

if.then138:                                       ; preds = %land.lhs.true134
  %71 = load i8, i8* %suffixLength, align 1
  %inc139 = add i8 %71, 1
  store i8 %inc139, i8* %suffixLength, align 1
  br label %if.end140

if.end140:                                        ; preds = %if.then138, %land.lhs.true134, %cond.end
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then32
  br label %for.inc142

for.inc142:                                       ; preds = %if.end141
  %72 = load i32, i32* %i, align 4
  %inc143 = add nsw i32 %72, 1
  store i32 %inc143, i32* %i, align 4
  br label %for.cond24

for.end144:                                       ; preds = %for.cond24
  %73 = load i8, i8* %totalcoeff, align 1
  %conv145 = zext i8 %73 to i32
  %74 = load i32, i32* %endIdx.addr, align 4
  %75 = load i32, i32* %startIdx.addr, align 4
  %sub146 = sub nsw i32 %74, %75
  %add147 = add nsw i32 %sub146, 1
  %cmp148 = icmp slt i32 %conv145, %add147
  br i1 %cmp148, label %if.then150, label %if.else152, !prof !67

if.then150:                                       ; preds = %for.end144
  %76 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %77 = load i8*, i8** %nalu_buf.addr, align 8
  %78 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %79 = load i8, i8* %totalcoeff, align 1
  %call151 = call zeroext i8 @total_zeros(%struct.NALU_t* %76, i8* %77, i64* %78, i8 zeroext %79)
  store i8 %call151, i8* %zeroLeft, align 1
  br label %if.end153

if.else152:                                       ; preds = %for.end144
  store i8 0, i8* %zeroLeft, align 1
  br label %if.end153

if.end153:                                        ; preds = %if.else152, %if.then150
  store i32 0, i32* %i, align 4
  br label %for.cond154

for.cond154:                                      ; preds = %for.inc177, %if.end153
  %80 = load i32, i32* %i, align 4
  %81 = load i8, i8* %totalcoeff, align 1
  %conv155 = zext i8 %81 to i32
  %sub156 = sub nsw i32 %conv155, 1
  %cmp157 = icmp slt i32 %80, %sub156
  br i1 %cmp157, label %for.body159, label %for.end179, !prof !68

for.body159:                                      ; preds = %for.cond154
  %82 = load i8, i8* %zeroLeft, align 1
  %conv160 = zext i8 %82 to i32
  %cmp161 = icmp sgt i32 %conv160, 0
  br i1 %cmp161, label %if.then163, label %if.else167, !prof !69

if.then163:                                       ; preds = %for.body159
  %83 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %84 = load i8*, i8** %nalu_buf.addr, align 8
  %85 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %86 = load i8, i8* %zeroLeft, align 1
  %call164 = call zeroext i8 @run_before(%struct.NALU_t* %83, i8* %84, i64* %85, i8 zeroext %86)
  %87 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %87 to i64
  %arrayidx166 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom165
  store i8 %call164, i8* %arrayidx166, align 1
  br label %if.end170

if.else167:                                       ; preds = %for.body159
  %88 = load i32, i32* %i, align 4
  %idxprom168 = sext i32 %88 to i64
  %arrayidx169 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom168
  store i8 0, i8* %arrayidx169, align 1
  br label %if.end170

if.end170:                                        ; preds = %if.else167, %if.then163
  %89 = load i8, i8* %zeroLeft, align 1
  %conv171 = zext i8 %89 to i32
  %90 = load i32, i32* %i, align 4
  %idxprom172 = sext i32 %90 to i64
  %arrayidx173 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom172
  %91 = load i8, i8* %arrayidx173, align 1
  %conv174 = zext i8 %91 to i32
  %sub175 = sub nsw i32 %conv171, %conv174
  %conv176 = trunc i32 %sub175 to i8
  store i8 %conv176, i8* %zeroLeft, align 1
  br label %for.inc177

for.inc177:                                       ; preds = %if.end170
  %92 = load i32, i32* %i, align 4
  %inc178 = add nsw i32 %92, 1
  store i32 %inc178, i32* %i, align 4
  br label %for.cond154

for.end179:                                       ; preds = %for.cond154
  %93 = load i8, i8* %zeroLeft, align 1
  %94 = load i8, i8* %totalcoeff, align 1
  %conv180 = zext i8 %94 to i32
  %sub181 = sub nsw i32 %conv180, 1
  %idxprom182 = sext i32 %sub181 to i64
  %arrayidx183 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom182
  store i8 %93, i8* %arrayidx183, align 1
  store i32 -1, i32* %coeffNum, align 4
  %95 = load i8, i8* %totalcoeff, align 1
  %conv184 = zext i8 %95 to i32
  %sub185 = sub nsw i32 %conv184, 1
  store i32 %sub185, i32* %i, align 4
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc209, %for.end179
  %96 = load i32, i32* %i, align 4
  %cmp187 = icmp sge i32 %96, 0
  br i1 %cmp187, label %for.body189, label %for.end210, !prof !51

for.body189:                                      ; preds = %for.cond186
  %97 = load i32, i32* %i, align 4
  %idxprom190 = sext i32 %97 to i64
  %arrayidx191 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom190
  %98 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %98 to i32
  %add193 = add nsw i32 %conv192, 1
  %99 = load i32, i32* %coeffNum, align 4
  %add194 = add nsw i32 %99, %add193
  store i32 %add194, i32* %coeffNum, align 4
  %100 = load i32, i32* %i, align 4
  %idxprom195 = sext i32 %100 to i64
  %arrayidx196 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom195
  %101 = load i32, i32* %arrayidx196, align 4
  %102 = load [4 x i32]*, [4 x i32]** %coeffLevel.addr, align 8
  %103 = load i32, i32* %startIdx.addr, align 4
  %104 = load i32, i32* %coeffNum, align 4
  %add197 = add nsw i32 %103, %104
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* %framescan, i64 0, i64 %idxprom198
  %arrayidx200 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx199, i64 0, i64 0
  %105 = load i8, i8* %arrayidx200, align 2
  %idxprom201 = zext i8 %105 to i64
  %arrayidx202 = getelementptr inbounds [4 x i32], [4 x i32]* %102, i64 %idxprom201
  %106 = load i32, i32* %startIdx.addr, align 4
  %107 = load i32, i32* %coeffNum, align 4
  %add203 = add nsw i32 %106, %107
  %idxprom204 = sext i32 %add203 to i64
  %arrayidx205 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* %framescan, i64 0, i64 %idxprom204
  %arrayidx206 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx205, i64 0, i64 1
  %108 = load i8, i8* %arrayidx206, align 1
  %idxprom207 = zext i8 %108 to i64
  %arrayidx208 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx202, i64 0, i64 %idxprom207
  store i32 %101, i32* %arrayidx208, align 4
  br label %for.inc209

for.inc209:                                       ; preds = %for.body189
  %109 = load i32, i32* %i, align 4
  %dec = add nsw i32 %109, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond186

for.end210:                                       ; preds = %for.cond186
  br label %if.end211

if.end211:                                        ; preds = %for.end210, %for.end
  %110 = load i8, i8* %totalcoeff, align 1
  ret i8 %110
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @residual_block_cavlc_4([2 x i32]* %coeffLevel, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %startIdx, i32 %endIdx) #0 !prof !35 {
entry:
  %coeffLevel.addr = alloca [2 x i32]*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %startIdx.addr = alloca i32, align 4
  %endIdx.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %trailingOnes = alloca i8, align 1
  %totalcoeff = alloca i8, align 1
  %suffixLength = alloca i8, align 1
  %trailing_ones_sign_flag = alloca i8, align 1
  %level_prefix = alloca i8, align 1
  %level_suffix = alloca i8, align 1
  %SizesuffixLength = alloca i8, align 1
  %zeroLeft = alloca i8, align 1
  %levelCode = alloca i32, align 4
  %levelVal = alloca [4 x i32], align 16
  %runVal = alloca [4 x i8], align 1
  %coeffNum = alloca i32, align 4
  store [2 x i32]* %coeffLevel, [2 x i32]** %coeffLevel.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %startIdx, i32* %startIdx.addr, align 4
  store i32 %endIdx, i32* %endIdx.addr, align 4
  store i32 0, i32* %i, align 4
  store i8 0, i8* %trailingOnes, align 1
  store i8 0, i8* %totalcoeff, align 1
  store i8 0, i8* %suffixLength, align 1
  store i8 0, i8* %trailing_ones_sign_flag, align 1
  store i8 0, i8* %level_prefix, align 1
  store i8 0, i8* %level_suffix, align 1
  store i8 0, i8* %SizesuffixLength, align 1
  store i8 0, i8* %zeroLeft, align 1
  store i32 0, i32* %levelCode, align 4
  %0 = bitcast [4 x i32]* %levelVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 16, i1 false)
  %1 = bitcast [4 x i8]* %runVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end, !prof !36

for.body:                                         ; preds = %for.cond
  %3 = load [2 x i32]*, [2 x i32]** %coeffLevel.addr, align 8
  %4 = load i32, i32* %i, align 4
  %div = sdiv i32 %4, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %i, align 4
  %rem = srem i32 %5, 2
  %idxprom1 = sext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom1
  store i32 0, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @TrailingOnes_TotalCoeff_ChromaDc(%struct.NALU_t* %7, i8* %8, i64* %9, i8* %totalcoeff, i8* %trailingOnes)
  %10 = load i8, i8* %totalcoeff, align 1
  %conv = zext i8 %10 to i32
  %cmp3 = icmp sgt i32 %conv, 0
  br i1 %cmp3, label %if.then, label %if.end193, !prof !70

if.then:                                          ; preds = %for.end
  %11 = load i8, i8* %totalcoeff, align 1
  %conv5 = zext i8 %11 to i32
  %cmp6 = icmp sgt i32 %conv5, 10
  br i1 %cmp6, label %land.rhs, label %land.end, !prof !71

land.rhs:                                         ; preds = %if.then
  %12 = load i8, i8* %trailingOnes, align 1
  %conv8 = zext i8 %12 to i32
  %cmp9 = icmp slt i32 %conv8, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %13 = phi i1 [ false, %if.then ], [ %cmp9, %land.rhs ]
  %14 = zext i1 %13 to i64
  %cond = select i1 %13, i32 1, i32 0
  %conv11 = trunc i32 %cond to i8
  store i8 %conv11, i8* %suffixLength, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc128, %land.end
  %15 = load i32, i32* %i, align 4
  %16 = load i8, i8* %totalcoeff, align 1
  %conv13 = zext i8 %16 to i32
  %cmp14 = icmp slt i32 %15, %conv13
  br i1 %cmp14, label %for.body16, label %for.end130, !prof !72

for.body16:                                       ; preds = %for.cond12
  %17 = load i32, i32* %i, align 4
  %18 = load i8, i8* %trailingOnes, align 1
  %conv17 = zext i8 %18 to i32
  %cmp18 = icmp slt i32 %17, %conv17
  br i1 %cmp18, label %if.then20, label %if.else, !prof !73

if.then20:                                        ; preds = %for.body16
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %19, i8* %20, i64* %21)
  store i8 %call, i8* %trailing_ones_sign_flag, align 1
  %22 = load i8, i8* %trailing_ones_sign_flag, align 1
  %conv21 = zext i8 %22 to i32
  %mul = mul nsw i32 2, %conv21
  %sub = sub nsw i32 1, %mul
  %23 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %23 to i64
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom22
  store i32 %sub, i32* %arrayidx23, align 4
  br label %if.end127

if.else:                                          ; preds = %for.body16
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call24 = call zeroext i8 @unary_code(%struct.NALU_t* %24, i8* %25, i64* %26)
  store i8 %call24, i8* %level_prefix, align 1
  %27 = load i8, i8* %level_prefix, align 1
  %conv25 = zext i8 %27 to i32
  %28 = load i8, i8* %suffixLength, align 1
  %conv26 = zext i8 %28 to i32
  %shl = shl i32 %conv25, %conv26
  store i32 %shl, i32* %levelCode, align 4
  %29 = load i8, i8* %suffixLength, align 1
  %conv27 = zext i8 %29 to i32
  %cmp28 = icmp sgt i32 %conv27, 0
  br i1 %cmp28, label %if.then33, label %lor.lhs.false, !prof !74

lor.lhs.false:                                    ; preds = %if.else
  %30 = load i8, i8* %level_prefix, align 1
  %conv30 = zext i8 %30 to i32
  %cmp31 = icmp sge i32 %conv30, 14
  br i1 %cmp31, label %if.then33, label %if.end55, !prof !75

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  %31 = load i8, i8* %level_prefix, align 1
  %conv34 = zext i8 %31 to i32
  %cmp35 = icmp eq i32 %conv34, 14
  br i1 %cmp35, label %land.lhs.true, label %if.else41, !prof !76

land.lhs.true:                                    ; preds = %if.then33
  %32 = load i8, i8* %suffixLength, align 1
  %conv37 = zext i8 %32 to i32
  %cmp38 = icmp eq i32 %conv37, 0
  br i1 %cmp38, label %if.then40, label %if.else41, !prof !77

if.then40:                                        ; preds = %land.lhs.true
  store i8 4, i8* %SizesuffixLength, align 1
  br label %if.end50

if.else41:                                        ; preds = %land.lhs.true, %if.then33
  %33 = load i8, i8* %level_prefix, align 1
  %conv42 = zext i8 %33 to i32
  %cmp43 = icmp sge i32 %conv42, 15
  br i1 %cmp43, label %if.then45, label %if.else49, !prof !78

if.then45:                                        ; preds = %if.else41
  %34 = load i8, i8* %level_prefix, align 1
  %conv46 = zext i8 %34 to i32
  %sub47 = sub nsw i32 %conv46, 3
  %conv48 = trunc i32 %sub47 to i8
  store i8 %conv48, i8* %SizesuffixLength, align 1
  br label %if.end

if.else49:                                        ; preds = %if.else41
  %35 = load i8, i8* %suffixLength, align 1
  store i8 %35, i8* %SizesuffixLength, align 1
  br label %if.end

if.end:                                           ; preds = %if.else49, %if.then45
  br label %if.end50

if.end50:                                         ; preds = %if.end, %if.then40
  %36 = load i8, i8* %SizesuffixLength, align 1
  %conv51 = zext i8 %36 to i32
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call52 = call i32 @u_n(i32 %conv51, %struct.NALU_t* %37, i8* %38, i64* %39)
  %conv53 = trunc i32 %call52 to i8
  store i8 %conv53, i8* %level_suffix, align 1
  %40 = load i8, i8* %level_suffix, align 1
  %conv54 = zext i8 %40 to i32
  %41 = load i32, i32* %levelCode, align 4
  %add = add nsw i32 %41, %conv54
  store i32 %add, i32* %levelCode, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.end50, %lor.lhs.false
  %42 = load i8, i8* %level_prefix, align 1
  %conv56 = zext i8 %42 to i32
  %cmp57 = icmp sge i32 %conv56, 15
  br i1 %cmp57, label %land.lhs.true59, label %if.end65, !prof !79

land.lhs.true59:                                  ; preds = %if.end55
  %43 = load i8, i8* %suffixLength, align 1
  %conv60 = zext i8 %43 to i32
  %cmp61 = icmp eq i32 %conv60, 0
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %land.lhs.true59
  %44 = load i32, i32* %levelCode, align 4
  %add64 = add nsw i32 %44, 15
  store i32 %add64, i32* %levelCode, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %land.lhs.true59, %if.end55
  %45 = load i8, i8* %level_prefix, align 1
  %conv66 = zext i8 %45 to i32
  %cmp67 = icmp sge i32 %conv66, 16
  br i1 %cmp67, label %if.then69, label %if.end75, !prof !79

if.then69:                                        ; preds = %if.end65
  %46 = load i8, i8* %level_prefix, align 1
  %conv70 = zext i8 %46 to i32
  %sub71 = sub nsw i32 %conv70, 3
  %shl72 = shl i32 1, %sub71
  %sub73 = sub nsw i32 %shl72, 4096
  %47 = load i32, i32* %levelCode, align 4
  %add74 = add nsw i32 %47, %sub73
  store i32 %add74, i32* %levelCode, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then69, %if.end65
  %48 = load i32, i32* %i, align 4
  %49 = load i8, i8* %trailingOnes, align 1
  %conv76 = zext i8 %49 to i32
  %cmp77 = icmp eq i32 %48, %conv76
  br i1 %cmp77, label %land.lhs.true79, label %if.end85, !prof !80

land.lhs.true79:                                  ; preds = %if.end75
  %50 = load i8, i8* %trailingOnes, align 1
  %conv80 = zext i8 %50 to i32
  %cmp81 = icmp slt i32 %conv80, 3
  br i1 %cmp81, label %if.then83, label %if.end85, !prof !81

if.then83:                                        ; preds = %land.lhs.true79
  %51 = load i32, i32* %levelCode, align 4
  %add84 = add nsw i32 %51, 2
  store i32 %add84, i32* %levelCode, align 4
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %land.lhs.true79, %if.end75
  %52 = load i32, i32* %levelCode, align 4
  %rem86 = srem i32 %52, 2
  %cmp87 = icmp eq i32 %rem86, 0
  br i1 %cmp87, label %if.then89, label %if.else93, !prof !82

if.then89:                                        ; preds = %if.end85
  %53 = load i32, i32* %levelCode, align 4
  %add90 = add nsw i32 %53, 2
  %shr = ashr i32 %add90, 1
  %54 = load i32, i32* %i, align 4
  %idxprom91 = sext i32 %54 to i64
  %arrayidx92 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom91
  store i32 %shr, i32* %arrayidx92, align 4
  br label %if.end99

if.else93:                                        ; preds = %if.end85
  %55 = load i32, i32* %levelCode, align 4
  %sub94 = sub nsw i32 0, %55
  %sub95 = sub nsw i32 %sub94, 1
  %shr96 = ashr i32 %sub95, 1
  %56 = load i32, i32* %i, align 4
  %idxprom97 = sext i32 %56 to i64
  %arrayidx98 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom97
  store i32 %shr96, i32* %arrayidx98, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.else93, %if.then89
  %57 = load i8, i8* %suffixLength, align 1
  %conv100 = zext i8 %57 to i32
  %cmp101 = icmp eq i32 %conv100, 0
  br i1 %cmp101, label %if.then103, label %if.end104, !prof !80

if.then103:                                       ; preds = %if.end99
  store i8 1, i8* %suffixLength, align 1
  br label %if.end104

if.end104:                                        ; preds = %if.then103, %if.end99
  %58 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %58 to i64
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom105
  %59 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sgt i32 %59, 0
  br i1 %cmp107, label %cond.true, label %cond.false, !prof !82

cond.true:                                        ; preds = %if.end104
  %60 = load i32, i32* %i, align 4
  %idxprom109 = sext i32 %60 to i64
  %arrayidx110 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom109
  %61 = load i32, i32* %arrayidx110, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end104
  %62 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %62 to i64
  %arrayidx112 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom111
  %63 = load i32, i32* %arrayidx112, align 4
  %sub113 = sub nsw i32 0, %63
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond114 = phi i32 [ %61, %cond.true ], [ %sub113, %cond.false ]
  %64 = load i8, i8* %suffixLength, align 1
  %conv115 = zext i8 %64 to i32
  %sub116 = sub nsw i32 %conv115, 1
  %shl117 = shl i32 3, %sub116
  %cmp118 = icmp sgt i32 %cond114, %shl117
  br i1 %cmp118, label %land.lhs.true120, label %if.end126, !prof !83

land.lhs.true120:                                 ; preds = %cond.end
  %65 = load i8, i8* %suffixLength, align 1
  %conv121 = zext i8 %65 to i32
  %cmp122 = icmp slt i32 %conv121, 6
  br i1 %cmp122, label %if.then124, label %if.end126, !prof !84

if.then124:                                       ; preds = %land.lhs.true120
  %66 = load i8, i8* %suffixLength, align 1
  %inc125 = add i8 %66, 1
  store i8 %inc125, i8* %suffixLength, align 1
  br label %if.end126

if.end126:                                        ; preds = %if.then124, %land.lhs.true120, %cond.end
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.then20
  br label %for.inc128

for.inc128:                                       ; preds = %if.end127
  %67 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %67, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond12

for.end130:                                       ; preds = %for.cond12
  %68 = load i8, i8* %totalcoeff, align 1
  %conv131 = zext i8 %68 to i32
  %69 = load i32, i32* %endIdx.addr, align 4
  %70 = load i32, i32* %startIdx.addr, align 4
  %sub132 = sub nsw i32 %69, %70
  %add133 = add nsw i32 %sub132, 1
  %cmp134 = icmp slt i32 %conv131, %add133
  br i1 %cmp134, label %if.then136, label %if.else138, !prof !85

if.then136:                                       ; preds = %for.end130
  %71 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %72 = load i8*, i8** %nalu_buf.addr, align 8
  %73 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %74 = load i8, i8* %totalcoeff, align 1
  %call137 = call zeroext i8 @total_zeros_DC(%struct.NALU_t* %71, i8* %72, i64* %73, i8 zeroext %74)
  store i8 %call137, i8* %zeroLeft, align 1
  br label %if.end139

if.else138:                                       ; preds = %for.end130
  store i8 0, i8* %zeroLeft, align 1
  br label %if.end139

if.end139:                                        ; preds = %if.else138, %if.then136
  store i32 0, i32* %i, align 4
  br label %for.cond140

for.cond140:                                      ; preds = %for.inc163, %if.end139
  %75 = load i32, i32* %i, align 4
  %76 = load i8, i8* %totalcoeff, align 1
  %conv141 = zext i8 %76 to i32
  %sub142 = sub nsw i32 %conv141, 1
  %cmp143 = icmp slt i32 %75, %sub142
  br i1 %cmp143, label %for.body145, label %for.end165, !prof !86

for.body145:                                      ; preds = %for.cond140
  %77 = load i8, i8* %zeroLeft, align 1
  %conv146 = zext i8 %77 to i32
  %cmp147 = icmp sgt i32 %conv146, 0
  br i1 %cmp147, label %if.then149, label %if.else153, !prof !87

if.then149:                                       ; preds = %for.body145
  %78 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %79 = load i8*, i8** %nalu_buf.addr, align 8
  %80 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %81 = load i8, i8* %zeroLeft, align 1
  %call150 = call zeroext i8 @run_before(%struct.NALU_t* %78, i8* %79, i64* %80, i8 zeroext %81)
  %82 = load i32, i32* %i, align 4
  %idxprom151 = sext i32 %82 to i64
  %arrayidx152 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom151
  store i8 %call150, i8* %arrayidx152, align 1
  br label %if.end156

if.else153:                                       ; preds = %for.body145
  %83 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %83 to i64
  %arrayidx155 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom154
  store i8 0, i8* %arrayidx155, align 1
  br label %if.end156

if.end156:                                        ; preds = %if.else153, %if.then149
  %84 = load i8, i8* %zeroLeft, align 1
  %conv157 = zext i8 %84 to i32
  %85 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %85 to i64
  %arrayidx159 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom158
  %86 = load i8, i8* %arrayidx159, align 1
  %conv160 = zext i8 %86 to i32
  %sub161 = sub nsw i32 %conv157, %conv160
  %conv162 = trunc i32 %sub161 to i8
  store i8 %conv162, i8* %zeroLeft, align 1
  br label %for.inc163

for.inc163:                                       ; preds = %if.end156
  %87 = load i32, i32* %i, align 4
  %inc164 = add nsw i32 %87, 1
  store i32 %inc164, i32* %i, align 4
  br label %for.cond140

for.end165:                                       ; preds = %for.cond140
  %88 = load i8, i8* %zeroLeft, align 1
  %89 = load i8, i8* %totalcoeff, align 1
  %conv166 = zext i8 %89 to i32
  %sub167 = sub nsw i32 %conv166, 1
  %idxprom168 = sext i32 %sub167 to i64
  %arrayidx169 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom168
  store i8 %88, i8* %arrayidx169, align 1
  store i32 -1, i32* %coeffNum, align 4
  %90 = load i8, i8* %totalcoeff, align 1
  %conv170 = zext i8 %90 to i32
  %sub171 = sub nsw i32 %conv170, 1
  store i32 %sub171, i32* %i, align 4
  br label %for.cond172

for.cond172:                                      ; preds = %for.inc191, %for.end165
  %91 = load i32, i32* %i, align 4
  %cmp173 = icmp sge i32 %91, 0
  br i1 %cmp173, label %for.body175, label %for.end192, !prof !72

for.body175:                                      ; preds = %for.cond172
  %92 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %92 to i64
  %arrayidx177 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom176
  %93 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %93 to i32
  %add179 = add nsw i32 %conv178, 1
  %94 = load i32, i32* %coeffNum, align 4
  %add180 = add nsw i32 %94, %add179
  store i32 %add180, i32* %coeffNum, align 4
  %95 = load i32, i32* %i, align 4
  %idxprom181 = sext i32 %95 to i64
  %arrayidx182 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom181
  %96 = load i32, i32* %arrayidx182, align 4
  %97 = load [2 x i32]*, [2 x i32]** %coeffLevel.addr, align 8
  %98 = load i32, i32* %startIdx.addr, align 4
  %99 = load i32, i32* %coeffNum, align 4
  %add183 = add nsw i32 %98, %99
  %rem184 = srem i32 %add183, 2
  %idxprom185 = sext i32 %rem184 to i64
  %arrayidx186 = getelementptr inbounds [2 x i32], [2 x i32]* %97, i64 %idxprom185
  %100 = load i32, i32* %startIdx.addr, align 4
  %101 = load i32, i32* %coeffNum, align 4
  %add187 = add nsw i32 %100, %101
  %div188 = sdiv i32 %add187, 2
  %idxprom189 = sext i32 %div188 to i64
  %arrayidx190 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx186, i64 0, i64 %idxprom189
  store i32 %96, i32* %arrayidx190, align 4
  br label %for.inc191

for.inc191:                                       ; preds = %for.body175
  %102 = load i32, i32* %i, align 4
  %dec = add nsw i32 %102, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond172

for.end192:                                       ; preds = %for.cond172
  br label %if.end193

if.end193:                                        ; preds = %for.end192, %for.end
  %103 = load i8, i8* %totalcoeff, align 1
  ret i8 %103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @nc_Luma([9 x i8]* %residualmode, [36 x i8]* %nz, i32 %xoff, i32 %yoff) #0 !prof !88 {
entry:
  %residualmode.addr = alloca [9 x i8]*, align 8
  %nz.addr = alloca [36 x i8]*, align 8
  %xoff.addr = alloca i32, align 4
  %yoff.addr = alloca i32, align 4
  %nA = alloca i8, align 1
  %nB = alloca i8, align 1
  %nC = alloca i8, align 1
  store [9 x i8]* %residualmode, [9 x i8]** %residualmode.addr, align 8
  store [36 x i8]* %nz, [36 x i8]** %nz.addr, align 8
  store i32 %xoff, i32* %xoff.addr, align 4
  store i32 %yoff, i32* %yoff.addr, align 4
  store i8 0, i8* %nA, align 1
  store i8 0, i8* %nB, align 1
  store i8 0, i8* %nC, align 1
  %0 = load i32, i32* %xoff.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end, !prof !89

if.then:                                          ; preds = %entry
  %1 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %2 = load i32, i32* %xoff.addr, align 4
  %sub = sub nsw i32 %2, 1
  %div = sdiv i32 %sub, 4
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %yoff.addr, align 4
  %div1 = sdiv i32 %3, 4
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %4 = load i8, i8* %arrayidx3, align 1
  %conv = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv, 25
  %conv5 = zext i1 %cmp4 to i32
  %mul = mul nsw i32 %conv5, 16
  %5 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %6 = load i32, i32* %xoff.addr, align 4
  %sub6 = sub nsw i32 %6, 1
  %div7 = sdiv i32 %sub6, 4
  %idxprom8 = sext i32 %div7 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 %idxprom8
  %7 = load i32, i32* %yoff.addr, align 4
  %div10 = sdiv i32 %7, 4
  %idxprom11 = sext i32 %div10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %cmp14 = icmp ne i32 %conv13, 3
  %conv15 = zext i1 %cmp14 to i32
  %9 = load [36 x i8]*, [36 x i8]** %nz.addr, align 8
  %10 = load i32, i32* %xoff.addr, align 4
  %sub16 = sub nsw i32 %10, 1
  %idxprom17 = sext i32 %sub16 to i64
  %arrayidx18 = getelementptr inbounds [36 x i8], [36 x i8]* %9, i64 %idxprom17
  %11 = load i32, i32* %yoff.addr, align 4
  %idxprom19 = sext i32 %11 to i64
  %arrayidx20 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %12 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %12 to i32
  %mul22 = mul nsw i32 %conv15, %conv21
  %add = add nsw i32 %mul, %mul22
  %conv23 = trunc i32 %add to i8
  store i8 %conv23, i8* %nA, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %yoff.addr, align 4
  %cmp24 = icmp sgt i32 %13, 0
  br i1 %cmp24, label %if.then26, label %if.end57, !prof !90

if.then26:                                        ; preds = %if.end
  %14 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %15 = load i32, i32* %xoff.addr, align 4
  %div27 = sdiv i32 %15, 4
  %idxprom28 = sext i32 %div27 to i64
  %arrayidx29 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom28
  %16 = load i32, i32* %yoff.addr, align 4
  %sub30 = sub nsw i32 %16, 1
  %div31 = sdiv i32 %sub30, 4
  %idxprom32 = sext i32 %div31 to i64
  %arrayidx33 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx29, i64 0, i64 %idxprom32
  %17 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %17 to i32
  %cmp35 = icmp eq i32 %conv34, 25
  %conv36 = zext i1 %cmp35 to i32
  %mul37 = mul nsw i32 %conv36, 16
  %18 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %19 = load i32, i32* %xoff.addr, align 4
  %div38 = sdiv i32 %19, 4
  %idxprom39 = sext i32 %div38 to i64
  %arrayidx40 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom39
  %20 = load i32, i32* %yoff.addr, align 4
  %sub41 = sub nsw i32 %20, 1
  %div42 = sdiv i32 %sub41, 4
  %idxprom43 = sext i32 %div42 to i64
  %arrayidx44 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx40, i64 0, i64 %idxprom43
  %21 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %21 to i32
  %cmp46 = icmp ne i32 %conv45, 3
  %conv47 = zext i1 %cmp46 to i32
  %22 = load [36 x i8]*, [36 x i8]** %nz.addr, align 8
  %23 = load i32, i32* %xoff.addr, align 4
  %idxprom48 = sext i32 %23 to i64
  %arrayidx49 = getelementptr inbounds [36 x i8], [36 x i8]* %22, i64 %idxprom48
  %24 = load i32, i32* %yoff.addr, align 4
  %sub50 = sub nsw i32 %24, 1
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %25 to i32
  %mul54 = mul nsw i32 %conv47, %conv53
  %add55 = add nsw i32 %mul37, %mul54
  %conv56 = trunc i32 %add55 to i8
  store i8 %conv56, i8* %nB, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.then26, %if.end
  %26 = load i8, i8* %nA, align 1
  %conv58 = zext i8 %26 to i32
  %27 = load i8, i8* %nB, align 1
  %conv59 = zext i8 %27 to i32
  %add60 = add nsw i32 %conv58, %conv59
  %28 = load i32, i32* %yoff.addr, align 4
  %cmp61 = icmp sgt i32 %28, 0
  %conv62 = zext i1 %cmp61 to i32
  %29 = load i32, i32* %xoff.addr, align 4
  %cmp63 = icmp sgt i32 %29, 0
  %conv64 = zext i1 %cmp63 to i32
  %mul65 = mul nsw i32 %conv62, %conv64
  %add66 = add nsw i32 %add60, %mul65
  %30 = load i32, i32* %yoff.addr, align 4
  %cmp67 = icmp sgt i32 %30, 0
  %conv68 = zext i1 %cmp67 to i32
  %31 = load i32, i32* %xoff.addr, align 4
  %cmp69 = icmp sgt i32 %31, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul71 = mul nsw i32 %conv68, %conv70
  %shr = ashr i32 %add66, %mul71
  %conv72 = trunc i32 %shr to i8
  store i8 %conv72, i8* %nC, align 1
  %32 = load i8, i8* %nC, align 1
  ret i8 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @nc_Chroma([9 x i8]* %residualmode, [18 x i8]* %nzC, i32 %xoff, i32 %yoff) #0 !prof !91 {
entry:
  %residualmode.addr = alloca [9 x i8]*, align 8
  %nzC.addr = alloca [18 x i8]*, align 8
  %xoff.addr = alloca i32, align 4
  %yoff.addr = alloca i32, align 4
  %nA = alloca i8, align 1
  %nB = alloca i8, align 1
  %nC = alloca i8, align 1
  store [9 x i8]* %residualmode, [9 x i8]** %residualmode.addr, align 8
  store [18 x i8]* %nzC, [18 x i8]** %nzC.addr, align 8
  store i32 %xoff, i32* %xoff.addr, align 4
  store i32 %yoff, i32* %yoff.addr, align 4
  store i8 0, i8* %nA, align 1
  store i8 0, i8* %nB, align 1
  store i8 0, i8* %nC, align 1
  %0 = load i32, i32* %xoff.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end, !prof !92

if.then:                                          ; preds = %entry
  %1 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %2 = load i32, i32* %xoff.addr, align 4
  %sub = sub nsw i32 %2, 1
  %div = sdiv i32 %sub, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %yoff.addr, align 4
  %div1 = sdiv i32 %3, 2
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %4 = load i8, i8* %arrayidx3, align 1
  %conv = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv, 25
  %conv5 = zext i1 %cmp4 to i32
  %mul = mul nsw i32 %conv5, 16
  %5 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %6 = load i32, i32* %xoff.addr, align 4
  %sub6 = sub nsw i32 %6, 1
  %div7 = sdiv i32 %sub6, 2
  %idxprom8 = sext i32 %div7 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 %idxprom8
  %7 = load i32, i32* %yoff.addr, align 4
  %div10 = sdiv i32 %7, 2
  %idxprom11 = sext i32 %div10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %cmp14 = icmp ne i32 %conv13, 3
  %conv15 = zext i1 %cmp14 to i32
  %9 = load [18 x i8]*, [18 x i8]** %nzC.addr, align 8
  %10 = load i32, i32* %xoff.addr, align 4
  %sub16 = sub nsw i32 %10, 1
  %idxprom17 = sext i32 %sub16 to i64
  %arrayidx18 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 %idxprom17
  %11 = load i32, i32* %yoff.addr, align 4
  %idxprom19 = sext i32 %11 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %12 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %12 to i32
  %mul22 = mul nsw i32 %conv15, %conv21
  %add = add nsw i32 %mul, %mul22
  %conv23 = trunc i32 %add to i8
  store i8 %conv23, i8* %nA, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %yoff.addr, align 4
  %cmp24 = icmp sgt i32 %13, 0
  br i1 %cmp24, label %if.then26, label %if.end57, !prof !93

if.then26:                                        ; preds = %if.end
  %14 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %15 = load i32, i32* %xoff.addr, align 4
  %div27 = sdiv i32 %15, 2
  %idxprom28 = sext i32 %div27 to i64
  %arrayidx29 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom28
  %16 = load i32, i32* %yoff.addr, align 4
  %sub30 = sub nsw i32 %16, 1
  %div31 = sdiv i32 %sub30, 2
  %idxprom32 = sext i32 %div31 to i64
  %arrayidx33 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx29, i64 0, i64 %idxprom32
  %17 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %17 to i32
  %cmp35 = icmp eq i32 %conv34, 25
  %conv36 = zext i1 %cmp35 to i32
  %mul37 = mul nsw i32 %conv36, 16
  %18 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %19 = load i32, i32* %xoff.addr, align 4
  %div38 = sdiv i32 %19, 2
  %idxprom39 = sext i32 %div38 to i64
  %arrayidx40 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom39
  %20 = load i32, i32* %yoff.addr, align 4
  %sub41 = sub nsw i32 %20, 1
  %div42 = sdiv i32 %sub41, 2
  %idxprom43 = sext i32 %div42 to i64
  %arrayidx44 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx40, i64 0, i64 %idxprom43
  %21 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %21 to i32
  %cmp46 = icmp ne i32 %conv45, 3
  %conv47 = zext i1 %cmp46 to i32
  %22 = load [18 x i8]*, [18 x i8]** %nzC.addr, align 8
  %23 = load i32, i32* %xoff.addr, align 4
  %idxprom48 = sext i32 %23 to i64
  %arrayidx49 = getelementptr inbounds [18 x i8], [18 x i8]* %22, i64 %idxprom48
  %24 = load i32, i32* %yoff.addr, align 4
  %sub50 = sub nsw i32 %24, 1
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %25 to i32
  %mul54 = mul nsw i32 %conv47, %conv53
  %add55 = add nsw i32 %mul37, %mul54
  %conv56 = trunc i32 %add55 to i8
  store i8 %conv56, i8* %nB, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.then26, %if.end
  %26 = load i8, i8* %nA, align 1
  %conv58 = zext i8 %26 to i32
  %27 = load i8, i8* %nB, align 1
  %conv59 = zext i8 %27 to i32
  %add60 = add nsw i32 %conv58, %conv59
  %28 = load i32, i32* %yoff.addr, align 4
  %cmp61 = icmp sgt i32 %28, 0
  %conv62 = zext i1 %cmp61 to i32
  %29 = load i32, i32* %xoff.addr, align 4
  %cmp63 = icmp sgt i32 %29, 0
  %conv64 = zext i1 %cmp63 to i32
  %mul65 = mul nsw i32 %conv62, %conv64
  %add66 = add nsw i32 %add60, %mul65
  %30 = load i32, i32* %yoff.addr, align 4
  %cmp67 = icmp sgt i32 %30, 0
  %conv68 = zext i1 %cmp67 to i32
  %31 = load i32, i32* %xoff.addr, align 4
  %cmp69 = icmp sgt i32 %31, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul71 = mul nsw i32 %conv68, %conv70
  %shr = ashr i32 %add66, %mul71
  %conv72 = trunc i32 %shr to i8
  store i8 %conv72, i8* %nC, align 1
  %32 = load i8, i8* %nC, align 1
  ret i8 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decode_main(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct.StorablePicture* %pic, [176 x [144 x i8]]* %pic_Sluma, [88 x [72 x i8]]* %pic_SChroma_0, [88 x [72 x i8]]* %pic_SChroma_1, %struct.StorablePictureInfo* %pic_info) #0 !prof !94 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pic.addr = alloca %struct.StorablePicture*, align 8
  %pic_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %pic_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %pic_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %pic_info.addr = alloca %struct.StorablePictureInfo*, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct.StorablePicture* %pic, %struct.StorablePicture** %pic.addr, align 8
  store [176 x [144 x i8]]* %pic_Sluma, [176 x [144 x i8]]** %pic_Sluma.addr, align 8
  store [88 x [72 x i8]]* %pic_SChroma_0, [88 x [72 x i8]]** %pic_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %pic_SChroma_1, [88 x [72 x i8]]** %pic_SChroma_1.addr, align 8
  store %struct.StorablePictureInfo* %pic_info, %struct.StorablePictureInfo** %pic_info.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %0, i32 0, i32 2
  %1 = load i32, i32* %nal_unit_type, align 8
  switch i32 %1, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb1
    i32 5, label %sw.bb3
    i32 1, label %sw.bb3
  ], !prof !95

sw.bb:                                            ; preds = %entry
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @ProcessSPS(%struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.NALU_t* %2, i8* %3, i64* %4)
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call i32 @ProcessPPS(%struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, %struct.NALU_t* %5, i8* %6, i64* %7)
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry, %entry
  %8 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %9 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @ProcessSH(%struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, %struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.ImageParameters* %8, %struct.NALU_t* %9, i8* %10, i64* %11)
  %12 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type4 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %12, i32 0, i32 2
  %13 = load i32, i32* %nal_unit_type4, align 8
  %conv = trunc i32 %13 to i8
  %14 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %14, i32 0, i32 3
  %15 = load i32, i32* %nal_reference_idc, align 4
  %conv5 = trunc i32 %15 to i8
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %17 = load %struct.StorablePicture*, %struct.StorablePicture** %pic.addr, align 8
  call void @intepretSLiceHeader(%struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, i8 zeroext %conv, i8 zeroext %conv5, %struct.ImageParameters* %16, %struct.StorablePicture* %17)
  %18 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %19 = load i8*, i8** %nalu_buf.addr, align 8
  %20 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %21 = load %struct.StorablePicture*, %struct.StorablePicture** %pic.addr, align 8
  %22 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %pic_Sluma.addr, align 8
  %23 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %pic_SChroma_0.addr, align 8
  %24 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %pic_SChroma_1.addr, align 8
  %25 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %pic_info.addr, align 8
  %26 = load i8, i8* getelementptr inbounds (%struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, i32 0, i32 14), align 1
  %27 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  call void @ProcessSlice(%struct.NALU_t* %18, i8* %19, i64* %20, %struct.StorablePicture* %21, [176 x [144 x i8]]* %22, [88 x [72 x i8]]* %23, [88 x [72 x i8]]* %24, %struct.StorablePictureInfo* %25, [9 x i8]* getelementptr inbounds ([11 x [9 x i8]], [11 x [9 x i8]]* @Mb_prediction_type, i32 0, i32 0), [36 x i8]* getelementptr inbounds ([44 x [36 x i8]], [44 x [36 x i8]]* @intra_pred_mode, i32 0, i32 0), [36 x i8]* getelementptr inbounds ([44 x [36 x i8]], [44 x [36 x i8]]* @nz_coeff_luma, i32 0, i32 0), [22 x [18 x i8]]* getelementptr inbounds ([2 x [22 x [18 x i8]]], [2 x [22 x [18 x i8]]]* @nz_coeff_chroma, i32 0, i32 0), i8 zeroext %26, %struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.ImageParameters* %27)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_listP(%struct.StorablePicture* %PicBff, i32* %listX, i32 %curFrame_NUM, i32 %maxframNUM) #0 !prof !96 {
entry:
  %PicBff.addr = alloca %struct.StorablePicture*, align 8
  %listX.addr = alloca i32*, align 8
  %curFrame_NUM.addr = alloca i32, align 4
  %maxframNUM.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca i32, align 4
  %tpvalue1 = alloca i32, align 4
  %tpvalue2 = alloca i32, align 4
  store %struct.StorablePicture* %PicBff, %struct.StorablePicture** %PicBff.addr, align 8
  store i32* %listX, i32** %listX.addr, align 8
  store i32 %curFrame_NUM, i32* %curFrame_NUM.addr, align 4
  store i32 %maxframNUM, i32* %maxframNUM.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %temp, align 4
  store i32 0, i32* %tpvalue1, align 4
  store i32 0, i32* %tpvalue2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end, !prof !97

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %listX.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  store i32 %1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc48, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 3
  br i1 %cmp2, label %for.body3, label %for.end50, !prof !97

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  store i32 %6, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc45, %for.body3
  %7 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %7, 2
  br i1 %cmp5, label %for.body6, label %for.end47, !prof !98

for.body6:                                        ; preds = %for.cond4
  %8 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %9 = load i32*, i32** %listX.addr, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom7
  %11 = load i32, i32* %arrayidx8, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %8, i64 %idxprom9
  %use_for_char = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx10, i32 0, i32 4
  %12 = load i8, i8* %use_for_char, align 1
  %tobool = icmp ne i8 %12, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !99

if.then:                                          ; preds = %for.body6
  %13 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %14 = load i32*, i32** %listX.addr, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %15 to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %14, i64 %idxprom11
  %16 = load i32, i32* %arrayidx12, align 4
  %idxprom13 = sext i32 %16 to i64
  %arrayidx14 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %13, i64 %idxprom13
  %frame_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx14, i32 0, i32 2
  %17 = load i8, i8* %frame_num, align 1
  %conv = zext i8 %17 to i32
  store i32 %conv, i32* %tpvalue1, align 4
  br label %if.end

if.else:                                          ; preds = %for.body6
  store i32 -1, i32* %tpvalue1, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %19 = load i32*, i32** %listX.addr, align 8
  %20 = load i32, i32* %j, align 4
  %add = add nsw i32 %20, 1
  %idxprom15 = sext i32 %add to i64
  %arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
  %21 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %18, i64 %idxprom17
  %use_for_char19 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx18, i32 0, i32 4
  %22 = load i8, i8* %use_for_char19, align 1
  %tobool20 = icmp ne i8 %22, 0
  br i1 %tobool20, label %if.then21, label %if.else29, !prof !100

if.then21:                                        ; preds = %if.end
  %23 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %24 = load i32*, i32** %listX.addr, align 8
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %25, 1
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %24, i64 %idxprom23
  %26 = load i32, i32* %arrayidx24, align 4
  %idxprom25 = sext i32 %26 to i64
  %arrayidx26 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %23, i64 %idxprom25
  %frame_num27 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx26, i32 0, i32 2
  %27 = load i8, i8* %frame_num27, align 1
  %conv28 = zext i8 %27 to i32
  store i32 %conv28, i32* %tpvalue2, align 4
  br label %if.end30

if.else29:                                        ; preds = %if.end
  store i32 -1, i32* %tpvalue2, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then21
  %28 = load i32, i32* %tpvalue1, align 4
  %29 = load i32, i32* %tpvalue2, align 4
  %cmp31 = icmp slt i32 %28, %29
  br i1 %cmp31, label %if.then33, label %if.end44, !prof !100

if.then33:                                        ; preds = %if.end30
  %30 = load i32*, i32** %listX.addr, align 8
  %31 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %31 to i64
  %arrayidx35 = getelementptr inbounds i32, i32* %30, i64 %idxprom34
  %32 = load i32, i32* %arrayidx35, align 4
  store i32 %32, i32* %temp, align 4
  %33 = load i32*, i32** %listX.addr, align 8
  %34 = load i32, i32* %j, align 4
  %add36 = add nsw i32 %34, 1
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds i32, i32* %33, i64 %idxprom37
  %35 = load i32, i32* %arrayidx38, align 4
  %36 = load i32*, i32** %listX.addr, align 8
  %37 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %37 to i64
  %arrayidx40 = getelementptr inbounds i32, i32* %36, i64 %idxprom39
  store i32 %35, i32* %arrayidx40, align 4
  %38 = load i32, i32* %temp, align 4
  %39 = load i32*, i32** %listX.addr, align 8
  %40 = load i32, i32* %j, align 4
  %add41 = add nsw i32 %40, 1
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds i32, i32* %39, i64 %idxprom42
  store i32 %38, i32* %arrayidx43, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then33, %if.end30
  br label %for.inc45

for.inc45:                                        ; preds = %if.end44
  %41 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %41, 1
  store i32 %inc46, i32* %j, align 4
  br label %for.cond4

for.end47:                                        ; preds = %for.cond4
  br label %for.inc48

for.inc48:                                        ; preds = %for.end47
  %42 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %42, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond1

for.end50:                                        ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc65, %for.end50
  %43 = load i32, i32* %i, align 4
  %cmp52 = icmp slt i32 %43, 3
  br i1 %cmp52, label %for.body54, label %for.end67, !prof !97

for.body54:                                       ; preds = %for.cond51
  %44 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %45 = load i32*, i32** %listX.addr, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %46 to i64
  %arrayidx56 = getelementptr inbounds i32, i32* %45, i64 %idxprom55
  %47 = load i32, i32* %arrayidx56, align 4
  %idxprom57 = sext i32 %47 to i64
  %arrayidx58 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %44, i64 %idxprom57
  %use_for_char59 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx58, i32 0, i32 4
  %48 = load i8, i8* %use_for_char59, align 1
  %tobool60 = icmp ne i8 %48, 0
  br i1 %tobool60, label %if.end64, label %if.then61, !prof !99

if.then61:                                        ; preds = %for.body54
  %49 = load i32*, i32** %listX.addr, align 8
  %50 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %50 to i64
  %arrayidx63 = getelementptr inbounds i32, i32* %49, i64 %idxprom62
  store i32 -1, i32* %arrayidx63, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then61, %for.body54
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %51 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %51, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond51

for.end67:                                        ; preds = %for.cond51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_listB(%struct.StorablePicture* %PicBff, i32* %list0, i32* %list1, i32 %curPOC) #0 !prof !101 {
entry:
  %PicBff.addr = alloca %struct.StorablePicture*, align 8
  %list0.addr = alloca i32*, align 8
  %list1.addr = alloca i32*, align 8
  %curPOC.addr = alloca i32, align 4
  store %struct.StorablePicture* %PicBff, %struct.StorablePicture** %PicBff.addr, align 8
  store i32* %list0, i32** %list0.addr, align 8
  store i32* %list1, i32** %list1.addr, align 8
  store i32 %curPOC, i32* %curPOC.addr, align 4
  %0 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %arrayidx = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %0, i64 0
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx, i32 0, i32 0
  %1 = load i32, i32* %Picorder_num, align 4
  %2 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %2, i64 1
  %Picorder_num2 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx1, i32 0, i32 0
  %3 = load i32, i32* %Picorder_num2, align 4
  %cmp = icmp sgt i32 %1, %3
  br i1 %cmp, label %if.then, label %if.else, !prof !102

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %list1.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %4, i64 0
  store i32 0, i32* %arrayidx3, align 4
  %5 = load i32*, i32** %list1.addr, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %5, i64 1
  store i32 1, i32* %arrayidx4, align 4
  %6 = load i32*, i32** %list0.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %6, i64 0
  store i32 1, i32* %arrayidx5, align 4
  %7 = load i32*, i32** %list0.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %7, i64 1
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32*, i32** %list0.addr, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %8, i64 0
  store i32 0, i32* %arrayidx7, align 4
  %9 = load i32*, i32** %list1.addr, align 8
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 0
  store i32 1, i32* %arrayidx8, align 4
  %10 = load i32*, i32** %list0.addr, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %10, i64 1
  store i32 1, i32* %arrayidx9, align 4
  %11 = load i32*, i32** %list1.addr, align 8
  %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 0, i32* %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @processinterMbType(i8 zeroext %mb_type, i8 zeroext %slice_type, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %num_ref_idx_active1, i8 zeroext %num_ref_idx_active0, [2 x i8]* %refidx0, [2 x i8]* %refidx1, [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]* %mvd1, [18 x i8]* %globref0, [18 x i8]* %globref1, [36 x [2 x i32]]* %globmvd0, [36 x [2 x i32]]* %globmvd1, i32* %list0, i32* %list1, i32 %Mbaddress, i32 %skipflag, [2 x i8]* %refcol, [4 x [2 x i32]]* %mvcol, i8 zeroext %MbType) #0 !prof !103 {
entry:
  %mb_type.addr = alloca i8, align 1
  %slice_type.addr = alloca i8, align 1
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %num_ref_idx_active1.addr = alloca i8, align 1
  %num_ref_idx_active0.addr = alloca i8, align 1
  %refidx0.addr = alloca [2 x i8]*, align 8
  %refidx1.addr = alloca [2 x i8]*, align 8
  %mvd0.addr = alloca [4 x [2 x i32]]*, align 8
  %mvd1.addr = alloca [4 x [2 x i32]]*, align 8
  %globref0.addr = alloca [18 x i8]*, align 8
  %globref1.addr = alloca [18 x i8]*, align 8
  %globmvd0.addr = alloca [36 x [2 x i32]]*, align 8
  %globmvd1.addr = alloca [36 x [2 x i32]]*, align 8
  %list0.addr = alloca i32*, align 8
  %list1.addr = alloca i32*, align 8
  %Mbaddress.addr = alloca i32, align 4
  %skipflag.addr = alloca i32, align 4
  %refcol.addr = alloca [2 x i8]*, align 8
  %mvcol.addr = alloca [4 x [2 x i32]]*, align 8
  %MbType.addr = alloca i8, align 1
  %substepx = alloca [2 x [2 x i8]], align 1
  %substepy = alloca [2 x [2 x i8]], align 1
  %stepx = alloca i8, align 1
  %stepy = alloca i8, align 1
  %listuse = alloca [2 x [2 x i8]], align 1
  %preddir = alloca [2 x [2 x i8]], align 1
  %subtype = alloca i8, align 1
  %dflag = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %subx = alloca i32, align 4
  %suby = alloca i32, align 4
  %refidx = alloca i8, align 1
  %mvdx = alloca i32, align 4
  %mvdy = alloca i32, align 4
  %tpmmv = alloca [2 x i32], align 4
  %tpmmv1 = alloca [2 x i32], align 4
  %foundmv0 = alloca [2 x i32], align 4
  %foundmv1 = alloca [2 x i32], align 4
  %tmpref01 = alloca [2 x i8], align 1
  %startblkx = alloca i32, align 4
  %startblky = alloca i32, align 4
  %val_stepX = alloca [30 x i8], align 16
  %val_stepY = alloca [30 x i8], align 16
  %val_listuse = alloca [30 x [4 x i8]], align 16
  %val_predir = alloca [30 x [4 x i8]], align 16
  %val_sublistuse = alloca [17 x i8], align 16
  %val_subX = alloca [17 x i8], align 16
  %val_subY = alloca [17 x i8], align 16
  %stpw = alloca i8, align 1
  %stph = alloca i8, align 1
  store i8 %mb_type, i8* %mb_type.addr, align 1
  store i8 %slice_type, i8* %slice_type.addr, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %num_ref_idx_active1, i8* %num_ref_idx_active1.addr, align 1
  store i8 %num_ref_idx_active0, i8* %num_ref_idx_active0.addr, align 1
  store [2 x i8]* %refidx0, [2 x i8]** %refidx0.addr, align 8
  store [2 x i8]* %refidx1, [2 x i8]** %refidx1.addr, align 8
  store [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]** %mvd0.addr, align 8
  store [4 x [2 x i32]]* %mvd1, [4 x [2 x i32]]** %mvd1.addr, align 8
  store [18 x i8]* %globref0, [18 x i8]** %globref0.addr, align 8
  store [18 x i8]* %globref1, [18 x i8]** %globref1.addr, align 8
  store [36 x [2 x i32]]* %globmvd0, [36 x [2 x i32]]** %globmvd0.addr, align 8
  store [36 x [2 x i32]]* %globmvd1, [36 x [2 x i32]]** %globmvd1.addr, align 8
  store i32* %list0, i32** %list0.addr, align 8
  store i32* %list1, i32** %list1.addr, align 8
  store i32 %Mbaddress, i32* %Mbaddress.addr, align 4
  store i32 %skipflag, i32* %skipflag.addr, align 4
  store [2 x i8]* %refcol, [2 x i8]** %refcol.addr, align 8
  store [4 x [2 x i32]]* %mvcol, [4 x [2 x i32]]** %mvcol.addr, align 8
  store i8 %MbType, i8* %MbType.addr, align 1
  %0 = bitcast [2 x [2 x i8]]* %substepx to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 4, i1 false)
  %1 = bitcast [2 x [2 x i8]]* %substepy to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 4, i1 false)
  store i8 0, i8* %stepx, align 1
  store i8 0, i8* %stepy, align 1
  %2 = bitcast [2 x [2 x i8]]* %listuse to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 4, i1 false)
  %3 = bitcast [2 x [2 x i8]]* %preddir to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 4, i1 false)
  store i8 0, i8* %subtype, align 1
  store i8 0, i8* %dflag, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %subx, align 4
  store i32 0, i32* %suby, align 4
  store i8 0, i8* %refidx, align 1
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  %4 = bitcast [2 x i32]* %tpmmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 8, i1 false)
  %5 = bitcast [2 x i32]* %tpmmv1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 8, i1 false)
  %6 = bitcast [2 x i32]* %foundmv0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 8, i1 false)
  %7 = bitcast [2 x i32]* %foundmv1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 8, i1 false)
  %8 = bitcast [2 x i8]* %tmpref01 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 2, i1 false)
  %9 = load i32, i32* %Mbaddress.addr, align 4
  %rem = srem i32 %9, 11
  %mul = mul nsw i32 %rem, 4
  store i32 %mul, i32* %startblkx, align 4
  %10 = load i32, i32* %Mbaddress.addr, align 4
  %div = sdiv i32 %10, 11
  %mul1 = mul nsw i32 %div, 4
  store i32 %mul1, i32* %startblky, align 4
  %11 = bitcast [30 x i8]* %val_stepX to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.processinterMbType.val_stepX, i32 0, i32 0), i64 30, i1 false)
  %12 = bitcast [30 x i8]* %val_stepY to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.processinterMbType.val_stepY, i32 0, i32 0), i64 30, i1 false)
  %13 = bitcast [30 x [4 x i8]]* %val_listuse to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([30 x [4 x i8]], [30 x [4 x i8]]* @__const.processinterMbType.val_listuse, i32 0, i32 0, i32 0), i64 120, i1 false)
  %14 = bitcast [30 x [4 x i8]]* %val_predir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([30 x [4 x i8]], [30 x [4 x i8]]* @__const.processinterMbType.val_predir, i32 0, i32 0, i32 0), i64 120, i1 false)
  %15 = bitcast [17 x i8]* %val_sublistuse to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_sublistuse, i32 0, i32 0), i64 17, i1 false)
  %16 = bitcast [17 x i8]* %val_subX to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_subX, i32 0, i32 0), i64 17, i1 false)
  %17 = bitcast [17 x i8]* %val_subY to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_subY, i32 0, i32 0), i64 17, i1 false)
  %18 = load i8, i8* %MbType.addr, align 1
  %idxprom = zext i8 %18 to i64
  %arrayidx = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom
  %arrayidx2 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 0
  %19 = load i8, i8* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 0
  %arrayidx4 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx3, i64 0, i64 0
  store i8 %19, i8* %arrayidx4, align 1
  %20 = load i8, i8* %MbType.addr, align 1
  %idxprom5 = zext i8 %20 to i64
  %arrayidx6 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom5
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 1
  %21 = load i8, i8* %arrayidx7, align 1
  %arrayidx8 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 1
  %arrayidx9 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx8, i64 0, i64 0
  store i8 %21, i8* %arrayidx9, align 1
  %22 = load i8, i8* %MbType.addr, align 1
  %idxprom10 = zext i8 %22 to i64
  %arrayidx11 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i64 0, i64 2
  %23 = load i8, i8* %arrayidx12, align 2
  %arrayidx13 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 0
  %arrayidx14 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx13, i64 0, i64 1
  store i8 %23, i8* %arrayidx14, align 1
  %24 = load i8, i8* %MbType.addr, align 1
  %idxprom15 = zext i8 %24 to i64
  %arrayidx16 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx16, i64 0, i64 3
  %25 = load i8, i8* %arrayidx17, align 1
  %arrayidx18 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 1
  %arrayidx19 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx18, i64 0, i64 1
  store i8 %25, i8* %arrayidx19, align 1
  %26 = load i8, i8* %MbType.addr, align 1
  %idxprom20 = zext i8 %26 to i64
  %arrayidx21 = getelementptr inbounds [30 x i8], [30 x i8]* %val_stepX, i64 0, i64 %idxprom20
  %27 = load i8, i8* %arrayidx21, align 1
  store i8 %27, i8* %stepx, align 1
  %28 = load i8, i8* %MbType.addr, align 1
  %idxprom22 = zext i8 %28 to i64
  %arrayidx23 = getelementptr inbounds [30 x i8], [30 x i8]* %val_stepY, i64 0, i64 %idxprom22
  %29 = load i8, i8* %arrayidx23, align 1
  store i8 %29, i8* %stepy, align 1
  %30 = load i8, i8* %stepx, align 1
  %arrayidx24 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 0
  %arrayidx25 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx24, i64 0, i64 0
  store i8 %30, i8* %arrayidx25, align 1
  %31 = load i8, i8* %stepy, align 1
  %arrayidx26 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 0
  %arrayidx27 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx26, i64 0, i64 0
  store i8 %31, i8* %arrayidx27, align 1
  %32 = load i8, i8* %stepx, align 1
  %arrayidx28 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 0
  %arrayidx29 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx28, i64 0, i64 1
  store i8 %32, i8* %arrayidx29, align 1
  %33 = load i8, i8* %stepy, align 1
  %arrayidx30 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 0
  %arrayidx31 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx30, i64 0, i64 1
  store i8 %33, i8* %arrayidx31, align 1
  %34 = load i8, i8* %stepx, align 1
  %arrayidx32 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 1
  %arrayidx33 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx32, i64 0, i64 0
  store i8 %34, i8* %arrayidx33, align 1
  %35 = load i8, i8* %stepy, align 1
  %arrayidx34 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 1
  %arrayidx35 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx34, i64 0, i64 0
  store i8 %35, i8* %arrayidx35, align 1
  %36 = load i8, i8* %stepx, align 1
  %arrayidx36 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 1
  %arrayidx37 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx36, i64 0, i64 1
  store i8 %36, i8* %arrayidx37, align 1
  %37 = load i8, i8* %stepy, align 1
  %arrayidx38 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 1
  %arrayidx39 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx38, i64 0, i64 1
  store i8 %37, i8* %arrayidx39, align 1
  %38 = load i8, i8* %MbType.addr, align 1
  %idxprom40 = zext i8 %38 to i64
  %arrayidx41 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx41, i64 0, i64 0
  %39 = load i8, i8* %arrayidx42, align 4
  %arrayidx43 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 0
  %arrayidx44 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx43, i64 0, i64 0
  store i8 %39, i8* %arrayidx44, align 1
  %40 = load i8, i8* %MbType.addr, align 1
  %idxprom45 = zext i8 %40 to i64
  %arrayidx46 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom45
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx46, i64 0, i64 1
  %41 = load i8, i8* %arrayidx47, align 1
  %arrayidx48 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 1
  %arrayidx49 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx48, i64 0, i64 0
  store i8 %41, i8* %arrayidx49, align 1
  %42 = load i8, i8* %MbType.addr, align 1
  %idxprom50 = zext i8 %42 to i64
  %arrayidx51 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom50
  %arrayidx52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i64 0, i64 2
  %43 = load i8, i8* %arrayidx52, align 2
  %arrayidx53 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 0
  %arrayidx54 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx53, i64 0, i64 1
  store i8 %43, i8* %arrayidx54, align 1
  %44 = load i8, i8* %MbType.addr, align 1
  %idxprom55 = zext i8 %44 to i64
  %arrayidx56 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom55
  %arrayidx57 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx56, i64 0, i64 3
  %45 = load i8, i8* %arrayidx57, align 1
  %arrayidx58 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 1
  %arrayidx59 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx58, i64 0, i64 1
  store i8 %45, i8* %arrayidx59, align 1
  %46 = load i8, i8* %MbType.addr, align 1
  %conv = zext i8 %46 to i32
  %cmp = icmp eq i32 %conv, 5
  br i1 %cmp, label %if.then, label %lor.lhs.false, !prof !104

lor.lhs.false:                                    ; preds = %entry
  %47 = load i8, i8* %MbType.addr, align 1
  %conv61 = zext i8 %47 to i32
  %cmp62 = icmp eq i32 %conv61, 29
  br i1 %cmp62, label %if.then, label %if.end, !prof !105

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc91, %if.then
  %48 = load i32, i32* %i, align 4
  %cmp64 = icmp slt i32 %48, 2
  br i1 %cmp64, label %for.body, label %for.end93, !prof !106

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc, %for.body
  %49 = load i32, i32* %j, align 4
  %cmp67 = icmp slt i32 %49, 2
  br i1 %cmp67, label %for.body69, label %for.end, !prof !107

for.body69:                                       ; preds = %for.cond66
  %50 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %51 = load i8*, i8** %nalu_buf.addr, align 8
  %52 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %50, i8* %51, i64* %52)
  %53 = load i8, i8* %slice_type.addr, align 1
  %conv70 = zext i8 %53 to i32
  %mul71 = mul nsw i32 %conv70, 4
  %add = add i32 %call, %mul71
  %conv72 = trunc i32 %add to i8
  store i8 %conv72, i8* %subtype, align 1
  %54 = load i8, i8* %subtype, align 1
  %idxprom73 = zext i8 %54 to i64
  %arrayidx74 = getelementptr inbounds [17 x i8], [17 x i8]* %val_subX, i64 0, i64 %idxprom73
  %55 = load i8, i8* %arrayidx74, align 1
  %56 = load i32, i32* %j, align 4
  %idxprom75 = sext i32 %56 to i64
  %arrayidx76 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom75
  %57 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %57 to i64
  %arrayidx78 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx76, i64 0, i64 %idxprom77
  store i8 %55, i8* %arrayidx78, align 1
  %58 = load i8, i8* %subtype, align 1
  %idxprom79 = zext i8 %58 to i64
  %arrayidx80 = getelementptr inbounds [17 x i8], [17 x i8]* %val_subY, i64 0, i64 %idxprom79
  %59 = load i8, i8* %arrayidx80, align 1
  %60 = load i32, i32* %j, align 4
  %idxprom81 = sext i32 %60 to i64
  %arrayidx82 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom81
  %61 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %61 to i64
  %arrayidx84 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx82, i64 0, i64 %idxprom83
  store i8 %59, i8* %arrayidx84, align 1
  %62 = load i8, i8* %subtype, align 1
  %idxprom85 = zext i8 %62 to i64
  %arrayidx86 = getelementptr inbounds [17 x i8], [17 x i8]* %val_sublistuse, i64 0, i64 %idxprom85
  %63 = load i8, i8* %arrayidx86, align 1
  %64 = load i32, i32* %j, align 4
  %idxprom87 = sext i32 %64 to i64
  %arrayidx88 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom87
  %65 = load i32, i32* %i, align 4
  %idxprom89 = sext i32 %65 to i64
  %arrayidx90 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx88, i64 0, i64 %idxprom89
  store i8 %63, i8* %arrayidx90, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body69
  %66 = load i32, i32* %j, align 4
  %inc = add nsw i32 %66, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond66

for.end:                                          ; preds = %for.cond66
  br label %for.inc91

for.inc91:                                        ; preds = %for.end
  %67 = load i32, i32* %i, align 4
  %inc92 = add nsw i32 %67, 1
  store i32 %inc92, i32* %i, align 4
  br label %for.cond

for.end93:                                        ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end93, %lor.lhs.false
  %68 = load i8, i8* %MbType.addr, align 1
  %conv94 = zext i8 %68 to i32
  %cmp95 = icmp eq i32 %conv94, 6
  br i1 %cmp95, label %cond.true, label %lor.lhs.false97, !prof !108

lor.lhs.false97:                                  ; preds = %if.end
  %69 = load i8, i8* %MbType.addr, align 1
  %conv98 = zext i8 %69 to i32
  %cmp99 = icmp eq i32 %conv98, 7
  br i1 %cmp99, label %cond.true, label %cond.false, !prof !109

cond.true:                                        ; preds = %lor.lhs.false97, %if.end
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false97
  %70 = load i32, i32* %skipflag.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %70, %cond.false ]
  store i32 %cond, i32* %skipflag.addr, align 4
  %71 = load i8, i8* %MbType.addr, align 1
  %conv101 = zext i8 %71 to i32
  %cmp102 = icmp eq i32 %conv101, 0
  br i1 %cmp102, label %if.then108, label %lor.lhs.false104, !prof !110

lor.lhs.false104:                                 ; preds = %cond.end
  %72 = load i8, i8* %MbType.addr, align 1
  %conv105 = zext i8 %72 to i32
  %cmp106 = icmp eq i32 %conv105, 5
  br i1 %cmp106, label %if.then108, label %if.else, !prof !111

if.then108:                                       ; preds = %lor.lhs.false104, %cond.end
  store i32 0, i32* %i, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc144, %if.then108
  %73 = load i32, i32* %i, align 4
  %cmp110 = icmp slt i32 %73, 2
  br i1 %cmp110, label %for.body112, label %for.end146, !prof !112

for.body112:                                      ; preds = %for.cond109
  store i32 0, i32* %j, align 4
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc141, %for.body112
  %74 = load i32, i32* %j, align 4
  %cmp114 = icmp slt i32 %74, 2
  br i1 %cmp114, label %for.body116, label %for.end143, !prof !113

for.body116:                                      ; preds = %for.cond113
  %75 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %76 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %76 to i64
  %arrayidx118 = getelementptr inbounds [2 x i8], [2 x i8]* %75, i64 %idxprom117
  %77 = load i32, i32* %j, align 4
  %idxprom119 = sext i32 %77 to i64
  %arrayidx120 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx118, i64 0, i64 %idxprom119
  store i8 0, i8* %arrayidx120, align 1
  %78 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %79 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %79 to i64
  %arrayidx122 = getelementptr inbounds [2 x i8], [2 x i8]* %78, i64 %idxprom121
  %80 = load i32, i32* %j, align 4
  %idxprom123 = sext i32 %80 to i64
  %arrayidx124 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx122, i64 0, i64 %idxprom123
  store i8 -1, i8* %arrayidx124, align 1
  %81 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %82 = load i32, i32* %startblkx, align 4
  %div125 = sdiv i32 %82, 2
  %83 = load i32, i32* %j, align 4
  %add126 = add nsw i32 %div125, %83
  %idxprom127 = sext i32 %add126 to i64
  %arrayidx128 = getelementptr inbounds [18 x i8], [18 x i8]* %81, i64 %idxprom127
  %84 = load i32, i32* %startblky, align 4
  %div129 = sdiv i32 %84, 2
  %85 = load i32, i32* %i, align 4
  %add130 = add nsw i32 %div129, %85
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx128, i64 0, i64 %idxprom131
  store i8 0, i8* %arrayidx132, align 1
  %86 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %87 = load i32, i32* %startblkx, align 4
  %div133 = sdiv i32 %87, 2
  %88 = load i32, i32* %j, align 4
  %add134 = add nsw i32 %div133, %88
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds [18 x i8], [18 x i8]* %86, i64 %idxprom135
  %89 = load i32, i32* %startblky, align 4
  %div137 = sdiv i32 %89, 2
  %90 = load i32, i32* %i, align 4
  %add138 = add nsw i32 %div137, %90
  %idxprom139 = sext i32 %add138 to i64
  %arrayidx140 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx136, i64 0, i64 %idxprom139
  store i8 -1, i8* %arrayidx140, align 1
  br label %for.inc141

for.inc141:                                       ; preds = %for.body116
  %91 = load i32, i32* %j, align 4
  %inc142 = add nsw i32 %91, 1
  store i32 %inc142, i32* %j, align 4
  br label %for.cond113

for.end143:                                       ; preds = %for.cond113
  br label %for.inc144

for.inc144:                                       ; preds = %for.end143
  %92 = load i32, i32* %i, align 4
  %inc145 = add nsw i32 %92, 1
  store i32 %inc145, i32* %i, align 4
  br label %for.cond109

for.end146:                                       ; preds = %for.cond109
  br label %if.end453

if.else:                                          ; preds = %lor.lhs.false104
  %93 = load i8, i8* %num_ref_idx_active0.addr, align 1
  %conv147 = zext i8 %93 to i32
  %cmp148 = icmp sgt i32 %conv147, 0
  br i1 %cmp148, label %if.then150, label %if.else284, !prof !114

if.then150:                                       ; preds = %if.else
  store i32 0, i32* %y, align 4
  br label %for.cond151

for.cond151:                                      ; preds = %for.inc279, %if.then150
  %94 = load i32, i32* %y, align 4
  %cmp152 = icmp slt i32 %94, 2
  br i1 %cmp152, label %for.body154, label %for.end283, !prof !115

for.body154:                                      ; preds = %for.cond151
  store i32 0, i32* %x, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc274, %for.body154
  %95 = load i32, i32* %x, align 4
  %cmp156 = icmp slt i32 %95, 2
  br i1 %cmp156, label %for.body158, label %for.end278, !prof !116

for.body158:                                      ; preds = %for.cond155
  %96 = load i32, i32* %x, align 4
  %idxprom159 = sext i32 %96 to i64
  %arrayidx160 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom159
  %97 = load i32, i32* %y, align 4
  %idxprom161 = sext i32 %97 to i64
  %arrayidx162 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx160, i64 0, i64 %idxprom161
  %98 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %98 to i32
  %cmp164 = icmp eq i32 %conv163, 0
  br i1 %cmp164, label %if.then166, label %if.else194, !prof !117

if.then166:                                       ; preds = %for.body158
  %99 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %100 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i32 0, i32 0
  %101 = load i32, i32* %startblkx, align 4
  %102 = load i32, i32* %startblky, align 4
  %call167 = call signext i8 @find_directzeroflag([18 x i8]* %99, [18 x i8]* %100, i8* %arraydecay, i32 %101, i32 %102)
  store i8 %call167, i8* %dflag, align 1
  %arrayidx168 = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i64 0, i64 0
  %103 = load i8, i8* %arrayidx168, align 1
  %104 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %105 = load i32, i32* %startblkx, align 4
  %div169 = sdiv i32 %105, 2
  %106 = load i32, i32* %x, align 4
  %add170 = add nsw i32 %div169, %106
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [18 x i8], [18 x i8]* %104, i64 %idxprom171
  %107 = load i32, i32* %startblky, align 4
  %div173 = sdiv i32 %107, 2
  %108 = load i32, i32* %y, align 4
  %add174 = add nsw i32 %div173, %108
  %idxprom175 = sext i32 %add174 to i64
  %arrayidx176 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx172, i64 0, i64 %idxprom175
  store i8 %103, i8* %arrayidx176, align 1
  %109 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %110 = load i32, i32* %x, align 4
  %idxprom177 = sext i32 %110 to i64
  %arrayidx178 = getelementptr inbounds [2 x i8], [2 x i8]* %109, i64 %idxprom177
  %111 = load i32, i32* %y, align 4
  %idxprom179 = sext i32 %111 to i64
  %arrayidx180 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx178, i64 0, i64 %idxprom179
  store i8 %103, i8* %arrayidx180, align 1
  %arrayidx181 = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i64 0, i64 1
  %112 = load i8, i8* %arrayidx181, align 1
  %113 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %114 = load i32, i32* %startblkx, align 4
  %div182 = sdiv i32 %114, 2
  %115 = load i32, i32* %x, align 4
  %add183 = add nsw i32 %div182, %115
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds [18 x i8], [18 x i8]* %113, i64 %idxprom184
  %116 = load i32, i32* %startblky, align 4
  %div186 = sdiv i32 %116, 2
  %117 = load i32, i32* %y, align 4
  %add187 = add nsw i32 %div186, %117
  %idxprom188 = sext i32 %add187 to i64
  %arrayidx189 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx185, i64 0, i64 %idxprom188
  store i8 %112, i8* %arrayidx189, align 1
  %118 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %119 = load i32, i32* %x, align 4
  %idxprom190 = sext i32 %119 to i64
  %arrayidx191 = getelementptr inbounds [2 x i8], [2 x i8]* %118, i64 %idxprom190
  %120 = load i32, i32* %y, align 4
  %idxprom192 = sext i32 %120 to i64
  %arrayidx193 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx191, i64 0, i64 %idxprom192
  store i8 %112, i8* %arrayidx193, align 1
  br label %if.end273

if.else194:                                       ; preds = %for.body158
  %121 = load i32, i32* %x, align 4
  %idxprom195 = sext i32 %121 to i64
  %arrayidx196 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom195
  %122 = load i32, i32* %y, align 4
  %idxprom197 = sext i32 %122 to i64
  %arrayidx198 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx196, i64 0, i64 %idxprom197
  %123 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %123 to i32
  %and = and i32 %conv199, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then200, label %if.else237, !prof !118

if.then200:                                       ; preds = %if.else194
  %124 = load i8, i8* %num_ref_idx_active0.addr, align 1
  %conv201 = zext i8 %124 to i32
  %125 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %126 = load i8*, i8** %nalu_buf.addr, align 8
  %127 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call202 = call zeroext i8 @t_e(i32 %conv201, %struct.NALU_t* %125, i8* %126, i64* %127)
  store i8 %call202, i8* %refidx, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond203

for.cond203:                                      ; preds = %for.inc234, %if.then200
  %128 = load i32, i32* %i, align 4
  %129 = load i8, i8* %stepy, align 1
  %conv204 = zext i8 %129 to i32
  %div205 = sdiv i32 %conv204, 2
  %cmp206 = icmp slt i32 %128, %div205
  br i1 %cmp206, label %for.body208, label %for.end236, !prof !102

for.body208:                                      ; preds = %for.cond203
  store i32 0, i32* %j, align 4
  br label %for.cond209

for.cond209:                                      ; preds = %for.inc231, %for.body208
  %130 = load i32, i32* %j, align 4
  %131 = load i8, i8* %stepx, align 1
  %conv210 = zext i8 %131 to i32
  %div211 = sdiv i32 %conv210, 2
  %cmp212 = icmp slt i32 %130, %div211
  br i1 %cmp212, label %for.body214, label %for.end233, !prof !102

for.body214:                                      ; preds = %for.cond209
  %132 = load i8, i8* %refidx, align 1
  %133 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %134 = load i32, i32* %x, align 4
  %135 = load i32, i32* %j, align 4
  %add215 = add nsw i32 %134, %135
  %idxprom216 = sext i32 %add215 to i64
  %arrayidx217 = getelementptr inbounds [2 x i8], [2 x i8]* %133, i64 %idxprom216
  %136 = load i32, i32* %y, align 4
  %137 = load i32, i32* %i, align 4
  %add218 = add nsw i32 %136, %137
  %idxprom219 = sext i32 %add218 to i64
  %arrayidx220 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx217, i64 0, i64 %idxprom219
  store i8 %132, i8* %arrayidx220, align 1
  %138 = load i8, i8* %refidx, align 1
  %139 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %140 = load i32, i32* %startblkx, align 4
  %div221 = sdiv i32 %140, 2
  %141 = load i32, i32* %x, align 4
  %add222 = add nsw i32 %div221, %141
  %142 = load i32, i32* %j, align 4
  %add223 = add nsw i32 %add222, %142
  %idxprom224 = sext i32 %add223 to i64
  %arrayidx225 = getelementptr inbounds [18 x i8], [18 x i8]* %139, i64 %idxprom224
  %143 = load i32, i32* %startblky, align 4
  %div226 = sdiv i32 %143, 2
  %144 = load i32, i32* %y, align 4
  %add227 = add nsw i32 %div226, %144
  %145 = load i32, i32* %i, align 4
  %add228 = add nsw i32 %add227, %145
  %idxprom229 = sext i32 %add228 to i64
  %arrayidx230 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx225, i64 0, i64 %idxprom229
  store i8 %138, i8* %arrayidx230, align 1
  br label %for.inc231

for.inc231:                                       ; preds = %for.body214
  %146 = load i32, i32* %j, align 4
  %inc232 = add nsw i32 %146, 1
  store i32 %inc232, i32* %j, align 4
  br label %for.cond209

for.end233:                                       ; preds = %for.cond209
  br label %for.inc234

for.inc234:                                       ; preds = %for.end233
  %147 = load i32, i32* %i, align 4
  %inc235 = add nsw i32 %147, 1
  store i32 %inc235, i32* %i, align 4
  br label %for.cond203

for.end236:                                       ; preds = %for.cond203
  br label %if.end272

if.else237:                                       ; preds = %if.else194
  store i32 0, i32* %i, align 4
  br label %for.cond238

for.cond238:                                      ; preds = %for.inc269, %if.else237
  %148 = load i32, i32* %i, align 4
  %149 = load i8, i8* %stepy, align 1
  %conv239 = zext i8 %149 to i32
  %div240 = sdiv i32 %conv239, 2
  %cmp241 = icmp slt i32 %148, %div240
  br i1 %cmp241, label %for.body243, label %for.end271

for.body243:                                      ; preds = %for.cond238
  store i32 0, i32* %j, align 4
  br label %for.cond244

for.cond244:                                      ; preds = %for.inc266, %for.body243
  %150 = load i32, i32* %j, align 4
  %151 = load i8, i8* %stepx, align 1
  %conv245 = zext i8 %151 to i32
  %div246 = sdiv i32 %conv245, 2
  %cmp247 = icmp slt i32 %150, %div246
  br i1 %cmp247, label %for.body249, label %for.end268

for.body249:                                      ; preds = %for.cond244
  %152 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %153 = load i32, i32* %x, align 4
  %154 = load i32, i32* %j, align 4
  %add250 = add nsw i32 %153, %154
  %idxprom251 = sext i32 %add250 to i64
  %arrayidx252 = getelementptr inbounds [2 x i8], [2 x i8]* %152, i64 %idxprom251
  %155 = load i32, i32* %y, align 4
  %156 = load i32, i32* %i, align 4
  %add253 = add nsw i32 %155, %156
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx252, i64 0, i64 %idxprom254
  store i8 -1, i8* %arrayidx255, align 1
  %157 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %158 = load i32, i32* %startblkx, align 4
  %div256 = sdiv i32 %158, 2
  %159 = load i32, i32* %x, align 4
  %add257 = add nsw i32 %div256, %159
  %160 = load i32, i32* %j, align 4
  %add258 = add nsw i32 %add257, %160
  %idxprom259 = sext i32 %add258 to i64
  %arrayidx260 = getelementptr inbounds [18 x i8], [18 x i8]* %157, i64 %idxprom259
  %161 = load i32, i32* %startblky, align 4
  %div261 = sdiv i32 %161, 2
  %162 = load i32, i32* %y, align 4
  %add262 = add nsw i32 %div261, %162
  %163 = load i32, i32* %i, align 4
  %add263 = add nsw i32 %add262, %163
  %idxprom264 = sext i32 %add263 to i64
  %arrayidx265 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx260, i64 0, i64 %idxprom264
  store i8 -1, i8* %arrayidx265, align 1
  br label %for.inc266

for.inc266:                                       ; preds = %for.body249
  %164 = load i32, i32* %j, align 4
  %inc267 = add nsw i32 %164, 1
  store i32 %inc267, i32* %j, align 4
  br label %for.cond244

for.end268:                                       ; preds = %for.cond244
  br label %for.inc269

for.inc269:                                       ; preds = %for.end268
  %165 = load i32, i32* %i, align 4
  %inc270 = add nsw i32 %165, 1
  store i32 %inc270, i32* %i, align 4
  br label %for.cond238

for.end271:                                       ; preds = %for.cond238
  br label %if.end272

if.end272:                                        ; preds = %for.end271, %for.end236
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %if.then166
  br label %for.inc274

for.inc274:                                       ; preds = %if.end273
  %166 = load i8, i8* %stepx, align 1
  %conv275 = zext i8 %166 to i32
  %div276 = sdiv i32 %conv275, 2
  %167 = load i32, i32* %x, align 4
  %add277 = add nsw i32 %167, %div276
  store i32 %add277, i32* %x, align 4
  br label %for.cond155

for.end278:                                       ; preds = %for.cond155
  br label %for.inc279

for.inc279:                                       ; preds = %for.end278
  %168 = load i8, i8* %stepy, align 1
  %conv280 = zext i8 %168 to i32
  %div281 = sdiv i32 %conv280, 2
  %169 = load i32, i32* %y, align 4
  %add282 = add nsw i32 %169, %div281
  store i32 %add282, i32* %y, align 4
  br label %for.cond151

for.end283:                                       ; preds = %for.cond151
  br label %if.end311

if.else284:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond285

for.cond285:                                      ; preds = %for.inc308, %if.else284
  %170 = load i32, i32* %i, align 4
  %cmp286 = icmp slt i32 %170, 2
  br i1 %cmp286, label %for.body288, label %for.end310, !prof !119

for.body288:                                      ; preds = %for.cond285
  store i32 0, i32* %j, align 4
  br label %for.cond289

for.cond289:                                      ; preds = %for.inc305, %for.body288
  %171 = load i32, i32* %j, align 4
  %cmp290 = icmp slt i32 %171, 2
  br i1 %cmp290, label %for.body292, label %for.end307, !prof !120

for.body292:                                      ; preds = %for.cond289
  %172 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %173 = load i32, i32* %j, align 4
  %idxprom293 = sext i32 %173 to i64
  %arrayidx294 = getelementptr inbounds [2 x i8], [2 x i8]* %172, i64 %idxprom293
  %174 = load i32, i32* %i, align 4
  %idxprom295 = sext i32 %174 to i64
  %arrayidx296 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx294, i64 0, i64 %idxprom295
  store i8 0, i8* %arrayidx296, align 1
  %175 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %176 = load i32, i32* %startblkx, align 4
  %div297 = sdiv i32 %176, 2
  %177 = load i32, i32* %j, align 4
  %add298 = add nsw i32 %div297, %177
  %idxprom299 = sext i32 %add298 to i64
  %arrayidx300 = getelementptr inbounds [18 x i8], [18 x i8]* %175, i64 %idxprom299
  %178 = load i32, i32* %startblky, align 4
  %div301 = sdiv i32 %178, 2
  %179 = load i32, i32* %i, align 4
  %add302 = add nsw i32 %div301, %179
  %idxprom303 = sext i32 %add302 to i64
  %arrayidx304 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx300, i64 0, i64 %idxprom303
  store i8 0, i8* %arrayidx304, align 1
  br label %for.inc305

for.inc305:                                       ; preds = %for.body292
  %180 = load i32, i32* %j, align 4
  %inc306 = add nsw i32 %180, 1
  store i32 %inc306, i32* %j, align 4
  br label %for.cond289

for.end307:                                       ; preds = %for.cond289
  br label %for.inc308

for.inc308:                                       ; preds = %for.end307
  %181 = load i32, i32* %i, align 4
  %inc309 = add nsw i32 %181, 1
  store i32 %inc309, i32* %i, align 4
  br label %for.cond285

for.end310:                                       ; preds = %for.cond285
  br label %if.end311

if.end311:                                        ; preds = %for.end310, %for.end283
  %182 = load i8, i8* %num_ref_idx_active1.addr, align 1
  %conv312 = zext i8 %182 to i32
  %cmp313 = icmp sgt i32 %conv312, 0
  br i1 %cmp313, label %if.then315, label %if.else425, !prof !121

if.then315:                                       ; preds = %if.end311
  store i32 0, i32* %y, align 4
  br label %for.cond316

for.cond316:                                      ; preds = %for.inc420, %if.then315
  %183 = load i32, i32* %y, align 4
  %cmp317 = icmp slt i32 %183, 2
  br i1 %cmp317, label %for.body319, label %for.end424, !prof !122

for.body319:                                      ; preds = %for.cond316
  store i32 0, i32* %x, align 4
  br label %for.cond320

for.cond320:                                      ; preds = %for.inc415, %for.body319
  %184 = load i32, i32* %x, align 4
  %cmp321 = icmp slt i32 %184, 2
  br i1 %cmp321, label %for.body323, label %for.end419, !prof !123

for.body323:                                      ; preds = %for.cond320
  %185 = load i32, i32* %x, align 4
  %idxprom324 = sext i32 %185 to i64
  %arrayidx325 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom324
  %186 = load i32, i32* %y, align 4
  %idxprom326 = sext i32 %186 to i64
  %arrayidx327 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx325, i64 0, i64 %idxprom326
  %187 = load i8, i8* %arrayidx327, align 1
  %conv328 = zext i8 %187 to i32
  %cmp329 = icmp eq i32 %conv328, 0
  br i1 %cmp329, label %if.then331, label %if.else332, !prof !124

if.then331:                                       ; preds = %for.body323
  br label %if.end414

if.else332:                                       ; preds = %for.body323
  %188 = load i32, i32* %x, align 4
  %idxprom333 = sext i32 %188 to i64
  %arrayidx334 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom333
  %189 = load i32, i32* %y, align 4
  %idxprom335 = sext i32 %189 to i64
  %arrayidx336 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx334, i64 0, i64 %idxprom335
  %190 = load i8, i8* %arrayidx336, align 1
  %conv337 = zext i8 %190 to i32
  %and338 = and i32 %conv337, 2
  %cmp339 = icmp ne i32 %and338, 0
  br i1 %cmp339, label %if.then341, label %if.else378, !prof !125

if.then341:                                       ; preds = %if.else332
  %191 = load i8, i8* %num_ref_idx_active1.addr, align 1
  %conv342 = zext i8 %191 to i32
  %192 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %193 = load i8*, i8** %nalu_buf.addr, align 8
  %194 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call343 = call zeroext i8 @t_e(i32 %conv342, %struct.NALU_t* %192, i8* %193, i64* %194)
  store i8 %call343, i8* %refidx, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond344

for.cond344:                                      ; preds = %for.inc375, %if.then341
  %195 = load i32, i32* %i, align 4
  %196 = load i8, i8* %stepy, align 1
  %conv345 = zext i8 %196 to i32
  %div346 = sdiv i32 %conv345, 2
  %cmp347 = icmp slt i32 %195, %div346
  br i1 %cmp347, label %for.body349, label %for.end377

for.body349:                                      ; preds = %for.cond344
  store i32 0, i32* %j, align 4
  br label %for.cond350

for.cond350:                                      ; preds = %for.inc372, %for.body349
  %197 = load i32, i32* %j, align 4
  %198 = load i8, i8* %stepx, align 1
  %conv351 = zext i8 %198 to i32
  %div352 = sdiv i32 %conv351, 2
  %cmp353 = icmp slt i32 %197, %div352
  br i1 %cmp353, label %for.body355, label %for.end374

for.body355:                                      ; preds = %for.cond350
  %199 = load i8, i8* %refidx, align 1
  %200 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %201 = load i32, i32* %x, align 4
  %202 = load i32, i32* %j, align 4
  %add356 = add nsw i32 %201, %202
  %idxprom357 = sext i32 %add356 to i64
  %arrayidx358 = getelementptr inbounds [2 x i8], [2 x i8]* %200, i64 %idxprom357
  %203 = load i32, i32* %y, align 4
  %204 = load i32, i32* %i, align 4
  %add359 = add nsw i32 %203, %204
  %idxprom360 = sext i32 %add359 to i64
  %arrayidx361 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx358, i64 0, i64 %idxprom360
  store i8 %199, i8* %arrayidx361, align 1
  %205 = load i8, i8* %refidx, align 1
  %206 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %207 = load i32, i32* %startblkx, align 4
  %div362 = sdiv i32 %207, 2
  %208 = load i32, i32* %x, align 4
  %add363 = add nsw i32 %div362, %208
  %209 = load i32, i32* %j, align 4
  %add364 = add nsw i32 %add363, %209
  %idxprom365 = sext i32 %add364 to i64
  %arrayidx366 = getelementptr inbounds [18 x i8], [18 x i8]* %206, i64 %idxprom365
  %210 = load i32, i32* %startblky, align 4
  %div367 = sdiv i32 %210, 2
  %211 = load i32, i32* %y, align 4
  %add368 = add nsw i32 %div367, %211
  %212 = load i32, i32* %i, align 4
  %add369 = add nsw i32 %add368, %212
  %idxprom370 = sext i32 %add369 to i64
  %arrayidx371 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx366, i64 0, i64 %idxprom370
  store i8 %205, i8* %arrayidx371, align 1
  br label %for.inc372

for.inc372:                                       ; preds = %for.body355
  %213 = load i32, i32* %j, align 4
  %inc373 = add nsw i32 %213, 1
  store i32 %inc373, i32* %j, align 4
  br label %for.cond350

for.end374:                                       ; preds = %for.cond350
  br label %for.inc375

for.inc375:                                       ; preds = %for.end374
  %214 = load i32, i32* %i, align 4
  %inc376 = add nsw i32 %214, 1
  store i32 %inc376, i32* %i, align 4
  br label %for.cond344

for.end377:                                       ; preds = %for.cond344
  br label %if.end413

if.else378:                                       ; preds = %if.else332
  store i32 0, i32* %i, align 4
  br label %for.cond379

for.cond379:                                      ; preds = %for.inc410, %if.else378
  %215 = load i32, i32* %i, align 4
  %216 = load i8, i8* %stepy, align 1
  %conv380 = zext i8 %216 to i32
  %div381 = sdiv i32 %conv380, 2
  %cmp382 = icmp slt i32 %215, %div381
  br i1 %cmp382, label %for.body384, label %for.end412, !prof !126

for.body384:                                      ; preds = %for.cond379
  store i32 0, i32* %j, align 4
  br label %for.cond385

for.cond385:                                      ; preds = %for.inc407, %for.body384
  %217 = load i32, i32* %j, align 4
  %218 = load i8, i8* %stepx, align 1
  %conv386 = zext i8 %218 to i32
  %div387 = sdiv i32 %conv386, 2
  %cmp388 = icmp slt i32 %217, %div387
  br i1 %cmp388, label %for.body390, label %for.end409, !prof !127

for.body390:                                      ; preds = %for.cond385
  %219 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %220 = load i32, i32* %x, align 4
  %221 = load i32, i32* %j, align 4
  %add391 = add nsw i32 %220, %221
  %idxprom392 = sext i32 %add391 to i64
  %arrayidx393 = getelementptr inbounds [2 x i8], [2 x i8]* %219, i64 %idxprom392
  %222 = load i32, i32* %y, align 4
  %223 = load i32, i32* %i, align 4
  %add394 = add nsw i32 %222, %223
  %idxprom395 = sext i32 %add394 to i64
  %arrayidx396 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx393, i64 0, i64 %idxprom395
  store i8 -1, i8* %arrayidx396, align 1
  %224 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %225 = load i32, i32* %startblkx, align 4
  %div397 = sdiv i32 %225, 2
  %226 = load i32, i32* %x, align 4
  %add398 = add nsw i32 %div397, %226
  %227 = load i32, i32* %j, align 4
  %add399 = add nsw i32 %add398, %227
  %idxprom400 = sext i32 %add399 to i64
  %arrayidx401 = getelementptr inbounds [18 x i8], [18 x i8]* %224, i64 %idxprom400
  %228 = load i32, i32* %startblky, align 4
  %div402 = sdiv i32 %228, 2
  %229 = load i32, i32* %y, align 4
  %add403 = add nsw i32 %div402, %229
  %230 = load i32, i32* %i, align 4
  %add404 = add nsw i32 %add403, %230
  %idxprom405 = sext i32 %add404 to i64
  %arrayidx406 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx401, i64 0, i64 %idxprom405
  store i8 -1, i8* %arrayidx406, align 1
  br label %for.inc407

for.inc407:                                       ; preds = %for.body390
  %231 = load i32, i32* %j, align 4
  %inc408 = add nsw i32 %231, 1
  store i32 %inc408, i32* %j, align 4
  br label %for.cond385

for.end409:                                       ; preds = %for.cond385
  br label %for.inc410

for.inc410:                                       ; preds = %for.end409
  %232 = load i32, i32* %i, align 4
  %inc411 = add nsw i32 %232, 1
  store i32 %inc411, i32* %i, align 4
  br label %for.cond379

for.end412:                                       ; preds = %for.cond379
  br label %if.end413

if.end413:                                        ; preds = %for.end412, %for.end377
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.then331
  br label %for.inc415

for.inc415:                                       ; preds = %if.end414
  %233 = load i8, i8* %stepx, align 1
  %conv416 = zext i8 %233 to i32
  %div417 = sdiv i32 %conv416, 2
  %234 = load i32, i32* %x, align 4
  %add418 = add nsw i32 %234, %div417
  store i32 %add418, i32* %x, align 4
  br label %for.cond320

for.end419:                                       ; preds = %for.cond320
  br label %for.inc420

for.inc420:                                       ; preds = %for.end419
  %235 = load i8, i8* %stepy, align 1
  %conv421 = zext i8 %235 to i32
  %div422 = sdiv i32 %conv421, 2
  %236 = load i32, i32* %y, align 4
  %add423 = add nsw i32 %236, %div422
  store i32 %add423, i32* %y, align 4
  br label %for.cond316

for.end424:                                       ; preds = %for.cond316
  br label %if.end452

if.else425:                                       ; preds = %if.end311
  store i32 0, i32* %i, align 4
  br label %for.cond426

for.cond426:                                      ; preds = %for.inc449, %if.else425
  %237 = load i32, i32* %i, align 4
  %cmp427 = icmp slt i32 %237, 2
  br i1 %cmp427, label %for.body429, label %for.end451

for.body429:                                      ; preds = %for.cond426
  store i32 0, i32* %j, align 4
  br label %for.cond430

for.cond430:                                      ; preds = %for.inc446, %for.body429
  %238 = load i32, i32* %j, align 4
  %cmp431 = icmp slt i32 %238, 2
  br i1 %cmp431, label %for.body433, label %for.end448

for.body433:                                      ; preds = %for.cond430
  %239 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %240 = load i32, i32* %j, align 4
  %idxprom434 = sext i32 %240 to i64
  %arrayidx435 = getelementptr inbounds [2 x i8], [2 x i8]* %239, i64 %idxprom434
  %241 = load i32, i32* %i, align 4
  %idxprom436 = sext i32 %241 to i64
  %arrayidx437 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx435, i64 0, i64 %idxprom436
  store i8 0, i8* %arrayidx437, align 1
  %242 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %243 = load i32, i32* %startblkx, align 4
  %div438 = sdiv i32 %243, 2
  %244 = load i32, i32* %j, align 4
  %add439 = add nsw i32 %div438, %244
  %idxprom440 = sext i32 %add439 to i64
  %arrayidx441 = getelementptr inbounds [18 x i8], [18 x i8]* %242, i64 %idxprom440
  %245 = load i32, i32* %startblky, align 4
  %div442 = sdiv i32 %245, 2
  %246 = load i32, i32* %i, align 4
  %add443 = add nsw i32 %div442, %246
  %idxprom444 = sext i32 %add443 to i64
  %arrayidx445 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx441, i64 0, i64 %idxprom444
  store i8 0, i8* %arrayidx445, align 1
  br label %for.inc446

for.inc446:                                       ; preds = %for.body433
  %247 = load i32, i32* %j, align 4
  %inc447 = add nsw i32 %247, 1
  store i32 %inc447, i32* %j, align 4
  br label %for.cond430

for.end448:                                       ; preds = %for.cond430
  br label %for.inc449

for.inc449:                                       ; preds = %for.end448
  %248 = load i32, i32* %i, align 4
  %inc450 = add nsw i32 %248, 1
  store i32 %inc450, i32* %i, align 4
  br label %for.cond426

for.end451:                                       ; preds = %for.cond426
  br label %if.end452

if.end452:                                        ; preds = %for.end451, %for.end424
  br label %if.end453

if.end453:                                        ; preds = %if.end452, %for.end146
  store i8 0, i8* %stpw, align 1
  store i8 0, i8* %stph, align 1
  store i32 0, i32* %y, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc747, %if.end453
  %249 = load i32, i32* %y, align 4
  %cmp455 = icmp slt i32 %249, 4
  br i1 %cmp455, label %for.body457, label %for.end750, !prof !128

for.body457:                                      ; preds = %for.cond454
  store i32 0, i32* %x, align 4
  br label %for.cond458

for.cond458:                                      ; preds = %for.inc743, %for.body457
  %250 = load i32, i32* %x, align 4
  %cmp459 = icmp slt i32 %250, 4
  br i1 %cmp459, label %for.body461, label %for.end746, !prof !129

for.body461:                                      ; preds = %for.cond458
  %251 = load i32, i32* %x, align 4
  %shr = ashr i32 %251, 1
  %idxprom462 = sext i32 %shr to i64
  %arrayidx463 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom462
  %252 = load i32, i32* %y, align 4
  %shr464 = ashr i32 %252, 1
  %idxprom465 = sext i32 %shr464 to i64
  %arrayidx466 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx463, i64 0, i64 %idxprom465
  %253 = load i8, i8* %arrayidx466, align 1
  %conv467 = zext i8 %253 to i32
  %cmp468 = icmp eq i32 %conv467, 0
  br i1 %cmp468, label %if.then470, label %if.else593, !prof !130

if.then470:                                       ; preds = %for.body461
  %254 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %255 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %256 = load i32, i32* %startblkx, align 4
  %257 = load i32, i32* %startblky, align 4
  %258 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %259 = load i32, i32* %x, align 4
  %div471 = sdiv i32 %259, 2
  %idxprom472 = sext i32 %div471 to i64
  %arrayidx473 = getelementptr inbounds [2 x i8], [2 x i8]* %258, i64 %idxprom472
  %260 = load i32, i32* %y, align 4
  %div474 = sdiv i32 %260, 2
  %idxprom475 = sext i32 %div474 to i64
  %arrayidx476 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx473, i64 0, i64 %idxprom475
  %261 = load i8, i8* %arrayidx476, align 1
  %conv477 = sext i8 %261 to i32
  %arraydecay478 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i32 0, i32 0
  call void @findmv([18 x i8]* %254, [36 x [2 x i32]]* %255, i32 %256, i32 %257, i32 0, i32 4, i32 0, i32 0, i32 %conv477, i32* %arraydecay478, i8 zeroext 0, i8 zeroext 0)
  %262 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %263 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %264 = load i32, i32* %startblkx, align 4
  %265 = load i32, i32* %startblky, align 4
  %266 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %267 = load i32, i32* %x, align 4
  %div479 = sdiv i32 %267, 2
  %idxprom480 = sext i32 %div479 to i64
  %arrayidx481 = getelementptr inbounds [2 x i8], [2 x i8]* %266, i64 %idxprom480
  %268 = load i32, i32* %y, align 4
  %div482 = sdiv i32 %268, 2
  %idxprom483 = sext i32 %div482 to i64
  %arrayidx484 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx481, i64 0, i64 %idxprom483
  %269 = load i8, i8* %arrayidx484, align 1
  %conv485 = sext i8 %269 to i32
  %arraydecay486 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i32 0, i32 0
  call void @findmv([18 x i8]* %262, [36 x [2 x i32]]* %263, i32 %264, i32 %265, i32 0, i32 4, i32 0, i32 0, i32 %conv485, i32* %arraydecay486, i8 zeroext 0, i8 zeroext 0)
  store i32 0, i32* %i, align 4
  br label %for.cond487

for.cond487:                                      ; preds = %for.inc590, %if.then470
  %270 = load i32, i32* %i, align 4
  %cmp488 = icmp slt i32 %270, 2
  br i1 %cmp488, label %for.body490, label %for.end592, !prof !131

for.body490:                                      ; preds = %for.cond487
  store i32 0, i32* %j, align 4
  br label %for.cond491

for.cond491:                                      ; preds = %for.inc587, %for.body490
  %271 = load i32, i32* %j, align 4
  %cmp492 = icmp slt i32 %271, 2
  br i1 %cmp492, label %for.body494, label %for.end589, !prof !132

for.body494:                                      ; preds = %for.cond491
  %arrayidx495 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i64 0, i64 0
  %272 = load i32, i32* %arrayidx495, align 4
  %arrayidx496 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  store i32 %272, i32* %arrayidx496, align 4
  %arrayidx497 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i64 0, i64 1
  %273 = load i32, i32* %arrayidx497, align 4
  %arrayidx498 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  store i32 %273, i32* %arrayidx498, align 4
  %arrayidx499 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i64 0, i64 0
  %274 = load i32, i32* %arrayidx499, align 4
  %arrayidx500 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 0
  store i32 %274, i32* %arrayidx500, align 4
  %arrayidx501 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i64 0, i64 1
  %275 = load i32, i32* %arrayidx501, align 4
  %arrayidx502 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 1
  store i32 %275, i32* %arrayidx502, align 4
  %276 = load i8, i8* %dflag, align 1
  %277 = load [2 x i8]*, [2 x i8]** %refcol.addr, align 8
  %278 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %279 = load i32, i32* %x, align 4
  %280 = load i32, i32* %i, align 4
  %add503 = add nsw i32 %279, %280
  %281 = load i32, i32* %y, align 4
  %282 = load i32, i32* %j, align 4
  %add504 = add nsw i32 %281, %282
  %arraydecay505 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i32 0, i32 0
  %arraydecay506 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %283 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %284 = load i32, i32* %x, align 4
  %div507 = sdiv i32 %284, 2
  %idxprom508 = sext i32 %div507 to i64
  %arrayidx509 = getelementptr inbounds [2 x i8], [2 x i8]* %283, i64 %idxprom508
  %285 = load i32, i32* %y, align 4
  %div510 = sdiv i32 %285, 2
  %idxprom511 = sext i32 %div510 to i64
  %arrayidx512 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx509, i64 0, i64 %idxprom511
  %286 = load i8, i8* %arrayidx512, align 1
  %287 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %288 = load i32, i32* %x, align 4
  %div513 = sdiv i32 %288, 2
  %idxprom514 = sext i32 %div513 to i64
  %arrayidx515 = getelementptr inbounds [2 x i8], [2 x i8]* %287, i64 %idxprom514
  %289 = load i32, i32* %y, align 4
  %div516 = sdiv i32 %289, 2
  %idxprom517 = sext i32 %div516 to i64
  %arrayidx518 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx515, i64 0, i64 %idxprom517
  %290 = load i8, i8* %arrayidx518, align 1
  call void @find_directmv_flag(i8 zeroext %276, [2 x i8]* %277, [4 x [2 x i32]]* %278, i32 %add503, i32 %add504, i32* %arraydecay505, i32* %arraydecay506, i8 signext %286, i8 signext %290)
  %arrayidx519 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %291 = load i32, i32* %arrayidx519, align 4
  %292 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %293 = load i32, i32* %startblkx, align 4
  %294 = load i32, i32* %x, align 4
  %add520 = add nsw i32 %293, %294
  %295 = load i32, i32* %i, align 4
  %add521 = add nsw i32 %add520, %295
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %292, i64 %idxprom522
  %296 = load i32, i32* %startblky, align 4
  %297 = load i32, i32* %y, align 4
  %add524 = add nsw i32 %296, %297
  %298 = load i32, i32* %j, align 4
  %add525 = add nsw i32 %add524, %298
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx523, i64 0, i64 %idxprom526
  %arrayidx528 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx527, i64 0, i64 0
  store i32 %291, i32* %arrayidx528, align 4
  %299 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %300 = load i32, i32* %x, align 4
  %301 = load i32, i32* %i, align 4
  %add529 = add nsw i32 %300, %301
  %idxprom530 = sext i32 %add529 to i64
  %arrayidx531 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %299, i64 %idxprom530
  %302 = load i32, i32* %y, align 4
  %303 = load i32, i32* %j, align 4
  %add532 = add nsw i32 %302, %303
  %idxprom533 = sext i32 %add532 to i64
  %arrayidx534 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx531, i64 0, i64 %idxprom533
  %arrayidx535 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx534, i64 0, i64 0
  store i32 %291, i32* %arrayidx535, align 4
  %arrayidx536 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %304 = load i32, i32* %arrayidx536, align 4
  %305 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %306 = load i32, i32* %startblkx, align 4
  %307 = load i32, i32* %x, align 4
  %add537 = add nsw i32 %306, %307
  %308 = load i32, i32* %i, align 4
  %add538 = add nsw i32 %add537, %308
  %idxprom539 = sext i32 %add538 to i64
  %arrayidx540 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %305, i64 %idxprom539
  %309 = load i32, i32* %startblky, align 4
  %310 = load i32, i32* %y, align 4
  %add541 = add nsw i32 %309, %310
  %311 = load i32, i32* %j, align 4
  %add542 = add nsw i32 %add541, %311
  %idxprom543 = sext i32 %add542 to i64
  %arrayidx544 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx540, i64 0, i64 %idxprom543
  %arrayidx545 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx544, i64 0, i64 1
  store i32 %304, i32* %arrayidx545, align 4
  %312 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %313 = load i32, i32* %x, align 4
  %314 = load i32, i32* %i, align 4
  %add546 = add nsw i32 %313, %314
  %idxprom547 = sext i32 %add546 to i64
  %arrayidx548 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %312, i64 %idxprom547
  %315 = load i32, i32* %y, align 4
  %316 = load i32, i32* %j, align 4
  %add549 = add nsw i32 %315, %316
  %idxprom550 = sext i32 %add549 to i64
  %arrayidx551 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx548, i64 0, i64 %idxprom550
  %arrayidx552 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx551, i64 0, i64 1
  store i32 %304, i32* %arrayidx552, align 4
  %arrayidx553 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 0
  %317 = load i32, i32* %arrayidx553, align 4
  %318 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %319 = load i32, i32* %startblkx, align 4
  %320 = load i32, i32* %x, align 4
  %add554 = add nsw i32 %319, %320
  %321 = load i32, i32* %i, align 4
  %add555 = add nsw i32 %add554, %321
  %idxprom556 = sext i32 %add555 to i64
  %arrayidx557 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %318, i64 %idxprom556
  %322 = load i32, i32* %startblky, align 4
  %323 = load i32, i32* %y, align 4
  %add558 = add nsw i32 %322, %323
  %324 = load i32, i32* %j, align 4
  %add559 = add nsw i32 %add558, %324
  %idxprom560 = sext i32 %add559 to i64
  %arrayidx561 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx557, i64 0, i64 %idxprom560
  %arrayidx562 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx561, i64 0, i64 0
  store i32 %317, i32* %arrayidx562, align 4
  %325 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %326 = load i32, i32* %x, align 4
  %327 = load i32, i32* %i, align 4
  %add563 = add nsw i32 %326, %327
  %idxprom564 = sext i32 %add563 to i64
  %arrayidx565 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %325, i64 %idxprom564
  %328 = load i32, i32* %y, align 4
  %329 = load i32, i32* %j, align 4
  %add566 = add nsw i32 %328, %329
  %idxprom567 = sext i32 %add566 to i64
  %arrayidx568 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx565, i64 0, i64 %idxprom567
  %arrayidx569 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx568, i64 0, i64 0
  store i32 %317, i32* %arrayidx569, align 4
  %arrayidx570 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 1
  %330 = load i32, i32* %arrayidx570, align 4
  %331 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %332 = load i32, i32* %startblkx, align 4
  %333 = load i32, i32* %x, align 4
  %add571 = add nsw i32 %332, %333
  %334 = load i32, i32* %i, align 4
  %add572 = add nsw i32 %add571, %334
  %idxprom573 = sext i32 %add572 to i64
  %arrayidx574 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %331, i64 %idxprom573
  %335 = load i32, i32* %startblky, align 4
  %336 = load i32, i32* %y, align 4
  %add575 = add nsw i32 %335, %336
  %337 = load i32, i32* %j, align 4
  %add576 = add nsw i32 %add575, %337
  %idxprom577 = sext i32 %add576 to i64
  %arrayidx578 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx574, i64 0, i64 %idxprom577
  %arrayidx579 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx578, i64 0, i64 1
  store i32 %330, i32* %arrayidx579, align 4
  %338 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %339 = load i32, i32* %x, align 4
  %340 = load i32, i32* %i, align 4
  %add580 = add nsw i32 %339, %340
  %idxprom581 = sext i32 %add580 to i64
  %arrayidx582 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %338, i64 %idxprom581
  %341 = load i32, i32* %y, align 4
  %342 = load i32, i32* %j, align 4
  %add583 = add nsw i32 %341, %342
  %idxprom584 = sext i32 %add583 to i64
  %arrayidx585 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx582, i64 0, i64 %idxprom584
  %arrayidx586 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx585, i64 0, i64 1
  store i32 %330, i32* %arrayidx586, align 4
  br label %for.inc587

for.inc587:                                       ; preds = %for.body494
  %343 = load i32, i32* %j, align 4
  %inc588 = add nsw i32 %343, 1
  store i32 %inc588, i32* %j, align 4
  br label %for.cond491

for.end589:                                       ; preds = %for.cond491
  br label %for.inc590

for.inc590:                                       ; preds = %for.end589
  %344 = load i32, i32* %i, align 4
  %inc591 = add nsw i32 %344, 1
  store i32 %inc591, i32* %i, align 4
  br label %for.cond487

for.end592:                                       ; preds = %for.cond487
  br label %if.end742

if.else593:                                       ; preds = %for.body461
  %345 = load i32, i32* %x, align 4
  %shr594 = ashr i32 %345, 1
  %idxprom595 = sext i32 %shr594 to i64
  %arrayidx596 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom595
  %346 = load i32, i32* %y, align 4
  %shr597 = ashr i32 %346, 1
  %idxprom598 = sext i32 %shr597 to i64
  %arrayidx599 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx596, i64 0, i64 %idxprom598
  %347 = load i8, i8* %arrayidx599, align 1
  %conv600 = zext i8 %347 to i32
  %and601 = and i32 %conv600, 1
  %tobool602 = icmp ne i32 %and601, 0
  br i1 %tobool602, label %if.then603, label %if.end741, !prof !133

if.then603:                                       ; preds = %if.else593
  %348 = load i32, i32* %x, align 4
  %shr604 = ashr i32 %348, 1
  %idxprom605 = sext i32 %shr604 to i64
  %arrayidx606 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom605
  %349 = load i32, i32* %y, align 4
  %shr607 = ashr i32 %349, 1
  %idxprom608 = sext i32 %shr607 to i64
  %arrayidx609 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx606, i64 0, i64 %idxprom608
  %350 = load i8, i8* %arrayidx609, align 1
  store i8 %350, i8* %stpw, align 1
  %351 = load i32, i32* %x, align 4
  %shr610 = ashr i32 %351, 1
  %idxprom611 = sext i32 %shr610 to i64
  %arrayidx612 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom611
  %352 = load i32, i32* %y, align 4
  %shr613 = ashr i32 %352, 1
  %idxprom614 = sext i32 %shr613 to i64
  %arrayidx615 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx612, i64 0, i64 %idxprom614
  %353 = load i8, i8* %arrayidx615, align 1
  store i8 %353, i8* %stph, align 1
  store i32 0, i32* %suby, align 4
  br label %for.cond616

for.cond616:                                      ; preds = %for.inc737, %if.then603
  %354 = load i32, i32* %suby, align 4
  %355 = load i8, i8* %stepy, align 1
  %conv617 = zext i8 %355 to i32
  %cmp618 = icmp slt i32 %354, %conv617
  br i1 %cmp618, label %for.body620, label %for.end740, !prof !134

for.body620:                                      ; preds = %for.cond616
  store i32 0, i32* %subx, align 4
  br label %for.cond621

for.cond621:                                      ; preds = %for.inc733, %for.body620
  %356 = load i32, i32* %subx, align 4
  %357 = load i8, i8* %stepx, align 1
  %conv622 = zext i8 %357 to i32
  %cmp623 = icmp slt i32 %356, %conv622
  br i1 %cmp623, label %for.body625, label %for.end736, !prof !134

for.body625:                                      ; preds = %for.cond621
  %358 = load i32, i32* %skipflag.addr, align 4
  %cmp626 = icmp ne i32 %358, 1
  br i1 %cmp626, label %if.then628, label %if.else631, !prof !135

if.then628:                                       ; preds = %for.body625
  %359 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %360 = load i8*, i8** %nalu_buf.addr, align 8
  %361 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call629 = call i32 @s_e(%struct.NALU_t* %359, i8* %360, i64* %361)
  store i32 %call629, i32* %mvdx, align 4
  %362 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %363 = load i8*, i8** %nalu_buf.addr, align 8
  %364 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call630 = call i32 @s_e(%struct.NALU_t* %362, i8* %363, i64* %364)
  store i32 %call630, i32* %mvdy, align 4
  br label %if.end632

if.else631:                                       ; preds = %for.body625
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  br label %if.end632

if.end632:                                        ; preds = %if.else631, %if.then628
  %365 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %366 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %367 = load i32, i32* %startblkx, align 4
  %368 = load i32, i32* %startblky, align 4
  %369 = load i32, i32* %y, align 4
  %370 = load i32, i32* %suby, align 4
  %add633 = add nsw i32 %369, %370
  %and634 = and i32 %add633, 2
  %cmp635 = icmp ne i32 %and634, 0
  %conv636 = zext i1 %cmp635 to i32
  %mul637 = mul nsw i32 %conv636, 8
  %371 = load i32, i32* %x, align 4
  %372 = load i32, i32* %subx, align 4
  %add638 = add nsw i32 %371, %372
  %and639 = and i32 %add638, 2
  %cmp640 = icmp ne i32 %and639, 0
  %conv641 = zext i1 %cmp640 to i32
  %mul642 = mul nsw i32 %conv641, 4
  %add643 = add nsw i32 %mul637, %mul642
  %373 = load i32, i32* %y, align 4
  %374 = load i32, i32* %suby, align 4
  %add644 = add nsw i32 %373, %374
  %and645 = and i32 %add644, 1
  %cmp646 = icmp ne i32 %and645, 0
  %conv647 = zext i1 %cmp646 to i32
  %mul648 = mul nsw i32 %conv647, 2
  %add649 = add nsw i32 %add643, %mul648
  %375 = load i32, i32* %x, align 4
  %376 = load i32, i32* %subx, align 4
  %add650 = add nsw i32 %375, %376
  %and651 = and i32 %add650, 1
  %cmp652 = icmp ne i32 %and651, 0
  %conv653 = zext i1 %cmp652 to i32
  %add654 = add nsw i32 %add649, %conv653
  %377 = load i8, i8* %stpw, align 1
  %conv655 = zext i8 %377 to i32
  %378 = load i32, i32* %x, align 4
  %379 = load i32, i32* %subx, align 4
  %add656 = add nsw i32 %378, %379
  %380 = load i32, i32* %y, align 4
  %381 = load i32, i32* %suby, align 4
  %add657 = add nsw i32 %380, %381
  %382 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %383 = load i32, i32* %x, align 4
  %div658 = sdiv i32 %383, 2
  %idxprom659 = sext i32 %div658 to i64
  %arrayidx660 = getelementptr inbounds [2 x i8], [2 x i8]* %382, i64 %idxprom659
  %384 = load i32, i32* %y, align 4
  %div661 = sdiv i32 %384, 2
  %idxprom662 = sext i32 %div661 to i64
  %arrayidx663 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx660, i64 0, i64 %idxprom662
  %385 = load i8, i8* %arrayidx663, align 1
  %conv664 = sext i8 %385 to i32
  %arraydecay665 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %386 = load i32, i32* %x, align 4
  %div666 = sdiv i32 %386, 2
  %idxprom667 = sext i32 %div666 to i64
  %arrayidx668 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 %idxprom667
  %387 = load i32, i32* %y, align 4
  %div669 = sdiv i32 %387, 2
  %idxprom670 = sext i32 %div669 to i64
  %arrayidx671 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx668, i64 0, i64 %idxprom670
  %388 = load i8, i8* %arrayidx671, align 1
  %389 = load i32, i32* %skipflag.addr, align 4
  %conv672 = trunc i32 %389 to i8
  call void @findmv([18 x i8]* %365, [36 x [2 x i32]]* %366, i32 %367, i32 %368, i32 %add654, i32 %conv655, i32 %add656, i32 %add657, i32 %conv664, i32* %arraydecay665, i8 zeroext %388, i8 zeroext %conv672)
  store i32 0, i32* %i, align 4
  br label %for.cond673

for.cond673:                                      ; preds = %for.inc730, %if.end632
  %390 = load i32, i32* %i, align 4
  %391 = load i8, i8* %stpw, align 1
  %conv674 = zext i8 %391 to i32
  %cmp675 = icmp slt i32 %390, %conv674
  br i1 %cmp675, label %for.body677, label %for.end732, !prof !136

for.body677:                                      ; preds = %for.cond673
  store i32 0, i32* %j, align 4
  br label %for.cond678

for.cond678:                                      ; preds = %for.inc727, %for.body677
  %392 = load i32, i32* %j, align 4
  %393 = load i8, i8* %stph, align 1
  %conv679 = zext i8 %393 to i32
  %cmp680 = icmp slt i32 %392, %conv679
  br i1 %cmp680, label %for.body682, label %for.end729, !prof !137

for.body682:                                      ; preds = %for.cond678
  %394 = load i32, i32* %mvdx, align 4
  %arrayidx683 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %395 = load i32, i32* %arrayidx683, align 4
  %add684 = add nsw i32 %394, %395
  %396 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %397 = load i32, i32* %startblkx, align 4
  %398 = load i32, i32* %x, align 4
  %add685 = add nsw i32 %397, %398
  %399 = load i32, i32* %subx, align 4
  %add686 = add nsw i32 %add685, %399
  %400 = load i32, i32* %i, align 4
  %add687 = add nsw i32 %add686, %400
  %idxprom688 = sext i32 %add687 to i64
  %arrayidx689 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %396, i64 %idxprom688
  %401 = load i32, i32* %startblky, align 4
  %402 = load i32, i32* %y, align 4
  %add690 = add nsw i32 %401, %402
  %403 = load i32, i32* %suby, align 4
  %add691 = add nsw i32 %add690, %403
  %404 = load i32, i32* %j, align 4
  %add692 = add nsw i32 %add691, %404
  %idxprom693 = sext i32 %add692 to i64
  %arrayidx694 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx689, i64 0, i64 %idxprom693
  %arrayidx695 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx694, i64 0, i64 0
  store i32 %add684, i32* %arrayidx695, align 4
  %405 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %406 = load i32, i32* %x, align 4
  %407 = load i32, i32* %subx, align 4
  %add696 = add nsw i32 %406, %407
  %408 = load i32, i32* %i, align 4
  %add697 = add nsw i32 %add696, %408
  %idxprom698 = sext i32 %add697 to i64
  %arrayidx699 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %405, i64 %idxprom698
  %409 = load i32, i32* %y, align 4
  %410 = load i32, i32* %suby, align 4
  %add700 = add nsw i32 %409, %410
  %411 = load i32, i32* %j, align 4
  %add701 = add nsw i32 %add700, %411
  %idxprom702 = sext i32 %add701 to i64
  %arrayidx703 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx699, i64 0, i64 %idxprom702
  %arrayidx704 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx703, i64 0, i64 0
  store i32 %add684, i32* %arrayidx704, align 4
  %412 = load i32, i32* %mvdy, align 4
  %arrayidx705 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %413 = load i32, i32* %arrayidx705, align 4
  %add706 = add nsw i32 %412, %413
  %414 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %415 = load i32, i32* %startblkx, align 4
  %416 = load i32, i32* %x, align 4
  %add707 = add nsw i32 %415, %416
  %417 = load i32, i32* %subx, align 4
  %add708 = add nsw i32 %add707, %417
  %418 = load i32, i32* %i, align 4
  %add709 = add nsw i32 %add708, %418
  %idxprom710 = sext i32 %add709 to i64
  %arrayidx711 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %414, i64 %idxprom710
  %419 = load i32, i32* %startblky, align 4
  %420 = load i32, i32* %y, align 4
  %add712 = add nsw i32 %419, %420
  %421 = load i32, i32* %suby, align 4
  %add713 = add nsw i32 %add712, %421
  %422 = load i32, i32* %j, align 4
  %add714 = add nsw i32 %add713, %422
  %idxprom715 = sext i32 %add714 to i64
  %arrayidx716 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx711, i64 0, i64 %idxprom715
  %arrayidx717 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx716, i64 0, i64 1
  store i32 %add706, i32* %arrayidx717, align 4
  %423 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %424 = load i32, i32* %x, align 4
  %425 = load i32, i32* %subx, align 4
  %add718 = add nsw i32 %424, %425
  %426 = load i32, i32* %i, align 4
  %add719 = add nsw i32 %add718, %426
  %idxprom720 = sext i32 %add719 to i64
  %arrayidx721 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %423, i64 %idxprom720
  %427 = load i32, i32* %y, align 4
  %428 = load i32, i32* %suby, align 4
  %add722 = add nsw i32 %427, %428
  %429 = load i32, i32* %j, align 4
  %add723 = add nsw i32 %add722, %429
  %idxprom724 = sext i32 %add723 to i64
  %arrayidx725 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx721, i64 0, i64 %idxprom724
  %arrayidx726 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx725, i64 0, i64 1
  store i32 %add706, i32* %arrayidx726, align 4
  br label %for.inc727

for.inc727:                                       ; preds = %for.body682
  %430 = load i32, i32* %j, align 4
  %inc728 = add nsw i32 %430, 1
  store i32 %inc728, i32* %j, align 4
  br label %for.cond678

for.end729:                                       ; preds = %for.cond678
  br label %for.inc730

for.inc730:                                       ; preds = %for.end729
  %431 = load i32, i32* %i, align 4
  %inc731 = add nsw i32 %431, 1
  store i32 %inc731, i32* %i, align 4
  br label %for.cond673

for.end732:                                       ; preds = %for.cond673
  br label %for.inc733

for.inc733:                                       ; preds = %for.end732
  %432 = load i8, i8* %stpw, align 1
  %conv734 = zext i8 %432 to i32
  %433 = load i32, i32* %subx, align 4
  %add735 = add nsw i32 %433, %conv734
  store i32 %add735, i32* %subx, align 4
  br label %for.cond621

for.end736:                                       ; preds = %for.cond621
  br label %for.inc737

for.inc737:                                       ; preds = %for.end736
  %434 = load i8, i8* %stph, align 1
  %conv738 = zext i8 %434 to i32
  %435 = load i32, i32* %suby, align 4
  %add739 = add nsw i32 %435, %conv738
  store i32 %add739, i32* %suby, align 4
  br label %for.cond616

for.end740:                                       ; preds = %for.cond616
  br label %if.end741

if.end741:                                        ; preds = %for.end740, %if.else593
  br label %if.end742

if.end742:                                        ; preds = %if.end741, %for.end592
  br label %for.inc743

for.inc743:                                       ; preds = %if.end742
  %436 = load i8, i8* %stepx, align 1
  %conv744 = zext i8 %436 to i32
  %437 = load i32, i32* %x, align 4
  %add745 = add nsw i32 %437, %conv744
  store i32 %add745, i32* %x, align 4
  br label %for.cond458

for.end746:                                       ; preds = %for.cond458
  br label %for.inc747

for.inc747:                                       ; preds = %for.end746
  %438 = load i8, i8* %stepy, align 1
  %conv748 = zext i8 %438 to i32
  %439 = load i32, i32* %y, align 4
  %add749 = add nsw i32 %439, %conv748
  store i32 %add749, i32* %y, align 4
  br label %for.cond454

for.end750:                                       ; preds = %for.cond454
  store i32 0, i32* %y, align 4
  br label %for.cond751

for.cond751:                                      ; preds = %for.inc923, %for.end750
  %440 = load i32, i32* %y, align 4
  %cmp752 = icmp slt i32 %440, 4
  br i1 %cmp752, label %for.body754, label %for.end926, !prof !128

for.body754:                                      ; preds = %for.cond751
  store i32 0, i32* %x, align 4
  br label %for.cond755

for.cond755:                                      ; preds = %for.inc919, %for.body754
  %441 = load i32, i32* %x, align 4
  %cmp756 = icmp slt i32 %441, 4
  br i1 %cmp756, label %for.body758, label %for.end922, !prof !129

for.body758:                                      ; preds = %for.cond755
  %442 = load i32, i32* %x, align 4
  %shr759 = ashr i32 %442, 1
  %idxprom760 = sext i32 %shr759 to i64
  %arrayidx761 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom760
  %443 = load i32, i32* %y, align 4
  %shr762 = ashr i32 %443, 1
  %idxprom763 = sext i32 %shr762 to i64
  %arrayidx764 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx761, i64 0, i64 %idxprom763
  %444 = load i8, i8* %arrayidx764, align 1
  %conv765 = zext i8 %444 to i32
  %cmp766 = icmp eq i32 %conv765, 0
  br i1 %cmp766, label %if.then768, label %if.else769, !prof !130

if.then768:                                       ; preds = %for.body758
  br label %if.end918

if.else769:                                       ; preds = %for.body758
  %445 = load i32, i32* %x, align 4
  %shr770 = ashr i32 %445, 1
  %idxprom771 = sext i32 %shr770 to i64
  %arrayidx772 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom771
  %446 = load i32, i32* %y, align 4
  %shr773 = ashr i32 %446, 1
  %idxprom774 = sext i32 %shr773 to i64
  %arrayidx775 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx772, i64 0, i64 %idxprom774
  %447 = load i8, i8* %arrayidx775, align 1
  %conv776 = zext i8 %447 to i32
  %and777 = and i32 %conv776, 2
  %tobool778 = icmp ne i32 %and777, 0
  br i1 %tobool778, label %if.then779, label %if.end917, !prof !138

if.then779:                                       ; preds = %if.else769
  %448 = load i32, i32* %x, align 4
  %shr780 = ashr i32 %448, 1
  %idxprom781 = sext i32 %shr780 to i64
  %arrayidx782 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom781
  %449 = load i32, i32* %y, align 4
  %shr783 = ashr i32 %449, 1
  %idxprom784 = sext i32 %shr783 to i64
  %arrayidx785 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx782, i64 0, i64 %idxprom784
  %450 = load i8, i8* %arrayidx785, align 1
  store i8 %450, i8* %stpw, align 1
  %451 = load i32, i32* %x, align 4
  %shr786 = ashr i32 %451, 1
  %idxprom787 = sext i32 %shr786 to i64
  %arrayidx788 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom787
  %452 = load i32, i32* %y, align 4
  %shr789 = ashr i32 %452, 1
  %idxprom790 = sext i32 %shr789 to i64
  %arrayidx791 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx788, i64 0, i64 %idxprom790
  %453 = load i8, i8* %arrayidx791, align 1
  store i8 %453, i8* %stph, align 1
  store i32 0, i32* %suby, align 4
  br label %for.cond792

for.cond792:                                      ; preds = %for.inc913, %if.then779
  %454 = load i32, i32* %suby, align 4
  %455 = load i8, i8* %stepy, align 1
  %conv793 = zext i8 %455 to i32
  %cmp794 = icmp slt i32 %454, %conv793
  br i1 %cmp794, label %for.body796, label %for.end916

for.body796:                                      ; preds = %for.cond792
  store i32 0, i32* %subx, align 4
  br label %for.cond797

for.cond797:                                      ; preds = %for.inc909, %for.body796
  %456 = load i32, i32* %subx, align 4
  %457 = load i8, i8* %stepx, align 1
  %conv798 = zext i8 %457 to i32
  %cmp799 = icmp slt i32 %456, %conv798
  br i1 %cmp799, label %for.body801, label %for.end912

for.body801:                                      ; preds = %for.cond797
  %458 = load i32, i32* %skipflag.addr, align 4
  %cmp802 = icmp ne i32 %458, 1
  br i1 %cmp802, label %if.then804, label %if.else807

if.then804:                                       ; preds = %for.body801
  %459 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %460 = load i8*, i8** %nalu_buf.addr, align 8
  %461 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call805 = call i32 @s_e(%struct.NALU_t* %459, i8* %460, i64* %461)
  store i32 %call805, i32* %mvdx, align 4
  %462 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %463 = load i8*, i8** %nalu_buf.addr, align 8
  %464 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call806 = call i32 @s_e(%struct.NALU_t* %462, i8* %463, i64* %464)
  store i32 %call806, i32* %mvdy, align 4
  br label %if.end808

if.else807:                                       ; preds = %for.body801
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  br label %if.end808

if.end808:                                        ; preds = %if.else807, %if.then804
  %465 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %466 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %467 = load i32, i32* %startblkx, align 4
  %468 = load i32, i32* %startblky, align 4
  %469 = load i32, i32* %y, align 4
  %470 = load i32, i32* %suby, align 4
  %add809 = add nsw i32 %469, %470
  %and810 = and i32 %add809, 2
  %cmp811 = icmp ne i32 %and810, 0
  %conv812 = zext i1 %cmp811 to i32
  %mul813 = mul nsw i32 %conv812, 8
  %471 = load i32, i32* %x, align 4
  %472 = load i32, i32* %subx, align 4
  %add814 = add nsw i32 %471, %472
  %and815 = and i32 %add814, 2
  %cmp816 = icmp ne i32 %and815, 0
  %conv817 = zext i1 %cmp816 to i32
  %mul818 = mul nsw i32 %conv817, 4
  %add819 = add nsw i32 %mul813, %mul818
  %473 = load i32, i32* %y, align 4
  %474 = load i32, i32* %suby, align 4
  %add820 = add nsw i32 %473, %474
  %and821 = and i32 %add820, 1
  %cmp822 = icmp ne i32 %and821, 0
  %conv823 = zext i1 %cmp822 to i32
  %mul824 = mul nsw i32 %conv823, 2
  %add825 = add nsw i32 %add819, %mul824
  %475 = load i32, i32* %x, align 4
  %476 = load i32, i32* %subx, align 4
  %add826 = add nsw i32 %475, %476
  %and827 = and i32 %add826, 1
  %cmp828 = icmp ne i32 %and827, 0
  %conv829 = zext i1 %cmp828 to i32
  %add830 = add nsw i32 %add825, %conv829
  %477 = load i8, i8* %stpw, align 1
  %conv831 = zext i8 %477 to i32
  %478 = load i32, i32* %x, align 4
  %479 = load i32, i32* %subx, align 4
  %add832 = add nsw i32 %478, %479
  %480 = load i32, i32* %y, align 4
  %481 = load i32, i32* %suby, align 4
  %add833 = add nsw i32 %480, %481
  %482 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %483 = load i32, i32* %x, align 4
  %div834 = sdiv i32 %483, 2
  %idxprom835 = sext i32 %div834 to i64
  %arrayidx836 = getelementptr inbounds [2 x i8], [2 x i8]* %482, i64 %idxprom835
  %484 = load i32, i32* %y, align 4
  %div837 = sdiv i32 %484, 2
  %idxprom838 = sext i32 %div837 to i64
  %arrayidx839 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx836, i64 0, i64 %idxprom838
  %485 = load i8, i8* %arrayidx839, align 1
  %conv840 = sext i8 %485 to i32
  %arraydecay841 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %486 = load i32, i32* %x, align 4
  %div842 = sdiv i32 %486, 2
  %idxprom843 = sext i32 %div842 to i64
  %arrayidx844 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 %idxprom843
  %487 = load i32, i32* %y, align 4
  %div845 = sdiv i32 %487, 2
  %idxprom846 = sext i32 %div845 to i64
  %arrayidx847 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx844, i64 0, i64 %idxprom846
  %488 = load i8, i8* %arrayidx847, align 1
  %489 = load i32, i32* %skipflag.addr, align 4
  %conv848 = trunc i32 %489 to i8
  call void @findmv([18 x i8]* %465, [36 x [2 x i32]]* %466, i32 %467, i32 %468, i32 %add830, i32 %conv831, i32 %add832, i32 %add833, i32 %conv840, i32* %arraydecay841, i8 zeroext %488, i8 zeroext %conv848)
  store i32 0, i32* %i, align 4
  br label %for.cond849

for.cond849:                                      ; preds = %for.inc906, %if.end808
  %490 = load i32, i32* %i, align 4
  %491 = load i8, i8* %stpw, align 1
  %conv850 = zext i8 %491 to i32
  %cmp851 = icmp slt i32 %490, %conv850
  br i1 %cmp851, label %for.body853, label %for.end908

for.body853:                                      ; preds = %for.cond849
  store i32 0, i32* %j, align 4
  br label %for.cond854

for.cond854:                                      ; preds = %for.inc903, %for.body853
  %492 = load i32, i32* %j, align 4
  %493 = load i8, i8* %stph, align 1
  %conv855 = zext i8 %493 to i32
  %cmp856 = icmp slt i32 %492, %conv855
  br i1 %cmp856, label %for.body858, label %for.end905

for.body858:                                      ; preds = %for.cond854
  %494 = load i32, i32* %mvdx, align 4
  %arrayidx859 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %495 = load i32, i32* %arrayidx859, align 4
  %add860 = add nsw i32 %494, %495
  %496 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %497 = load i32, i32* %startblkx, align 4
  %498 = load i32, i32* %x, align 4
  %add861 = add nsw i32 %497, %498
  %499 = load i32, i32* %subx, align 4
  %add862 = add nsw i32 %add861, %499
  %500 = load i32, i32* %i, align 4
  %add863 = add nsw i32 %add862, %500
  %idxprom864 = sext i32 %add863 to i64
  %arrayidx865 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %496, i64 %idxprom864
  %501 = load i32, i32* %startblky, align 4
  %502 = load i32, i32* %y, align 4
  %add866 = add nsw i32 %501, %502
  %503 = load i32, i32* %suby, align 4
  %add867 = add nsw i32 %add866, %503
  %504 = load i32, i32* %j, align 4
  %add868 = add nsw i32 %add867, %504
  %idxprom869 = sext i32 %add868 to i64
  %arrayidx870 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx865, i64 0, i64 %idxprom869
  %arrayidx871 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx870, i64 0, i64 0
  store i32 %add860, i32* %arrayidx871, align 4
  %505 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %506 = load i32, i32* %x, align 4
  %507 = load i32, i32* %subx, align 4
  %add872 = add nsw i32 %506, %507
  %508 = load i32, i32* %i, align 4
  %add873 = add nsw i32 %add872, %508
  %idxprom874 = sext i32 %add873 to i64
  %arrayidx875 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %505, i64 %idxprom874
  %509 = load i32, i32* %y, align 4
  %510 = load i32, i32* %suby, align 4
  %add876 = add nsw i32 %509, %510
  %511 = load i32, i32* %j, align 4
  %add877 = add nsw i32 %add876, %511
  %idxprom878 = sext i32 %add877 to i64
  %arrayidx879 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx875, i64 0, i64 %idxprom878
  %arrayidx880 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx879, i64 0, i64 0
  store i32 %add860, i32* %arrayidx880, align 4
  %512 = load i32, i32* %mvdy, align 4
  %arrayidx881 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %513 = load i32, i32* %arrayidx881, align 4
  %add882 = add nsw i32 %512, %513
  %514 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %515 = load i32, i32* %startblkx, align 4
  %516 = load i32, i32* %x, align 4
  %add883 = add nsw i32 %515, %516
  %517 = load i32, i32* %subx, align 4
  %add884 = add nsw i32 %add883, %517
  %518 = load i32, i32* %i, align 4
  %add885 = add nsw i32 %add884, %518
  %idxprom886 = sext i32 %add885 to i64
  %arrayidx887 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %514, i64 %idxprom886
  %519 = load i32, i32* %startblky, align 4
  %520 = load i32, i32* %y, align 4
  %add888 = add nsw i32 %519, %520
  %521 = load i32, i32* %suby, align 4
  %add889 = add nsw i32 %add888, %521
  %522 = load i32, i32* %j, align 4
  %add890 = add nsw i32 %add889, %522
  %idxprom891 = sext i32 %add890 to i64
  %arrayidx892 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx887, i64 0, i64 %idxprom891
  %arrayidx893 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx892, i64 0, i64 1
  store i32 %add882, i32* %arrayidx893, align 4
  %523 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %524 = load i32, i32* %x, align 4
  %525 = load i32, i32* %subx, align 4
  %add894 = add nsw i32 %524, %525
  %526 = load i32, i32* %i, align 4
  %add895 = add nsw i32 %add894, %526
  %idxprom896 = sext i32 %add895 to i64
  %arrayidx897 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %523, i64 %idxprom896
  %527 = load i32, i32* %y, align 4
  %528 = load i32, i32* %suby, align 4
  %add898 = add nsw i32 %527, %528
  %529 = load i32, i32* %j, align 4
  %add899 = add nsw i32 %add898, %529
  %idxprom900 = sext i32 %add899 to i64
  %arrayidx901 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx897, i64 0, i64 %idxprom900
  %arrayidx902 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx901, i64 0, i64 1
  store i32 %add882, i32* %arrayidx902, align 4
  br label %for.inc903

for.inc903:                                       ; preds = %for.body858
  %530 = load i32, i32* %j, align 4
  %inc904 = add nsw i32 %530, 1
  store i32 %inc904, i32* %j, align 4
  br label %for.cond854

for.end905:                                       ; preds = %for.cond854
  br label %for.inc906

for.inc906:                                       ; preds = %for.end905
  %531 = load i32, i32* %i, align 4
  %inc907 = add nsw i32 %531, 1
  store i32 %inc907, i32* %i, align 4
  br label %for.cond849

for.end908:                                       ; preds = %for.cond849
  br label %for.inc909

for.inc909:                                       ; preds = %for.end908
  %532 = load i8, i8* %stpw, align 1
  %conv910 = zext i8 %532 to i32
  %533 = load i32, i32* %subx, align 4
  %add911 = add nsw i32 %533, %conv910
  store i32 %add911, i32* %subx, align 4
  br label %for.cond797

for.end912:                                       ; preds = %for.cond797
  br label %for.inc913

for.inc913:                                       ; preds = %for.end912
  %534 = load i8, i8* %stph, align 1
  %conv914 = zext i8 %534 to i32
  %535 = load i32, i32* %suby, align 4
  %add915 = add nsw i32 %535, %conv914
  store i32 %add915, i32* %suby, align 4
  br label %for.cond792

for.end916:                                       ; preds = %for.cond792
  br label %if.end917

if.end917:                                        ; preds = %for.end916, %if.else769
  br label %if.end918

if.end918:                                        ; preds = %if.end917, %if.then768
  br label %for.inc919

for.inc919:                                       ; preds = %if.end918
  %536 = load i8, i8* %stepx, align 1
  %conv920 = zext i8 %536 to i32
  %537 = load i32, i32* %x, align 4
  %add921 = add nsw i32 %537, %conv920
  store i32 %add921, i32* %x, align 4
  br label %for.cond755

for.end922:                                       ; preds = %for.cond755
  br label %for.inc923

for.inc923:                                       ; preds = %for.end922
  %538 = load i8, i8* %stepy, align 1
  %conv924 = zext i8 %538 to i32
  %539 = load i32, i32* %y, align 4
  %add925 = add nsw i32 %539, %conv924
  store i32 %add925, i32* %y, align 4
  br label %for.cond751

for.end926:                                       ; preds = %for.cond751
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @find_directzeroflag([18 x i8]* %refidx0, [18 x i8]* %refidx1, i8* %ref01, i32 %startblkx, i32 %startblky) #0 !prof !139 {
entry:
  %retval = alloca i8, align 1
  %refidx0.addr = alloca [18 x i8]*, align 8
  %refidx1.addr = alloca [18 x i8]*, align 8
  %ref01.addr = alloca i8*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %idxC = alloca [2 x i32], align 4
  %refA0 = alloca i8, align 1
  %refA1 = alloca i8, align 1
  %refB0 = alloca i8, align 1
  %refB1 = alloca i8, align 1
  %refC0 = alloca i8, align 1
  %refC1 = alloca i8, align 1
  store [18 x i8]* %refidx0, [18 x i8]** %refidx0.addr, align 8
  store [18 x i8]* %refidx1, [18 x i8]** %refidx1.addr, align 8
  store i8* %ref01, i8** %ref01.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  %0 = bitcast [2 x i32]* %idxC to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 8, i1 false)
  store i8 0, i8* %refA0, align 1
  store i8 0, i8* %refA1, align 1
  store i8 0, i8* %refB0, align 1
  store i8 0, i8* %refB1, align 1
  store i8 0, i8* %refC0, align 1
  store i8 0, i8* %refC1, align 1
  %1 = load i32, i32* %startblkx.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp sge i32 %sub, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !140

if.then:                                          ; preds = %entry
  %2 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %3 = load i32, i32* %startblkx.addr, align 4
  %sub1 = sub nsw i32 %3, 1
  %div = sdiv i32 %sub1, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %startblky.addr, align 4
  %div2 = sdiv i32 %4, 2
  %idxprom3 = sext i32 %div2 to i64
  %arrayidx4 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom3
  %5 = load i8, i8* %arrayidx4, align 1
  store i8 %5, i8* %refA0, align 1
  %6 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %7 = load i32, i32* %startblkx.addr, align 4
  %sub5 = sub nsw i32 %7, 1
  %div6 = sdiv i32 %sub5, 2
  %idxprom7 = sext i32 %div6 to i64
  %arrayidx8 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 %idxprom7
  %8 = load i32, i32* %startblky.addr, align 4
  %div9 = sdiv i32 %8, 2
  %idxprom10 = sext i32 %div9 to i64
  %arrayidx11 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx8, i64 0, i64 %idxprom10
  %9 = load i8, i8* %arrayidx11, align 1
  store i8 %9, i8* %refA1, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -1, i8* %refA0, align 1
  store i8 -1, i8* %refA1, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %startblky.addr, align 4
  %sub12 = sub nsw i32 %10, 1
  %cmp13 = icmp sge i32 %sub12, 0
  br i1 %cmp13, label %if.then14, label %if.else29, !prof !141

if.then14:                                        ; preds = %if.end
  %11 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %12 = load i32, i32* %startblkx.addr, align 4
  %div15 = sdiv i32 %12, 2
  %idxprom16 = sext i32 %div15 to i64
  %arrayidx17 = getelementptr inbounds [18 x i8], [18 x i8]* %11, i64 %idxprom16
  %13 = load i32, i32* %startblky.addr, align 4
  %sub18 = sub nsw i32 %13, 1
  %div19 = sdiv i32 %sub18, 2
  %idxprom20 = sext i32 %div19 to i64
  %arrayidx21 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx17, i64 0, i64 %idxprom20
  %14 = load i8, i8* %arrayidx21, align 1
  store i8 %14, i8* %refB0, align 1
  %15 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %16 = load i32, i32* %startblkx.addr, align 4
  %div22 = sdiv i32 %16, 2
  %idxprom23 = sext i32 %div22 to i64
  %arrayidx24 = getelementptr inbounds [18 x i8], [18 x i8]* %15, i64 %idxprom23
  %17 = load i32, i32* %startblky.addr, align 4
  %sub25 = sub nsw i32 %17, 1
  %div26 = sdiv i32 %sub25, 2
  %idxprom27 = sext i32 %div26 to i64
  %arrayidx28 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx24, i64 0, i64 %idxprom27
  %18 = load i8, i8* %arrayidx28, align 1
  store i8 %18, i8* %refB1, align 1
  br label %if.end30

if.else29:                                        ; preds = %if.end
  store i8 -1, i8* %refB0, align 1
  store i8 -1, i8* %refB1, align 1
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then14
  %19 = load i32, i32* %startblkx.addr, align 4
  %20 = load i32, i32* %startblky.addr, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i32 0, i32 0
  call void @findCidx(i32 %19, i32 %20, i32 0, i32 1, i32 0, i32 0, i32* %arraydecay)
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %21 = load i32, i32* %arrayidx31, align 4
  %cmp32 = icmp sge i32 %21, 0
  br i1 %cmp32, label %land.lhs.true, label %if.else52, !prof !142

land.lhs.true:                                    ; preds = %if.end30
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %22 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp sge i32 %22, 0
  br i1 %cmp34, label %if.then35, label %if.else52, !prof !141

if.then35:                                        ; preds = %land.lhs.true
  %23 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %24 = load i32, i32* %arrayidx36, align 4
  %div37 = sdiv i32 %24, 2
  %idxprom38 = sext i32 %div37 to i64
  %arrayidx39 = getelementptr inbounds [18 x i8], [18 x i8]* %23, i64 %idxprom38
  %arrayidx40 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %25 = load i32, i32* %arrayidx40, align 4
  %div41 = sdiv i32 %25, 2
  %idxprom42 = sext i32 %div41 to i64
  %arrayidx43 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx39, i64 0, i64 %idxprom42
  %26 = load i8, i8* %arrayidx43, align 1
  store i8 %26, i8* %refC0, align 1
  %27 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %arrayidx44 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %28 = load i32, i32* %arrayidx44, align 4
  %div45 = sdiv i32 %28, 2
  %idxprom46 = sext i32 %div45 to i64
  %arrayidx47 = getelementptr inbounds [18 x i8], [18 x i8]* %27, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %29 = load i32, i32* %arrayidx48, align 4
  %div49 = sdiv i32 %29, 2
  %idxprom50 = sext i32 %div49 to i64
  %arrayidx51 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx47, i64 0, i64 %idxprom50
  %30 = load i8, i8* %arrayidx51, align 1
  store i8 %30, i8* %refC1, align 1
  br label %if.end53

if.else52:                                        ; preds = %land.lhs.true, %if.end30
  store i8 -1, i8* %refC0, align 1
  store i8 -1, i8* %refC1, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %if.then35
  %31 = load i8, i8* %refA0, align 1
  %conv = sext i8 %31 to i32
  %32 = load i8, i8* %refB0, align 1
  %conv54 = sext i8 %32 to i32
  %33 = load i8, i8* %refC0, align 1
  %conv55 = sext i8 %33 to i32
  %call = call i32 @minpositive(i32 %conv54, i32 %conv55)
  %call56 = call i32 @minpositive(i32 %conv, i32 %call)
  %conv57 = trunc i32 %call56 to i8
  %34 = load i8*, i8** %ref01.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %34, i64 0
  store i8 %conv57, i8* %arrayidx58, align 1
  %35 = load i8, i8* %refA1, align 1
  %conv59 = sext i8 %35 to i32
  %36 = load i8, i8* %refB1, align 1
  %conv60 = sext i8 %36 to i32
  %37 = load i8, i8* %refC1, align 1
  %conv61 = sext i8 %37 to i32
  %call62 = call i32 @minpositive(i32 %conv60, i32 %conv61)
  %call63 = call i32 @minpositive(i32 %conv59, i32 %call62)
  %conv64 = trunc i32 %call63 to i8
  %38 = load i8*, i8** %ref01.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %conv64, i8* %arrayidx65, align 1
  %39 = load i8*, i8** %ref01.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %39, i64 0
  %40 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %40 to i32
  %cmp68 = icmp slt i32 %conv67, 0
  br i1 %cmp68, label %land.lhs.true70, label %if.else78, !prof !143

land.lhs.true70:                                  ; preds = %if.end53
  %41 = load i8*, i8** %ref01.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx71, align 1
  %conv72 = sext i8 %42 to i32
  %cmp73 = icmp slt i32 %conv72, 0
  br i1 %cmp73, label %if.then75, label %if.else78, !prof !144

if.then75:                                        ; preds = %land.lhs.true70
  %43 = load i8*, i8** %ref01.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %43, i64 0
  store i8 0, i8* %arrayidx76, align 1
  %44 = load i8*, i8** %ref01.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 0, i8* %arrayidx77, align 1
  store i8 1, i8* %retval, align 1
  br label %return

if.else78:                                        ; preds = %land.lhs.true70, %if.end53
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else78, %if.then75
  %45 = load i8, i8* %retval, align 1
  ret i8 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @findmv([18 x i8]* %refidx01, [36 x [2 x i32]]* %mvd01, i32 %startblkx, i32 %startblky, i32 %blk, i32 %width, i32 %blkx, i32 %blky, i32 %refid, i32* %retmv, i8 zeroext %dir, i8 zeroext %skipflag) #0 !prof !145 {
entry:
  %refidx01.addr = alloca [18 x i8]*, align 8
  %mvd01.addr = alloca [36 x [2 x i32]]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %refid.addr = alloca i32, align 4
  %retmv.addr = alloca i32*, align 8
  %dir.addr = alloca i8, align 1
  %skipflag.addr = alloca i8, align 1
  %tmpAmv = alloca [2 x i32], align 4
  %tmpBmv = alloca [2 x i32], align 4
  %tmpCmv = alloca [2 x i32], align 4
  %idxC = alloca [2 x i32], align 4
  %refA = alloca i8, align 1
  %refB = alloca i8, align 1
  %refC = alloca i8, align 1
  store [18 x i8]* %refidx01, [18 x i8]** %refidx01.addr, align 8
  store [36 x [2 x i32]]* %mvd01, [36 x [2 x i32]]** %mvd01.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32 %refid, i32* %refid.addr, align 4
  store i32* %retmv, i32** %retmv.addr, align 8
  store i8 %dir, i8* %dir.addr, align 1
  store i8 %skipflag, i8* %skipflag.addr, align 1
  %0 = bitcast [2 x i32]* %tmpAmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 8, i1 false)
  %1 = bitcast [2 x i32]* %tmpBmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 8, i1 false)
  %2 = bitcast [2 x i32]* %tmpCmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 8, i1 false)
  %3 = bitcast [2 x i32]* %idxC to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 8, i1 false)
  store i8 0, i8* %refA, align 1
  store i8 0, i8* %refB, align 1
  store i8 0, i8* %refC, align 1
  %4 = load i32, i32* %startblkx.addr, align 4
  %5 = load i32, i32* %blkx.addr, align 4
  %add = add nsw i32 %4, %5
  %sub = sub nsw i32 %add, 1
  %cmp = icmp sge i32 %sub, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !146

if.then:                                          ; preds = %entry
  %6 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %7 = load i32, i32* %startblkx.addr, align 4
  %8 = load i32, i32* %blkx.addr, align 4
  %add1 = add nsw i32 %7, %8
  %sub2 = sub nsw i32 %add1, 1
  %div = sdiv i32 %sub2, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 %idxprom
  %9 = load i32, i32* %startblky.addr, align 4
  %10 = load i32, i32* %blky.addr, align 4
  %add3 = add nsw i32 %9, %10
  %div4 = sdiv i32 %add3, 2
  %idxprom5 = sext i32 %div4 to i64
  %arrayidx6 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom5
  %11 = load i8, i8* %arrayidx6, align 1
  store i8 %11, i8* %refA, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -1, i8* %refA, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %startblky.addr, align 4
  %13 = load i32, i32* %blky.addr, align 4
  %add7 = add nsw i32 %12, %13
  %sub8 = sub nsw i32 %add7, 1
  %cmp9 = icmp sge i32 %sub8, 0
  br i1 %cmp9, label %if.then10, label %if.else20, !prof !147

if.then10:                                        ; preds = %if.end
  %14 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %15 = load i32, i32* %startblkx.addr, align 4
  %16 = load i32, i32* %blkx.addr, align 4
  %add11 = add nsw i32 %15, %16
  %div12 = sdiv i32 %add11, 2
  %idxprom13 = sext i32 %div12 to i64
  %arrayidx14 = getelementptr inbounds [18 x i8], [18 x i8]* %14, i64 %idxprom13
  %17 = load i32, i32* %startblky.addr, align 4
  %18 = load i32, i32* %blky.addr, align 4
  %add15 = add nsw i32 %17, %18
  %sub16 = sub nsw i32 %add15, 1
  %div17 = sdiv i32 %sub16, 2
  %idxprom18 = sext i32 %div17 to i64
  %arrayidx19 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx14, i64 0, i64 %idxprom18
  %19 = load i8, i8* %arrayidx19, align 1
  store i8 %19, i8* %refB, align 1
  br label %if.end21

if.else20:                                        ; preds = %if.end
  store i8 -1, i8* %refB, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.then10
  %20 = load i32, i32* %startblkx.addr, align 4
  %21 = load i32, i32* %startblky.addr, align 4
  %22 = load i32, i32* %blk.addr, align 4
  %23 = load i32, i32* %width.addr, align 4
  %24 = load i32, i32* %blkx.addr, align 4
  %25 = load i32, i32* %blky.addr, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i32 0, i32 0
  call void @findCidx(i32 %20, i32 %21, i32 %22, i32 %23, i32 %24, i32 %25, i32* %arraydecay)
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %26 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp sge i32 %26, 0
  br i1 %cmp23, label %land.lhs.true, label %if.else35, !prof !148

land.lhs.true:                                    ; preds = %if.end21
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %27 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp sge i32 %27, 0
  br i1 %cmp25, label %if.then26, label %if.else35, !prof !147

if.then26:                                        ; preds = %land.lhs.true
  %28 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %29 = load i32, i32* %arrayidx27, align 4
  %div28 = sdiv i32 %29, 2
  %idxprom29 = sext i32 %div28 to i64
  %arrayidx30 = getelementptr inbounds [18 x i8], [18 x i8]* %28, i64 %idxprom29
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %30 = load i32, i32* %arrayidx31, align 4
  %div32 = sdiv i32 %30, 2
  %idxprom33 = sext i32 %div32 to i64
  %arrayidx34 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx30, i64 0, i64 %idxprom33
  %31 = load i8, i8* %arrayidx34, align 1
  store i8 %31, i8* %refC, align 1
  br label %if.end36

if.else35:                                        ; preds = %land.lhs.true, %if.end21
  store i8 -1, i8* %refC, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.else35, %if.then26
  %32 = load i8, i8* %skipflag.addr, align 1
  %conv = zext i8 %32 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true37, label %if.else47, !prof !149

land.lhs.true37:                                  ; preds = %if.end36
  %33 = load i8, i8* %refA, align 1
  %conv38 = sext i8 %33 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %if.then44, label %lor.lhs.false, !prof !150

lor.lhs.false:                                    ; preds = %land.lhs.true37
  %34 = load i8, i8* %refB, align 1
  %conv41 = sext i8 %34 to i32
  %cmp42 = icmp slt i32 %conv41, 0
  br i1 %cmp42, label %if.then44, label %if.else47, !prof !151

if.then44:                                        ; preds = %lor.lhs.false, %land.lhs.true37
  %35 = load i32*, i32** %retmv.addr, align 8
  %arrayidx45 = getelementptr inbounds i32, i32* %35, i64 0
  store i32 0, i32* %arrayidx45, align 4
  %36 = load i32*, i32** %retmv.addr, align 8
  %arrayidx46 = getelementptr inbounds i32, i32* %36, i64 1
  store i32 0, i32* %arrayidx46, align 4
  br label %if.end372

if.else47:                                        ; preds = %lor.lhs.false, %if.end36
  %37 = load i8, i8* %dir.addr, align 1
  %conv48 = zext i8 %37 to i32
  %cmp49 = icmp eq i32 %conv48, 1
  br i1 %cmp49, label %land.lhs.true51, label %if.else74, !prof !152

land.lhs.true51:                                  ; preds = %if.else47
  %38 = load i8, i8* %refA, align 1
  %conv52 = sext i8 %38 to i32
  %39 = load i32, i32* %refid.addr, align 4
  %cmp53 = icmp eq i32 %conv52, %39
  br i1 %cmp53, label %if.then55, label %if.else74, !prof !153

if.then55:                                        ; preds = %land.lhs.true51
  %40 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %41 = load i32, i32* %startblkx.addr, align 4
  %42 = load i32, i32* %blkx.addr, align 4
  %add56 = add nsw i32 %41, %42
  %sub57 = sub nsw i32 %add56, 1
  %idxprom58 = sext i32 %sub57 to i64
  %arrayidx59 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %40, i64 %idxprom58
  %43 = load i32, i32* %startblky.addr, align 4
  %44 = load i32, i32* %blky.addr, align 4
  %add60 = add nsw i32 %43, %44
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx59, i64 0, i64 %idxprom61
  %arrayidx63 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx62, i64 0, i64 0
  %45 = load i32, i32* %arrayidx63, align 4
  %46 = load i32*, i32** %retmv.addr, align 8
  %arrayidx64 = getelementptr inbounds i32, i32* %46, i64 0
  store i32 %45, i32* %arrayidx64, align 4
  %47 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %48 = load i32, i32* %startblkx.addr, align 4
  %49 = load i32, i32* %blkx.addr, align 4
  %add65 = add nsw i32 %48, %49
  %sub66 = sub nsw i32 %add65, 1
  %idxprom67 = sext i32 %sub66 to i64
  %arrayidx68 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %47, i64 %idxprom67
  %50 = load i32, i32* %startblky.addr, align 4
  %51 = load i32, i32* %blky.addr, align 4
  %add69 = add nsw i32 %50, %51
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx68, i64 0, i64 %idxprom70
  %arrayidx72 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx71, i64 0, i64 1
  %52 = load i32, i32* %arrayidx72, align 4
  %53 = load i32*, i32** %retmv.addr, align 8
  %arrayidx73 = getelementptr inbounds i32, i32* %53, i64 1
  store i32 %52, i32* %arrayidx73, align 4
  br label %if.end371

if.else74:                                        ; preds = %land.lhs.true51, %if.else47
  %54 = load i8, i8* %dir.addr, align 1
  %conv75 = zext i8 %54 to i32
  %cmp76 = icmp eq i32 %conv75, 2
  br i1 %cmp76, label %land.lhs.true78, label %if.else101, !prof !154

land.lhs.true78:                                  ; preds = %if.else74
  %55 = load i8, i8* %refB, align 1
  %conv79 = sext i8 %55 to i32
  %56 = load i32, i32* %refid.addr, align 4
  %cmp80 = icmp eq i32 %conv79, %56
  br i1 %cmp80, label %if.then82, label %if.else101, !prof !155

if.then82:                                        ; preds = %land.lhs.true78
  %57 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %58 = load i32, i32* %startblkx.addr, align 4
  %59 = load i32, i32* %blkx.addr, align 4
  %add83 = add nsw i32 %58, %59
  %idxprom84 = sext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %57, i64 %idxprom84
  %60 = load i32, i32* %startblky.addr, align 4
  %61 = load i32, i32* %blky.addr, align 4
  %add86 = add nsw i32 %60, %61
  %sub87 = sub nsw i32 %add86, 1
  %idxprom88 = sext i32 %sub87 to i64
  %arrayidx89 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx85, i64 0, i64 %idxprom88
  %arrayidx90 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx89, i64 0, i64 0
  %62 = load i32, i32* %arrayidx90, align 4
  %63 = load i32*, i32** %retmv.addr, align 8
  %arrayidx91 = getelementptr inbounds i32, i32* %63, i64 0
  store i32 %62, i32* %arrayidx91, align 4
  %64 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %65 = load i32, i32* %startblkx.addr, align 4
  %66 = load i32, i32* %blkx.addr, align 4
  %add92 = add nsw i32 %65, %66
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %64, i64 %idxprom93
  %67 = load i32, i32* %startblky.addr, align 4
  %68 = load i32, i32* %blky.addr, align 4
  %add95 = add nsw i32 %67, %68
  %sub96 = sub nsw i32 %add95, 1
  %idxprom97 = sext i32 %sub96 to i64
  %arrayidx98 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx94, i64 0, i64 %idxprom97
  %arrayidx99 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx98, i64 0, i64 1
  %69 = load i32, i32* %arrayidx99, align 4
  %70 = load i32*, i32** %retmv.addr, align 8
  %arrayidx100 = getelementptr inbounds i32, i32* %70, i64 1
  store i32 %69, i32* %arrayidx100, align 4
  br label %if.end370

if.else101:                                       ; preds = %land.lhs.true78, %if.else74
  %71 = load i8, i8* %dir.addr, align 1
  %conv102 = zext i8 %71 to i32
  %cmp103 = icmp eq i32 %conv102, 3
  br i1 %cmp103, label %land.lhs.true105, label %if.else126, !prof !156

land.lhs.true105:                                 ; preds = %if.else101
  %72 = load i8, i8* %refC, align 1
  %conv106 = sext i8 %72 to i32
  %73 = load i32, i32* %refid.addr, align 4
  %cmp107 = icmp eq i32 %conv106, %73
  br i1 %cmp107, label %if.then109, label %if.else126, !prof !106

if.then109:                                       ; preds = %land.lhs.true105
  %74 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx110 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %75 = load i32, i32* %arrayidx110, align 4
  %idxprom111 = sext i32 %75 to i64
  %arrayidx112 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %74, i64 %idxprom111
  %arrayidx113 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %76 = load i32, i32* %arrayidx113, align 4
  %idxprom114 = sext i32 %76 to i64
  %arrayidx115 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx112, i64 0, i64 %idxprom114
  %arrayidx116 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx115, i64 0, i64 0
  %77 = load i32, i32* %arrayidx116, align 4
  %78 = load i32*, i32** %retmv.addr, align 8
  %arrayidx117 = getelementptr inbounds i32, i32* %78, i64 0
  store i32 %77, i32* %arrayidx117, align 4
  %79 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx118 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %80 = load i32, i32* %arrayidx118, align 4
  %idxprom119 = sext i32 %80 to i64
  %arrayidx120 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %79, i64 %idxprom119
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %81 = load i32, i32* %arrayidx121, align 4
  %idxprom122 = sext i32 %81 to i64
  %arrayidx123 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx120, i64 0, i64 %idxprom122
  %arrayidx124 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx123, i64 0, i64 1
  %82 = load i32, i32* %arrayidx124, align 4
  %83 = load i32*, i32** %retmv.addr, align 8
  %arrayidx125 = getelementptr inbounds i32, i32* %83, i64 1
  store i32 %82, i32* %arrayidx125, align 4
  br label %if.end369

if.else126:                                       ; preds = %land.lhs.true105, %if.else101
  %84 = load i8, i8* %refC, align 1
  %conv127 = sext i8 %84 to i32
  %cmp128 = icmp slt i32 %conv127, 0
  br i1 %cmp128, label %land.lhs.true130, label %if.else157, !prof !157

land.lhs.true130:                                 ; preds = %if.else126
  %85 = load i8, i8* %refB, align 1
  %conv131 = sext i8 %85 to i32
  %cmp132 = icmp slt i32 %conv131, 0
  br i1 %cmp132, label %land.lhs.true134, label %if.else157, !prof !158

land.lhs.true134:                                 ; preds = %land.lhs.true130
  %86 = load i8, i8* %refA, align 1
  %conv135 = sext i8 %86 to i32
  %cmp136 = icmp sge i32 %conv135, 0
  br i1 %cmp136, label %if.then138, label %if.else157, !prof !159

if.then138:                                       ; preds = %land.lhs.true134
  %87 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %88 = load i32, i32* %startblkx.addr, align 4
  %89 = load i32, i32* %blkx.addr, align 4
  %add139 = add nsw i32 %88, %89
  %sub140 = sub nsw i32 %add139, 1
  %idxprom141 = sext i32 %sub140 to i64
  %arrayidx142 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %87, i64 %idxprom141
  %90 = load i32, i32* %startblky.addr, align 4
  %91 = load i32, i32* %blky.addr, align 4
  %add143 = add nsw i32 %90, %91
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx142, i64 0, i64 %idxprom144
  %arrayidx146 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx145, i64 0, i64 0
  %92 = load i32, i32* %arrayidx146, align 4
  %93 = load i32*, i32** %retmv.addr, align 8
  %arrayidx147 = getelementptr inbounds i32, i32* %93, i64 0
  store i32 %92, i32* %arrayidx147, align 4
  %94 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %95 = load i32, i32* %startblkx.addr, align 4
  %96 = load i32, i32* %blkx.addr, align 4
  %add148 = add nsw i32 %95, %96
  %sub149 = sub nsw i32 %add148, 1
  %idxprom150 = sext i32 %sub149 to i64
  %arrayidx151 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %94, i64 %idxprom150
  %97 = load i32, i32* %startblky.addr, align 4
  %98 = load i32, i32* %blky.addr, align 4
  %add152 = add nsw i32 %97, %98
  %idxprom153 = sext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx151, i64 0, i64 %idxprom153
  %arrayidx155 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx154, i64 0, i64 1
  %99 = load i32, i32* %arrayidx155, align 4
  %100 = load i32*, i32** %retmv.addr, align 8
  %arrayidx156 = getelementptr inbounds i32, i32* %100, i64 1
  store i32 %99, i32* %arrayidx156, align 4
  br label %if.end368

if.else157:                                       ; preds = %land.lhs.true134, %land.lhs.true130, %if.else126
  %101 = load i8, i8* %refA, align 1
  %conv158 = sext i8 %101 to i32
  %102 = load i32, i32* %refid.addr, align 4
  %cmp159 = icmp eq i32 %conv158, %102
  br i1 %cmp159, label %land.lhs.true161, label %if.else188, !prof !160

land.lhs.true161:                                 ; preds = %if.else157
  %103 = load i8, i8* %refB, align 1
  %conv162 = sext i8 %103 to i32
  %104 = load i32, i32* %refid.addr, align 4
  %cmp163 = icmp ne i32 %conv162, %104
  br i1 %cmp163, label %land.lhs.true165, label %if.else188, !prof !161

land.lhs.true165:                                 ; preds = %land.lhs.true161
  %105 = load i8, i8* %refC, align 1
  %conv166 = sext i8 %105 to i32
  %106 = load i32, i32* %refid.addr, align 4
  %cmp167 = icmp ne i32 %conv166, %106
  br i1 %cmp167, label %if.then169, label %if.else188

if.then169:                                       ; preds = %land.lhs.true165
  %107 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %108 = load i32, i32* %startblkx.addr, align 4
  %109 = load i32, i32* %blkx.addr, align 4
  %add170 = add nsw i32 %108, %109
  %sub171 = sub nsw i32 %add170, 1
  %idxprom172 = sext i32 %sub171 to i64
  %arrayidx173 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %107, i64 %idxprom172
  %110 = load i32, i32* %startblky.addr, align 4
  %111 = load i32, i32* %blky.addr, align 4
  %add174 = add nsw i32 %110, %111
  %idxprom175 = sext i32 %add174 to i64
  %arrayidx176 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx173, i64 0, i64 %idxprom175
  %arrayidx177 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx176, i64 0, i64 0
  %112 = load i32, i32* %arrayidx177, align 4
  %113 = load i32*, i32** %retmv.addr, align 8
  %arrayidx178 = getelementptr inbounds i32, i32* %113, i64 0
  store i32 %112, i32* %arrayidx178, align 4
  %114 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %115 = load i32, i32* %startblkx.addr, align 4
  %116 = load i32, i32* %blkx.addr, align 4
  %add179 = add nsw i32 %115, %116
  %sub180 = sub nsw i32 %add179, 1
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %114, i64 %idxprom181
  %117 = load i32, i32* %startblky.addr, align 4
  %118 = load i32, i32* %blky.addr, align 4
  %add183 = add nsw i32 %117, %118
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx182, i64 0, i64 %idxprom184
  %arrayidx186 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx185, i64 0, i64 1
  %119 = load i32, i32* %arrayidx186, align 4
  %120 = load i32*, i32** %retmv.addr, align 8
  %arrayidx187 = getelementptr inbounds i32, i32* %120, i64 1
  store i32 %119, i32* %arrayidx187, align 4
  br label %if.end367

if.else188:                                       ; preds = %land.lhs.true165, %land.lhs.true161, %if.else157
  %121 = load i8, i8* %refA, align 1
  %conv189 = sext i8 %121 to i32
  %122 = load i32, i32* %refid.addr, align 4
  %cmp190 = icmp ne i32 %conv189, %122
  br i1 %cmp190, label %land.lhs.true192, label %if.else219, !prof !162

land.lhs.true192:                                 ; preds = %if.else188
  %123 = load i8, i8* %refB, align 1
  %conv193 = sext i8 %123 to i32
  %124 = load i32, i32* %refid.addr, align 4
  %cmp194 = icmp eq i32 %conv193, %124
  br i1 %cmp194, label %land.lhs.true196, label %if.else219, !prof !163

land.lhs.true196:                                 ; preds = %land.lhs.true192
  %125 = load i8, i8* %refC, align 1
  %conv197 = sext i8 %125 to i32
  %126 = load i32, i32* %refid.addr, align 4
  %cmp198 = icmp ne i32 %conv197, %126
  br i1 %cmp198, label %if.then200, label %if.else219, !prof !164

if.then200:                                       ; preds = %land.lhs.true196
  %127 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %128 = load i32, i32* %startblkx.addr, align 4
  %129 = load i32, i32* %blkx.addr, align 4
  %add201 = add nsw i32 %128, %129
  %idxprom202 = sext i32 %add201 to i64
  %arrayidx203 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %127, i64 %idxprom202
  %130 = load i32, i32* %startblky.addr, align 4
  %131 = load i32, i32* %blky.addr, align 4
  %add204 = add nsw i32 %130, %131
  %sub205 = sub nsw i32 %add204, 1
  %idxprom206 = sext i32 %sub205 to i64
  %arrayidx207 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx203, i64 0, i64 %idxprom206
  %arrayidx208 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx207, i64 0, i64 0
  %132 = load i32, i32* %arrayidx208, align 4
  %133 = load i32*, i32** %retmv.addr, align 8
  %arrayidx209 = getelementptr inbounds i32, i32* %133, i64 0
  store i32 %132, i32* %arrayidx209, align 4
  %134 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %135 = load i32, i32* %startblkx.addr, align 4
  %136 = load i32, i32* %blkx.addr, align 4
  %add210 = add nsw i32 %135, %136
  %idxprom211 = sext i32 %add210 to i64
  %arrayidx212 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %134, i64 %idxprom211
  %137 = load i32, i32* %startblky.addr, align 4
  %138 = load i32, i32* %blky.addr, align 4
  %add213 = add nsw i32 %137, %138
  %sub214 = sub nsw i32 %add213, 1
  %idxprom215 = sext i32 %sub214 to i64
  %arrayidx216 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx212, i64 0, i64 %idxprom215
  %arrayidx217 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx216, i64 0, i64 1
  %139 = load i32, i32* %arrayidx217, align 4
  %140 = load i32*, i32** %retmv.addr, align 8
  %arrayidx218 = getelementptr inbounds i32, i32* %140, i64 1
  store i32 %139, i32* %arrayidx218, align 4
  br label %if.end366

if.else219:                                       ; preds = %land.lhs.true196, %land.lhs.true192, %if.else188
  %141 = load i8, i8* %refA, align 1
  %conv220 = sext i8 %141 to i32
  %142 = load i32, i32* %refid.addr, align 4
  %cmp221 = icmp ne i32 %conv220, %142
  br i1 %cmp221, label %land.lhs.true223, label %if.else248, !prof !162

land.lhs.true223:                                 ; preds = %if.else219
  %143 = load i8, i8* %refB, align 1
  %conv224 = sext i8 %143 to i32
  %144 = load i32, i32* %refid.addr, align 4
  %cmp225 = icmp ne i32 %conv224, %144
  br i1 %cmp225, label %land.lhs.true227, label %if.else248, !prof !165

land.lhs.true227:                                 ; preds = %land.lhs.true223
  %145 = load i8, i8* %refC, align 1
  %conv228 = sext i8 %145 to i32
  %146 = load i32, i32* %refid.addr, align 4
  %cmp229 = icmp eq i32 %conv228, %146
  br i1 %cmp229, label %if.then231, label %if.else248, !prof !166

if.then231:                                       ; preds = %land.lhs.true227
  %147 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx232 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %148 = load i32, i32* %arrayidx232, align 4
  %idxprom233 = sext i32 %148 to i64
  %arrayidx234 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %147, i64 %idxprom233
  %arrayidx235 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %149 = load i32, i32* %arrayidx235, align 4
  %idxprom236 = sext i32 %149 to i64
  %arrayidx237 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx234, i64 0, i64 %idxprom236
  %arrayidx238 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx237, i64 0, i64 0
  %150 = load i32, i32* %arrayidx238, align 4
  %151 = load i32*, i32** %retmv.addr, align 8
  %arrayidx239 = getelementptr inbounds i32, i32* %151, i64 0
  store i32 %150, i32* %arrayidx239, align 4
  %152 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx240 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %153 = load i32, i32* %arrayidx240, align 4
  %idxprom241 = sext i32 %153 to i64
  %arrayidx242 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %152, i64 %idxprom241
  %arrayidx243 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %154 = load i32, i32* %arrayidx243, align 4
  %idxprom244 = sext i32 %154 to i64
  %arrayidx245 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx242, i64 0, i64 %idxprom244
  %arrayidx246 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx245, i64 0, i64 1
  %155 = load i32, i32* %arrayidx246, align 4
  %156 = load i32*, i32** %retmv.addr, align 8
  %arrayidx247 = getelementptr inbounds i32, i32* %156, i64 1
  store i32 %155, i32* %arrayidx247, align 4
  br label %if.end365

if.else248:                                       ; preds = %land.lhs.true227, %land.lhs.true223, %if.else219
  %157 = load i8, i8* %refA, align 1
  %conv249 = sext i8 %157 to i32
  %cmp250 = icmp slt i32 %conv249, 0
  br i1 %cmp250, label %if.then252, label %if.else255, !prof !162

if.then252:                                       ; preds = %if.else248
  %arrayidx253 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  store i32 0, i32* %arrayidx253, align 4
  %arrayidx254 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  store i32 0, i32* %arrayidx254, align 4
  br label %if.end274

if.else255:                                       ; preds = %if.else248
  %158 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %159 = load i32, i32* %startblkx.addr, align 4
  %160 = load i32, i32* %blkx.addr, align 4
  %add256 = add nsw i32 %159, %160
  %sub257 = sub nsw i32 %add256, 1
  %idxprom258 = sext i32 %sub257 to i64
  %arrayidx259 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %158, i64 %idxprom258
  %161 = load i32, i32* %startblky.addr, align 4
  %162 = load i32, i32* %blky.addr, align 4
  %add260 = add nsw i32 %161, %162
  %idxprom261 = sext i32 %add260 to i64
  %arrayidx262 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx259, i64 0, i64 %idxprom261
  %arrayidx263 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx262, i64 0, i64 0
  %163 = load i32, i32* %arrayidx263, align 4
  %arrayidx264 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  store i32 %163, i32* %arrayidx264, align 4
  %164 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %165 = load i32, i32* %startblkx.addr, align 4
  %166 = load i32, i32* %blkx.addr, align 4
  %add265 = add nsw i32 %165, %166
  %sub266 = sub nsw i32 %add265, 1
  %idxprom267 = sext i32 %sub266 to i64
  %arrayidx268 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %164, i64 %idxprom267
  %167 = load i32, i32* %startblky.addr, align 4
  %168 = load i32, i32* %blky.addr, align 4
  %add269 = add nsw i32 %167, %168
  %idxprom270 = sext i32 %add269 to i64
  %arrayidx271 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx268, i64 0, i64 %idxprom270
  %arrayidx272 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx271, i64 0, i64 1
  %169 = load i32, i32* %arrayidx272, align 4
  %arrayidx273 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  store i32 %169, i32* %arrayidx273, align 4
  br label %if.end274

if.end274:                                        ; preds = %if.else255, %if.then252
  %170 = load i8, i8* %refB, align 1
  %conv275 = sext i8 %170 to i32
  %cmp276 = icmp slt i32 %conv275, 0
  br i1 %cmp276, label %if.then278, label %if.else281, !prof !167

if.then278:                                       ; preds = %if.end274
  %arrayidx279 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  store i32 0, i32* %arrayidx279, align 4
  %arrayidx280 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  store i32 0, i32* %arrayidx280, align 4
  br label %if.end300

if.else281:                                       ; preds = %if.end274
  %171 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %172 = load i32, i32* %startblkx.addr, align 4
  %173 = load i32, i32* %blkx.addr, align 4
  %add282 = add nsw i32 %172, %173
  %idxprom283 = sext i32 %add282 to i64
  %arrayidx284 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %171, i64 %idxprom283
  %174 = load i32, i32* %startblky.addr, align 4
  %175 = load i32, i32* %blky.addr, align 4
  %add285 = add nsw i32 %174, %175
  %sub286 = sub nsw i32 %add285, 1
  %idxprom287 = sext i32 %sub286 to i64
  %arrayidx288 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx284, i64 0, i64 %idxprom287
  %arrayidx289 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx288, i64 0, i64 0
  %176 = load i32, i32* %arrayidx289, align 4
  %arrayidx290 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  store i32 %176, i32* %arrayidx290, align 4
  %177 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %178 = load i32, i32* %startblkx.addr, align 4
  %179 = load i32, i32* %blkx.addr, align 4
  %add291 = add nsw i32 %178, %179
  %idxprom292 = sext i32 %add291 to i64
  %arrayidx293 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %177, i64 %idxprom292
  %180 = load i32, i32* %startblky.addr, align 4
  %181 = load i32, i32* %blky.addr, align 4
  %add294 = add nsw i32 %180, %181
  %sub295 = sub nsw i32 %add294, 1
  %idxprom296 = sext i32 %sub295 to i64
  %arrayidx297 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx293, i64 0, i64 %idxprom296
  %arrayidx298 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx297, i64 0, i64 1
  %182 = load i32, i32* %arrayidx298, align 4
  %arrayidx299 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  store i32 %182, i32* %arrayidx299, align 4
  br label %if.end300

if.end300:                                        ; preds = %if.else281, %if.then278
  %183 = load i8, i8* %refC, align 1
  %conv301 = sext i8 %183 to i32
  %cmp302 = icmp slt i32 %conv301, 0
  br i1 %cmp302, label %if.then304, label %if.else307, !prof !167

if.then304:                                       ; preds = %if.end300
  %arrayidx305 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  store i32 0, i32* %arrayidx305, align 4
  %arrayidx306 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  store i32 0, i32* %arrayidx306, align 4
  br label %if.end324

if.else307:                                       ; preds = %if.end300
  %184 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx308 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %185 = load i32, i32* %arrayidx308, align 4
  %idxprom309 = sext i32 %185 to i64
  %arrayidx310 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %184, i64 %idxprom309
  %arrayidx311 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %186 = load i32, i32* %arrayidx311, align 4
  %idxprom312 = sext i32 %186 to i64
  %arrayidx313 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx310, i64 0, i64 %idxprom312
  %arrayidx314 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx313, i64 0, i64 0
  %187 = load i32, i32* %arrayidx314, align 4
  %arrayidx315 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  store i32 %187, i32* %arrayidx315, align 4
  %188 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx316 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %189 = load i32, i32* %arrayidx316, align 4
  %idxprom317 = sext i32 %189 to i64
  %arrayidx318 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %188, i64 %idxprom317
  %arrayidx319 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %190 = load i32, i32* %arrayidx319, align 4
  %idxprom320 = sext i32 %190 to i64
  %arrayidx321 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx318, i64 0, i64 %idxprom320
  %arrayidx322 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx321, i64 0, i64 1
  %191 = load i32, i32* %arrayidx322, align 4
  %arrayidx323 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  store i32 %191, i32* %arrayidx323, align 4
  br label %if.end324

if.end324:                                        ; preds = %if.else307, %if.then304
  %192 = load i8, i8* %skipflag.addr, align 1
  %conv325 = zext i8 %192 to i32
  %tobool326 = icmp ne i32 %conv325, 0
  br i1 %tobool326, label %land.lhs.true327, label %if.else354, !prof !168

land.lhs.true327:                                 ; preds = %if.end324
  %193 = load i8, i8* %refA, align 1
  %conv328 = sext i8 %193 to i32
  %cmp329 = icmp eq i32 %conv328, 0
  br i1 %cmp329, label %land.lhs.true331, label %lor.lhs.false339, !prof !169

land.lhs.true331:                                 ; preds = %land.lhs.true327
  %arrayidx332 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  %194 = load i32, i32* %arrayidx332, align 4
  %cmp333 = icmp eq i32 %194, 0
  br i1 %cmp333, label %land.lhs.true335, label %lor.lhs.false339, !prof !170

land.lhs.true335:                                 ; preds = %land.lhs.true331
  %arrayidx336 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  %195 = load i32, i32* %arrayidx336, align 4
  %cmp337 = icmp eq i32 %195, 0
  br i1 %cmp337, label %if.then351, label %lor.lhs.false339, !prof !171

lor.lhs.false339:                                 ; preds = %land.lhs.true335, %land.lhs.true331, %land.lhs.true327
  %196 = load i8, i8* %refB, align 1
  %conv340 = sext i8 %196 to i32
  %cmp341 = icmp eq i32 %conv340, 0
  br i1 %cmp341, label %land.lhs.true343, label %if.else354, !prof !172

land.lhs.true343:                                 ; preds = %lor.lhs.false339
  %arrayidx344 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  %197 = load i32, i32* %arrayidx344, align 4
  %cmp345 = icmp eq i32 %197, 0
  br i1 %cmp345, label %land.lhs.true347, label %if.else354, !prof !173

land.lhs.true347:                                 ; preds = %land.lhs.true343
  %arrayidx348 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  %198 = load i32, i32* %arrayidx348, align 4
  %cmp349 = icmp eq i32 %198, 0
  br i1 %cmp349, label %if.then351, label %if.else354, !prof !174

if.then351:                                       ; preds = %land.lhs.true347, %land.lhs.true335
  %199 = load i32*, i32** %retmv.addr, align 8
  %arrayidx352 = getelementptr inbounds i32, i32* %199, i64 0
  store i32 0, i32* %arrayidx352, align 4
  %200 = load i32*, i32** %retmv.addr, align 8
  %arrayidx353 = getelementptr inbounds i32, i32* %200, i64 1
  store i32 0, i32* %arrayidx353, align 4
  br label %if.end364

if.else354:                                       ; preds = %land.lhs.true347, %land.lhs.true343, %lor.lhs.false339, %if.end324
  %arrayidx355 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  %201 = load i32, i32* %arrayidx355, align 4
  %arrayidx356 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  %202 = load i32, i32* %arrayidx356, align 4
  %arrayidx357 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  %203 = load i32, i32* %arrayidx357, align 4
  %call = call i32 @median(i32 %201, i32 %202, i32 %203)
  %204 = load i32*, i32** %retmv.addr, align 8
  %arrayidx358 = getelementptr inbounds i32, i32* %204, i64 0
  store i32 %call, i32* %arrayidx358, align 4
  %arrayidx359 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  %205 = load i32, i32* %arrayidx359, align 4
  %arrayidx360 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  %206 = load i32, i32* %arrayidx360, align 4
  %arrayidx361 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  %207 = load i32, i32* %arrayidx361, align 4
  %call362 = call i32 @median(i32 %205, i32 %206, i32 %207)
  %208 = load i32*, i32** %retmv.addr, align 8
  %arrayidx363 = getelementptr inbounds i32, i32* %208, i64 1
  store i32 %call362, i32* %arrayidx363, align 4
  br label %if.end364

if.end364:                                        ; preds = %if.else354, %if.then351
  br label %if.end365

if.end365:                                        ; preds = %if.end364, %if.then231
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %if.then200
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %if.then169
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %if.then138
  br label %if.end369

if.end369:                                        ; preds = %if.end368, %if.then109
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %if.then82
  br label %if.end371

if.end371:                                        ; preds = %if.end370, %if.then55
  br label %if.end372

if.end372:                                        ; preds = %if.end371, %if.then44
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @find_directmv_flag(i8 zeroext %dflag, [2 x i8]* %refcol, [4 x [2 x i32]]* %mvcol, i32 %blkx, i32 %blky, i32* %mv1, i32* %mv0, i8 signext %refidx0, i8 signext %refidx1) #0 !prof !175 {
entry:
  %dflag.addr = alloca i8, align 1
  %refcol.addr = alloca [2 x i8]*, align 8
  %mvcol.addr = alloca [4 x [2 x i32]]*, align 8
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %mv1.addr = alloca i32*, align 8
  %mv0.addr = alloca i32*, align 8
  %refidx0.addr = alloca i8, align 1
  %refidx1.addr = alloca i8, align 1
  %colzero = alloca i8, align 1
  store i8 %dflag, i8* %dflag.addr, align 1
  store [2 x i8]* %refcol, [2 x i8]** %refcol.addr, align 8
  store [4 x [2 x i32]]* %mvcol, [4 x [2 x i32]]** %mvcol.addr, align 8
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32* %mv1, i32** %mv1.addr, align 8
  store i32* %mv0, i32** %mv0.addr, align 8
  store i8 %refidx0, i8* %refidx0.addr, align 1
  store i8 %refidx1, i8* %refidx1.addr, align 1
  store i8 0, i8* %colzero, align 1
  %0 = load [2 x i8]*, [2 x i8]** %refcol.addr, align 8
  %1 = load i32, i32* %blkx.addr, align 4
  %div = sdiv i32 %1, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 %idxprom
  %2 = load i32, i32* %blky.addr, align 4
  %div1 = sdiv i32 %2, 2
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %3 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else, !prof !176

land.lhs.true:                                    ; preds = %entry
  %4 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %5 = load i32, i32* %blkx.addr, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %4, i64 %idxprom5
  %6 = load i32, i32* %blky.addr, align 4
  %idxprom7 = sext i32 %6 to i64
  %arrayidx8 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx6, i64 0, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0
  %7 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sle i32 %7, 1
  br i1 %cmp10, label %land.lhs.true12, label %if.else, !prof !177

land.lhs.true12:                                  ; preds = %land.lhs.true
  %8 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %9 = load i32, i32* %blkx.addr, align 4
  %idxprom13 = sext i32 %9 to i64
  %arrayidx14 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %8, i64 %idxprom13
  %10 = load i32, i32* %blky.addr, align 4
  %idxprom15 = sext i32 %10 to i64
  %arrayidx16 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %11 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp sge i32 %11, -1
  br i1 %cmp18, label %land.lhs.true20, label %if.else, !prof !178

land.lhs.true20:                                  ; preds = %land.lhs.true12
  %12 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %13 = load i32, i32* %blkx.addr, align 4
  %idxprom21 = sext i32 %13 to i64
  %arrayidx22 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %12, i64 %idxprom21
  %14 = load i32, i32* %blky.addr, align 4
  %idxprom23 = sext i32 %14 to i64
  %arrayidx24 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx22, i64 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx24, i64 0, i64 1
  %15 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp sle i32 %15, 1
  br i1 %cmp26, label %land.lhs.true28, label %if.else, !prof !179

land.lhs.true28:                                  ; preds = %land.lhs.true20
  %16 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %17 = load i32, i32* %blkx.addr, align 4
  %idxprom29 = sext i32 %17 to i64
  %arrayidx30 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %16, i64 %idxprom29
  %18 = load i32, i32* %blky.addr, align 4
  %idxprom31 = sext i32 %18 to i64
  %arrayidx32 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx30, i64 0, i64 %idxprom31
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx32, i64 0, i64 1
  %19 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp sge i32 %19, -1
  br i1 %cmp34, label %if.then, label %if.else, !prof !180

if.then:                                          ; preds = %land.lhs.true28
  store i8 1, i8* %colzero, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true28, %land.lhs.true20, %land.lhs.true12, %land.lhs.true, %entry
  store i8 0, i8* %colzero, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i8, i8* %dflag.addr, align 1
  %conv36 = zext i8 %20 to i32
  %tobool = icmp ne i32 %conv36, 0
  br i1 %tobool, label %if.then47, label %lor.lhs.false, !prof !181

lor.lhs.false:                                    ; preds = %if.end
  %21 = load i8, i8* %refidx0.addr, align 1
  %conv37 = sext i8 %21 to i32
  %cmp38 = icmp slt i32 %conv37, 0
  br i1 %cmp38, label %if.then47, label %lor.lhs.false40, !prof !182

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %22 = load i8, i8* %refidx0.addr, align 1
  %conv41 = sext i8 %22 to i32
  %cmp42 = icmp eq i32 %conv41, 0
  br i1 %cmp42, label %land.lhs.true44, label %if.end50, !prof !183

land.lhs.true44:                                  ; preds = %lor.lhs.false40
  %23 = load i8, i8* %colzero, align 1
  %conv45 = zext i8 %23 to i32
  %tobool46 = icmp ne i32 %conv45, 0
  br i1 %tobool46, label %if.then47, label %if.end50, !prof !184

if.then47:                                        ; preds = %land.lhs.true44, %lor.lhs.false, %if.end
  %24 = load i32*, i32** %mv0.addr, align 8
  %arrayidx48 = getelementptr inbounds i32, i32* %24, i64 0
  store i32 0, i32* %arrayidx48, align 4
  %25 = load i32*, i32** %mv0.addr, align 8
  %arrayidx49 = getelementptr inbounds i32, i32* %25, i64 1
  store i32 0, i32* %arrayidx49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then47, %land.lhs.true44, %lor.lhs.false40
  %26 = load i8, i8* %dflag.addr, align 1
  %conv51 = zext i8 %26 to i32
  %tobool52 = icmp ne i32 %conv51, 0
  br i1 %tobool52, label %if.then64, label %lor.lhs.false53, !prof !181

lor.lhs.false53:                                  ; preds = %if.end50
  %27 = load i8, i8* %refidx1.addr, align 1
  %conv54 = sext i8 %27 to i32
  %cmp55 = icmp slt i32 %conv54, 0
  br i1 %cmp55, label %if.then64, label %lor.lhs.false57, !prof !182

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %28 = load i8, i8* %refidx1.addr, align 1
  %conv58 = sext i8 %28 to i32
  %cmp59 = icmp eq i32 %conv58, 0
  br i1 %cmp59, label %land.lhs.true61, label %if.end67, !prof !183

land.lhs.true61:                                  ; preds = %lor.lhs.false57
  %29 = load i8, i8* %colzero, align 1
  %conv62 = zext i8 %29 to i32
  %tobool63 = icmp ne i32 %conv62, 0
  br i1 %tobool63, label %if.then64, label %if.end67, !prof !184

if.then64:                                        ; preds = %land.lhs.true61, %lor.lhs.false53, %if.end50
  %30 = load i32*, i32** %mv1.addr, align 8
  %arrayidx65 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx65, align 4
  %31 = load i32*, i32** %mv1.addr, align 8
  %arrayidx66 = getelementptr inbounds i32, i32* %31, i64 1
  store i32 0, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then64, %land.lhs.true61, %lor.lhs.false57
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @findCidx(i32 %startblkx, i32 %startblky, i32 %blk, i32 %width, i32 %blkx, i32 %blky, i32* %idx) #0 !prof !185 {
entry:
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %idx.addr = alloca i32*, align 8
  %blkCy = alloca i32, align 4
  %tempblkcx = alloca i8, align 1
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32* %idx, i32** %idx.addr, align 8
  store i32 0, i32* %blkCy, align 4
  %0 = load i32, i32* %blkx.addr, align 4
  %1 = load i32, i32* %width.addr, align 4
  %add = add nsw i32 %0, %1
  %conv = trunc i32 %add to i8
  store i8 %conv, i8* %tempblkcx, align 1
  %2 = load i32, i32* %blky.addr, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %blkCy, align 4
  %3 = load i8, i8* %tempblkcx, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp sgt i32 %conv1, 3
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !prof !186

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %blkCy, align 4
  %cmp3 = icmp sge i32 %4, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !prof !187

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %5 = load i32, i32* %blkCy, align 4
  %and = and i32 %5, 2
  %cmp5 = icmp ne i32 %and, 0
  %conv6 = zext i1 %cmp5 to i32
  %mul = mul nsw i32 %conv6, 8
  %6 = load i8, i8* %tempblkcx, align 1
  %conv7 = sext i8 %6 to i32
  %and8 = and i32 %conv7, 2
  %cmp9 = icmp ne i32 %and8, 0
  %conv10 = zext i1 %cmp9 to i32
  %mul11 = mul nsw i32 %conv10, 4
  %add12 = add nsw i32 %mul, %mul11
  %7 = load i32, i32* %blkCy, align 4
  %and13 = and i32 %7, 1
  %cmp14 = icmp ne i32 %and13, 0
  %conv15 = zext i1 %cmp14 to i32
  %mul16 = mul nsw i32 %conv15, 2
  %add17 = add nsw i32 %add12, %mul16
  %8 = load i8, i8* %tempblkcx, align 1
  %conv18 = sext i8 %8 to i32
  %and19 = and i32 %conv18, 1
  %cmp20 = icmp ne i32 %and19, 0
  %conv21 = zext i1 %cmp20 to i32
  %add22 = add nsw i32 %add17, %conv21
  %9 = load i32, i32* %blk.addr, align 4
  %cmp23 = icmp sgt i32 %add22, %9
  br i1 %cmp23, label %land.lhs.true25, label %lor.lhs.false32, !prof !188

land.lhs.true25:                                  ; preds = %lor.lhs.false
  %10 = load i8, i8* %tempblkcx, align 1
  %conv26 = sext i8 %10 to i32
  %cmp27 = icmp sle i32 %conv26, 3
  br i1 %cmp27, label %land.lhs.true29, label %lor.lhs.false32, !prof !189

land.lhs.true29:                                  ; preds = %land.lhs.true25
  %11 = load i32, i32* %blkCy, align 4
  %cmp30 = icmp sge i32 %11, 0
  br i1 %cmp30, label %if.then, label %lor.lhs.false32, !prof !190

lor.lhs.false32:                                  ; preds = %land.lhs.true29, %land.lhs.true25, %lor.lhs.false
  %12 = load i32, i32* %startblkx.addr, align 4
  %13 = load i8, i8* %tempblkcx, align 1
  %conv33 = sext i8 %13 to i32
  %add34 = add nsw i32 %12, %conv33
  %cmp35 = icmp sge i32 %add34, 44
  br i1 %cmp35, label %if.then, label %if.else, !prof !191

if.then:                                          ; preds = %lor.lhs.false32, %land.lhs.true29, %land.lhs.true
  %14 = load i32, i32* %startblkx.addr, align 4
  %15 = load i32, i32* %blkx.addr, align 4
  %add37 = add nsw i32 %14, %15
  %sub38 = sub nsw i32 %add37, 1
  %16 = load i32*, i32** %idx.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 0
  store i32 %sub38, i32* %arrayidx, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false32
  %17 = load i32, i32* %startblkx.addr, align 4
  %18 = load i8, i8* %tempblkcx, align 1
  %conv39 = sext i8 %18 to i32
  %add40 = add nsw i32 %17, %conv39
  %19 = load i32*, i32** %idx.addr, align 8
  %arrayidx41 = getelementptr inbounds i32, i32* %19, i64 0
  store i32 %add40, i32* %arrayidx41, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i32, i32* %startblky.addr, align 4
  %21 = load i32, i32* %blkCy, align 4
  %add42 = add nsw i32 %20, %21
  %22 = load i32*, i32** %idx.addr, align 8
  %arrayidx43 = getelementptr inbounds i32, i32* %22, i64 1
  store i32 %add42, i32* %arrayidx43, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_prediction_chroma_subblock_single([4 x i32]* %rMbC, [2 x [2 x i32]]* %mv, [72 x i8]* %Schroma, [72 x i8]* %Schroma_cur, i32 %startblkx, i32 %startblky, i32 %flag) #0 !prof !192 {
entry:
  %rMbC.addr = alloca [4 x i32]*, align 8
  %mv.addr = alloca [2 x [2 x i32]]*, align 8
  %Schroma.addr = alloca [72 x i8]*, align 8
  %Schroma_cur.addr = alloca [72 x i8]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %temp = alloca [3 x [3 x i8]], align 1
  %xfrac = alloca i8, align 1
  %yfrac = alloca i8, align 1
  %xint = alloca i32, align 4
  %yint = alloca i32, align 4
  store [4 x i32]* %rMbC, [4 x i32]** %rMbC.addr, align 8
  store [2 x [2 x i32]]* %mv, [2 x [2 x i32]]** %mv.addr, align 8
  store [72 x i8]* %Schroma, [72 x i8]** %Schroma.addr, align 8
  store [72 x i8]* %Schroma_cur, [72 x i8]** %Schroma_cur.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %x0, align 4
  store i32 0, i32* %y0, align 4
  %0 = bitcast [3 x [3 x i8]]* %temp to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 9, i1 false)
  store i8 0, i8* %xfrac, align 1
  store i8 0, i8* %yfrac, align 1
  store i32 0, i32* %xint, align 4
  store i32 0, i32* %yint, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc138, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 2
  br i1 %cmp, label %for.body, label %for.end140, !prof !193

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc135, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 2
  br i1 %cmp2, label %for.body3, label %for.end137, !prof !194

for.body3:                                        ; preds = %for.cond1
  %3 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom4
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %6 = load i32, i32* %arrayidx6, align 4
  %shr = ashr i32 %6, 3
  store i32 %shr, i32* %xint, align 4
  %7 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %7, i64 %idxprom7
  %9 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %9 to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %10 = load i32, i32* %arrayidx11, align 4
  %shr12 = ashr i32 %10, 3
  store i32 %shr12, i32* %yint, align 4
  %11 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %12 to i64
  %arrayidx14 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 %idxprom13
  %13 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %13 to i64
  %arrayidx16 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %14 = load i32, i32* %arrayidx17, align 4
  %and = and i32 %14, 7
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %xfrac, align 1
  %15 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %16 to i64
  %arrayidx19 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %15, i64 %idxprom18
  %17 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %17 to i64
  %arrayidx21 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx19, i64 0, i64 %idxprom20
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx21, i64 0, i64 1
  %18 = load i32, i32* %arrayidx22, align 4
  %and23 = and i32 %18, 7
  %conv24 = trunc i32 %and23 to i8
  store i8 %conv24, i8* %yfrac, align 1
  store i32 0, i32* %x, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc48, %for.body3
  %19 = load i32, i32* %x, align 4
  %cmp26 = icmp slt i32 %19, 3
  br i1 %cmp26, label %for.body28, label %for.end50, !prof !195

for.body28:                                       ; preds = %for.cond25
  store i32 0, i32* %y, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc, %for.body28
  %20 = load i32, i32* %y, align 4
  %cmp30 = icmp slt i32 %20, 3
  br i1 %cmp30, label %for.body32, label %for.end, !prof !196

for.body32:                                       ; preds = %for.cond29
  %21 = load i32, i32* %startblkx.addr, align 4
  %22 = load i32, i32* %x, align 4
  %add = add nsw i32 %21, %22
  %23 = load i32, i32* %xint, align 4
  %add33 = add nsw i32 %add, %23
  %24 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %24, 2
  %add34 = add nsw i32 %add33, %mul
  %call = call i32 @Clip3(i32 0, i32 87, i32 %add34)
  store i32 %call, i32* %x0, align 4
  %25 = load i32, i32* %startblky.addr, align 4
  %26 = load i32, i32* %y, align 4
  %add35 = add nsw i32 %25, %26
  %27 = load i32, i32* %yint, align 4
  %add36 = add nsw i32 %add35, %27
  %28 = load i32, i32* %j, align 4
  %mul37 = mul nsw i32 %28, 2
  %add38 = add nsw i32 %add36, %mul37
  %call39 = call i32 @Clip3(i32 0, i32 71, i32 %add38)
  store i32 %call39, i32* %y0, align 4
  %29 = load [72 x i8]*, [72 x i8]** %Schroma.addr, align 8
  %30 = load i32, i32* %x0, align 4
  %idxprom40 = sext i32 %30 to i64
  %arrayidx41 = getelementptr inbounds [72 x i8], [72 x i8]* %29, i64 %idxprom40
  %31 = load i32, i32* %y0, align 4
  %idxprom42 = sext i32 %31 to i64
  %arrayidx43 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx41, i64 0, i64 %idxprom42
  %32 = load i8, i8* %arrayidx43, align 1
  %33 = load i32, i32* %x, align 4
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom44
  %34 = load i32, i32* %y, align 4
  %idxprom46 = sext i32 %34 to i64
  %arrayidx47 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx45, i64 0, i64 %idxprom46
  store i8 %32, i8* %arrayidx47, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body32
  %35 = load i32, i32* %y, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond29

for.end:                                          ; preds = %for.cond29
  br label %for.inc48

for.inc48:                                        ; preds = %for.end
  %36 = load i32, i32* %x, align 4
  %inc49 = add nsw i32 %36, 1
  store i32 %inc49, i32* %x, align 4
  br label %for.cond25

for.end50:                                        ; preds = %for.cond25
  store i32 0, i32* %x, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc132, %for.end50
  %37 = load i32, i32* %x, align 4
  %cmp52 = icmp slt i32 %37, 2
  br i1 %cmp52, label %for.body54, label %for.end134, !prof !197

for.body54:                                       ; preds = %for.cond51
  store i32 0, i32* %y, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc129, %for.body54
  %38 = load i32, i32* %y, align 4
  %cmp56 = icmp slt i32 %38, 2
  br i1 %cmp56, label %for.body58, label %for.end131, !prof !198

for.body58:                                       ; preds = %for.cond55
  %39 = load i32, i32* %flag.addr, align 4
  %40 = load [4 x i32]*, [4 x i32]** %rMbC.addr, align 8
  %41 = load i32, i32* %x, align 4
  %42 = load i32, i32* %i, align 4
  %mul59 = mul nsw i32 %42, 2
  %add60 = add nsw i32 %41, %mul59
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 %idxprom61
  %43 = load i32, i32* %y, align 4
  %44 = load i32, i32* %j, align 4
  %mul63 = mul nsw i32 %44, 2
  %add64 = add nsw i32 %43, %mul63
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx62, i64 0, i64 %idxprom65
  %45 = load i32, i32* %arrayidx66, align 4
  %mul67 = mul i32 %39, %45
  %46 = load i8, i8* %xfrac, align 1
  %conv68 = zext i8 %46 to i32
  %sub = sub nsw i32 8, %conv68
  %47 = load i8, i8* %yfrac, align 1
  %conv69 = zext i8 %47 to i32
  %sub70 = sub nsw i32 8, %conv69
  %mul71 = mul nsw i32 %sub, %sub70
  %48 = load i32, i32* %x, align 4
  %idxprom72 = sext i32 %48 to i64
  %arrayidx73 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom72
  %49 = load i32, i32* %y, align 4
  %idxprom74 = sext i32 %49 to i64
  %arrayidx75 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx73, i64 0, i64 %idxprom74
  %50 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %50 to i32
  %mul77 = mul nsw i32 %mul71, %conv76
  %51 = load i8, i8* %xfrac, align 1
  %conv78 = zext i8 %51 to i32
  %52 = load i8, i8* %yfrac, align 1
  %conv79 = zext i8 %52 to i32
  %sub80 = sub nsw i32 8, %conv79
  %mul81 = mul nsw i32 %conv78, %sub80
  %53 = load i32, i32* %x, align 4
  %add82 = add nsw i32 %53, 1
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom83
  %54 = load i32, i32* %y, align 4
  %idxprom85 = sext i32 %54 to i64
  %arrayidx86 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx84, i64 0, i64 %idxprom85
  %55 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %55 to i32
  %mul88 = mul nsw i32 %mul81, %conv87
  %add89 = add nsw i32 %mul77, %mul88
  %56 = load i8, i8* %xfrac, align 1
  %conv90 = zext i8 %56 to i32
  %sub91 = sub nsw i32 8, %conv90
  %57 = load i8, i8* %yfrac, align 1
  %conv92 = zext i8 %57 to i32
  %mul93 = mul nsw i32 %sub91, %conv92
  %58 = load i32, i32* %x, align 4
  %idxprom94 = sext i32 %58 to i64
  %arrayidx95 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom94
  %59 = load i32, i32* %y, align 4
  %add96 = add nsw i32 %59, 1
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx95, i64 0, i64 %idxprom97
  %60 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %60 to i32
  %mul100 = mul nsw i32 %mul93, %conv99
  %add101 = add nsw i32 %add89, %mul100
  %61 = load i8, i8* %xfrac, align 1
  %conv102 = zext i8 %61 to i32
  %62 = load i8, i8* %yfrac, align 1
  %conv103 = zext i8 %62 to i32
  %mul104 = mul nsw i32 %conv102, %conv103
  %63 = load i32, i32* %x, align 4
  %add105 = add nsw i32 %63, 1
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom106
  %64 = load i32, i32* %y, align 4
  %add108 = add nsw i32 %64, 1
  %idxprom109 = sext i32 %add108 to i64
  %arrayidx110 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx107, i64 0, i64 %idxprom109
  %65 = load i8, i8* %arrayidx110, align 1
  %conv111 = zext i8 %65 to i32
  %mul112 = mul nsw i32 %mul104, %conv111
  %add113 = add nsw i32 %add101, %mul112
  %add114 = add nsw i32 %add113, 32
  %shr115 = ashr i32 %add114, 6
  %add116 = add i32 %mul67, %shr115
  %call117 = call i32 @Clip1y(i32 %add116)
  %conv118 = trunc i32 %call117 to i8
  %66 = load [72 x i8]*, [72 x i8]** %Schroma_cur.addr, align 8
  %67 = load i32, i32* %startblkx.addr, align 4
  %68 = load i32, i32* %x, align 4
  %add119 = add nsw i32 %67, %68
  %69 = load i32, i32* %i, align 4
  %mul120 = mul nsw i32 %69, 2
  %add121 = add nsw i32 %add119, %mul120
  %idxprom122 = sext i32 %add121 to i64
  %arrayidx123 = getelementptr inbounds [72 x i8], [72 x i8]* %66, i64 %idxprom122
  %70 = load i32, i32* %startblky.addr, align 4
  %71 = load i32, i32* %y, align 4
  %add124 = add nsw i32 %70, %71
  %72 = load i32, i32* %j, align 4
  %mul125 = mul nsw i32 %72, 2
  %add126 = add nsw i32 %add124, %mul125
  %idxprom127 = sext i32 %add126 to i64
  %arrayidx128 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx123, i64 0, i64 %idxprom127
  store i8 %conv118, i8* %arrayidx128, align 1
  br label %for.inc129

for.inc129:                                       ; preds = %for.body58
  %73 = load i32, i32* %y, align 4
  %inc130 = add nsw i32 %73, 1
  store i32 %inc130, i32* %y, align 4
  br label %for.cond55

for.end131:                                       ; preds = %for.cond55
  br label %for.inc132

for.inc132:                                       ; preds = %for.end131
  %74 = load i32, i32* %x, align 4
  %inc133 = add nsw i32 %74, 1
  store i32 %inc133, i32* %x, align 4
  br label %for.cond51

for.end134:                                       ; preds = %for.cond51
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %75 = load i32, i32* %j, align 4
  %inc136 = add nsw i32 %75, 1
  store i32 %inc136, i32* %j, align 4
  br label %for.cond1

for.end137:                                       ; preds = %for.cond1
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %76 = load i32, i32* %i, align 4
  %inc139 = add nsw i32 %76, 1
  store i32 %inc139, i32* %i, align 4
  br label %for.cond

for.end140:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_prediction_chroma_subblock_double([4 x i32]* %rMbC, [2 x [2 x i32]]* %mv0, [2 x [2 x i32]]* %mv1, [72 x i8]* %Schroma0, [72 x i8]* %Schroma1, [72 x i8]* %Schroma_cur, i32 %startblkx, i32 %startblky, i8 zeroext %flag) #0 !prof !199 {
entry:
  %rMbC.addr = alloca [4 x i32]*, align 8
  %mv0.addr = alloca [2 x [2 x i32]]*, align 8
  %mv1.addr = alloca [2 x [2 x i32]]*, align 8
  %Schroma0.addr = alloca [72 x i8]*, align 8
  %Schroma1.addr = alloca [72 x i8]*, align 8
  %Schroma_cur.addr = alloca [72 x i8]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %flag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %temp0 = alloca [3 x [3 x i8]], align 1
  %temp1 = alloca [3 x [3 x i8]], align 1
  %xfrac0 = alloca i8, align 1
  %yfrac0 = alloca i8, align 1
  %xint0 = alloca i32, align 4
  %yint0 = alloca i32, align 4
  %xfrac1 = alloca i8, align 1
  %yfrac1 = alloca i8, align 1
  %xint1 = alloca i32, align 4
  %yint1 = alloca i32, align 4
  store [4 x i32]* %rMbC, [4 x i32]** %rMbC.addr, align 8
  store [2 x [2 x i32]]* %mv0, [2 x [2 x i32]]** %mv0.addr, align 8
  store [2 x [2 x i32]]* %mv1, [2 x [2 x i32]]** %mv1.addr, align 8
  store [72 x i8]* %Schroma0, [72 x i8]** %Schroma0.addr, align 8
  store [72 x i8]* %Schroma1, [72 x i8]** %Schroma1.addr, align 8
  store [72 x i8]* %Schroma_cur, [72 x i8]** %Schroma_cur.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i8 %flag, i8* %flag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %x0, align 4
  store i32 0, i32* %y0, align 4
  %0 = bitcast [3 x [3 x i8]]* %temp0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 9, i1 false)
  %1 = bitcast [3 x [3 x i8]]* %temp1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 9, i1 false)
  store i8 0, i8* %xfrac0, align 1
  store i8 0, i8* %yfrac0, align 1
  store i32 0, i32* %xint0, align 4
  store i32 0, i32* %yint0, align 4
  store i8 0, i8* %xfrac1, align 1
  store i8 0, i8* %yfrac1, align 1
  store i32 0, i32* %xint1, align 4
  store i32 0, i32* %yint1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc249, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 2
  br i1 %cmp, label %for.body, label %for.end251, !prof !132

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc246, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 2
  br i1 %cmp2, label %for.body3, label %for.end248, !prof !200

for.body3:                                        ; preds = %for.cond1
  %4 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %4, i64 %idxprom
  %6 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom4
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %7 = load i32, i32* %arrayidx6, align 4
  %shr = ashr i32 %7, 3
  store i32 %shr, i32* %xint0, align 4
  %8 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %8, i64 %idxprom7
  %10 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %11 = load i32, i32* %arrayidx11, align 4
  %shr12 = ashr i32 %11, 3
  store i32 %shr12, i32* %yint0, align 4
  %12 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 %idxprom13
  %14 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %14 to i64
  %arrayidx16 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %15 = load i32, i32* %arrayidx17, align 4
  %and = and i32 %15, 7
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %xfrac0, align 1
  %16 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %17 to i64
  %arrayidx19 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %16, i64 %idxprom18
  %18 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %18 to i64
  %arrayidx21 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx19, i64 0, i64 %idxprom20
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx21, i64 0, i64 1
  %19 = load i32, i32* %arrayidx22, align 4
  %and23 = and i32 %19, 7
  %conv24 = trunc i32 %and23 to i8
  store i8 %conv24, i8* %yfrac0, align 1
  %20 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %21 to i64
  %arrayidx26 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %20, i64 %idxprom25
  %22 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %22 to i64
  %arrayidx28 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx26, i64 0, i64 %idxprom27
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx28, i64 0, i64 0
  %23 = load i32, i32* %arrayidx29, align 4
  %shr30 = ashr i32 %23, 3
  store i32 %shr30, i32* %xint1, align 4
  %24 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %25 to i64
  %arrayidx32 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %24, i64 %idxprom31
  %26 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %26 to i64
  %arrayidx34 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx32, i64 0, i64 %idxprom33
  %arrayidx35 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx34, i64 0, i64 1
  %27 = load i32, i32* %arrayidx35, align 4
  %shr36 = ashr i32 %27, 3
  store i32 %shr36, i32* %yint1, align 4
  %28 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %29 to i64
  %arrayidx38 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %28, i64 %idxprom37
  %30 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %30 to i64
  %arrayidx40 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx38, i64 0, i64 %idxprom39
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx40, i64 0, i64 0
  %31 = load i32, i32* %arrayidx41, align 4
  %and42 = and i32 %31, 7
  %conv43 = trunc i32 %and42 to i8
  store i8 %conv43, i8* %xfrac1, align 1
  %32 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %32, i64 %idxprom44
  %34 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %34 to i64
  %arrayidx47 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx45, i64 0, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx47, i64 0, i64 1
  %35 = load i32, i32* %arrayidx48, align 4
  %and49 = and i32 %35, 7
  %conv50 = trunc i32 %and49 to i8
  store i8 %conv50, i8* %yfrac1, align 1
  store i32 0, i32* %x, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc74, %for.body3
  %36 = load i32, i32* %x, align 4
  %cmp52 = icmp slt i32 %36, 3
  br i1 %cmp52, label %for.body54, label %for.end76, !prof !201

for.body54:                                       ; preds = %for.cond51
  store i32 0, i32* %y, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc, %for.body54
  %37 = load i32, i32* %y, align 4
  %cmp56 = icmp slt i32 %37, 3
  br i1 %cmp56, label %for.body58, label %for.end, !prof !202

for.body58:                                       ; preds = %for.cond55
  %38 = load i32, i32* %startblkx.addr, align 4
  %39 = load i32, i32* %x, align 4
  %add = add nsw i32 %38, %39
  %40 = load i32, i32* %xint0, align 4
  %add59 = add nsw i32 %add, %40
  %41 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %41, 2
  %add60 = add nsw i32 %add59, %mul
  %call = call i32 @Clip3(i32 0, i32 87, i32 %add60)
  store i32 %call, i32* %x0, align 4
  %42 = load i32, i32* %startblky.addr, align 4
  %43 = load i32, i32* %y, align 4
  %add61 = add nsw i32 %42, %43
  %44 = load i32, i32* %yint0, align 4
  %add62 = add nsw i32 %add61, %44
  %45 = load i32, i32* %j, align 4
  %mul63 = mul nsw i32 %45, 2
  %add64 = add nsw i32 %add62, %mul63
  %call65 = call i32 @Clip3(i32 0, i32 71, i32 %add64)
  store i32 %call65, i32* %y0, align 4
  %46 = load [72 x i8]*, [72 x i8]** %Schroma0.addr, align 8
  %47 = load i32, i32* %x0, align 4
  %idxprom66 = sext i32 %47 to i64
  %arrayidx67 = getelementptr inbounds [72 x i8], [72 x i8]* %46, i64 %idxprom66
  %48 = load i32, i32* %y0, align 4
  %idxprom68 = sext i32 %48 to i64
  %arrayidx69 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx67, i64 0, i64 %idxprom68
  %49 = load i8, i8* %arrayidx69, align 1
  %50 = load i32, i32* %x, align 4
  %idxprom70 = sext i32 %50 to i64
  %arrayidx71 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom70
  %51 = load i32, i32* %y, align 4
  %idxprom72 = sext i32 %51 to i64
  %arrayidx73 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx71, i64 0, i64 %idxprom72
  store i8 %49, i8* %arrayidx73, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body58
  %52 = load i32, i32* %y, align 4
  %inc = add nsw i32 %52, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond55

for.end:                                          ; preds = %for.cond55
  br label %for.inc74

for.inc74:                                        ; preds = %for.end
  %53 = load i32, i32* %x, align 4
  %inc75 = add nsw i32 %53, 1
  store i32 %inc75, i32* %x, align 4
  br label %for.cond51

for.end76:                                        ; preds = %for.cond51
  store i32 0, i32* %x, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc106, %for.end76
  %54 = load i32, i32* %x, align 4
  %cmp78 = icmp slt i32 %54, 3
  br i1 %cmp78, label %for.body80, label %for.end108, !prof !201

for.body80:                                       ; preds = %for.cond77
  store i32 0, i32* %y, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc103, %for.body80
  %55 = load i32, i32* %y, align 4
  %cmp82 = icmp slt i32 %55, 3
  br i1 %cmp82, label %for.body84, label %for.end105, !prof !202

for.body84:                                       ; preds = %for.cond81
  %56 = load i32, i32* %startblkx.addr, align 4
  %57 = load i32, i32* %x, align 4
  %add85 = add nsw i32 %56, %57
  %58 = load i32, i32* %xint1, align 4
  %add86 = add nsw i32 %add85, %58
  %59 = load i32, i32* %i, align 4
  %mul87 = mul nsw i32 %59, 2
  %add88 = add nsw i32 %add86, %mul87
  %call89 = call i32 @Clip3(i32 0, i32 87, i32 %add88)
  store i32 %call89, i32* %x0, align 4
  %60 = load i32, i32* %startblky.addr, align 4
  %61 = load i32, i32* %y, align 4
  %add90 = add nsw i32 %60, %61
  %62 = load i32, i32* %yint1, align 4
  %add91 = add nsw i32 %add90, %62
  %63 = load i32, i32* %j, align 4
  %mul92 = mul nsw i32 %63, 2
  %add93 = add nsw i32 %add91, %mul92
  %call94 = call i32 @Clip3(i32 0, i32 71, i32 %add93)
  store i32 %call94, i32* %y0, align 4
  %64 = load [72 x i8]*, [72 x i8]** %Schroma1.addr, align 8
  %65 = load i32, i32* %x0, align 4
  %idxprom95 = sext i32 %65 to i64
  %arrayidx96 = getelementptr inbounds [72 x i8], [72 x i8]* %64, i64 %idxprom95
  %66 = load i32, i32* %y0, align 4
  %idxprom97 = sext i32 %66 to i64
  %arrayidx98 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx96, i64 0, i64 %idxprom97
  %67 = load i8, i8* %arrayidx98, align 1
  %68 = load i32, i32* %x, align 4
  %idxprom99 = sext i32 %68 to i64
  %arrayidx100 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom99
  %69 = load i32, i32* %y, align 4
  %idxprom101 = sext i32 %69 to i64
  %arrayidx102 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx100, i64 0, i64 %idxprom101
  store i8 %67, i8* %arrayidx102, align 1
  br label %for.inc103

for.inc103:                                       ; preds = %for.body84
  %70 = load i32, i32* %y, align 4
  %inc104 = add nsw i32 %70, 1
  store i32 %inc104, i32* %y, align 4
  br label %for.cond81

for.end105:                                       ; preds = %for.cond81
  br label %for.inc106

for.inc106:                                       ; preds = %for.end105
  %71 = load i32, i32* %x, align 4
  %inc107 = add nsw i32 %71, 1
  store i32 %inc107, i32* %x, align 4
  br label %for.cond77

for.end108:                                       ; preds = %for.cond77
  store i32 0, i32* %x, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc243, %for.end108
  %72 = load i32, i32* %x, align 4
  %cmp110 = icmp slt i32 %72, 2
  br i1 %cmp110, label %for.body112, label %for.end245, !prof !203

for.body112:                                      ; preds = %for.cond109
  store i32 0, i32* %y, align 4
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc240, %for.body112
  %73 = load i32, i32* %y, align 4
  %cmp114 = icmp slt i32 %73, 2
  br i1 %cmp114, label %for.body116, label %for.end242, !prof !204

for.body116:                                      ; preds = %for.cond113
  %74 = load i8, i8* %flag.addr, align 1
  %conv117 = zext i8 %74 to i32
  %75 = load [4 x i32]*, [4 x i32]** %rMbC.addr, align 8
  %76 = load i32, i32* %x, align 4
  %77 = load i32, i32* %i, align 4
  %mul118 = mul nsw i32 %77, 2
  %add119 = add nsw i32 %76, %mul118
  %idxprom120 = sext i32 %add119 to i64
  %arrayidx121 = getelementptr inbounds [4 x i32], [4 x i32]* %75, i64 %idxprom120
  %78 = load i32, i32* %y, align 4
  %79 = load i32, i32* %j, align 4
  %mul122 = mul nsw i32 %79, 2
  %add123 = add nsw i32 %78, %mul122
  %idxprom124 = sext i32 %add123 to i64
  %arrayidx125 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx121, i64 0, i64 %idxprom124
  %80 = load i32, i32* %arrayidx125, align 4
  %mul126 = mul nsw i32 %conv117, %80
  %81 = load i8, i8* %xfrac0, align 1
  %conv127 = zext i8 %81 to i32
  %sub = sub nsw i32 8, %conv127
  %82 = load i8, i8* %yfrac0, align 1
  %conv128 = zext i8 %82 to i32
  %sub129 = sub nsw i32 8, %conv128
  %mul130 = mul nsw i32 %sub, %sub129
  %83 = load i32, i32* %x, align 4
  %idxprom131 = sext i32 %83 to i64
  %arrayidx132 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom131
  %84 = load i32, i32* %y, align 4
  %idxprom133 = sext i32 %84 to i64
  %arrayidx134 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx132, i64 0, i64 %idxprom133
  %85 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %85 to i32
  %mul136 = mul nsw i32 %mul130, %conv135
  %86 = load i8, i8* %xfrac0, align 1
  %conv137 = zext i8 %86 to i32
  %87 = load i8, i8* %yfrac0, align 1
  %conv138 = zext i8 %87 to i32
  %sub139 = sub nsw i32 8, %conv138
  %mul140 = mul nsw i32 %conv137, %sub139
  %88 = load i32, i32* %x, align 4
  %add141 = add nsw i32 %88, 1
  %idxprom142 = sext i32 %add141 to i64
  %arrayidx143 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom142
  %89 = load i32, i32* %y, align 4
  %idxprom144 = sext i32 %89 to i64
  %arrayidx145 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx143, i64 0, i64 %idxprom144
  %90 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %90 to i32
  %mul147 = mul nsw i32 %mul140, %conv146
  %add148 = add nsw i32 %mul136, %mul147
  %91 = load i8, i8* %xfrac0, align 1
  %conv149 = zext i8 %91 to i32
  %sub150 = sub nsw i32 8, %conv149
  %92 = load i8, i8* %yfrac0, align 1
  %conv151 = zext i8 %92 to i32
  %mul152 = mul nsw i32 %sub150, %conv151
  %93 = load i32, i32* %x, align 4
  %idxprom153 = sext i32 %93 to i64
  %arrayidx154 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom153
  %94 = load i32, i32* %y, align 4
  %add155 = add nsw i32 %94, 1
  %idxprom156 = sext i32 %add155 to i64
  %arrayidx157 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx154, i64 0, i64 %idxprom156
  %95 = load i8, i8* %arrayidx157, align 1
  %conv158 = zext i8 %95 to i32
  %mul159 = mul nsw i32 %mul152, %conv158
  %add160 = add nsw i32 %add148, %mul159
  %96 = load i8, i8* %xfrac0, align 1
  %conv161 = zext i8 %96 to i32
  %97 = load i8, i8* %yfrac0, align 1
  %conv162 = zext i8 %97 to i32
  %mul163 = mul nsw i32 %conv161, %conv162
  %98 = load i32, i32* %x, align 4
  %add164 = add nsw i32 %98, 1
  %idxprom165 = sext i32 %add164 to i64
  %arrayidx166 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom165
  %99 = load i32, i32* %y, align 4
  %add167 = add nsw i32 %99, 1
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx166, i64 0, i64 %idxprom168
  %100 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %100 to i32
  %mul171 = mul nsw i32 %mul163, %conv170
  %add172 = add nsw i32 %add160, %mul171
  %add173 = add nsw i32 %add172, 32
  %shr174 = ashr i32 %add173, 6
  %101 = load i8, i8* %xfrac1, align 1
  %conv175 = zext i8 %101 to i32
  %sub176 = sub nsw i32 8, %conv175
  %102 = load i8, i8* %yfrac1, align 1
  %conv177 = zext i8 %102 to i32
  %sub178 = sub nsw i32 8, %conv177
  %mul179 = mul nsw i32 %sub176, %sub178
  %103 = load i32, i32* %x, align 4
  %idxprom180 = sext i32 %103 to i64
  %arrayidx181 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom180
  %104 = load i32, i32* %y, align 4
  %idxprom182 = sext i32 %104 to i64
  %arrayidx183 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx181, i64 0, i64 %idxprom182
  %105 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %105 to i32
  %mul185 = mul nsw i32 %mul179, %conv184
  %106 = load i8, i8* %xfrac1, align 1
  %conv186 = zext i8 %106 to i32
  %107 = load i8, i8* %yfrac1, align 1
  %conv187 = zext i8 %107 to i32
  %sub188 = sub nsw i32 8, %conv187
  %mul189 = mul nsw i32 %conv186, %sub188
  %108 = load i32, i32* %x, align 4
  %add190 = add nsw i32 %108, 1
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom191
  %109 = load i32, i32* %y, align 4
  %idxprom193 = sext i32 %109 to i64
  %arrayidx194 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx192, i64 0, i64 %idxprom193
  %110 = load i8, i8* %arrayidx194, align 1
  %conv195 = zext i8 %110 to i32
  %mul196 = mul nsw i32 %mul189, %conv195
  %add197 = add nsw i32 %mul185, %mul196
  %111 = load i8, i8* %xfrac1, align 1
  %conv198 = zext i8 %111 to i32
  %sub199 = sub nsw i32 8, %conv198
  %112 = load i8, i8* %yfrac1, align 1
  %conv200 = zext i8 %112 to i32
  %mul201 = mul nsw i32 %sub199, %conv200
  %113 = load i32, i32* %x, align 4
  %idxprom202 = sext i32 %113 to i64
  %arrayidx203 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom202
  %114 = load i32, i32* %y, align 4
  %add204 = add nsw i32 %114, 1
  %idxprom205 = sext i32 %add204 to i64
  %arrayidx206 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx203, i64 0, i64 %idxprom205
  %115 = load i8, i8* %arrayidx206, align 1
  %conv207 = zext i8 %115 to i32
  %mul208 = mul nsw i32 %mul201, %conv207
  %add209 = add nsw i32 %add197, %mul208
  %116 = load i8, i8* %xfrac1, align 1
  %conv210 = zext i8 %116 to i32
  %117 = load i8, i8* %yfrac1, align 1
  %conv211 = zext i8 %117 to i32
  %mul212 = mul nsw i32 %conv210, %conv211
  %118 = load i32, i32* %x, align 4
  %add213 = add nsw i32 %118, 1
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom214
  %119 = load i32, i32* %y, align 4
  %add216 = add nsw i32 %119, 1
  %idxprom217 = sext i32 %add216 to i64
  %arrayidx218 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx215, i64 0, i64 %idxprom217
  %120 = load i8, i8* %arrayidx218, align 1
  %conv219 = zext i8 %120 to i32
  %mul220 = mul nsw i32 %mul212, %conv219
  %add221 = add nsw i32 %add209, %mul220
  %add222 = add nsw i32 %add221, 32
  %shr223 = ashr i32 %add222, 6
  %add224 = add nsw i32 %shr174, %shr223
  %add225 = add nsw i32 %add224, 1
  %shr226 = ashr i32 %add225, 1
  %add227 = add nsw i32 %mul126, %shr226
  %call228 = call i32 @Clip1y(i32 %add227)
  %conv229 = trunc i32 %call228 to i8
  %121 = load [72 x i8]*, [72 x i8]** %Schroma_cur.addr, align 8
  %122 = load i32, i32* %startblkx.addr, align 4
  %123 = load i32, i32* %x, align 4
  %add230 = add nsw i32 %122, %123
  %124 = load i32, i32* %i, align 4
  %mul231 = mul nsw i32 %124, 2
  %add232 = add nsw i32 %add230, %mul231
  %idxprom233 = sext i32 %add232 to i64
  %arrayidx234 = getelementptr inbounds [72 x i8], [72 x i8]* %121, i64 %idxprom233
  %125 = load i32, i32* %startblky.addr, align 4
  %126 = load i32, i32* %y, align 4
  %add235 = add nsw i32 %125, %126
  %127 = load i32, i32* %j, align 4
  %mul236 = mul nsw i32 %127, 2
  %add237 = add nsw i32 %add235, %mul236
  %idxprom238 = sext i32 %add237 to i64
  %arrayidx239 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx234, i64 0, i64 %idxprom238
  store i8 %conv229, i8* %arrayidx239, align 1
  br label %for.inc240

for.inc240:                                       ; preds = %for.body116
  %128 = load i32, i32* %y, align 4
  %inc241 = add nsw i32 %128, 1
  store i32 %inc241, i32* %y, align 4
  br label %for.cond113

for.end242:                                       ; preds = %for.cond113
  br label %for.inc243

for.inc243:                                       ; preds = %for.end242
  %129 = load i32, i32* %x, align 4
  %inc244 = add nsw i32 %129, 1
  store i32 %inc244, i32* %x, align 4
  br label %for.cond109

for.end245:                                       ; preds = %for.cond109
  br label %for.inc246

for.inc246:                                       ; preds = %for.end245
  %130 = load i32, i32* %j, align 4
  %inc247 = add nsw i32 %130, 1
  store i32 %inc247, i32* %j, align 4
  br label %for.cond1

for.end248:                                       ; preds = %for.cond1
  br label %for.inc249

for.inc249:                                       ; preds = %for.end248
  %131 = load i32, i32* %i, align 4
  %inc250 = add nsw i32 %131, 1
  store i32 %inc250, i32* %i, align 4
  br label %for.cond

for.end251:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_j([144 x i8]* %Sluma, i32 %xint, i32 %yint, [9 x i8]* %temp) #0 !prof !205 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x, align 4
  %4 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %4, 2
  %5 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %5
  %call6 = call i32 @Clip3(i32 0, i32 143, i32 %add5)
  store i32 %call6, i32* %y, align 4
  %6 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %7 = load i32, i32* %x, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %6, i64 %idxprom
  %8 = load i32, i32* %y, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom7
  %9 = load i8, i8* %arrayidx8, align 1
  %10 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 %idxprom9
  %12 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %12 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx10, i64 0, i64 %idxprom11
  store i8 %9, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %14, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_H([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %yoffset, [9 x i8]* %temp) #0 !prof !206 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %yoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %yoffset, i32* %yoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end17, !prof !207

for.body:                                         ; preds = %for.cond
  store i32 2, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 6
  br i1 %cmp2, label %for.body3, label %for.end, !prof !208

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x, align 4
  %4 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %4, 2
  %5 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %5
  %6 = load i32, i32* %yoffset.addr, align 4
  %add6 = add nsw i32 %add5, %6
  %call7 = call i32 @Clip3(i32 0, i32 143, i32 %add6)
  store i32 %call7, i32* %y, align 4
  %7 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %8 = load i32, i32* %x, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %7, i64 %idxprom
  %9 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %11 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %12 to i64
  %arrayidx11 = getelementptr inbounds [9 x i8], [9 x i8]* %11, i64 %idxprom10
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %yoffset.addr, align 4
  %add12 = add nsw i32 %13, %14
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx11, i64 0, i64 %idxprom13
  store i8 %10, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_V([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %xoffset, [9 x i8]* %temp) #0 !prof !209 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %xoffset, i32* %xoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end17, !prof !210

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end, !prof !211

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %4 = load i32, i32* %xoffset.addr, align 4
  %add4 = add nsw i32 %add, %4
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add4)
  store i32 %call, i32* %x, align 4
  %5 = load i32, i32* %yint.addr, align 4
  %sub5 = sub nsw i32 %5, 2
  %6 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %sub5, %6
  %call7 = call i32 @Clip3(i32 0, i32 143, i32 %add6)
  store i32 %call7, i32* %y, align 4
  %7 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %8 = load i32, i32* %x, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %7, i64 %idxprom
  %9 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %11 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %xoffset.addr, align 4
  %add10 = add nsw i32 %12, %13
  %idxprom11 = sext i32 %add10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %11, i64 %idxprom11
  %14 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %14 to i64
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx12, i64 0, i64 %idxprom13
  store i8 %10, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_Cross([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %xoffset, i32 %yoffset, [9 x i8]* %temp) #0 !prof !212 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xoffset.addr = alloca i32, align 4
  %yoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %xoffset, i32* %xoffset.addr, align 4
  store i32 %yoffset, i32* %yoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end24, !prof !213

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end, !prof !214

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %xoffset.addr, align 4
  %add = add nsw i32 1, %3
  %cmp4 = icmp sgt i32 %2, %add
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false, !prof !215

land.lhs.true:                                    ; preds = %for.body3
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %xoffset.addr, align 4
  %add5 = add nsw i32 6, %5
  %cmp6 = icmp slt i32 %4, %add5
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !prof !216

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body3
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %yoffset.addr, align 4
  %add7 = add nsw i32 1, %7
  %cmp8 = icmp sgt i32 %6, %add7
  br i1 %cmp8, label %land.lhs.true9, label %if.end, !prof !217

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %yoffset.addr, align 4
  %add10 = add nsw i32 6, %9
  %cmp11 = icmp slt i32 %8, %add10
  br i1 %cmp11, label %if.then, label %if.end, !prof !218

if.then:                                          ; preds = %land.lhs.true9, %land.lhs.true
  %10 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %10, 2
  %11 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %sub, %11
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add12)
  store i32 %call, i32* %x, align 4
  %12 = load i32, i32* %yint.addr, align 4
  %sub13 = sub nsw i32 %12, 2
  %13 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %sub13, %13
  %call15 = call i32 @Clip3(i32 0, i32 143, i32 %add14)
  store i32 %call15, i32* %y, align 4
  %14 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %15 = load i32, i32* %x, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %14, i64 %idxprom
  %16 = load i32, i32* %y, align 4
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom16
  %17 = load i8, i8* %arrayidx17, align 1
  %18 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %19 to i64
  %arrayidx19 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom18
  %20 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %20 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx19, i64 0, i64 %idxprom20
  store i8 %17, i8* %arrayidx21, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true9, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %22 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %22, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_G([144 x i8]* %Sluma, i32 %xint, i32 %yint, [9 x i8]* %temp) #0 !prof !205 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 2, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %3 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %3, 2
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %2, i64 %idxprom
  %5 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %5, 2
  %6 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %6
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom6
  %7 = load i8, i8* %arrayidx7, align 1
  %8 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %8, i64 %idxprom8
  %10 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom10
  store i8 %7, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_comp([144 x i8]* %Sluma, i32 %xint, i32 %yint, i8 zeroext %xfrac, i8 zeroext %yfrac, [9 x i8]* %temp) #0 !prof !219 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xfrac.addr = alloca i8, align 1
  %yfrac.addr = alloca i8, align 1
  %temp.addr = alloca [9 x i8]*, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i8 %xfrac, i8* %xfrac.addr, align 1
  store i8 %yfrac, i8* %yfrac.addr, align 1
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  %0 = load i8, i8* %xfrac.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !220

if.then:                                          ; preds = %entry
  %1 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %2 = load i32, i32* %xint.addr, align 4
  %3 = load i32, i32* %yint.addr, align 4
  %4 = load i8, i8* %xfrac.addr, align 1
  %conv2 = zext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %land.rhs, label %land.end, !prof !221

land.rhs:                                         ; preds = %if.then
  %5 = load i8, i8* %yfrac.addr, align 1
  %conv5 = zext i8 %5 to i32
  %cmp6 = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %6 = phi i1 [ false, %if.then ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_V([144 x i8]* %1, i32 %2, i32 %3, i32 %land.ext, [9 x i8]* %7)
  br label %if.end47

if.else:                                          ; preds = %entry
  %8 = load i8, i8* %yfrac.addr, align 1
  %conv8 = zext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %if.then11, label %if.else21, !prof !222

if.then11:                                        ; preds = %if.else
  %9 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %10 = load i32, i32* %xint.addr, align 4
  %11 = load i32, i32* %yint.addr, align 4
  %12 = load i8, i8* %yfrac.addr, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 3
  br i1 %cmp13, label %land.rhs15, label %land.end19, !prof !223

land.rhs15:                                       ; preds = %if.then11
  %13 = load i8, i8* %xfrac.addr, align 1
  %conv16 = zext i8 %13 to i32
  %cmp17 = icmp ne i32 %conv16, 0
  br label %land.end19

land.end19:                                       ; preds = %land.rhs15, %if.then11
  %14 = phi i1 [ false, %if.then11 ], [ %cmp17, %land.rhs15 ]
  %land.ext20 = zext i1 %14 to i32
  %15 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_H([144 x i8]* %9, i32 %10, i32 %11, i32 %land.ext20, [9 x i8]* %15)
  br label %if.end46

if.else21:                                        ; preds = %if.else
  %16 = load i8, i8* %xfrac.addr, align 1
  %conv22 = zext i8 %16 to i32
  %rem = srem i32 %conv22, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %land.lhs.true, label %if.else45, !prof !224

land.lhs.true:                                    ; preds = %if.else21
  %17 = load i8, i8* %yfrac.addr, align 1
  %conv23 = zext i8 %17 to i32
  %rem24 = srem i32 %conv23, 2
  %tobool25 = icmp ne i32 %rem24, 0
  br i1 %tobool25, label %if.then26, label %if.else45, !prof !224

if.then26:                                        ; preds = %land.lhs.true
  %18 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %19 = load i32, i32* %xint.addr, align 4
  %20 = load i32, i32* %yint.addr, align 4
  %21 = load i8, i8* %xfrac.addr, align 1
  %conv27 = zext i8 %21 to i32
  %cmp28 = icmp eq i32 %conv27, 3
  br i1 %cmp28, label %land.rhs30, label %land.end34, !prof !225

land.rhs30:                                       ; preds = %if.then26
  %22 = load i8, i8* %yfrac.addr, align 1
  %conv31 = zext i8 %22 to i32
  %cmp32 = icmp ne i32 %conv31, 0
  br label %land.end34

land.end34:                                       ; preds = %land.rhs30, %if.then26
  %23 = phi i1 [ false, %if.then26 ], [ %cmp32, %land.rhs30 ]
  %land.ext35 = zext i1 %23 to i32
  %24 = load i8, i8* %yfrac.addr, align 1
  %conv36 = zext i8 %24 to i32
  %cmp37 = icmp eq i32 %conv36, 3
  br i1 %cmp37, label %land.rhs39, label %land.end43, !prof !226

land.rhs39:                                       ; preds = %land.end34
  %25 = load i8, i8* %xfrac.addr, align 1
  %conv40 = zext i8 %25 to i32
  %cmp41 = icmp ne i32 %conv40, 0
  br label %land.end43

land.end43:                                       ; preds = %land.rhs39, %land.end34
  %26 = phi i1 [ false, %land.end34 ], [ %cmp41, %land.rhs39 ]
  %land.ext44 = zext i1 %26 to i32
  %27 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_Cross([144 x i8]* %18, i32 %19, i32 %20, i32 %land.ext35, i32 %land.ext44, [9 x i8]* %27)
  br label %if.end

if.else45:                                        ; preds = %land.lhs.true, %if.else21
  %28 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %29 = load i32, i32* %xint.addr, align 4
  %30 = load i32, i32* %yint.addr, align 4
  %31 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_j([144 x i8]* %28, i32 %29, i32 %30, [9 x i8]* %31)
  br label %if.end

if.end:                                           ; preds = %if.else45, %land.end43
  br label %if.end46

if.end46:                                         ; preds = %if.end, %land.end19
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_double_bizero_skip([144 x i8]* %Sluma0, [144 x i8]* %Sluma1, [144 x i8]* %Sluma_cur, i32 %startx, i32 %starty, i32 %xint0, i32 %yint0, i32 %xint1, i32 %yint1, [4 x i32]* %rMb, i8 zeroext %rmbflag) #0 !prof !175 {
entry:
  %Sluma0.addr = alloca [144 x i8]*, align 8
  %Sluma1.addr = alloca [144 x i8]*, align 8
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xint0.addr = alloca i32, align 4
  %yint0.addr = alloca i32, align 4
  %xint1.addr = alloca i32, align 4
  %yint1.addr = alloca i32, align 4
  %rMb.addr = alloca [4 x i32]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  store [144 x i8]* %Sluma0, [144 x i8]** %Sluma0.addr, align 8
  store [144 x i8]* %Sluma1, [144 x i8]** %Sluma1.addr, align 8
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 %xint0, i32* %xint0.addr, align 4
  store i32 %yint0, i32* %yint0.addr, align 4
  store i32 %xint1, i32* %xint1.addr, align 4
  store i32 %yint1, i32* %yint1.addr, align 4
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc33, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end35, !prof !227

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !228

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint0.addr, align 4
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x0, align 4
  %4 = load i32, i32* %yint0.addr, align 4
  %5 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %4, %5
  %call5 = call i32 @Clip3(i32 0, i32 143, i32 %add4)
  store i32 %call5, i32* %y0, align 4
  %6 = load i32, i32* %xint1.addr, align 4
  %7 = load i32, i32* %i, align 4
  %add6 = add nsw i32 %6, %7
  %call7 = call i32 @Clip3(i32 0, i32 175, i32 %add6)
  store i32 %call7, i32* %x1, align 4
  %8 = load i32, i32* %yint1.addr, align 4
  %9 = load i32, i32* %j, align 4
  %add8 = add nsw i32 %8, %9
  %call9 = call i32 @Clip3(i32 0, i32 143, i32 %add8)
  store i32 %call9, i32* %y1, align 4
  %10 = load i8, i8* %rmbflag.addr, align 1
  %conv = zext i8 %10 to i32
  %11 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 %idxprom
  %13 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom10
  %14 = load i32, i32* %arrayidx11, align 4
  %mul = mul nsw i32 %conv, %14
  %15 = load [144 x i8]*, [144 x i8]** %Sluma0.addr, align 8
  %16 = load i32, i32* %x0, align 4
  %idxprom12 = sext i32 %16 to i64
  %arrayidx13 = getelementptr inbounds [144 x i8], [144 x i8]* %15, i64 %idxprom12
  %17 = load i32, i32* %y0, align 4
  %idxprom14 = sext i32 %17 to i64
  %arrayidx15 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx13, i64 0, i64 %idxprom14
  %18 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %18 to i32
  %19 = load [144 x i8]*, [144 x i8]** %Sluma1.addr, align 8
  %20 = load i32, i32* %x1, align 4
  %idxprom17 = sext i32 %20 to i64
  %arrayidx18 = getelementptr inbounds [144 x i8], [144 x i8]* %19, i64 %idxprom17
  %21 = load i32, i32* %y1, align 4
  %idxprom19 = sext i32 %21 to i64
  %arrayidx20 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %22 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %22 to i32
  %add22 = add nsw i32 %conv16, %conv21
  %add23 = add nsw i32 %add22, 1
  %shr = ashr i32 %add23, 1
  %add24 = add nsw i32 %mul, %shr
  %call25 = call i32 @Clip1y(i32 %add24)
  %conv26 = trunc i32 %call25 to i8
  %23 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %24 = load i32, i32* %startx.addr, align 4
  %25 = load i32, i32* %i, align 4
  %add27 = add nsw i32 %24, %25
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i8], [144 x i8]* %23, i64 %idxprom28
  %26 = load i32, i32* %starty.addr, align 4
  %27 = load i32, i32* %j, align 4
  %add30 = add nsw i32 %26, %27
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx29, i64 0, i64 %idxprom31
  store i8 %conv26, i8* %arrayidx32, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc33

for.inc33:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %29, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_double_skip([144 x i8]* %Sluma_cur, i32 %startx, i32 %starty, i8 zeroext %xfrac0, i8 zeroext %yfrac0, i8 zeroext %xfrac1, i8 zeroext %yfrac1, i8 zeroext %xoffset0, i8 zeroext %yoffset0, i8 zeroext %xoffset1, i8 zeroext %yoffset1, [9 x i8]* %temp0, [9 x i8]* %temp1, [4 x i32]* %rMb, i8 zeroext %rmbflag) #0 !prof !205 {
entry:
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xfrac0.addr = alloca i8, align 1
  %yfrac0.addr = alloca i8, align 1
  %xfrac1.addr = alloca i8, align 1
  %yfrac1.addr = alloca i8, align 1
  %xoffset0.addr = alloca i8, align 1
  %yoffset0.addr = alloca i8, align 1
  %xoffset1.addr = alloca i8, align 1
  %yoffset1.addr = alloca i8, align 1
  %temp0.addr = alloca [9 x i8]*, align 8
  %temp1.addr = alloca [9 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %sum0 = alloca i32, align 4
  %sum1 = alloca i32, align 4
  %h0 = alloca i8, align 1
  %b0 = alloca i8, align 1
  %h1 = alloca i8, align 1
  %b1 = alloca i8, align 1
  %G0 = alloca i8, align 1
  %G1 = alloca i8, align 1
  %bitoff0 = alloca i8, align 1
  %bitoff1 = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %xfrac0, i8* %xfrac0.addr, align 1
  store i8 %yfrac0, i8* %yfrac0.addr, align 1
  store i8 %xfrac1, i8* %xfrac1.addr, align 1
  store i8 %yfrac1, i8* %yfrac1.addr, align 1
  store i8 %xoffset0, i8* %xoffset0.addr, align 1
  store i8 %yoffset0, i8* %yoffset0.addr, align 1
  store i8 %xoffset1, i8* %xoffset1.addr, align 1
  store i8 %yoffset1, i8* %yoffset1.addr, align 1
  store [9 x i8]* %temp0, [9 x i8]** %temp0.addr, align 8
  store [9 x i8]* %temp1, [9 x i8]** %temp1.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc525, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end527

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc522, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end524

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %yfrac0.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp sgt i32 %conv, 0
  br i1 %cmp4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body3
  %3 = load i8, i8* %xfrac0.addr, align 1
  %conv6 = zext i8 %3 to i32
  %cmp7 = icmp ne i32 %conv6, 2
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 2
  %6 = load i8, i8* %xoffset0.addr, align 1
  %conv9 = zext i8 %6 to i32
  %add10 = add nsw i32 %add, %conv9
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %7 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %9 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %10 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %10, 2
  %11 = load i8, i8* %xoffset0.addr, align 1
  %conv15 = zext i8 %11 to i32
  %add16 = add nsw i32 %add14, %conv15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds [9 x i8], [9 x i8]* %9, i64 %idxprom17
  %12 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %12, 1
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx18, i64 0, i64 %idxprom20
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %13 to i32
  %mul = mul nsw i32 5, %conv22
  %sub = sub nsw i32 %conv13, %mul
  %14 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %15, 2
  %16 = load i8, i8* %xoffset0.addr, align 1
  %conv24 = zext i8 %16 to i32
  %add25 = add nsw i32 %add23, %conv24
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom26
  %17 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %17, 2
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx27, i64 0, i64 %idxprom29
  %18 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %18 to i32
  %mul32 = mul nsw i32 20, %conv31
  %add33 = add nsw i32 %sub, %mul32
  %19 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add34 = add nsw i32 %20, 2
  %21 = load i8, i8* %xoffset0.addr, align 1
  %conv35 = zext i8 %21 to i32
  %add36 = add nsw i32 %add34, %conv35
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [9 x i8], [9 x i8]* %19, i64 %idxprom37
  %22 = load i32, i32* %j, align 4
  %add39 = add nsw i32 %22, 3
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx38, i64 0, i64 %idxprom40
  %23 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %23 to i32
  %mul43 = mul nsw i32 20, %conv42
  %add44 = add nsw i32 %add33, %mul43
  %24 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %25 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %25, 2
  %26 = load i8, i8* %xoffset0.addr, align 1
  %conv46 = zext i8 %26 to i32
  %add47 = add nsw i32 %add45, %conv46
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %24, i64 %idxprom48
  %27 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %27, 4
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %28 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %28 to i32
  %mul54 = mul nsw i32 5, %conv53
  %sub55 = sub nsw i32 %add44, %mul54
  %29 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %30 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %30, 2
  %31 = load i8, i8* %xoffset0.addr, align 1
  %conv57 = zext i8 %31 to i32
  %add58 = add nsw i32 %add56, %conv57
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [9 x i8], [9 x i8]* %29, i64 %idxprom59
  %32 = load i32, i32* %j, align 4
  %add61 = add nsw i32 %32, 5
  %idxprom62 = sext i32 %add61 to i64
  %arrayidx63 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx60, i64 0, i64 %idxprom62
  %33 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %33 to i32
  %add65 = add nsw i32 %sub55, %conv64
  %add66 = add nsw i32 %add65, 16
  %shr = ashr i32 %add66, 5
  %call = call i32 @Clip1y(i32 %shr)
  %conv67 = trunc i32 %call to i8
  store i8 %conv67, i8* %h0, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body3
  store i8 0, i8* %h0, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load i8, i8* %xfrac0.addr, align 1
  %conv68 = zext i8 %34 to i32
  %cmp69 = icmp sgt i32 %conv68, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.else142

land.lhs.true71:                                  ; preds = %if.end
  %35 = load i8, i8* %yfrac0.addr, align 1
  %conv72 = zext i8 %35 to i32
  %cmp73 = icmp ne i32 %conv72, 2
  br i1 %cmp73, label %if.then75, label %if.else142

if.then75:                                        ; preds = %land.lhs.true71
  %36 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %37 to i64
  %arrayidx77 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 %idxprom76
  %38 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %38, 2
  %39 = load i8, i8* %yoffset0.addr, align 1
  %conv79 = zext i8 %39 to i32
  %add80 = add nsw i32 %add78, %conv79
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx77, i64 0, i64 %idxprom81
  %40 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %40 to i32
  %41 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %42, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [9 x i8], [9 x i8]* %41, i64 %idxprom85
  %43 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %43, 2
  %44 = load i8, i8* %yoffset0.addr, align 1
  %conv88 = zext i8 %44 to i32
  %add89 = add nsw i32 %add87, %conv88
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx86, i64 0, i64 %idxprom90
  %45 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %45 to i32
  %mul93 = mul nsw i32 5, %conv92
  %sub94 = sub nsw i32 %conv83, %mul93
  %46 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %47 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %47, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [9 x i8], [9 x i8]* %46, i64 %idxprom96
  %48 = load i32, i32* %j, align 4
  %add98 = add nsw i32 %48, 2
  %49 = load i8, i8* %yoffset0.addr, align 1
  %conv99 = zext i8 %49 to i32
  %add100 = add nsw i32 %add98, %conv99
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx97, i64 0, i64 %idxprom101
  %50 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %50 to i32
  %mul104 = mul nsw i32 20, %conv103
  %add105 = add nsw i32 %sub94, %mul104
  %51 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %52, 3
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom107
  %53 = load i32, i32* %j, align 4
  %add109 = add nsw i32 %53, 2
  %54 = load i8, i8* %yoffset0.addr, align 1
  %conv110 = zext i8 %54 to i32
  %add111 = add nsw i32 %add109, %conv110
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx108, i64 0, i64 %idxprom112
  %55 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %55 to i32
  %mul115 = mul nsw i32 20, %conv114
  %add116 = add nsw i32 %add105, %mul115
  %56 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %57, 4
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom118
  %58 = load i32, i32* %j, align 4
  %add120 = add nsw i32 %58, 2
  %59 = load i8, i8* %yoffset0.addr, align 1
  %conv121 = zext i8 %59 to i32
  %add122 = add nsw i32 %add120, %conv121
  %idxprom123 = sext i32 %add122 to i64
  %arrayidx124 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx119, i64 0, i64 %idxprom123
  %60 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %60 to i32
  %mul126 = mul nsw i32 5, %conv125
  %sub127 = sub nsw i32 %add116, %mul126
  %61 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add128 = add nsw i32 %62, 5
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds [9 x i8], [9 x i8]* %61, i64 %idxprom129
  %63 = load i32, i32* %j, align 4
  %add131 = add nsw i32 %63, 2
  %64 = load i8, i8* %yoffset0.addr, align 1
  %conv132 = zext i8 %64 to i32
  %add133 = add nsw i32 %add131, %conv132
  %idxprom134 = sext i32 %add133 to i64
  %arrayidx135 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx130, i64 0, i64 %idxprom134
  %65 = load i8, i8* %arrayidx135, align 1
  %conv136 = zext i8 %65 to i32
  %add137 = add nsw i32 %sub127, %conv136
  %add138 = add nsw i32 %add137, 16
  %shr139 = ashr i32 %add138, 5
  %call140 = call i32 @Clip1y(i32 %shr139)
  %conv141 = trunc i32 %call140 to i8
  store i8 %conv141, i8* %b0, align 1
  br label %if.end143

if.else142:                                       ; preds = %land.lhs.true71, %if.end
  store i8 0, i8* %b0, align 1
  br label %if.end143

if.end143:                                        ; preds = %if.else142, %if.then75
  %66 = load i8, i8* %yfrac0.addr, align 1
  %conv144 = zext i8 %66 to i32
  %cmp145 = icmp sgt i32 %conv144, 0
  br i1 %cmp145, label %land.lhs.true147, label %lor.lhs.false

land.lhs.true147:                                 ; preds = %if.end143
  %67 = load i8, i8* %xfrac0.addr, align 1
  %conv148 = zext i8 %67 to i32
  %cmp149 = icmp eq i32 %conv148, 2
  br i1 %cmp149, label %if.then158, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true147, %if.end143
  %68 = load i8, i8* %xfrac0.addr, align 1
  %conv151 = zext i8 %68 to i32
  %cmp152 = icmp sgt i32 %conv151, 0
  br i1 %cmp152, label %land.lhs.true154, label %if.else185

land.lhs.true154:                                 ; preds = %lor.lhs.false
  %69 = load i8, i8* %yfrac0.addr, align 1
  %conv155 = zext i8 %69 to i32
  %cmp156 = icmp eq i32 %conv155, 2
  br i1 %cmp156, label %if.then158, label %if.else185

if.then158:                                       ; preds = %land.lhs.true154, %land.lhs.true147
  store i32 0, i32* %sum0, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc180, %if.then158
  %70 = load i32, i32* %x, align 4
  %cmp160 = icmp slt i32 %70, 6
  br i1 %cmp160, label %for.body162, label %for.end182

for.body162:                                      ; preds = %for.cond159
  store i32 0, i32* %y, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %71 = load i32, i32* %y, align 4
  %cmp164 = icmp slt i32 %71, 6
  br i1 %cmp164, label %for.body166, label %for.end

for.body166:                                      ; preds = %for.cond163
  %72 = load i32, i32* %sum0, align 4
  %73 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %74 = load i32, i32* %x, align 4
  %75 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %74, %75
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [9 x i8], [9 x i8]* %73, i64 %idxprom168
  %76 = load i32, i32* %y, align 4
  %77 = load i32, i32* %j, align 4
  %add170 = add nsw i32 %76, %77
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx169, i64 0, i64 %idxprom171
  %78 = load i8, i8* %arrayidx172, align 1
  %conv173 = zext i8 %78 to i32
  %79 = load i32, i32* %x, align 4
  %idxprom174 = sext i32 %79 to i64
  %arrayidx175 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom174
  %80 = load i32, i32* %y, align 4
  %idxprom176 = sext i32 %80 to i64
  %arrayidx177 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx175, i64 0, i64 %idxprom176
  %81 = load i32, i32* %arrayidx177, align 4
  %mul178 = mul nsw i32 %conv173, %81
  %add179 = add nsw i32 %72, %mul178
  store i32 %add179, i32* %sum0, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body166
  %82 = load i32, i32* %y, align 4
  %inc = add nsw i32 %82, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc180

for.inc180:                                       ; preds = %for.end
  %83 = load i32, i32* %x, align 4
  %inc181 = add nsw i32 %83, 1
  store i32 %inc181, i32* %x, align 4
  br label %for.cond159

for.end182:                                       ; preds = %for.cond159
  %84 = load i32, i32* %sum0, align 4
  %add183 = add nsw i32 %84, 512
  %shr184 = ashr i32 %add183, 10
  store i32 %shr184, i32* %sum0, align 4
  br label %if.end186

if.else185:                                       ; preds = %land.lhs.true154, %lor.lhs.false
  store i32 0, i32* %sum0, align 4
  br label %if.end186

if.end186:                                        ; preds = %if.else185, %for.end182
  %85 = load i8, i8* %yfrac0.addr, align 1
  %conv187 = zext i8 %85 to i32
  %cmp188 = icmp eq i32 %conv187, 0
  br i1 %cmp188, label %land.lhs.true190, label %lor.lhs.false194

land.lhs.true190:                                 ; preds = %if.end186
  %86 = load i8, i8* %xfrac0.addr, align 1
  %conv191 = zext i8 %86 to i32
  %cmp192 = icmp ne i32 %conv191, 2
  br i1 %cmp192, label %if.then210, label %lor.lhs.false194

lor.lhs.false194:                                 ; preds = %land.lhs.true190, %if.end186
  %87 = load i8, i8* %xfrac0.addr, align 1
  %conv195 = zext i8 %87 to i32
  %cmp196 = icmp eq i32 %conv195, 0
  br i1 %cmp196, label %land.lhs.true198, label %lor.lhs.false202

land.lhs.true198:                                 ; preds = %lor.lhs.false194
  %88 = load i8, i8* %yfrac0.addr, align 1
  %conv199 = zext i8 %88 to i32
  %cmp200 = icmp ne i32 %conv199, 2
  br i1 %cmp200, label %if.then210, label %lor.lhs.false202

lor.lhs.false202:                                 ; preds = %land.lhs.true198, %lor.lhs.false194
  %89 = load i8, i8* %xfrac0.addr, align 1
  %conv203 = zext i8 %89 to i32
  %cmp204 = icmp eq i32 %conv203, 0
  br i1 %cmp204, label %land.lhs.true206, label %if.else222

land.lhs.true206:                                 ; preds = %lor.lhs.false202
  %90 = load i8, i8* %yfrac0.addr, align 1
  %conv207 = zext i8 %90 to i32
  %cmp208 = icmp eq i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else222

if.then210:                                       ; preds = %land.lhs.true206, %land.lhs.true198, %land.lhs.true190
  %91 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %92 = load i32, i32* %i, align 4
  %add211 = add nsw i32 %92, 2
  %93 = load i8, i8* %xfrac0.addr, align 1
  %conv212 = zext i8 %93 to i32
  %div = sdiv i32 %conv212, 2
  %add213 = add nsw i32 %add211, %div
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [9 x i8], [9 x i8]* %91, i64 %idxprom214
  %94 = load i32, i32* %j, align 4
  %add216 = add nsw i32 %94, 2
  %95 = load i8, i8* %yfrac0.addr, align 1
  %conv217 = zext i8 %95 to i32
  %div218 = sdiv i32 %conv217, 2
  %add219 = add nsw i32 %add216, %div218
  %idxprom220 = sext i32 %add219 to i64
  %arrayidx221 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx215, i64 0, i64 %idxprom220
  %96 = load i8, i8* %arrayidx221, align 1
  store i8 %96, i8* %G0, align 1
  br label %if.end223

if.else222:                                       ; preds = %land.lhs.true206, %lor.lhs.false202
  store i8 0, i8* %G0, align 1
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %if.then210
  %97 = load i8, i8* %xfrac0.addr, align 1
  %conv224 = zext i8 %97 to i32
  %rem = srem i32 %conv224, 2
  %cmp225 = icmp eq i32 %rem, 0
  br i1 %cmp225, label %land.lhs.true227, label %if.else233

land.lhs.true227:                                 ; preds = %if.end223
  %98 = load i8, i8* %yfrac0.addr, align 1
  %conv228 = zext i8 %98 to i32
  %rem229 = srem i32 %conv228, 2
  %cmp230 = icmp eq i32 %rem229, 0
  br i1 %cmp230, label %if.then232, label %if.else233

if.then232:                                       ; preds = %land.lhs.true227
  store i8 0, i8* %bitoff0, align 1
  br label %if.end234

if.else233:                                       ; preds = %land.lhs.true227, %if.end223
  store i8 1, i8* %bitoff0, align 1
  br label %if.end234

if.end234:                                        ; preds = %if.else233, %if.then232
  %99 = load i8, i8* %yfrac1.addr, align 1
  %conv235 = zext i8 %99 to i32
  %cmp236 = icmp sgt i32 %conv235, 0
  br i1 %cmp236, label %land.lhs.true238, label %if.else309

land.lhs.true238:                                 ; preds = %if.end234
  %100 = load i8, i8* %xfrac1.addr, align 1
  %conv239 = zext i8 %100 to i32
  %cmp240 = icmp ne i32 %conv239, 2
  br i1 %cmp240, label %if.then242, label %if.else309

if.then242:                                       ; preds = %land.lhs.true238
  %101 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %102 = load i32, i32* %i, align 4
  %add243 = add nsw i32 %102, 2
  %103 = load i8, i8* %xoffset1.addr, align 1
  %conv244 = zext i8 %103 to i32
  %add245 = add nsw i32 %add243, %conv244
  %idxprom246 = sext i32 %add245 to i64
  %arrayidx247 = getelementptr inbounds [9 x i8], [9 x i8]* %101, i64 %idxprom246
  %104 = load i32, i32* %j, align 4
  %idxprom248 = sext i32 %104 to i64
  %arrayidx249 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx247, i64 0, i64 %idxprom248
  %105 = load i8, i8* %arrayidx249, align 1
  %conv250 = zext i8 %105 to i32
  %106 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %107 = load i32, i32* %i, align 4
  %add251 = add nsw i32 %107, 2
  %108 = load i8, i8* %xoffset1.addr, align 1
  %conv252 = zext i8 %108 to i32
  %add253 = add nsw i32 %add251, %conv252
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds [9 x i8], [9 x i8]* %106, i64 %idxprom254
  %109 = load i32, i32* %j, align 4
  %add256 = add nsw i32 %109, 1
  %idxprom257 = sext i32 %add256 to i64
  %arrayidx258 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx255, i64 0, i64 %idxprom257
  %110 = load i8, i8* %arrayidx258, align 1
  %conv259 = zext i8 %110 to i32
  %mul260 = mul nsw i32 5, %conv259
  %sub261 = sub nsw i32 %conv250, %mul260
  %111 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %112 = load i32, i32* %i, align 4
  %add262 = add nsw i32 %112, 2
  %113 = load i8, i8* %xoffset1.addr, align 1
  %conv263 = zext i8 %113 to i32
  %add264 = add nsw i32 %add262, %conv263
  %idxprom265 = sext i32 %add264 to i64
  %arrayidx266 = getelementptr inbounds [9 x i8], [9 x i8]* %111, i64 %idxprom265
  %114 = load i32, i32* %j, align 4
  %add267 = add nsw i32 %114, 2
  %idxprom268 = sext i32 %add267 to i64
  %arrayidx269 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx266, i64 0, i64 %idxprom268
  %115 = load i8, i8* %arrayidx269, align 1
  %conv270 = zext i8 %115 to i32
  %mul271 = mul nsw i32 20, %conv270
  %add272 = add nsw i32 %sub261, %mul271
  %116 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %117 = load i32, i32* %i, align 4
  %add273 = add nsw i32 %117, 2
  %118 = load i8, i8* %xoffset1.addr, align 1
  %conv274 = zext i8 %118 to i32
  %add275 = add nsw i32 %add273, %conv274
  %idxprom276 = sext i32 %add275 to i64
  %arrayidx277 = getelementptr inbounds [9 x i8], [9 x i8]* %116, i64 %idxprom276
  %119 = load i32, i32* %j, align 4
  %add278 = add nsw i32 %119, 3
  %idxprom279 = sext i32 %add278 to i64
  %arrayidx280 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx277, i64 0, i64 %idxprom279
  %120 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %120 to i32
  %mul282 = mul nsw i32 20, %conv281
  %add283 = add nsw i32 %add272, %mul282
  %121 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %122 = load i32, i32* %i, align 4
  %add284 = add nsw i32 %122, 2
  %123 = load i8, i8* %xoffset1.addr, align 1
  %conv285 = zext i8 %123 to i32
  %add286 = add nsw i32 %add284, %conv285
  %idxprom287 = sext i32 %add286 to i64
  %arrayidx288 = getelementptr inbounds [9 x i8], [9 x i8]* %121, i64 %idxprom287
  %124 = load i32, i32* %j, align 4
  %add289 = add nsw i32 %124, 4
  %idxprom290 = sext i32 %add289 to i64
  %arrayidx291 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx288, i64 0, i64 %idxprom290
  %125 = load i8, i8* %arrayidx291, align 1
  %conv292 = zext i8 %125 to i32
  %mul293 = mul nsw i32 5, %conv292
  %sub294 = sub nsw i32 %add283, %mul293
  %126 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %127 = load i32, i32* %i, align 4
  %add295 = add nsw i32 %127, 2
  %128 = load i8, i8* %xoffset1.addr, align 1
  %conv296 = zext i8 %128 to i32
  %add297 = add nsw i32 %add295, %conv296
  %idxprom298 = sext i32 %add297 to i64
  %arrayidx299 = getelementptr inbounds [9 x i8], [9 x i8]* %126, i64 %idxprom298
  %129 = load i32, i32* %j, align 4
  %add300 = add nsw i32 %129, 5
  %idxprom301 = sext i32 %add300 to i64
  %arrayidx302 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx299, i64 0, i64 %idxprom301
  %130 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %130 to i32
  %add304 = add nsw i32 %sub294, %conv303
  %add305 = add nsw i32 %add304, 16
  %shr306 = ashr i32 %add305, 5
  %call307 = call i32 @Clip1y(i32 %shr306)
  %conv308 = trunc i32 %call307 to i8
  store i8 %conv308, i8* %h1, align 1
  br label %if.end310

if.else309:                                       ; preds = %land.lhs.true238, %if.end234
  store i8 0, i8* %h1, align 1
  br label %if.end310

if.end310:                                        ; preds = %if.else309, %if.then242
  %131 = load i8, i8* %xfrac1.addr, align 1
  %conv311 = zext i8 %131 to i32
  %cmp312 = icmp sgt i32 %conv311, 0
  br i1 %cmp312, label %land.lhs.true314, label %if.else385

land.lhs.true314:                                 ; preds = %if.end310
  %132 = load i8, i8* %yfrac1.addr, align 1
  %conv315 = zext i8 %132 to i32
  %cmp316 = icmp ne i32 %conv315, 2
  br i1 %cmp316, label %if.then318, label %if.else385

if.then318:                                       ; preds = %land.lhs.true314
  %133 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %134 = load i32, i32* %i, align 4
  %idxprom319 = sext i32 %134 to i64
  %arrayidx320 = getelementptr inbounds [9 x i8], [9 x i8]* %133, i64 %idxprom319
  %135 = load i32, i32* %j, align 4
  %add321 = add nsw i32 %135, 2
  %136 = load i8, i8* %yoffset1.addr, align 1
  %conv322 = zext i8 %136 to i32
  %add323 = add nsw i32 %add321, %conv322
  %idxprom324 = sext i32 %add323 to i64
  %arrayidx325 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx320, i64 0, i64 %idxprom324
  %137 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %137 to i32
  %138 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %139 = load i32, i32* %i, align 4
  %add327 = add nsw i32 %139, 1
  %idxprom328 = sext i32 %add327 to i64
  %arrayidx329 = getelementptr inbounds [9 x i8], [9 x i8]* %138, i64 %idxprom328
  %140 = load i32, i32* %j, align 4
  %add330 = add nsw i32 %140, 2
  %141 = load i8, i8* %yoffset1.addr, align 1
  %conv331 = zext i8 %141 to i32
  %add332 = add nsw i32 %add330, %conv331
  %idxprom333 = sext i32 %add332 to i64
  %arrayidx334 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx329, i64 0, i64 %idxprom333
  %142 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %142 to i32
  %mul336 = mul nsw i32 5, %conv335
  %sub337 = sub nsw i32 %conv326, %mul336
  %143 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %144 = load i32, i32* %i, align 4
  %add338 = add nsw i32 %144, 2
  %idxprom339 = sext i32 %add338 to i64
  %arrayidx340 = getelementptr inbounds [9 x i8], [9 x i8]* %143, i64 %idxprom339
  %145 = load i32, i32* %j, align 4
  %add341 = add nsw i32 %145, 2
  %146 = load i8, i8* %yoffset1.addr, align 1
  %conv342 = zext i8 %146 to i32
  %add343 = add nsw i32 %add341, %conv342
  %idxprom344 = sext i32 %add343 to i64
  %arrayidx345 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx340, i64 0, i64 %idxprom344
  %147 = load i8, i8* %arrayidx345, align 1
  %conv346 = zext i8 %147 to i32
  %mul347 = mul nsw i32 20, %conv346
  %add348 = add nsw i32 %sub337, %mul347
  %148 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %149 = load i32, i32* %i, align 4
  %add349 = add nsw i32 %149, 3
  %idxprom350 = sext i32 %add349 to i64
  %arrayidx351 = getelementptr inbounds [9 x i8], [9 x i8]* %148, i64 %idxprom350
  %150 = load i32, i32* %j, align 4
  %add352 = add nsw i32 %150, 2
  %151 = load i8, i8* %yoffset1.addr, align 1
  %conv353 = zext i8 %151 to i32
  %add354 = add nsw i32 %add352, %conv353
  %idxprom355 = sext i32 %add354 to i64
  %arrayidx356 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx351, i64 0, i64 %idxprom355
  %152 = load i8, i8* %arrayidx356, align 1
  %conv357 = zext i8 %152 to i32
  %mul358 = mul nsw i32 20, %conv357
  %add359 = add nsw i32 %add348, %mul358
  %153 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %154 = load i32, i32* %i, align 4
  %add360 = add nsw i32 %154, 4
  %idxprom361 = sext i32 %add360 to i64
  %arrayidx362 = getelementptr inbounds [9 x i8], [9 x i8]* %153, i64 %idxprom361
  %155 = load i32, i32* %j, align 4
  %add363 = add nsw i32 %155, 2
  %156 = load i8, i8* %yoffset1.addr, align 1
  %conv364 = zext i8 %156 to i32
  %add365 = add nsw i32 %add363, %conv364
  %idxprom366 = sext i32 %add365 to i64
  %arrayidx367 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx362, i64 0, i64 %idxprom366
  %157 = load i8, i8* %arrayidx367, align 1
  %conv368 = zext i8 %157 to i32
  %mul369 = mul nsw i32 5, %conv368
  %sub370 = sub nsw i32 %add359, %mul369
  %158 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %159 = load i32, i32* %i, align 4
  %add371 = add nsw i32 %159, 5
  %idxprom372 = sext i32 %add371 to i64
  %arrayidx373 = getelementptr inbounds [9 x i8], [9 x i8]* %158, i64 %idxprom372
  %160 = load i32, i32* %j, align 4
  %add374 = add nsw i32 %160, 2
  %161 = load i8, i8* %yoffset1.addr, align 1
  %conv375 = zext i8 %161 to i32
  %add376 = add nsw i32 %add374, %conv375
  %idxprom377 = sext i32 %add376 to i64
  %arrayidx378 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx373, i64 0, i64 %idxprom377
  %162 = load i8, i8* %arrayidx378, align 1
  %conv379 = zext i8 %162 to i32
  %add380 = add nsw i32 %sub370, %conv379
  %add381 = add nsw i32 %add380, 16
  %shr382 = ashr i32 %add381, 5
  %call383 = call i32 @Clip1y(i32 %shr382)
  %conv384 = trunc i32 %call383 to i8
  store i8 %conv384, i8* %b1, align 1
  br label %if.end386

if.else385:                                       ; preds = %land.lhs.true314, %if.end310
  store i8 0, i8* %b1, align 1
  br label %if.end386

if.end386:                                        ; preds = %if.else385, %if.then318
  %163 = load i8, i8* %yfrac1.addr, align 1
  %conv387 = zext i8 %163 to i32
  %cmp388 = icmp sgt i32 %conv387, 0
  br i1 %cmp388, label %land.lhs.true390, label %lor.lhs.false394

land.lhs.true390:                                 ; preds = %if.end386
  %164 = load i8, i8* %xfrac1.addr, align 1
  %conv391 = zext i8 %164 to i32
  %cmp392 = icmp eq i32 %conv391, 2
  br i1 %cmp392, label %if.then402, label %lor.lhs.false394

lor.lhs.false394:                                 ; preds = %land.lhs.true390, %if.end386
  %165 = load i8, i8* %xfrac1.addr, align 1
  %conv395 = zext i8 %165 to i32
  %cmp396 = icmp sgt i32 %conv395, 0
  br i1 %cmp396, label %land.lhs.true398, label %if.else432

land.lhs.true398:                                 ; preds = %lor.lhs.false394
  %166 = load i8, i8* %yfrac1.addr, align 1
  %conv399 = zext i8 %166 to i32
  %cmp400 = icmp eq i32 %conv399, 2
  br i1 %cmp400, label %if.then402, label %if.else432

if.then402:                                       ; preds = %land.lhs.true398, %land.lhs.true390
  store i32 0, i32* %sum1, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond403

for.cond403:                                      ; preds = %for.inc427, %if.then402
  %167 = load i32, i32* %x, align 4
  %cmp404 = icmp slt i32 %167, 6
  br i1 %cmp404, label %for.body406, label %for.end429

for.body406:                                      ; preds = %for.cond403
  store i32 0, i32* %y, align 4
  br label %for.cond407

for.cond407:                                      ; preds = %for.inc424, %for.body406
  %168 = load i32, i32* %y, align 4
  %cmp408 = icmp slt i32 %168, 6
  br i1 %cmp408, label %for.body410, label %for.end426

for.body410:                                      ; preds = %for.cond407
  %169 = load i32, i32* %sum1, align 4
  %170 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %171 = load i32, i32* %x, align 4
  %172 = load i32, i32* %i, align 4
  %add411 = add nsw i32 %171, %172
  %idxprom412 = sext i32 %add411 to i64
  %arrayidx413 = getelementptr inbounds [9 x i8], [9 x i8]* %170, i64 %idxprom412
  %173 = load i32, i32* %y, align 4
  %174 = load i32, i32* %j, align 4
  %add414 = add nsw i32 %173, %174
  %idxprom415 = sext i32 %add414 to i64
  %arrayidx416 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx413, i64 0, i64 %idxprom415
  %175 = load i8, i8* %arrayidx416, align 1
  %conv417 = zext i8 %175 to i32
  %176 = load i32, i32* %x, align 4
  %idxprom418 = sext i32 %176 to i64
  %arrayidx419 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom418
  %177 = load i32, i32* %y, align 4
  %idxprom420 = sext i32 %177 to i64
  %arrayidx421 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx419, i64 0, i64 %idxprom420
  %178 = load i32, i32* %arrayidx421, align 4
  %mul422 = mul nsw i32 %conv417, %178
  %add423 = add nsw i32 %169, %mul422
  store i32 %add423, i32* %sum1, align 4
  br label %for.inc424

for.inc424:                                       ; preds = %for.body410
  %179 = load i32, i32* %y, align 4
  %inc425 = add nsw i32 %179, 1
  store i32 %inc425, i32* %y, align 4
  br label %for.cond407

for.end426:                                       ; preds = %for.cond407
  br label %for.inc427

for.inc427:                                       ; preds = %for.end426
  %180 = load i32, i32* %x, align 4
  %inc428 = add nsw i32 %180, 1
  store i32 %inc428, i32* %x, align 4
  br label %for.cond403

for.end429:                                       ; preds = %for.cond403
  %181 = load i32, i32* %sum1, align 4
  %add430 = add nsw i32 %181, 512
  %shr431 = ashr i32 %add430, 10
  store i32 %shr431, i32* %sum1, align 4
  br label %if.end433

if.else432:                                       ; preds = %land.lhs.true398, %lor.lhs.false394
  store i32 0, i32* %sum1, align 4
  br label %if.end433

if.end433:                                        ; preds = %if.else432, %for.end429
  %182 = load i8, i8* %yfrac1.addr, align 1
  %conv434 = zext i8 %182 to i32
  %cmp435 = icmp eq i32 %conv434, 0
  br i1 %cmp435, label %land.lhs.true437, label %lor.lhs.false441

land.lhs.true437:                                 ; preds = %if.end433
  %183 = load i8, i8* %xfrac1.addr, align 1
  %conv438 = zext i8 %183 to i32
  %cmp439 = icmp ne i32 %conv438, 2
  br i1 %cmp439, label %if.then457, label %lor.lhs.false441

lor.lhs.false441:                                 ; preds = %land.lhs.true437, %if.end433
  %184 = load i8, i8* %xfrac1.addr, align 1
  %conv442 = zext i8 %184 to i32
  %cmp443 = icmp eq i32 %conv442, 0
  br i1 %cmp443, label %land.lhs.true445, label %lor.lhs.false449

land.lhs.true445:                                 ; preds = %lor.lhs.false441
  %185 = load i8, i8* %yfrac1.addr, align 1
  %conv446 = zext i8 %185 to i32
  %cmp447 = icmp ne i32 %conv446, 2
  br i1 %cmp447, label %if.then457, label %lor.lhs.false449

lor.lhs.false449:                                 ; preds = %land.lhs.true445, %lor.lhs.false441
  %186 = load i8, i8* %xfrac1.addr, align 1
  %conv450 = zext i8 %186 to i32
  %cmp451 = icmp eq i32 %conv450, 0
  br i1 %cmp451, label %land.lhs.true453, label %if.else470

land.lhs.true453:                                 ; preds = %lor.lhs.false449
  %187 = load i8, i8* %yfrac1.addr, align 1
  %conv454 = zext i8 %187 to i32
  %cmp455 = icmp eq i32 %conv454, 0
  br i1 %cmp455, label %if.then457, label %if.else470

if.then457:                                       ; preds = %land.lhs.true453, %land.lhs.true445, %land.lhs.true437
  %188 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %189 = load i32, i32* %i, align 4
  %add458 = add nsw i32 %189, 2
  %190 = load i8, i8* %xfrac1.addr, align 1
  %conv459 = zext i8 %190 to i32
  %div460 = sdiv i32 %conv459, 2
  %add461 = add nsw i32 %add458, %div460
  %idxprom462 = sext i32 %add461 to i64
  %arrayidx463 = getelementptr inbounds [9 x i8], [9 x i8]* %188, i64 %idxprom462
  %191 = load i32, i32* %j, align 4
  %add464 = add nsw i32 %191, 2
  %192 = load i8, i8* %yfrac1.addr, align 1
  %conv465 = zext i8 %192 to i32
  %div466 = sdiv i32 %conv465, 2
  %add467 = add nsw i32 %add464, %div466
  %idxprom468 = sext i32 %add467 to i64
  %arrayidx469 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx463, i64 0, i64 %idxprom468
  %193 = load i8, i8* %arrayidx469, align 1
  store i8 %193, i8* %G1, align 1
  br label %if.end471

if.else470:                                       ; preds = %land.lhs.true453, %lor.lhs.false449
  store i8 0, i8* %G1, align 1
  br label %if.end471

if.end471:                                        ; preds = %if.else470, %if.then457
  %194 = load i8, i8* %xfrac1.addr, align 1
  %conv472 = zext i8 %194 to i32
  %rem473 = srem i32 %conv472, 2
  %cmp474 = icmp eq i32 %rem473, 0
  br i1 %cmp474, label %land.lhs.true476, label %if.else482

land.lhs.true476:                                 ; preds = %if.end471
  %195 = load i8, i8* %yfrac1.addr, align 1
  %conv477 = zext i8 %195 to i32
  %rem478 = srem i32 %conv477, 2
  %cmp479 = icmp eq i32 %rem478, 0
  br i1 %cmp479, label %if.then481, label %if.else482

if.then481:                                       ; preds = %land.lhs.true476
  store i8 0, i8* %bitoff1, align 1
  br label %if.end483

if.else482:                                       ; preds = %land.lhs.true476, %if.end471
  store i8 1, i8* %bitoff1, align 1
  br label %if.end483

if.end483:                                        ; preds = %if.else482, %if.then481
  %196 = load i8, i8* %rmbflag.addr, align 1
  %conv484 = zext i8 %196 to i32
  %197 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %198 = load i32, i32* %i, align 4
  %idxprom485 = sext i32 %198 to i64
  %arrayidx486 = getelementptr inbounds [4 x i32], [4 x i32]* %197, i64 %idxprom485
  %199 = load i32, i32* %j, align 4
  %idxprom487 = sext i32 %199 to i64
  %arrayidx488 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx486, i64 0, i64 %idxprom487
  %200 = load i32, i32* %arrayidx488, align 4
  %mul489 = mul nsw i32 %conv484, %200
  %201 = load i8, i8* %G0, align 1
  %conv490 = zext i8 %201 to i32
  %202 = load i8, i8* %h0, align 1
  %conv491 = zext i8 %202 to i32
  %add492 = add nsw i32 %conv490, %conv491
  %203 = load i8, i8* %b0, align 1
  %conv493 = zext i8 %203 to i32
  %add494 = add nsw i32 %add492, %conv493
  %204 = load i32, i32* %sum0, align 4
  %add495 = add nsw i32 %add494, %204
  %205 = load i8, i8* %bitoff0, align 1
  %conv496 = zext i8 %205 to i32
  %add497 = add nsw i32 %add495, %conv496
  %206 = load i8, i8* %bitoff0, align 1
  %conv498 = zext i8 %206 to i32
  %shr499 = ashr i32 %add497, %conv498
  %207 = load i8, i8* %G1, align 1
  %conv500 = zext i8 %207 to i32
  %208 = load i8, i8* %h1, align 1
  %conv501 = zext i8 %208 to i32
  %add502 = add nsw i32 %conv500, %conv501
  %209 = load i8, i8* %b1, align 1
  %conv503 = zext i8 %209 to i32
  %add504 = add nsw i32 %add502, %conv503
  %210 = load i32, i32* %sum1, align 4
  %add505 = add nsw i32 %add504, %210
  %211 = load i8, i8* %bitoff1, align 1
  %conv506 = zext i8 %211 to i32
  %add507 = add nsw i32 %add505, %conv506
  %212 = load i8, i8* %bitoff1, align 1
  %conv508 = zext i8 %212 to i32
  %shr509 = ashr i32 %add507, %conv508
  %add510 = add nsw i32 %shr499, %shr509
  %add511 = add nsw i32 %add510, 1
  %shr512 = ashr i32 %add511, 1
  %add513 = add nsw i32 %mul489, %shr512
  %call514 = call i32 @Clip1y(i32 %add513)
  %conv515 = trunc i32 %call514 to i8
  %213 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %214 = load i32, i32* %startx.addr, align 4
  %215 = load i32, i32* %i, align 4
  %add516 = add nsw i32 %214, %215
  %idxprom517 = sext i32 %add516 to i64
  %arrayidx518 = getelementptr inbounds [144 x i8], [144 x i8]* %213, i64 %idxprom517
  %216 = load i32, i32* %starty.addr, align 4
  %217 = load i32, i32* %j, align 4
  %add519 = add nsw i32 %216, %217
  %idxprom520 = sext i32 %add519 to i64
  %arrayidx521 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx518, i64 0, i64 %idxprom520
  store i8 %conv515, i8* %arrayidx521, align 1
  br label %for.inc522

for.inc522:                                       ; preds = %if.end483
  %218 = load i32, i32* %j, align 4
  %inc523 = add nsw i32 %218, 1
  store i32 %inc523, i32* %j, align 4
  br label %for.cond1

for.end524:                                       ; preds = %for.cond1
  br label %for.inc525

for.inc525:                                       ; preds = %for.end524
  %219 = load i32, i32* %i, align 4
  %inc526 = add nsw i32 %219, 1
  store i32 %inc526, i32* %i, align 4
  br label %for.cond

for.end527:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_single([144 x i8]* %Sluma_cur, [4 x i32]* %rMb, i32 %startx, i32 %starty, i8 zeroext %xfrac, i8 zeroext %yfrac, i8 zeroext %xoffset, i8 zeroext %yoffset, [9 x i8]* %temp, i8 zeroext %rmbflag) #0 !prof !219 {
entry:
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xfrac.addr = alloca i8, align 1
  %yfrac.addr = alloca i8, align 1
  %xoffset.addr = alloca i8, align 1
  %yoffset.addr = alloca i8, align 1
  %temp.addr = alloca [9 x i8]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %sum = alloca i32, align 4
  %h = alloca i8, align 1
  %b = alloca i8, align 1
  %G = alloca i8, align 1
  %bitoff = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %xfrac, i8* %xfrac.addr, align 1
  store i8 %yfrac, i8* %yfrac.addr, align 1
  store i8 %xoffset, i8* %xoffset.addr, align 1
  store i8 %yoffset, i8* %yoffset.addr, align 1
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc263, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end265, !prof !229

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc260, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end262, !prof !230

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %yfrac.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp sgt i32 %conv, 0
  br i1 %cmp4, label %land.lhs.true, label %if.else, !prof !231

land.lhs.true:                                    ; preds = %for.body3
  %3 = load i8, i8* %xfrac.addr, align 1
  %conv6 = zext i8 %3 to i32
  %cmp7 = icmp ne i32 %conv6, 2
  br i1 %cmp7, label %if.then, label %if.else, !prof !232

if.then:                                          ; preds = %land.lhs.true
  %4 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 2
  %6 = load i8, i8* %xoffset.addr, align 1
  %conv9 = zext i8 %6 to i32
  %add10 = add nsw i32 %add, %conv9
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %7 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %9 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %10 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %10, 2
  %11 = load i8, i8* %xoffset.addr, align 1
  %conv15 = zext i8 %11 to i32
  %add16 = add nsw i32 %add14, %conv15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds [9 x i8], [9 x i8]* %9, i64 %idxprom17
  %12 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %12, 1
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx18, i64 0, i64 %idxprom20
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %13 to i32
  %mul = mul nsw i32 5, %conv22
  %sub = sub nsw i32 %conv13, %mul
  %14 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %15, 2
  %16 = load i8, i8* %xoffset.addr, align 1
  %conv24 = zext i8 %16 to i32
  %add25 = add nsw i32 %add23, %conv24
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom26
  %17 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %17, 2
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx27, i64 0, i64 %idxprom29
  %18 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %18 to i32
  %mul32 = mul nsw i32 20, %conv31
  %add33 = add nsw i32 %sub, %mul32
  %19 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add34 = add nsw i32 %20, 2
  %21 = load i8, i8* %xoffset.addr, align 1
  %conv35 = zext i8 %21 to i32
  %add36 = add nsw i32 %add34, %conv35
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [9 x i8], [9 x i8]* %19, i64 %idxprom37
  %22 = load i32, i32* %j, align 4
  %add39 = add nsw i32 %22, 3
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx38, i64 0, i64 %idxprom40
  %23 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %23 to i32
  %mul43 = mul nsw i32 20, %conv42
  %add44 = add nsw i32 %add33, %mul43
  %24 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %25 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %25, 2
  %26 = load i8, i8* %xoffset.addr, align 1
  %conv46 = zext i8 %26 to i32
  %add47 = add nsw i32 %add45, %conv46
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %24, i64 %idxprom48
  %27 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %27, 4
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %28 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %28 to i32
  %mul54 = mul nsw i32 5, %conv53
  %sub55 = sub nsw i32 %add44, %mul54
  %29 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %30 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %30, 2
  %31 = load i8, i8* %xoffset.addr, align 1
  %conv57 = zext i8 %31 to i32
  %add58 = add nsw i32 %add56, %conv57
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [9 x i8], [9 x i8]* %29, i64 %idxprom59
  %32 = load i32, i32* %j, align 4
  %add61 = add nsw i32 %32, 5
  %idxprom62 = sext i32 %add61 to i64
  %arrayidx63 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx60, i64 0, i64 %idxprom62
  %33 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %33 to i32
  %add65 = add nsw i32 %sub55, %conv64
  %add66 = add nsw i32 %add65, 16
  %shr = ashr i32 %add66, 5
  %call = call i32 @Clip1y(i32 %shr)
  %conv67 = trunc i32 %call to i8
  store i8 %conv67, i8* %h, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body3
  store i8 0, i8* %h, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load i8, i8* %xfrac.addr, align 1
  %conv68 = zext i8 %34 to i32
  %cmp69 = icmp sgt i32 %conv68, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.else142, !prof !233

land.lhs.true71:                                  ; preds = %if.end
  %35 = load i8, i8* %yfrac.addr, align 1
  %conv72 = zext i8 %35 to i32
  %cmp73 = icmp ne i32 %conv72, 2
  br i1 %cmp73, label %if.then75, label %if.else142, !prof !234

if.then75:                                        ; preds = %land.lhs.true71
  %36 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %37 to i64
  %arrayidx77 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 %idxprom76
  %38 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %38, 2
  %39 = load i8, i8* %yoffset.addr, align 1
  %conv79 = zext i8 %39 to i32
  %add80 = add nsw i32 %add78, %conv79
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx77, i64 0, i64 %idxprom81
  %40 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %40 to i32
  %41 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %42, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [9 x i8], [9 x i8]* %41, i64 %idxprom85
  %43 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %43, 2
  %44 = load i8, i8* %yoffset.addr, align 1
  %conv88 = zext i8 %44 to i32
  %add89 = add nsw i32 %add87, %conv88
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx86, i64 0, i64 %idxprom90
  %45 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %45 to i32
  %mul93 = mul nsw i32 5, %conv92
  %sub94 = sub nsw i32 %conv83, %mul93
  %46 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %47 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %47, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [9 x i8], [9 x i8]* %46, i64 %idxprom96
  %48 = load i32, i32* %j, align 4
  %add98 = add nsw i32 %48, 2
  %49 = load i8, i8* %yoffset.addr, align 1
  %conv99 = zext i8 %49 to i32
  %add100 = add nsw i32 %add98, %conv99
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx97, i64 0, i64 %idxprom101
  %50 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %50 to i32
  %mul104 = mul nsw i32 20, %conv103
  %add105 = add nsw i32 %sub94, %mul104
  %51 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %52, 3
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom107
  %53 = load i32, i32* %j, align 4
  %add109 = add nsw i32 %53, 2
  %54 = load i8, i8* %yoffset.addr, align 1
  %conv110 = zext i8 %54 to i32
  %add111 = add nsw i32 %add109, %conv110
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx108, i64 0, i64 %idxprom112
  %55 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %55 to i32
  %mul115 = mul nsw i32 20, %conv114
  %add116 = add nsw i32 %add105, %mul115
  %56 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %57, 4
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom118
  %58 = load i32, i32* %j, align 4
  %add120 = add nsw i32 %58, 2
  %59 = load i8, i8* %yoffset.addr, align 1
  %conv121 = zext i8 %59 to i32
  %add122 = add nsw i32 %add120, %conv121
  %idxprom123 = sext i32 %add122 to i64
  %arrayidx124 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx119, i64 0, i64 %idxprom123
  %60 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %60 to i32
  %mul126 = mul nsw i32 5, %conv125
  %sub127 = sub nsw i32 %add116, %mul126
  %61 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add128 = add nsw i32 %62, 5
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds [9 x i8], [9 x i8]* %61, i64 %idxprom129
  %63 = load i32, i32* %j, align 4
  %add131 = add nsw i32 %63, 2
  %64 = load i8, i8* %yoffset.addr, align 1
  %conv132 = zext i8 %64 to i32
  %add133 = add nsw i32 %add131, %conv132
  %idxprom134 = sext i32 %add133 to i64
  %arrayidx135 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx130, i64 0, i64 %idxprom134
  %65 = load i8, i8* %arrayidx135, align 1
  %conv136 = zext i8 %65 to i32
  %add137 = add nsw i32 %sub127, %conv136
  %add138 = add nsw i32 %add137, 16
  %shr139 = ashr i32 %add138, 5
  %call140 = call i32 @Clip1y(i32 %shr139)
  %conv141 = trunc i32 %call140 to i8
  store i8 %conv141, i8* %b, align 1
  br label %if.end143

if.else142:                                       ; preds = %land.lhs.true71, %if.end
  store i8 0, i8* %b, align 1
  br label %if.end143

if.end143:                                        ; preds = %if.else142, %if.then75
  %66 = load i8, i8* %yfrac.addr, align 1
  %conv144 = zext i8 %66 to i32
  %cmp145 = icmp sgt i32 %conv144, 0
  br i1 %cmp145, label %land.lhs.true147, label %lor.lhs.false, !prof !231

land.lhs.true147:                                 ; preds = %if.end143
  %67 = load i8, i8* %xfrac.addr, align 1
  %conv148 = zext i8 %67 to i32
  %cmp149 = icmp eq i32 %conv148, 2
  br i1 %cmp149, label %if.then158, label %lor.lhs.false, !prof !235

lor.lhs.false:                                    ; preds = %land.lhs.true147, %if.end143
  %68 = load i8, i8* %xfrac.addr, align 1
  %conv151 = zext i8 %68 to i32
  %cmp152 = icmp sgt i32 %conv151, 0
  br i1 %cmp152, label %land.lhs.true154, label %if.else185, !prof !233

land.lhs.true154:                                 ; preds = %lor.lhs.false
  %69 = load i8, i8* %yfrac.addr, align 1
  %conv155 = zext i8 %69 to i32
  %cmp156 = icmp eq i32 %conv155, 2
  br i1 %cmp156, label %if.then158, label %if.else185, !prof !236

if.then158:                                       ; preds = %land.lhs.true154, %land.lhs.true147
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc180, %if.then158
  %70 = load i32, i32* %x, align 4
  %cmp160 = icmp slt i32 %70, 6
  br i1 %cmp160, label %for.body162, label %for.end182

for.body162:                                      ; preds = %for.cond159
  store i32 0, i32* %y, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %71 = load i32, i32* %y, align 4
  %cmp164 = icmp slt i32 %71, 6
  br i1 %cmp164, label %for.body166, label %for.end

for.body166:                                      ; preds = %for.cond163
  %72 = load i32, i32* %sum, align 4
  %73 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %74 = load i32, i32* %x, align 4
  %75 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %74, %75
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [9 x i8], [9 x i8]* %73, i64 %idxprom168
  %76 = load i32, i32* %y, align 4
  %77 = load i32, i32* %j, align 4
  %add170 = add nsw i32 %76, %77
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx169, i64 0, i64 %idxprom171
  %78 = load i8, i8* %arrayidx172, align 1
  %conv173 = zext i8 %78 to i32
  %79 = load i32, i32* %x, align 4
  %idxprom174 = sext i32 %79 to i64
  %arrayidx175 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom174
  %80 = load i32, i32* %y, align 4
  %idxprom176 = sext i32 %80 to i64
  %arrayidx177 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx175, i64 0, i64 %idxprom176
  %81 = load i32, i32* %arrayidx177, align 4
  %mul178 = mul nsw i32 %conv173, %81
  %add179 = add nsw i32 %72, %mul178
  store i32 %add179, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body166
  %82 = load i32, i32* %y, align 4
  %inc = add nsw i32 %82, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc180

for.inc180:                                       ; preds = %for.end
  %83 = load i32, i32* %x, align 4
  %inc181 = add nsw i32 %83, 1
  store i32 %inc181, i32* %x, align 4
  br label %for.cond159

for.end182:                                       ; preds = %for.cond159
  %84 = load i32, i32* %sum, align 4
  %add183 = add nsw i32 %84, 512
  %shr184 = ashr i32 %add183, 10
  store i32 %shr184, i32* %sum, align 4
  br label %if.end186

if.else185:                                       ; preds = %land.lhs.true154, %lor.lhs.false
  store i32 0, i32* %sum, align 4
  br label %if.end186

if.end186:                                        ; preds = %if.else185, %for.end182
  %85 = load i8, i8* %yfrac.addr, align 1
  %conv187 = zext i8 %85 to i32
  %cmp188 = icmp eq i32 %conv187, 0
  br i1 %cmp188, label %land.lhs.true190, label %lor.lhs.false194, !prof !237

land.lhs.true190:                                 ; preds = %if.end186
  %86 = load i8, i8* %xfrac.addr, align 1
  %conv191 = zext i8 %86 to i32
  %cmp192 = icmp ne i32 %conv191, 2
  br i1 %cmp192, label %if.then210, label %lor.lhs.false194, !prof !238

lor.lhs.false194:                                 ; preds = %land.lhs.true190, %if.end186
  %87 = load i8, i8* %xfrac.addr, align 1
  %conv195 = zext i8 %87 to i32
  %cmp196 = icmp eq i32 %conv195, 0
  br i1 %cmp196, label %land.lhs.true198, label %lor.lhs.false202, !prof !239

land.lhs.true198:                                 ; preds = %lor.lhs.false194
  %88 = load i8, i8* %yfrac.addr, align 1
  %conv199 = zext i8 %88 to i32
  %cmp200 = icmp ne i32 %conv199, 2
  br i1 %cmp200, label %if.then210, label %lor.lhs.false202, !prof !240

lor.lhs.false202:                                 ; preds = %land.lhs.true198, %lor.lhs.false194
  %89 = load i8, i8* %xfrac.addr, align 1
  %conv203 = zext i8 %89 to i32
  %cmp204 = icmp eq i32 %conv203, 0
  br i1 %cmp204, label %land.lhs.true206, label %if.else222, !prof !241

land.lhs.true206:                                 ; preds = %lor.lhs.false202
  %90 = load i8, i8* %yfrac.addr, align 1
  %conv207 = zext i8 %90 to i32
  %cmp208 = icmp eq i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else222, !prof !242

if.then210:                                       ; preds = %land.lhs.true206, %land.lhs.true198, %land.lhs.true190
  %91 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %92 = load i32, i32* %i, align 4
  %add211 = add nsw i32 %92, 2
  %93 = load i8, i8* %xfrac.addr, align 1
  %conv212 = zext i8 %93 to i32
  %div = sdiv i32 %conv212, 2
  %add213 = add nsw i32 %add211, %div
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [9 x i8], [9 x i8]* %91, i64 %idxprom214
  %94 = load i32, i32* %j, align 4
  %add216 = add nsw i32 %94, 2
  %95 = load i8, i8* %yfrac.addr, align 1
  %conv217 = zext i8 %95 to i32
  %div218 = sdiv i32 %conv217, 2
  %add219 = add nsw i32 %add216, %div218
  %idxprom220 = sext i32 %add219 to i64
  %arrayidx221 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx215, i64 0, i64 %idxprom220
  %96 = load i8, i8* %arrayidx221, align 1
  store i8 %96, i8* %G, align 1
  br label %if.end223

if.else222:                                       ; preds = %land.lhs.true206, %lor.lhs.false202
  store i8 0, i8* %G, align 1
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %if.then210
  %97 = load i8, i8* %xfrac.addr, align 1
  %conv224 = zext i8 %97 to i32
  %rem = srem i32 %conv224, 2
  %cmp225 = icmp eq i32 %rem, 0
  br i1 %cmp225, label %land.lhs.true227, label %if.else233, !prof !243

land.lhs.true227:                                 ; preds = %if.end223
  %98 = load i8, i8* %yfrac.addr, align 1
  %conv228 = zext i8 %98 to i32
  %rem229 = srem i32 %conv228, 2
  %cmp230 = icmp eq i32 %rem229, 0
  br i1 %cmp230, label %if.then232, label %if.else233, !prof !244

if.then232:                                       ; preds = %land.lhs.true227
  store i8 0, i8* %bitoff, align 1
  br label %if.end234

if.else233:                                       ; preds = %land.lhs.true227, %if.end223
  store i8 1, i8* %bitoff, align 1
  br label %if.end234

if.end234:                                        ; preds = %if.else233, %if.then232
  %99 = load i8, i8* %rmbflag.addr, align 1
  %conv235 = zext i8 %99 to i32
  %100 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %101 = load i32, i32* %i, align 4
  %idxprom236 = sext i32 %101 to i64
  %arrayidx237 = getelementptr inbounds [4 x i32], [4 x i32]* %100, i64 %idxprom236
  %102 = load i32, i32* %j, align 4
  %idxprom238 = sext i32 %102 to i64
  %arrayidx239 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx237, i64 0, i64 %idxprom238
  %103 = load i32, i32* %arrayidx239, align 4
  %mul240 = mul nsw i32 %conv235, %103
  %104 = load i8, i8* %G, align 1
  %conv241 = zext i8 %104 to i32
  %105 = load i8, i8* %h, align 1
  %conv242 = zext i8 %105 to i32
  %add243 = add nsw i32 %conv241, %conv242
  %106 = load i8, i8* %b, align 1
  %conv244 = zext i8 %106 to i32
  %add245 = add nsw i32 %add243, %conv244
  %107 = load i32, i32* %sum, align 4
  %add246 = add nsw i32 %add245, %107
  %108 = load i8, i8* %bitoff, align 1
  %conv247 = zext i8 %108 to i32
  %add248 = add nsw i32 %add246, %conv247
  %109 = load i8, i8* %bitoff, align 1
  %conv249 = zext i8 %109 to i32
  %shr250 = ashr i32 %add248, %conv249
  %add251 = add nsw i32 %mul240, %shr250
  %call252 = call i32 @Clip1y(i32 %add251)
  %conv253 = trunc i32 %call252 to i8
  %110 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %111 = load i32, i32* %startx.addr, align 4
  %112 = load i32, i32* %i, align 4
  %add254 = add nsw i32 %111, %112
  %idxprom255 = sext i32 %add254 to i64
  %arrayidx256 = getelementptr inbounds [144 x i8], [144 x i8]* %110, i64 %idxprom255
  %113 = load i32, i32* %starty.addr, align 4
  %114 = load i32, i32* %j, align 4
  %add257 = add nsw i32 %113, %114
  %idxprom258 = sext i32 %add257 to i64
  %arrayidx259 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx256, i64 0, i64 %idxprom258
  store i8 %conv253, i8* %arrayidx259, align 1
  br label %for.inc260

for.inc260:                                       ; preds = %if.end234
  %115 = load i32, i32* %j, align 4
  %inc261 = add nsw i32 %115, 1
  store i32 %inc261, i32* %j, align 4
  br label %for.cond1

for.end262:                                       ; preds = %for.cond1
  br label %for.inc263

for.inc263:                                       ; preds = %for.end262
  %116 = load i32, i32* %i, align 4
  %inc264 = add nsw i32 %116, 1
  store i32 %inc264, i32* %i, align 4
  br label %for.cond

for.end265:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @IntraInfo(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, [36 x i8]* %pred_mode, [18 x i8]* %refidx0, [18 x i8]* %refidx1, i8* %tmpintramode, i8 zeroext %constrained_intra_pred_flag, i32 %startx, i32 %starty) #0 !prof !245 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pred_mode.addr = alloca [36 x i8]*, align 8
  %refidx0.addr = alloca [18 x i8]*, align 8
  %refidx1.addr = alloca [18 x i8]*, align 8
  %tmpintramode.addr = alloca i8*, align 8
  %constrained_intra_pred_flag.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %xoff = alloca i32, align 4
  %yoff = alloca i32, align 4
  %k = alloca i32, align 4
  %modetmp = alloca i32, align 4
  %predmodeA = alloca i8, align 1
  %predmodeB = alloca i8, align 1
  %previntramodeflag = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store [36 x i8]* %pred_mode, [36 x i8]** %pred_mode.addr, align 8
  store [18 x i8]* %refidx0, [18 x i8]** %refidx0.addr, align 8
  store [18 x i8]* %refidx1, [18 x i8]** %refidx1.addr, align 8
  store i8* %tmpintramode, i8** %tmpintramode.addr, align 8
  store i8 %constrained_intra_pred_flag, i8* %constrained_intra_pred_flag.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end, !prof !246

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %k, align 4
  %and = and i32 %1, 4
  %cmp1 = icmp ne i32 %and, 0
  %conv = zext i1 %cmp1 to i32
  %mul = mul nsw i32 %conv, 2
  %2 = load i32, i32* %k, align 4
  %and2 = and i32 %2, 1
  %cmp3 = icmp ne i32 %and2, 0
  %conv4 = zext i1 %cmp3 to i32
  %add = add nsw i32 %mul, %conv4
  store i32 %add, i32* %x, align 4
  %3 = load i32, i32* %k, align 4
  %and5 = and i32 %3, 8
  %cmp6 = icmp ne i32 %and5, 0
  %conv7 = zext i1 %cmp6 to i32
  %mul8 = mul nsw i32 %conv7, 2
  %4 = load i32, i32* %k, align 4
  %and9 = and i32 %4, 2
  %cmp10 = icmp ne i32 %and9, 0
  %conv11 = zext i1 %cmp10 to i32
  %add12 = add nsw i32 %mul8, %conv11
  store i32 %add12, i32* %y, align 4
  %5 = load i32, i32* %startx.addr, align 4
  %6 = load i32, i32* %x, align 4
  %add13 = add nsw i32 %5, %6
  store i32 %add13, i32* %xoff, align 4
  %7 = load i32, i32* %starty.addr, align 4
  %8 = load i32, i32* %y, align 4
  %add14 = add nsw i32 %7, %8
  store i32 %add14, i32* %yoff, align 4
  %9 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %10 = load i32, i32* %xoff, align 4
  %div = sdiv i32 %10, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 %idxprom
  %11 = load i32, i32* %yoff, align 4
  %div15 = sdiv i32 %11, 2
  %idxprom16 = sext i32 %div15 to i64
  %arrayidx17 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom16
  store i8 -1, i8* %arrayidx17, align 1
  %12 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %13 = load i32, i32* %xoff, align 4
  %div18 = sdiv i32 %13, 2
  %idxprom19 = sext i32 %div18 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %12, i64 %idxprom19
  %14 = load i32, i32* %yoff, align 4
  %div21 = sdiv i32 %14, 2
  %idxprom22 = sext i32 %div21 to i64
  %arrayidx23 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx20, i64 0, i64 %idxprom22
  store i8 -1, i8* %arrayidx23, align 1
  store i8 2, i8* %predmodeA, align 1
  store i8 2, i8* %predmodeB, align 1
  %15 = load i32, i32* %xoff, align 4
  %cmp24 = icmp sgt i32 %15, 0
  br i1 %cmp24, label %land.lhs.true, label %if.end, !prof !247

land.lhs.true:                                    ; preds = %for.body
  %16 = load i8, i8* %constrained_intra_pred_flag.addr, align 1
  %conv26 = zext i8 %16 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %land.lhs.true29, label %if.end, !prof !248

land.lhs.true29:                                  ; preds = %land.lhs.true
  %17 = load i32, i32* %yoff, align 4
  %cmp30 = icmp sgt i32 %17, 0
  br i1 %cmp30, label %if.then, label %if.end, !prof !249

if.then:                                          ; preds = %land.lhs.true29
  %18 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %19 = load i32, i32* %xoff, align 4
  %sub = sub nsw i32 %19, 1
  %idxprom32 = sext i32 %sub to i64
  %arrayidx33 = getelementptr inbounds [36 x i8], [36 x i8]* %18, i64 %idxprom32
  %20 = load i32, i32* %yoff, align 4
  %idxprom34 = sext i32 %20 to i64
  %arrayidx35 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx33, i64 0, i64 %idxprom34
  %21 = load i8, i8* %arrayidx35, align 1
  store i8 %21, i8* %predmodeA, align 1
  %22 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %23 = load i32, i32* %xoff, align 4
  %idxprom36 = sext i32 %23 to i64
  %arrayidx37 = getelementptr inbounds [36 x i8], [36 x i8]* %22, i64 %idxprom36
  %24 = load i32, i32* %yoff, align 4
  %sub38 = sub nsw i32 %24, 1
  %idxprom39 = sext i32 %sub38 to i64
  %arrayidx40 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx37, i64 0, i64 %idxprom39
  %25 = load i8, i8* %arrayidx40, align 1
  store i8 %25, i8* %predmodeB, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true29, %land.lhs.true, %for.body
  %26 = load i8, i8* %predmodeA, align 1
  %conv41 = sext i8 %26 to i32
  %27 = load i8, i8* %predmodeB, align 1
  %conv42 = sext i8 %27 to i32
  %cmp43 = icmp slt i32 %conv41, %conv42
  br i1 %cmp43, label %cond.true, label %cond.false, !prof !250

cond.true:                                        ; preds = %if.end
  %28 = load i8, i8* %predmodeA, align 1
  %conv45 = sext i8 %28 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %29 = load i8, i8* %predmodeB, align 1
  %conv46 = sext i8 %29 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv45, %cond.true ], [ %conv46, %cond.false ]
  store i32 %cond, i32* %modetmp, align 4
  %30 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %31 = load i8*, i8** %nalu_buf.addr, align 8
  %32 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %30, i8* %31, i64* %32)
  store i8 %call, i8* %previntramodeflag, align 1
  %33 = load i8, i8* %previntramodeflag, align 1
  %tobool = icmp ne i8 %33, 0
  br i1 %tobool, label %if.then47, label %if.else, !prof !251

if.then47:                                        ; preds = %cond.end
  %34 = load i32, i32* %modetmp, align 4
  %conv48 = trunc i32 %34 to i8
  %35 = load i8*, i8** %tmpintramode.addr, align 8
  %36 = load i32, i32* %k, align 4
  %idxprom49 = sext i32 %36 to i64
  %arrayidx50 = getelementptr inbounds i8, i8* %35, i64 %idxprom49
  store i8 %conv48, i8* %arrayidx50, align 1
  br label %if.end69

if.else:                                          ; preds = %cond.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call i32 @u_n(i32 3, %struct.NALU_t* %37, i8* %38, i64* %39)
  %conv52 = trunc i32 %call51 to i8
  %40 = load i8*, i8** %tmpintramode.addr, align 8
  %41 = load i32, i32* %k, align 4
  %idxprom53 = sext i32 %41 to i64
  %arrayidx54 = getelementptr inbounds i8, i8* %40, i64 %idxprom53
  store i8 %conv52, i8* %arrayidx54, align 1
  %42 = load i8*, i8** %tmpintramode.addr, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom55 = sext i32 %43 to i64
  %arrayidx56 = getelementptr inbounds i8, i8* %42, i64 %idxprom55
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %44 to i32
  %45 = load i32, i32* %modetmp, align 4
  %cmp58 = icmp sge i32 %conv57, %45
  br i1 %cmp58, label %if.then60, label %if.end68, !prof !252

if.then60:                                        ; preds = %if.else
  %46 = load i8*, i8** %tmpintramode.addr, align 8
  %47 = load i32, i32* %k, align 4
  %idxprom61 = sext i32 %47 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %46, i64 %idxprom61
  %48 = load i8, i8* %arrayidx62, align 1
  %conv63 = sext i8 %48 to i32
  %add64 = add nsw i32 %conv63, 1
  %conv65 = trunc i32 %add64 to i8
  %49 = load i8*, i8** %tmpintramode.addr, align 8
  %50 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %50 to i64
  %arrayidx67 = getelementptr inbounds i8, i8* %49, i64 %idxprom66
  store i8 %conv65, i8* %arrayidx67, align 1
  br label %if.end68

if.end68:                                         ; preds = %if.then60, %if.else
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then47
  %51 = load i8*, i8** %tmpintramode.addr, align 8
  %52 = load i32, i32* %k, align 4
  %idxprom70 = sext i32 %52 to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %51, i64 %idxprom70
  %53 = load i8, i8* %arrayidx71, align 1
  %54 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %55 = load i32, i32* %xoff, align 4
  %idxprom72 = sext i32 %55 to i64
  %arrayidx73 = getelementptr inbounds [36 x i8], [36 x i8]* %54, i64 %idxprom72
  %56 = load i32, i32* %yoff, align 4
  %idxprom74 = sext i32 %56 to i64
  %arrayidx75 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx73, i64 0, i64 %idxprom74
  store i8 %53, i8* %arrayidx75, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end69
  %57 = load i32, i32* %k, align 4
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @predict_intra4x4_luma_NonField([4 x i8]* %predL, [144 x i8]* %Sluma, i8 zeroext %predmode, i8 zeroext %avaiMode, i32 %startx, i32 %starty, i32 %blk) #0 !prof !253 {
entry:
  %predL.addr = alloca [4 x i8]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %predmode.addr = alloca i8, align 1
  %avaiMode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %P_X = alloca i8, align 1
  %P_A = alloca i8, align 1
  %P_B = alloca i8, align 1
  %P_C = alloca i8, align 1
  %P_D = alloca i8, align 1
  %P_E = alloca i8, align 1
  %P_F = alloca i8, align 1
  %P_G = alloca i8, align 1
  %P_H = alloca i8, align 1
  %P_I = alloca i8, align 1
  %P_J = alloca i8, align 1
  %P_K = alloca i8, align 1
  %P_L = alloca i8, align 1
  %s0 = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %predL, [4 x i8]** %predL.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i8 %predmode, i8* %predmode.addr, align 1
  store i8 %avaiMode, i8* %avaiMode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  %0 = load i8, i8* %avaiMode.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !254

if.then:                                          ; preds = %entry
  %1 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %2 = load i32, i32* %startx.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %starty.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom1 = sext i32 %sub to i64
  %arrayidx2 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %4 = load i8, i8* %arrayidx2, align 1
  store i8 %4, i8* %P_A, align 1
  %5 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %6 = load i32, i32* %startx.addr, align 4
  %add = add nsw i32 %6, 1
  %idxprom3 = sext i32 %add to i64
  %arrayidx4 = getelementptr inbounds [144 x i8], [144 x i8]* %5, i64 %idxprom3
  %7 = load i32, i32* %starty.addr, align 4
  %sub5 = sub nsw i32 %7, 1
  %idxprom6 = sext i32 %sub5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx4, i64 0, i64 %idxprom6
  %8 = load i8, i8* %arrayidx7, align 1
  store i8 %8, i8* %P_B, align 1
  %9 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %10 = load i32, i32* %startx.addr, align 4
  %add8 = add nsw i32 %10, 2
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds [144 x i8], [144 x i8]* %9, i64 %idxprom9
  %11 = load i32, i32* %starty.addr, align 4
  %sub11 = sub nsw i32 %11, 1
  %idxprom12 = sext i32 %sub11 to i64
  %arrayidx13 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx10, i64 0, i64 %idxprom12
  %12 = load i8, i8* %arrayidx13, align 1
  store i8 %12, i8* %P_C, align 1
  %13 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %14 = load i32, i32* %startx.addr, align 4
  %add14 = add nsw i32 %14, 3
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [144 x i8], [144 x i8]* %13, i64 %idxprom15
  %15 = load i32, i32* %starty.addr, align 4
  %sub17 = sub nsw i32 %15, 1
  %idxprom18 = sext i32 %sub17 to i64
  %arrayidx19 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx16, i64 0, i64 %idxprom18
  %16 = load i8, i8* %arrayidx19, align 1
  store i8 %16, i8* %P_D, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -128, i8* %P_D, align 1
  store i8 -128, i8* %P_C, align 1
  store i8 -128, i8* %P_B, align 1
  store i8 -128, i8* %P_A, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load i32, i32* %blk.addr, align 4
  %cmp = icmp eq i32 %17, 3
  br i1 %cmp, label %if.then43, label %lor.lhs.false, !prof !255

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i32, i32* %blk.addr, align 4
  %cmp21 = icmp eq i32 %18, 11
  br i1 %cmp21, label %if.then43, label %lor.lhs.false23, !prof !256

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %19 = load i32, i32* %blk.addr, align 4
  %cmp24 = icmp eq i32 %19, 13
  br i1 %cmp24, label %if.then43, label %lor.lhs.false26, !prof !257

lor.lhs.false26:                                  ; preds = %lor.lhs.false23
  %20 = load i32, i32* %blk.addr, align 4
  %cmp27 = icmp eq i32 %20, 7
  br i1 %cmp27, label %if.then43, label %lor.lhs.false29, !prof !258

lor.lhs.false29:                                  ; preds = %lor.lhs.false26
  %21 = load i32, i32* %blk.addr, align 4
  %cmp30 = icmp eq i32 %21, 15
  br i1 %cmp30, label %if.then43, label %lor.lhs.false32, !prof !259

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %22 = load i8, i8* %avaiMode.addr, align 1
  %conv33 = zext i8 %22 to i32
  %and34 = and i32 %conv33, 1
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %lor.lhs.false36, label %if.then43, !prof !260

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %23 = load i32, i32* %startx.addr, align 4
  %add37 = add nsw i32 %23, 4
  %cmp38 = icmp sge i32 %add37, 176
  br i1 %cmp38, label %if.then43, label %lor.lhs.false40, !prof !261

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %24 = load i32, i32* %starty.addr, align 4
  %cmp41 = icmp eq i32 %24, 0
  br i1 %cmp41, label %if.then43, label %if.else44, !prof !262

if.then43:                                        ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %lor.lhs.false29, %lor.lhs.false26, %lor.lhs.false23, %lor.lhs.false, %if.end
  %25 = load i8, i8* %P_D, align 1
  store i8 %25, i8* %P_H, align 1
  store i8 %25, i8* %P_G, align 1
  store i8 %25, i8* %P_F, align 1
  store i8 %25, i8* %P_E, align 1
  br label %if.end69

if.else44:                                        ; preds = %lor.lhs.false40
  %26 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %27 = load i32, i32* %startx.addr, align 4
  %add45 = add nsw i32 %27, 4
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds [144 x i8], [144 x i8]* %26, i64 %idxprom46
  %28 = load i32, i32* %starty.addr, align 4
  %sub48 = sub nsw i32 %28, 1
  %idxprom49 = sext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx47, i64 0, i64 %idxprom49
  %29 = load i8, i8* %arrayidx50, align 1
  store i8 %29, i8* %P_E, align 1
  %30 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %31 = load i32, i32* %startx.addr, align 4
  %add51 = add nsw i32 %31, 5
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i8], [144 x i8]* %30, i64 %idxprom52
  %32 = load i32, i32* %starty.addr, align 4
  %sub54 = sub nsw i32 %32, 1
  %idxprom55 = sext i32 %sub54 to i64
  %arrayidx56 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx53, i64 0, i64 %idxprom55
  %33 = load i8, i8* %arrayidx56, align 1
  store i8 %33, i8* %P_F, align 1
  %34 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %35 = load i32, i32* %startx.addr, align 4
  %add57 = add nsw i32 %35, 6
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds [144 x i8], [144 x i8]* %34, i64 %idxprom58
  %36 = load i32, i32* %starty.addr, align 4
  %sub60 = sub nsw i32 %36, 1
  %idxprom61 = sext i32 %sub60 to i64
  %arrayidx62 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx59, i64 0, i64 %idxprom61
  %37 = load i8, i8* %arrayidx62, align 1
  store i8 %37, i8* %P_G, align 1
  %38 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %39 = load i32, i32* %startx.addr, align 4
  %add63 = add nsw i32 %39, 7
  %idxprom64 = sext i32 %add63 to i64
  %arrayidx65 = getelementptr inbounds [144 x i8], [144 x i8]* %38, i64 %idxprom64
  %40 = load i32, i32* %starty.addr, align 4
  %sub66 = sub nsw i32 %40, 1
  %idxprom67 = sext i32 %sub66 to i64
  %arrayidx68 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx65, i64 0, i64 %idxprom67
  %41 = load i8, i8* %arrayidx68, align 1
  store i8 %41, i8* %P_H, align 1
  br label %if.end69

if.end69:                                         ; preds = %if.else44, %if.then43
  %42 = load i8, i8* %avaiMode.addr, align 1
  %conv70 = zext i8 %42 to i32
  %and71 = and i32 %conv70, 2
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.else97, !prof !247

if.then73:                                        ; preds = %if.end69
  %43 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %44 = load i32, i32* %startx.addr, align 4
  %sub74 = sub nsw i32 %44, 1
  %idxprom75 = sext i32 %sub74 to i64
  %arrayidx76 = getelementptr inbounds [144 x i8], [144 x i8]* %43, i64 %idxprom75
  %45 = load i32, i32* %starty.addr, align 4
  %idxprom77 = sext i32 %45 to i64
  %arrayidx78 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx76, i64 0, i64 %idxprom77
  %46 = load i8, i8* %arrayidx78, align 1
  store i8 %46, i8* %P_I, align 1
  %47 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %48 = load i32, i32* %startx.addr, align 4
  %sub79 = sub nsw i32 %48, 1
  %idxprom80 = sext i32 %sub79 to i64
  %arrayidx81 = getelementptr inbounds [144 x i8], [144 x i8]* %47, i64 %idxprom80
  %49 = load i32, i32* %starty.addr, align 4
  %add82 = add nsw i32 %49, 1
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx81, i64 0, i64 %idxprom83
  %50 = load i8, i8* %arrayidx84, align 1
  store i8 %50, i8* %P_J, align 1
  %51 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %52 = load i32, i32* %startx.addr, align 4
  %sub85 = sub nsw i32 %52, 1
  %idxprom86 = sext i32 %sub85 to i64
  %arrayidx87 = getelementptr inbounds [144 x i8], [144 x i8]* %51, i64 %idxprom86
  %53 = load i32, i32* %starty.addr, align 4
  %add88 = add nsw i32 %53, 2
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx87, i64 0, i64 %idxprom89
  %54 = load i8, i8* %arrayidx90, align 1
  store i8 %54, i8* %P_K, align 1
  %55 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %56 = load i32, i32* %startx.addr, align 4
  %sub91 = sub nsw i32 %56, 1
  %idxprom92 = sext i32 %sub91 to i64
  %arrayidx93 = getelementptr inbounds [144 x i8], [144 x i8]* %55, i64 %idxprom92
  %57 = load i32, i32* %starty.addr, align 4
  %add94 = add nsw i32 %57, 3
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx93, i64 0, i64 %idxprom95
  %58 = load i8, i8* %arrayidx96, align 1
  store i8 %58, i8* %P_L, align 1
  br label %if.end98

if.else97:                                        ; preds = %if.end69
  store i8 -128, i8* %P_L, align 1
  store i8 -128, i8* %P_K, align 1
  store i8 -128, i8* %P_J, align 1
  store i8 -128, i8* %P_I, align 1
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.then73
  %59 = load i8, i8* %avaiMode.addr, align 1
  %conv99 = zext i8 %59 to i32
  %cmp100 = icmp eq i32 %conv99, 3
  br i1 %cmp100, label %if.then102, label %if.else109, !prof !263

if.then102:                                       ; preds = %if.end98
  %60 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %61 = load i32, i32* %startx.addr, align 4
  %sub103 = sub nsw i32 %61, 1
  %idxprom104 = sext i32 %sub103 to i64
  %arrayidx105 = getelementptr inbounds [144 x i8], [144 x i8]* %60, i64 %idxprom104
  %62 = load i32, i32* %starty.addr, align 4
  %sub106 = sub nsw i32 %62, 1
  %idxprom107 = sext i32 %sub106 to i64
  %arrayidx108 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx105, i64 0, i64 %idxprom107
  %63 = load i8, i8* %arrayidx108, align 1
  store i8 %63, i8* %P_X, align 1
  br label %if.end110

if.else109:                                       ; preds = %if.end98
  store i8 -128, i8* %P_X, align 1
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %if.then102
  %64 = load i8, i8* %predmode.addr, align 1
  %conv111 = zext i8 %64 to i32
  switch i32 %conv111, label %sw.default802 [
    i32 2, label %sw.bb
    i32 0, label %sw.bb166
    i32 1, label %sw.bb186
    i32 4, label %sw.bb206
    i32 3, label %sw.bb300
    i32 5, label %sw.bb394
    i32 7, label %sw.bb505
    i32 8, label %sw.bb613
    i32 6, label %sw.bb691
  ], !prof !264

sw.bb:                                            ; preds = %if.end110
  store i8 0, i8* %s0, align 1
  %65 = load i8, i8* %avaiMode.addr, align 1
  %conv112 = zext i8 %65 to i32
  switch i32 %conv112, label %sw.default [
    i32 3, label %sw.bb113
    i32 2, label %sw.bb131
    i32 1, label %sw.bb142
  ], !prof !265

sw.bb113:                                         ; preds = %sw.bb
  %66 = load i8, i8* %P_A, align 1
  %conv114 = zext i8 %66 to i32
  %67 = load i8, i8* %P_B, align 1
  %conv115 = zext i8 %67 to i32
  %add116 = add nsw i32 %conv114, %conv115
  %68 = load i8, i8* %P_C, align 1
  %conv117 = zext i8 %68 to i32
  %add118 = add nsw i32 %add116, %conv117
  %69 = load i8, i8* %P_D, align 1
  %conv119 = zext i8 %69 to i32
  %add120 = add nsw i32 %add118, %conv119
  %70 = load i8, i8* %P_I, align 1
  %conv121 = zext i8 %70 to i32
  %add122 = add nsw i32 %add120, %conv121
  %71 = load i8, i8* %P_J, align 1
  %conv123 = zext i8 %71 to i32
  %add124 = add nsw i32 %add122, %conv123
  %72 = load i8, i8* %P_K, align 1
  %conv125 = zext i8 %72 to i32
  %add126 = add nsw i32 %add124, %conv125
  %73 = load i8, i8* %P_L, align 1
  %conv127 = zext i8 %73 to i32
  %add128 = add nsw i32 %add126, %conv127
  %add129 = add nsw i32 %add128, 4
  %shr = ashr i32 %add129, 3
  %conv130 = trunc i32 %shr to i8
  store i8 %conv130, i8* %s0, align 1
  br label %sw.epilog

sw.bb131:                                         ; preds = %sw.bb
  %74 = load i8, i8* %P_I, align 1
  %conv132 = zext i8 %74 to i32
  %75 = load i8, i8* %P_J, align 1
  %conv133 = zext i8 %75 to i32
  %add134 = add nsw i32 %conv132, %conv133
  %76 = load i8, i8* %P_K, align 1
  %conv135 = zext i8 %76 to i32
  %add136 = add nsw i32 %add134, %conv135
  %77 = load i8, i8* %P_L, align 1
  %conv137 = zext i8 %77 to i32
  %add138 = add nsw i32 %add136, %conv137
  %add139 = add nsw i32 %add138, 2
  %shr140 = ashr i32 %add139, 2
  %conv141 = trunc i32 %shr140 to i8
  store i8 %conv141, i8* %s0, align 1
  br label %sw.epilog

sw.bb142:                                         ; preds = %sw.bb
  %78 = load i8, i8* %P_A, align 1
  %conv143 = zext i8 %78 to i32
  %79 = load i8, i8* %P_B, align 1
  %conv144 = zext i8 %79 to i32
  %add145 = add nsw i32 %conv143, %conv144
  %80 = load i8, i8* %P_C, align 1
  %conv146 = zext i8 %80 to i32
  %add147 = add nsw i32 %add145, %conv146
  %81 = load i8, i8* %P_D, align 1
  %conv148 = zext i8 %81 to i32
  %add149 = add nsw i32 %add147, %conv148
  %add150 = add nsw i32 %add149, 2
  %shr151 = ashr i32 %add150, 2
  %conv152 = trunc i32 %shr151 to i8
  store i8 %conv152, i8* %s0, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb
  store i8 -128, i8* %s0, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb142, %sw.bb131, %sw.bb113
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc163, %sw.epilog
  %82 = load i32, i32* %j, align 4
  %cmp153 = icmp slt i32 %82, 4
  br i1 %cmp153, label %for.body, label %for.end165, !prof !266

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc, %for.body
  %83 = load i32, i32* %i, align 4
  %cmp156 = icmp slt i32 %83, 4
  br i1 %cmp156, label %for.body158, label %for.end, !prof !267

for.body158:                                      ; preds = %for.cond155
  %84 = load i8, i8* %s0, align 1
  %85 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %86 = load i32, i32* %i, align 4
  %idxprom159 = sext i32 %86 to i64
  %arrayidx160 = getelementptr inbounds [4 x i8], [4 x i8]* %85, i64 %idxprom159
  %87 = load i32, i32* %j, align 4
  %idxprom161 = sext i32 %87 to i64
  %arrayidx162 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx160, i64 0, i64 %idxprom161
  store i8 %84, i8* %arrayidx162, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body158
  %88 = load i32, i32* %i, align 4
  %inc = add nsw i32 %88, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond155

for.end:                                          ; preds = %for.cond155
  br label %for.inc163

for.inc163:                                       ; preds = %for.end
  %89 = load i32, i32* %j, align 4
  %inc164 = add nsw i32 %89, 1
  store i32 %inc164, i32* %j, align 4
  br label %for.cond

for.end165:                                       ; preds = %for.cond
  br label %sw.epilog804

sw.bb166:                                         ; preds = %if.end110
  store i32 0, i32* %i, align 4
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc183, %sw.bb166
  %90 = load i32, i32* %i, align 4
  %cmp168 = icmp slt i32 %90, 4
  br i1 %cmp168, label %for.body170, label %for.end185, !prof !268

for.body170:                                      ; preds = %for.cond167
  %91 = load i8, i8* %P_A, align 1
  %92 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx171 = getelementptr inbounds [4 x i8], [4 x i8]* %92, i64 0
  %93 = load i32, i32* %i, align 4
  %idxprom172 = sext i32 %93 to i64
  %arrayidx173 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx171, i64 0, i64 %idxprom172
  store i8 %91, i8* %arrayidx173, align 1
  %94 = load i8, i8* %P_B, align 1
  %95 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx174 = getelementptr inbounds [4 x i8], [4 x i8]* %95, i64 1
  %96 = load i32, i32* %i, align 4
  %idxprom175 = sext i32 %96 to i64
  %arrayidx176 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx174, i64 0, i64 %idxprom175
  store i8 %94, i8* %arrayidx176, align 1
  %97 = load i8, i8* %P_C, align 1
  %98 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx177 = getelementptr inbounds [4 x i8], [4 x i8]* %98, i64 2
  %99 = load i32, i32* %i, align 4
  %idxprom178 = sext i32 %99 to i64
  %arrayidx179 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx177, i64 0, i64 %idxprom178
  store i8 %97, i8* %arrayidx179, align 1
  %100 = load i8, i8* %P_D, align 1
  %101 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx180 = getelementptr inbounds [4 x i8], [4 x i8]* %101, i64 3
  %102 = load i32, i32* %i, align 4
  %idxprom181 = sext i32 %102 to i64
  %arrayidx182 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx180, i64 0, i64 %idxprom181
  store i8 %100, i8* %arrayidx182, align 1
  br label %for.inc183

for.inc183:                                       ; preds = %for.body170
  %103 = load i32, i32* %i, align 4
  %inc184 = add nsw i32 %103, 1
  store i32 %inc184, i32* %i, align 4
  br label %for.cond167

for.end185:                                       ; preds = %for.cond167
  br label %sw.epilog804

sw.bb186:                                         ; preds = %if.end110
  store i32 0, i32* %i, align 4
  br label %for.cond187

for.cond187:                                      ; preds = %for.inc203, %sw.bb186
  %104 = load i32, i32* %i, align 4
  %cmp188 = icmp slt i32 %104, 4
  br i1 %cmp188, label %for.body190, label %for.end205, !prof !269

for.body190:                                      ; preds = %for.cond187
  %105 = load i8, i8* %P_I, align 1
  %106 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %107 = load i32, i32* %i, align 4
  %idxprom191 = sext i32 %107 to i64
  %arrayidx192 = getelementptr inbounds [4 x i8], [4 x i8]* %106, i64 %idxprom191
  %arrayidx193 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx192, i64 0, i64 0
  store i8 %105, i8* %arrayidx193, align 1
  %108 = load i8, i8* %P_J, align 1
  %109 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %110 = load i32, i32* %i, align 4
  %idxprom194 = sext i32 %110 to i64
  %arrayidx195 = getelementptr inbounds [4 x i8], [4 x i8]* %109, i64 %idxprom194
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx195, i64 0, i64 1
  store i8 %108, i8* %arrayidx196, align 1
  %111 = load i8, i8* %P_K, align 1
  %112 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %113 = load i32, i32* %i, align 4
  %idxprom197 = sext i32 %113 to i64
  %arrayidx198 = getelementptr inbounds [4 x i8], [4 x i8]* %112, i64 %idxprom197
  %arrayidx199 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx198, i64 0, i64 2
  store i8 %111, i8* %arrayidx199, align 1
  %114 = load i8, i8* %P_L, align 1
  %115 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %116 = load i32, i32* %i, align 4
  %idxprom200 = sext i32 %116 to i64
  %arrayidx201 = getelementptr inbounds [4 x i8], [4 x i8]* %115, i64 %idxprom200
  %arrayidx202 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx201, i64 0, i64 3
  store i8 %114, i8* %arrayidx202, align 1
  br label %for.inc203

for.inc203:                                       ; preds = %for.body190
  %117 = load i32, i32* %i, align 4
  %inc204 = add nsw i32 %117, 1
  store i32 %inc204, i32* %i, align 4
  br label %for.cond187

for.end205:                                       ; preds = %for.cond187
  br label %sw.epilog804

sw.bb206:                                         ; preds = %if.end110
  %118 = load i8, i8* %P_L, align 1
  %conv207 = zext i8 %118 to i32
  %119 = load i8, i8* %P_K, align 1
  %conv208 = zext i8 %119 to i32
  %mul = mul nsw i32 2, %conv208
  %add209 = add nsw i32 %conv207, %mul
  %120 = load i8, i8* %P_J, align 1
  %conv210 = zext i8 %120 to i32
  %add211 = add nsw i32 %add209, %conv210
  %add212 = add nsw i32 %add211, 2
  %div = sdiv i32 %add212, 4
  %conv213 = trunc i32 %div to i8
  %121 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx214 = getelementptr inbounds [4 x i8], [4 x i8]* %121, i64 0
  %arrayidx215 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx214, i64 0, i64 3
  store i8 %conv213, i8* %arrayidx215, align 1
  %122 = load i8, i8* %P_K, align 1
  %conv216 = zext i8 %122 to i32
  %123 = load i8, i8* %P_J, align 1
  %conv217 = zext i8 %123 to i32
  %mul218 = mul nsw i32 2, %conv217
  %add219 = add nsw i32 %conv216, %mul218
  %124 = load i8, i8* %P_I, align 1
  %conv220 = zext i8 %124 to i32
  %add221 = add nsw i32 %add219, %conv220
  %add222 = add nsw i32 %add221, 2
  %div223 = sdiv i32 %add222, 4
  %conv224 = trunc i32 %div223 to i8
  %125 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx225 = getelementptr inbounds [4 x i8], [4 x i8]* %125, i64 1
  %arrayidx226 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx225, i64 0, i64 3
  store i8 %conv224, i8* %arrayidx226, align 1
  %126 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx227 = getelementptr inbounds [4 x i8], [4 x i8]* %126, i64 0
  %arrayidx228 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx227, i64 0, i64 2
  store i8 %conv224, i8* %arrayidx228, align 1
  %127 = load i8, i8* %P_J, align 1
  %conv229 = zext i8 %127 to i32
  %128 = load i8, i8* %P_I, align 1
  %conv230 = zext i8 %128 to i32
  %mul231 = mul nsw i32 2, %conv230
  %add232 = add nsw i32 %conv229, %mul231
  %129 = load i8, i8* %P_X, align 1
  %conv233 = zext i8 %129 to i32
  %add234 = add nsw i32 %add232, %conv233
  %add235 = add nsw i32 %add234, 2
  %div236 = sdiv i32 %add235, 4
  %conv237 = trunc i32 %div236 to i8
  %130 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx238 = getelementptr inbounds [4 x i8], [4 x i8]* %130, i64 2
  %arrayidx239 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx238, i64 0, i64 3
  store i8 %conv237, i8* %arrayidx239, align 1
  %131 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx240 = getelementptr inbounds [4 x i8], [4 x i8]* %131, i64 1
  %arrayidx241 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx240, i64 0, i64 2
  store i8 %conv237, i8* %arrayidx241, align 1
  %132 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx242 = getelementptr inbounds [4 x i8], [4 x i8]* %132, i64 0
  %arrayidx243 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx242, i64 0, i64 1
  store i8 %conv237, i8* %arrayidx243, align 1
  %133 = load i8, i8* %P_I, align 1
  %conv244 = zext i8 %133 to i32
  %134 = load i8, i8* %P_X, align 1
  %conv245 = zext i8 %134 to i32
  %mul246 = mul nsw i32 2, %conv245
  %add247 = add nsw i32 %conv244, %mul246
  %135 = load i8, i8* %P_A, align 1
  %conv248 = zext i8 %135 to i32
  %add249 = add nsw i32 %add247, %conv248
  %add250 = add nsw i32 %add249, 2
  %div251 = sdiv i32 %add250, 4
  %conv252 = trunc i32 %div251 to i8
  %136 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx253 = getelementptr inbounds [4 x i8], [4 x i8]* %136, i64 3
  %arrayidx254 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx253, i64 0, i64 3
  store i8 %conv252, i8* %arrayidx254, align 1
  %137 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx255 = getelementptr inbounds [4 x i8], [4 x i8]* %137, i64 2
  %arrayidx256 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx255, i64 0, i64 2
  store i8 %conv252, i8* %arrayidx256, align 1
  %138 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx257 = getelementptr inbounds [4 x i8], [4 x i8]* %138, i64 1
  %arrayidx258 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx257, i64 0, i64 1
  store i8 %conv252, i8* %arrayidx258, align 1
  %139 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx259 = getelementptr inbounds [4 x i8], [4 x i8]* %139, i64 0
  %arrayidx260 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx259, i64 0, i64 0
  store i8 %conv252, i8* %arrayidx260, align 1
  %140 = load i8, i8* %P_X, align 1
  %conv261 = zext i8 %140 to i32
  %141 = load i8, i8* %P_A, align 1
  %conv262 = zext i8 %141 to i32
  %mul263 = mul nsw i32 2, %conv262
  %add264 = add nsw i32 %conv261, %mul263
  %142 = load i8, i8* %P_B, align 1
  %conv265 = zext i8 %142 to i32
  %add266 = add nsw i32 %add264, %conv265
  %add267 = add nsw i32 %add266, 2
  %div268 = sdiv i32 %add267, 4
  %conv269 = trunc i32 %div268 to i8
  %143 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx270 = getelementptr inbounds [4 x i8], [4 x i8]* %143, i64 3
  %arrayidx271 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx270, i64 0, i64 2
  store i8 %conv269, i8* %arrayidx271, align 1
  %144 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx272 = getelementptr inbounds [4 x i8], [4 x i8]* %144, i64 2
  %arrayidx273 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx272, i64 0, i64 1
  store i8 %conv269, i8* %arrayidx273, align 1
  %145 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx274 = getelementptr inbounds [4 x i8], [4 x i8]* %145, i64 1
  %arrayidx275 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx274, i64 0, i64 0
  store i8 %conv269, i8* %arrayidx275, align 1
  %146 = load i8, i8* %P_A, align 1
  %conv276 = zext i8 %146 to i32
  %147 = load i8, i8* %P_B, align 1
  %conv277 = zext i8 %147 to i32
  %mul278 = mul nsw i32 2, %conv277
  %add279 = add nsw i32 %conv276, %mul278
  %148 = load i8, i8* %P_C, align 1
  %conv280 = zext i8 %148 to i32
  %add281 = add nsw i32 %add279, %conv280
  %add282 = add nsw i32 %add281, 2
  %div283 = sdiv i32 %add282, 4
  %conv284 = trunc i32 %div283 to i8
  %149 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx285 = getelementptr inbounds [4 x i8], [4 x i8]* %149, i64 3
  %arrayidx286 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx285, i64 0, i64 1
  store i8 %conv284, i8* %arrayidx286, align 1
  %150 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx287 = getelementptr inbounds [4 x i8], [4 x i8]* %150, i64 2
  %arrayidx288 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx287, i64 0, i64 0
  store i8 %conv284, i8* %arrayidx288, align 1
  %151 = load i8, i8* %P_B, align 1
  %conv289 = zext i8 %151 to i32
  %152 = load i8, i8* %P_C, align 1
  %conv290 = zext i8 %152 to i32
  %mul291 = mul nsw i32 2, %conv290
  %add292 = add nsw i32 %conv289, %mul291
  %153 = load i8, i8* %P_D, align 1
  %conv293 = zext i8 %153 to i32
  %add294 = add nsw i32 %add292, %conv293
  %add295 = add nsw i32 %add294, 2
  %div296 = sdiv i32 %add295, 4
  %conv297 = trunc i32 %div296 to i8
  %154 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx298 = getelementptr inbounds [4 x i8], [4 x i8]* %154, i64 3
  %arrayidx299 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx298, i64 0, i64 0
  store i8 %conv297, i8* %arrayidx299, align 1
  br label %sw.epilog804

sw.bb300:                                         ; preds = %if.end110
  %155 = load i8, i8* %P_A, align 1
  %conv301 = zext i8 %155 to i32
  %156 = load i8, i8* %P_C, align 1
  %conv302 = zext i8 %156 to i32
  %add303 = add nsw i32 %conv301, %conv302
  %157 = load i8, i8* %P_B, align 1
  %conv304 = zext i8 %157 to i32
  %mul305 = mul nsw i32 2, %conv304
  %add306 = add nsw i32 %add303, %mul305
  %add307 = add nsw i32 %add306, 2
  %div308 = sdiv i32 %add307, 4
  %conv309 = trunc i32 %div308 to i8
  %158 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx310 = getelementptr inbounds [4 x i8], [4 x i8]* %158, i64 0
  %arrayidx311 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx310, i64 0, i64 0
  store i8 %conv309, i8* %arrayidx311, align 1
  %159 = load i8, i8* %P_B, align 1
  %conv312 = zext i8 %159 to i32
  %160 = load i8, i8* %P_D, align 1
  %conv313 = zext i8 %160 to i32
  %add314 = add nsw i32 %conv312, %conv313
  %161 = load i8, i8* %P_C, align 1
  %conv315 = zext i8 %161 to i32
  %mul316 = mul nsw i32 2, %conv315
  %add317 = add nsw i32 %add314, %mul316
  %add318 = add nsw i32 %add317, 2
  %div319 = sdiv i32 %add318, 4
  %conv320 = trunc i32 %div319 to i8
  %162 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx321 = getelementptr inbounds [4 x i8], [4 x i8]* %162, i64 0
  %arrayidx322 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx321, i64 0, i64 1
  store i8 %conv320, i8* %arrayidx322, align 1
  %163 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx323 = getelementptr inbounds [4 x i8], [4 x i8]* %163, i64 1
  %arrayidx324 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx323, i64 0, i64 0
  store i8 %conv320, i8* %arrayidx324, align 1
  %164 = load i8, i8* %P_C, align 1
  %conv325 = zext i8 %164 to i32
  %165 = load i8, i8* %P_E, align 1
  %conv326 = zext i8 %165 to i32
  %add327 = add nsw i32 %conv325, %conv326
  %166 = load i8, i8* %P_D, align 1
  %conv328 = zext i8 %166 to i32
  %mul329 = mul nsw i32 2, %conv328
  %add330 = add nsw i32 %add327, %mul329
  %add331 = add nsw i32 %add330, 2
  %div332 = sdiv i32 %add331, 4
  %conv333 = trunc i32 %div332 to i8
  %167 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx334 = getelementptr inbounds [4 x i8], [4 x i8]* %167, i64 0
  %arrayidx335 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx334, i64 0, i64 2
  store i8 %conv333, i8* %arrayidx335, align 1
  %168 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx336 = getelementptr inbounds [4 x i8], [4 x i8]* %168, i64 1
  %arrayidx337 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx336, i64 0, i64 1
  store i8 %conv333, i8* %arrayidx337, align 1
  %169 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx338 = getelementptr inbounds [4 x i8], [4 x i8]* %169, i64 2
  %arrayidx339 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx338, i64 0, i64 0
  store i8 %conv333, i8* %arrayidx339, align 1
  %170 = load i8, i8* %P_D, align 1
  %conv340 = zext i8 %170 to i32
  %171 = load i8, i8* %P_F, align 1
  %conv341 = zext i8 %171 to i32
  %add342 = add nsw i32 %conv340, %conv341
  %172 = load i8, i8* %P_E, align 1
  %conv343 = zext i8 %172 to i32
  %mul344 = mul nsw i32 2, %conv343
  %add345 = add nsw i32 %add342, %mul344
  %add346 = add nsw i32 %add345, 2
  %div347 = sdiv i32 %add346, 4
  %conv348 = trunc i32 %div347 to i8
  %173 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx349 = getelementptr inbounds [4 x i8], [4 x i8]* %173, i64 0
  %arrayidx350 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx349, i64 0, i64 3
  store i8 %conv348, i8* %arrayidx350, align 1
  %174 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx351 = getelementptr inbounds [4 x i8], [4 x i8]* %174, i64 1
  %arrayidx352 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx351, i64 0, i64 2
  store i8 %conv348, i8* %arrayidx352, align 1
  %175 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx353 = getelementptr inbounds [4 x i8], [4 x i8]* %175, i64 2
  %arrayidx354 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx353, i64 0, i64 1
  store i8 %conv348, i8* %arrayidx354, align 1
  %176 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx355 = getelementptr inbounds [4 x i8], [4 x i8]* %176, i64 3
  %arrayidx356 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx355, i64 0, i64 0
  store i8 %conv348, i8* %arrayidx356, align 1
  %177 = load i8, i8* %P_E, align 1
  %conv357 = zext i8 %177 to i32
  %178 = load i8, i8* %P_G, align 1
  %conv358 = zext i8 %178 to i32
  %add359 = add nsw i32 %conv357, %conv358
  %179 = load i8, i8* %P_F, align 1
  %conv360 = zext i8 %179 to i32
  %mul361 = mul nsw i32 2, %conv360
  %add362 = add nsw i32 %add359, %mul361
  %add363 = add nsw i32 %add362, 2
  %div364 = sdiv i32 %add363, 4
  %conv365 = trunc i32 %div364 to i8
  %180 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx366 = getelementptr inbounds [4 x i8], [4 x i8]* %180, i64 1
  %arrayidx367 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx366, i64 0, i64 3
  store i8 %conv365, i8* %arrayidx367, align 1
  %181 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx368 = getelementptr inbounds [4 x i8], [4 x i8]* %181, i64 2
  %arrayidx369 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx368, i64 0, i64 2
  store i8 %conv365, i8* %arrayidx369, align 1
  %182 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx370 = getelementptr inbounds [4 x i8], [4 x i8]* %182, i64 3
  %arrayidx371 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 1
  store i8 %conv365, i8* %arrayidx371, align 1
  %183 = load i8, i8* %P_F, align 1
  %conv372 = zext i8 %183 to i32
  %184 = load i8, i8* %P_H, align 1
  %conv373 = zext i8 %184 to i32
  %add374 = add nsw i32 %conv372, %conv373
  %185 = load i8, i8* %P_G, align 1
  %conv375 = zext i8 %185 to i32
  %mul376 = mul nsw i32 2, %conv375
  %add377 = add nsw i32 %add374, %mul376
  %add378 = add nsw i32 %add377, 2
  %div379 = sdiv i32 %add378, 4
  %conv380 = trunc i32 %div379 to i8
  %186 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx381 = getelementptr inbounds [4 x i8], [4 x i8]* %186, i64 2
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx381, i64 0, i64 3
  store i8 %conv380, i8* %arrayidx382, align 1
  %187 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx383 = getelementptr inbounds [4 x i8], [4 x i8]* %187, i64 3
  %arrayidx384 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx383, i64 0, i64 2
  store i8 %conv380, i8* %arrayidx384, align 1
  %188 = load i8, i8* %P_G, align 1
  %conv385 = zext i8 %188 to i32
  %189 = load i8, i8* %P_H, align 1
  %conv386 = zext i8 %189 to i32
  %mul387 = mul nsw i32 3, %conv386
  %add388 = add nsw i32 %conv385, %mul387
  %add389 = add nsw i32 %add388, 2
  %div390 = sdiv i32 %add389, 4
  %conv391 = trunc i32 %div390 to i8
  %190 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx392 = getelementptr inbounds [4 x i8], [4 x i8]* %190, i64 3
  %arrayidx393 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx392, i64 0, i64 3
  store i8 %conv391, i8* %arrayidx393, align 1
  br label %sw.epilog804

sw.bb394:                                         ; preds = %if.end110
  %191 = load i8, i8* %P_X, align 1
  %conv395 = zext i8 %191 to i32
  %192 = load i8, i8* %P_A, align 1
  %conv396 = zext i8 %192 to i32
  %add397 = add nsw i32 %conv395, %conv396
  %add398 = add nsw i32 %add397, 1
  %div399 = sdiv i32 %add398, 2
  %conv400 = trunc i32 %div399 to i8
  %193 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx401 = getelementptr inbounds [4 x i8], [4 x i8]* %193, i64 1
  %arrayidx402 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx401, i64 0, i64 2
  store i8 %conv400, i8* %arrayidx402, align 1
  %194 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx403 = getelementptr inbounds [4 x i8], [4 x i8]* %194, i64 0
  %arrayidx404 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx403, i64 0, i64 0
  store i8 %conv400, i8* %arrayidx404, align 1
  %195 = load i8, i8* %P_A, align 1
  %conv405 = zext i8 %195 to i32
  %196 = load i8, i8* %P_B, align 1
  %conv406 = zext i8 %196 to i32
  %add407 = add nsw i32 %conv405, %conv406
  %add408 = add nsw i32 %add407, 1
  %div409 = sdiv i32 %add408, 2
  %conv410 = trunc i32 %div409 to i8
  %197 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx411 = getelementptr inbounds [4 x i8], [4 x i8]* %197, i64 2
  %arrayidx412 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx411, i64 0, i64 2
  store i8 %conv410, i8* %arrayidx412, align 1
  %198 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx413 = getelementptr inbounds [4 x i8], [4 x i8]* %198, i64 1
  %arrayidx414 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx413, i64 0, i64 0
  store i8 %conv410, i8* %arrayidx414, align 1
  %199 = load i8, i8* %P_B, align 1
  %conv415 = zext i8 %199 to i32
  %200 = load i8, i8* %P_C, align 1
  %conv416 = zext i8 %200 to i32
  %add417 = add nsw i32 %conv415, %conv416
  %add418 = add nsw i32 %add417, 1
  %div419 = sdiv i32 %add418, 2
  %conv420 = trunc i32 %div419 to i8
  %201 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx421 = getelementptr inbounds [4 x i8], [4 x i8]* %201, i64 3
  %arrayidx422 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx421, i64 0, i64 2
  store i8 %conv420, i8* %arrayidx422, align 1
  %202 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx423 = getelementptr inbounds [4 x i8], [4 x i8]* %202, i64 2
  %arrayidx424 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx423, i64 0, i64 0
  store i8 %conv420, i8* %arrayidx424, align 1
  %203 = load i8, i8* %P_C, align 1
  %conv425 = zext i8 %203 to i32
  %204 = load i8, i8* %P_D, align 1
  %conv426 = zext i8 %204 to i32
  %add427 = add nsw i32 %conv425, %conv426
  %add428 = add nsw i32 %add427, 1
  %div429 = sdiv i32 %add428, 2
  %conv430 = trunc i32 %div429 to i8
  %205 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx431 = getelementptr inbounds [4 x i8], [4 x i8]* %205, i64 3
  %arrayidx432 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx431, i64 0, i64 0
  store i8 %conv430, i8* %arrayidx432, align 1
  %206 = load i8, i8* %P_I, align 1
  %conv433 = zext i8 %206 to i32
  %207 = load i8, i8* %P_X, align 1
  %conv434 = zext i8 %207 to i32
  %mul435 = mul nsw i32 2, %conv434
  %add436 = add nsw i32 %conv433, %mul435
  %208 = load i8, i8* %P_A, align 1
  %conv437 = zext i8 %208 to i32
  %add438 = add nsw i32 %add436, %conv437
  %add439 = add nsw i32 %add438, 2
  %div440 = sdiv i32 %add439, 4
  %conv441 = trunc i32 %div440 to i8
  %209 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx442 = getelementptr inbounds [4 x i8], [4 x i8]* %209, i64 1
  %arrayidx443 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx442, i64 0, i64 3
  store i8 %conv441, i8* %arrayidx443, align 1
  %210 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx444 = getelementptr inbounds [4 x i8], [4 x i8]* %210, i64 0
  %arrayidx445 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx444, i64 0, i64 1
  store i8 %conv441, i8* %arrayidx445, align 1
  %211 = load i8, i8* %P_X, align 1
  %conv446 = zext i8 %211 to i32
  %212 = load i8, i8* %P_A, align 1
  %conv447 = zext i8 %212 to i32
  %mul448 = mul nsw i32 2, %conv447
  %add449 = add nsw i32 %conv446, %mul448
  %213 = load i8, i8* %P_B, align 1
  %conv450 = zext i8 %213 to i32
  %add451 = add nsw i32 %add449, %conv450
  %add452 = add nsw i32 %add451, 2
  %div453 = sdiv i32 %add452, 4
  %conv454 = trunc i32 %div453 to i8
  %214 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx455 = getelementptr inbounds [4 x i8], [4 x i8]* %214, i64 2
  %arrayidx456 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx455, i64 0, i64 3
  store i8 %conv454, i8* %arrayidx456, align 1
  %215 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx457 = getelementptr inbounds [4 x i8], [4 x i8]* %215, i64 1
  %arrayidx458 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx457, i64 0, i64 1
  store i8 %conv454, i8* %arrayidx458, align 1
  %216 = load i8, i8* %P_A, align 1
  %conv459 = zext i8 %216 to i32
  %217 = load i8, i8* %P_B, align 1
  %conv460 = zext i8 %217 to i32
  %mul461 = mul nsw i32 2, %conv460
  %add462 = add nsw i32 %conv459, %mul461
  %218 = load i8, i8* %P_C, align 1
  %conv463 = zext i8 %218 to i32
  %add464 = add nsw i32 %add462, %conv463
  %add465 = add nsw i32 %add464, 2
  %div466 = sdiv i32 %add465, 4
  %conv467 = trunc i32 %div466 to i8
  %219 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx468 = getelementptr inbounds [4 x i8], [4 x i8]* %219, i64 3
  %arrayidx469 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx468, i64 0, i64 3
  store i8 %conv467, i8* %arrayidx469, align 1
  %220 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx470 = getelementptr inbounds [4 x i8], [4 x i8]* %220, i64 2
  %arrayidx471 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx470, i64 0, i64 1
  store i8 %conv467, i8* %arrayidx471, align 1
  %221 = load i8, i8* %P_B, align 1
  %conv472 = zext i8 %221 to i32
  %222 = load i8, i8* %P_C, align 1
  %conv473 = zext i8 %222 to i32
  %mul474 = mul nsw i32 2, %conv473
  %add475 = add nsw i32 %conv472, %mul474
  %223 = load i8, i8* %P_D, align 1
  %conv476 = zext i8 %223 to i32
  %add477 = add nsw i32 %add475, %conv476
  %add478 = add nsw i32 %add477, 2
  %div479 = sdiv i32 %add478, 4
  %conv480 = trunc i32 %div479 to i8
  %224 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx481 = getelementptr inbounds [4 x i8], [4 x i8]* %224, i64 3
  %arrayidx482 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx481, i64 0, i64 1
  store i8 %conv480, i8* %arrayidx482, align 1
  %225 = load i8, i8* %P_X, align 1
  %conv483 = zext i8 %225 to i32
  %226 = load i8, i8* %P_I, align 1
  %conv484 = zext i8 %226 to i32
  %mul485 = mul nsw i32 2, %conv484
  %add486 = add nsw i32 %conv483, %mul485
  %227 = load i8, i8* %P_J, align 1
  %conv487 = zext i8 %227 to i32
  %add488 = add nsw i32 %add486, %conv487
  %add489 = add nsw i32 %add488, 2
  %div490 = sdiv i32 %add489, 4
  %conv491 = trunc i32 %div490 to i8
  %228 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx492 = getelementptr inbounds [4 x i8], [4 x i8]* %228, i64 0
  %arrayidx493 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx492, i64 0, i64 2
  store i8 %conv491, i8* %arrayidx493, align 1
  %229 = load i8, i8* %P_I, align 1
  %conv494 = zext i8 %229 to i32
  %230 = load i8, i8* %P_J, align 1
  %conv495 = zext i8 %230 to i32
  %mul496 = mul nsw i32 2, %conv495
  %add497 = add nsw i32 %conv494, %mul496
  %231 = load i8, i8* %P_K, align 1
  %conv498 = zext i8 %231 to i32
  %add499 = add nsw i32 %add497, %conv498
  %add500 = add nsw i32 %add499, 2
  %div501 = sdiv i32 %add500, 4
  %conv502 = trunc i32 %div501 to i8
  %232 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx503 = getelementptr inbounds [4 x i8], [4 x i8]* %232, i64 0
  %arrayidx504 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx503, i64 0, i64 3
  store i8 %conv502, i8* %arrayidx504, align 1
  br label %sw.epilog804

sw.bb505:                                         ; preds = %if.end110
  %233 = load i8, i8* %P_A, align 1
  %conv506 = zext i8 %233 to i32
  %234 = load i8, i8* %P_B, align 1
  %conv507 = zext i8 %234 to i32
  %add508 = add nsw i32 %conv506, %conv507
  %add509 = add nsw i32 %add508, 1
  %div510 = sdiv i32 %add509, 2
  %conv511 = trunc i32 %div510 to i8
  %235 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx512 = getelementptr inbounds [4 x i8], [4 x i8]* %235, i64 0
  %arrayidx513 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx512, i64 0, i64 0
  store i8 %conv511, i8* %arrayidx513, align 1
  %236 = load i8, i8* %P_B, align 1
  %conv514 = zext i8 %236 to i32
  %237 = load i8, i8* %P_C, align 1
  %conv515 = zext i8 %237 to i32
  %add516 = add nsw i32 %conv514, %conv515
  %add517 = add nsw i32 %add516, 1
  %div518 = sdiv i32 %add517, 2
  %conv519 = trunc i32 %div518 to i8
  %238 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx520 = getelementptr inbounds [4 x i8], [4 x i8]* %238, i64 0
  %arrayidx521 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx520, i64 0, i64 2
  store i8 %conv519, i8* %arrayidx521, align 1
  %239 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx522 = getelementptr inbounds [4 x i8], [4 x i8]* %239, i64 1
  %arrayidx523 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx522, i64 0, i64 0
  store i8 %conv519, i8* %arrayidx523, align 1
  %240 = load i8, i8* %P_C, align 1
  %conv524 = zext i8 %240 to i32
  %241 = load i8, i8* %P_D, align 1
  %conv525 = zext i8 %241 to i32
  %add526 = add nsw i32 %conv524, %conv525
  %add527 = add nsw i32 %add526, 1
  %div528 = sdiv i32 %add527, 2
  %conv529 = trunc i32 %div528 to i8
  %242 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx530 = getelementptr inbounds [4 x i8], [4 x i8]* %242, i64 1
  %arrayidx531 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx530, i64 0, i64 2
  store i8 %conv529, i8* %arrayidx531, align 1
  %243 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx532 = getelementptr inbounds [4 x i8], [4 x i8]* %243, i64 2
  %arrayidx533 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx532, i64 0, i64 0
  store i8 %conv529, i8* %arrayidx533, align 1
  %244 = load i8, i8* %P_D, align 1
  %conv534 = zext i8 %244 to i32
  %245 = load i8, i8* %P_E, align 1
  %conv535 = zext i8 %245 to i32
  %add536 = add nsw i32 %conv534, %conv535
  %add537 = add nsw i32 %add536, 1
  %div538 = sdiv i32 %add537, 2
  %conv539 = trunc i32 %div538 to i8
  %246 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx540 = getelementptr inbounds [4 x i8], [4 x i8]* %246, i64 2
  %arrayidx541 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx540, i64 0, i64 2
  store i8 %conv539, i8* %arrayidx541, align 1
  %247 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx542 = getelementptr inbounds [4 x i8], [4 x i8]* %247, i64 3
  %arrayidx543 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx542, i64 0, i64 0
  store i8 %conv539, i8* %arrayidx543, align 1
  %248 = load i8, i8* %P_E, align 1
  %conv544 = zext i8 %248 to i32
  %249 = load i8, i8* %P_F, align 1
  %conv545 = zext i8 %249 to i32
  %add546 = add nsw i32 %conv544, %conv545
  %add547 = add nsw i32 %add546, 1
  %div548 = sdiv i32 %add547, 2
  %conv549 = trunc i32 %div548 to i8
  %250 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx550 = getelementptr inbounds [4 x i8], [4 x i8]* %250, i64 3
  %arrayidx551 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx550, i64 0, i64 2
  store i8 %conv549, i8* %arrayidx551, align 1
  %251 = load i8, i8* %P_A, align 1
  %conv552 = zext i8 %251 to i32
  %252 = load i8, i8* %P_B, align 1
  %conv553 = zext i8 %252 to i32
  %mul554 = mul nsw i32 2, %conv553
  %add555 = add nsw i32 %conv552, %mul554
  %253 = load i8, i8* %P_C, align 1
  %conv556 = zext i8 %253 to i32
  %add557 = add nsw i32 %add555, %conv556
  %add558 = add nsw i32 %add557, 2
  %div559 = sdiv i32 %add558, 4
  %conv560 = trunc i32 %div559 to i8
  %254 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx561 = getelementptr inbounds [4 x i8], [4 x i8]* %254, i64 0
  %arrayidx562 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx561, i64 0, i64 1
  store i8 %conv560, i8* %arrayidx562, align 1
  %255 = load i8, i8* %P_B, align 1
  %conv563 = zext i8 %255 to i32
  %256 = load i8, i8* %P_C, align 1
  %conv564 = zext i8 %256 to i32
  %mul565 = mul nsw i32 2, %conv564
  %add566 = add nsw i32 %conv563, %mul565
  %257 = load i8, i8* %P_D, align 1
  %conv567 = zext i8 %257 to i32
  %add568 = add nsw i32 %add566, %conv567
  %add569 = add nsw i32 %add568, 2
  %div570 = sdiv i32 %add569, 4
  %conv571 = trunc i32 %div570 to i8
  %258 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx572 = getelementptr inbounds [4 x i8], [4 x i8]* %258, i64 0
  %arrayidx573 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx572, i64 0, i64 3
  store i8 %conv571, i8* %arrayidx573, align 1
  %259 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx574 = getelementptr inbounds [4 x i8], [4 x i8]* %259, i64 1
  %arrayidx575 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx574, i64 0, i64 1
  store i8 %conv571, i8* %arrayidx575, align 1
  %260 = load i8, i8* %P_C, align 1
  %conv576 = zext i8 %260 to i32
  %261 = load i8, i8* %P_D, align 1
  %conv577 = zext i8 %261 to i32
  %mul578 = mul nsw i32 2, %conv577
  %add579 = add nsw i32 %conv576, %mul578
  %262 = load i8, i8* %P_E, align 1
  %conv580 = zext i8 %262 to i32
  %add581 = add nsw i32 %add579, %conv580
  %add582 = add nsw i32 %add581, 2
  %div583 = sdiv i32 %add582, 4
  %conv584 = trunc i32 %div583 to i8
  %263 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx585 = getelementptr inbounds [4 x i8], [4 x i8]* %263, i64 1
  %arrayidx586 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx585, i64 0, i64 3
  store i8 %conv584, i8* %arrayidx586, align 1
  %264 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx587 = getelementptr inbounds [4 x i8], [4 x i8]* %264, i64 2
  %arrayidx588 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx587, i64 0, i64 1
  store i8 %conv584, i8* %arrayidx588, align 1
  %265 = load i8, i8* %P_D, align 1
  %conv589 = zext i8 %265 to i32
  %266 = load i8, i8* %P_E, align 1
  %conv590 = zext i8 %266 to i32
  %mul591 = mul nsw i32 2, %conv590
  %add592 = add nsw i32 %conv589, %mul591
  %267 = load i8, i8* %P_F, align 1
  %conv593 = zext i8 %267 to i32
  %add594 = add nsw i32 %add592, %conv593
  %add595 = add nsw i32 %add594, 2
  %div596 = sdiv i32 %add595, 4
  %conv597 = trunc i32 %div596 to i8
  %268 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx598 = getelementptr inbounds [4 x i8], [4 x i8]* %268, i64 2
  %arrayidx599 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx598, i64 0, i64 3
  store i8 %conv597, i8* %arrayidx599, align 1
  %269 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx600 = getelementptr inbounds [4 x i8], [4 x i8]* %269, i64 3
  %arrayidx601 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx600, i64 0, i64 1
  store i8 %conv597, i8* %arrayidx601, align 1
  %270 = load i8, i8* %P_E, align 1
  %conv602 = zext i8 %270 to i32
  %271 = load i8, i8* %P_F, align 1
  %conv603 = zext i8 %271 to i32
  %mul604 = mul nsw i32 2, %conv603
  %add605 = add nsw i32 %conv602, %mul604
  %272 = load i8, i8* %P_G, align 1
  %conv606 = zext i8 %272 to i32
  %add607 = add nsw i32 %add605, %conv606
  %add608 = add nsw i32 %add607, 2
  %div609 = sdiv i32 %add608, 4
  %conv610 = trunc i32 %div609 to i8
  %273 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx611 = getelementptr inbounds [4 x i8], [4 x i8]* %273, i64 3
  %arrayidx612 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx611, i64 0, i64 3
  store i8 %conv610, i8* %arrayidx612, align 1
  br label %sw.epilog804

sw.bb613:                                         ; preds = %if.end110
  %274 = load i8, i8* %P_I, align 1
  %conv614 = zext i8 %274 to i32
  %275 = load i8, i8* %P_J, align 1
  %conv615 = zext i8 %275 to i32
  %add616 = add nsw i32 %conv614, %conv615
  %add617 = add nsw i32 %add616, 1
  %div618 = sdiv i32 %add617, 2
  %conv619 = trunc i32 %div618 to i8
  %276 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx620 = getelementptr inbounds [4 x i8], [4 x i8]* %276, i64 0
  %arrayidx621 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx620, i64 0, i64 0
  store i8 %conv619, i8* %arrayidx621, align 1
  %277 = load i8, i8* %P_I, align 1
  %conv622 = zext i8 %277 to i32
  %278 = load i8, i8* %P_J, align 1
  %conv623 = zext i8 %278 to i32
  %mul624 = mul nsw i32 2, %conv623
  %add625 = add nsw i32 %conv622, %mul624
  %279 = load i8, i8* %P_K, align 1
  %conv626 = zext i8 %279 to i32
  %add627 = add nsw i32 %add625, %conv626
  %add628 = add nsw i32 %add627, 2
  %div629 = sdiv i32 %add628, 4
  %conv630 = trunc i32 %div629 to i8
  %280 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx631 = getelementptr inbounds [4 x i8], [4 x i8]* %280, i64 1
  %arrayidx632 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx631, i64 0, i64 0
  store i8 %conv630, i8* %arrayidx632, align 1
  %281 = load i8, i8* %P_J, align 1
  %conv633 = zext i8 %281 to i32
  %282 = load i8, i8* %P_K, align 1
  %conv634 = zext i8 %282 to i32
  %add635 = add nsw i32 %conv633, %conv634
  %add636 = add nsw i32 %add635, 1
  %div637 = sdiv i32 %add636, 2
  %conv638 = trunc i32 %div637 to i8
  %283 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx639 = getelementptr inbounds [4 x i8], [4 x i8]* %283, i64 0
  %arrayidx640 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx639, i64 0, i64 1
  store i8 %conv638, i8* %arrayidx640, align 1
  %284 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx641 = getelementptr inbounds [4 x i8], [4 x i8]* %284, i64 2
  %arrayidx642 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx641, i64 0, i64 0
  store i8 %conv638, i8* %arrayidx642, align 1
  %285 = load i8, i8* %P_J, align 1
  %conv643 = zext i8 %285 to i32
  %286 = load i8, i8* %P_K, align 1
  %conv644 = zext i8 %286 to i32
  %mul645 = mul nsw i32 2, %conv644
  %add646 = add nsw i32 %conv643, %mul645
  %287 = load i8, i8* %P_L, align 1
  %conv647 = zext i8 %287 to i32
  %add648 = add nsw i32 %add646, %conv647
  %add649 = add nsw i32 %add648, 2
  %div650 = sdiv i32 %add649, 4
  %conv651 = trunc i32 %div650 to i8
  %288 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx652 = getelementptr inbounds [4 x i8], [4 x i8]* %288, i64 1
  %arrayidx653 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx652, i64 0, i64 1
  store i8 %conv651, i8* %arrayidx653, align 1
  %289 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx654 = getelementptr inbounds [4 x i8], [4 x i8]* %289, i64 3
  %arrayidx655 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx654, i64 0, i64 0
  store i8 %conv651, i8* %arrayidx655, align 1
  %290 = load i8, i8* %P_K, align 1
  %conv656 = zext i8 %290 to i32
  %291 = load i8, i8* %P_L, align 1
  %conv657 = zext i8 %291 to i32
  %add658 = add nsw i32 %conv656, %conv657
  %add659 = add nsw i32 %add658, 1
  %div660 = sdiv i32 %add659, 2
  %conv661 = trunc i32 %div660 to i8
  %292 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx662 = getelementptr inbounds [4 x i8], [4 x i8]* %292, i64 0
  %arrayidx663 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx662, i64 0, i64 2
  store i8 %conv661, i8* %arrayidx663, align 1
  %293 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx664 = getelementptr inbounds [4 x i8], [4 x i8]* %293, i64 2
  %arrayidx665 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx664, i64 0, i64 1
  store i8 %conv661, i8* %arrayidx665, align 1
  %294 = load i8, i8* %P_K, align 1
  %conv666 = zext i8 %294 to i32
  %295 = load i8, i8* %P_L, align 1
  %conv667 = zext i8 %295 to i32
  %mul668 = mul nsw i32 2, %conv667
  %add669 = add nsw i32 %conv666, %mul668
  %296 = load i8, i8* %P_L, align 1
  %conv670 = zext i8 %296 to i32
  %add671 = add nsw i32 %add669, %conv670
  %add672 = add nsw i32 %add671, 2
  %div673 = sdiv i32 %add672, 4
  %conv674 = trunc i32 %div673 to i8
  %297 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx675 = getelementptr inbounds [4 x i8], [4 x i8]* %297, i64 1
  %arrayidx676 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx675, i64 0, i64 2
  store i8 %conv674, i8* %arrayidx676, align 1
  %298 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx677 = getelementptr inbounds [4 x i8], [4 x i8]* %298, i64 3
  %arrayidx678 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx677, i64 0, i64 1
  store i8 %conv674, i8* %arrayidx678, align 1
  %299 = load i8, i8* %P_L, align 1
  %300 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx679 = getelementptr inbounds [4 x i8], [4 x i8]* %300, i64 3
  %arrayidx680 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx679, i64 0, i64 3
  store i8 %299, i8* %arrayidx680, align 1
  %301 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx681 = getelementptr inbounds [4 x i8], [4 x i8]* %301, i64 2
  %arrayidx682 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx681, i64 0, i64 3
  store i8 %299, i8* %arrayidx682, align 1
  %302 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx683 = getelementptr inbounds [4 x i8], [4 x i8]* %302, i64 2
  %arrayidx684 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx683, i64 0, i64 2
  store i8 %299, i8* %arrayidx684, align 1
  %303 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx685 = getelementptr inbounds [4 x i8], [4 x i8]* %303, i64 0
  %arrayidx686 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx685, i64 0, i64 3
  store i8 %299, i8* %arrayidx686, align 1
  %304 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx687 = getelementptr inbounds [4 x i8], [4 x i8]* %304, i64 1
  %arrayidx688 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx687, i64 0, i64 3
  store i8 %299, i8* %arrayidx688, align 1
  %305 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx689 = getelementptr inbounds [4 x i8], [4 x i8]* %305, i64 3
  %arrayidx690 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx689, i64 0, i64 2
  store i8 %299, i8* %arrayidx690, align 1
  br label %sw.epilog804

sw.bb691:                                         ; preds = %if.end110
  %306 = load i8, i8* %P_X, align 1
  %conv692 = zext i8 %306 to i32
  %307 = load i8, i8* %P_I, align 1
  %conv693 = zext i8 %307 to i32
  %add694 = add nsw i32 %conv692, %conv693
  %add695 = add nsw i32 %add694, 1
  %div696 = sdiv i32 %add695, 2
  %conv697 = trunc i32 %div696 to i8
  %308 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx698 = getelementptr inbounds [4 x i8], [4 x i8]* %308, i64 2
  %arrayidx699 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx698, i64 0, i64 1
  store i8 %conv697, i8* %arrayidx699, align 1
  %309 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx700 = getelementptr inbounds [4 x i8], [4 x i8]* %309, i64 0
  %arrayidx701 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx700, i64 0, i64 0
  store i8 %conv697, i8* %arrayidx701, align 1
  %310 = load i8, i8* %P_I, align 1
  %conv702 = zext i8 %310 to i32
  %311 = load i8, i8* %P_X, align 1
  %conv703 = zext i8 %311 to i32
  %mul704 = mul nsw i32 2, %conv703
  %add705 = add nsw i32 %conv702, %mul704
  %312 = load i8, i8* %P_A, align 1
  %conv706 = zext i8 %312 to i32
  %add707 = add nsw i32 %add705, %conv706
  %add708 = add nsw i32 %add707, 2
  %div709 = sdiv i32 %add708, 4
  %conv710 = trunc i32 %div709 to i8
  %313 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx711 = getelementptr inbounds [4 x i8], [4 x i8]* %313, i64 3
  %arrayidx712 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx711, i64 0, i64 1
  store i8 %conv710, i8* %arrayidx712, align 1
  %314 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx713 = getelementptr inbounds [4 x i8], [4 x i8]* %314, i64 1
  %arrayidx714 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx713, i64 0, i64 0
  store i8 %conv710, i8* %arrayidx714, align 1
  %315 = load i8, i8* %P_X, align 1
  %conv715 = zext i8 %315 to i32
  %316 = load i8, i8* %P_A, align 1
  %conv716 = zext i8 %316 to i32
  %mul717 = mul nsw i32 2, %conv716
  %add718 = add nsw i32 %conv715, %mul717
  %317 = load i8, i8* %P_B, align 1
  %conv719 = zext i8 %317 to i32
  %add720 = add nsw i32 %add718, %conv719
  %add721 = add nsw i32 %add720, 2
  %div722 = sdiv i32 %add721, 4
  %conv723 = trunc i32 %div722 to i8
  %318 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx724 = getelementptr inbounds [4 x i8], [4 x i8]* %318, i64 2
  %arrayidx725 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx724, i64 0, i64 0
  store i8 %conv723, i8* %arrayidx725, align 1
  %319 = load i8, i8* %P_A, align 1
  %conv726 = zext i8 %319 to i32
  %320 = load i8, i8* %P_B, align 1
  %conv727 = zext i8 %320 to i32
  %mul728 = mul nsw i32 2, %conv727
  %add729 = add nsw i32 %conv726, %mul728
  %321 = load i8, i8* %P_C, align 1
  %conv730 = zext i8 %321 to i32
  %add731 = add nsw i32 %add729, %conv730
  %add732 = add nsw i32 %add731, 2
  %div733 = sdiv i32 %add732, 4
  %conv734 = trunc i32 %div733 to i8
  %322 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx735 = getelementptr inbounds [4 x i8], [4 x i8]* %322, i64 3
  %arrayidx736 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx735, i64 0, i64 0
  store i8 %conv734, i8* %arrayidx736, align 1
  %323 = load i8, i8* %P_I, align 1
  %conv737 = zext i8 %323 to i32
  %324 = load i8, i8* %P_J, align 1
  %conv738 = zext i8 %324 to i32
  %add739 = add nsw i32 %conv737, %conv738
  %add740 = add nsw i32 %add739, 1
  %div741 = sdiv i32 %add740, 2
  %conv742 = trunc i32 %div741 to i8
  %325 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx743 = getelementptr inbounds [4 x i8], [4 x i8]* %325, i64 2
  %arrayidx744 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx743, i64 0, i64 2
  store i8 %conv742, i8* %arrayidx744, align 1
  %326 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx745 = getelementptr inbounds [4 x i8], [4 x i8]* %326, i64 0
  %arrayidx746 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx745, i64 0, i64 1
  store i8 %conv742, i8* %arrayidx746, align 1
  %327 = load i8, i8* %P_X, align 1
  %conv747 = zext i8 %327 to i32
  %328 = load i8, i8* %P_I, align 1
  %conv748 = zext i8 %328 to i32
  %mul749 = mul nsw i32 2, %conv748
  %add750 = add nsw i32 %conv747, %mul749
  %329 = load i8, i8* %P_J, align 1
  %conv751 = zext i8 %329 to i32
  %add752 = add nsw i32 %add750, %conv751
  %add753 = add nsw i32 %add752, 2
  %div754 = sdiv i32 %add753, 4
  %conv755 = trunc i32 %div754 to i8
  %330 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx756 = getelementptr inbounds [4 x i8], [4 x i8]* %330, i64 3
  %arrayidx757 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx756, i64 0, i64 2
  store i8 %conv755, i8* %arrayidx757, align 1
  %331 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx758 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 1
  %arrayidx759 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx758, i64 0, i64 1
  store i8 %conv755, i8* %arrayidx759, align 1
  %332 = load i8, i8* %P_J, align 1
  %conv760 = zext i8 %332 to i32
  %333 = load i8, i8* %P_K, align 1
  %conv761 = zext i8 %333 to i32
  %add762 = add nsw i32 %conv760, %conv761
  %add763 = add nsw i32 %add762, 1
  %div764 = sdiv i32 %add763, 2
  %conv765 = trunc i32 %div764 to i8
  %334 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx766 = getelementptr inbounds [4 x i8], [4 x i8]* %334, i64 2
  %arrayidx767 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx766, i64 0, i64 3
  store i8 %conv765, i8* %arrayidx767, align 1
  %335 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx768 = getelementptr inbounds [4 x i8], [4 x i8]* %335, i64 0
  %arrayidx769 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx768, i64 0, i64 2
  store i8 %conv765, i8* %arrayidx769, align 1
  %336 = load i8, i8* %P_I, align 1
  %conv770 = zext i8 %336 to i32
  %337 = load i8, i8* %P_J, align 1
  %conv771 = zext i8 %337 to i32
  %mul772 = mul nsw i32 2, %conv771
  %add773 = add nsw i32 %conv770, %mul772
  %338 = load i8, i8* %P_K, align 1
  %conv774 = zext i8 %338 to i32
  %add775 = add nsw i32 %add773, %conv774
  %add776 = add nsw i32 %add775, 2
  %div777 = sdiv i32 %add776, 4
  %conv778 = trunc i32 %div777 to i8
  %339 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx779 = getelementptr inbounds [4 x i8], [4 x i8]* %339, i64 3
  %arrayidx780 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx779, i64 0, i64 3
  store i8 %conv778, i8* %arrayidx780, align 1
  %340 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx781 = getelementptr inbounds [4 x i8], [4 x i8]* %340, i64 1
  %arrayidx782 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx781, i64 0, i64 2
  store i8 %conv778, i8* %arrayidx782, align 1
  %341 = load i8, i8* %P_K, align 1
  %conv783 = zext i8 %341 to i32
  %342 = load i8, i8* %P_L, align 1
  %conv784 = zext i8 %342 to i32
  %add785 = add nsw i32 %conv783, %conv784
  %add786 = add nsw i32 %add785, 1
  %div787 = sdiv i32 %add786, 2
  %conv788 = trunc i32 %div787 to i8
  %343 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx789 = getelementptr inbounds [4 x i8], [4 x i8]* %343, i64 0
  %arrayidx790 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx789, i64 0, i64 3
  store i8 %conv788, i8* %arrayidx790, align 1
  %344 = load i8, i8* %P_J, align 1
  %conv791 = zext i8 %344 to i32
  %345 = load i8, i8* %P_K, align 1
  %conv792 = zext i8 %345 to i32
  %mul793 = mul nsw i32 2, %conv792
  %add794 = add nsw i32 %conv791, %mul793
  %346 = load i8, i8* %P_L, align 1
  %conv795 = zext i8 %346 to i32
  %add796 = add nsw i32 %add794, %conv795
  %add797 = add nsw i32 %add796, 2
  %div798 = sdiv i32 %add797, 4
  %conv799 = trunc i32 %div798 to i8
  %347 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx800 = getelementptr inbounds [4 x i8], [4 x i8]* %347, i64 1
  %arrayidx801 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx800, i64 0, i64 3
  store i8 %conv799, i8* %arrayidx801, align 1
  br label %sw.epilog804

sw.default802:                                    ; preds = %if.end110
  %348 = load i8, i8* %predmode.addr, align 1
  %conv803 = zext i8 %348 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i32 0, i32 0), i32 %conv803)
  br label %sw.epilog804

sw.epilog804:                                     ; preds = %sw.default802, %sw.bb691, %sw.bb613, %sw.bb505, %sw.bb394, %sw.bb300, %sw.bb206, %for.end205, %for.end185, %for.end165
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @predict_intra16x16_luma_NonField([4 x [4 x i8]]* %predL, [144 x i8]* %Sluma, i8 zeroext %predmode, i8 zeroext %avaiMode, i32 %startx, i32 %starty) #0 !prof !270 {
entry:
  %predL.addr = alloca [4 x [4 x i8]]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %predmode.addr = alloca i8, align 1
  %avaiMode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %v = alloca [16 x i8], align 16
  %h = alloca [16 x i8], align 16
  %X = alloca i8, align 1
  %sumx = alloca i32, align 4
  %sumy = alloca i32, align 4
  %temp = alloca i32, align 4
  %H = alloca i32, align 4
  %V = alloca i32, align 4
  %a = alloca i32, align 4
  %tmp = alloca i32, align 4
  store [4 x [4 x i8]]* %predL, [4 x [4 x i8]]** %predL.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i8 %predmode, i8* %predmode.addr, align 1
  store i8 %avaiMode, i8* %avaiMode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  %0 = load i8, i8* %avaiMode.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !271

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %for.body, label %for.end, !prof !272

for.body:                                         ; preds = %for.cond
  %2 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %3 = load i32, i32* %startx.addr, align 4
  %sub = sub i32 %3, 1
  %idxprom = zext i32 %sub to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %starty.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add = add i32 %4, %5
  %idxprom2 = zext i32 %add to i64
  %arrayidx3 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %6 = load i8, i8* %arrayidx3, align 1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom4
  store i8 %6, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %if.else
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %9, 16
  br i1 %cmp7, label %for.body9, label %for.end14, !prof !273

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom10
  store i8 -128, i8* %arrayidx11, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  br label %if.end

if.end:                                           ; preds = %for.end14, %for.end
  %12 = load i8, i8* %avaiMode.addr, align 1
  %conv15 = zext i8 %12 to i32
  %rem = srem i32 %conv15, 2
  %tobool16 = icmp ne i32 %rem, 0
  br i1 %tobool16, label %if.then17, label %if.else33, !prof !274

if.then17:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc30, %if.then17
  %13 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %13, 16
  br i1 %cmp19, label %for.body21, label %for.end32, !prof !275

for.body21:                                       ; preds = %for.cond18
  %14 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %15 = load i32, i32* %startx.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add22 = add i32 %15, %16
  %idxprom23 = zext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [144 x i8], [144 x i8]* %14, i64 %idxprom23
  %17 = load i32, i32* %starty.addr, align 4
  %sub25 = sub i32 %17, 1
  %idxprom26 = zext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx24, i64 0, i64 %idxprom26
  %18 = load i8, i8* %arrayidx27, align 1
  %19 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %19 to i64
  %arrayidx29 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom28
  store i8 %18, i8* %arrayidx29, align 1
  br label %for.inc30

for.inc30:                                        ; preds = %for.body21
  %20 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %20, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond18

for.end32:                                        ; preds = %for.cond18
  br label %if.end43

if.else33:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc40, %if.else33
  %21 = load i32, i32* %i, align 4
  %cmp35 = icmp slt i32 %21, 16
  br i1 %cmp35, label %for.body37, label %for.end42, !prof !276

for.body37:                                       ; preds = %for.cond34
  %22 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %arrayidx39 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom38
  store i8 -128, i8* %arrayidx39, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %for.body37
  %23 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %23, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond34

for.end42:                                        ; preds = %for.cond34
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end32
  %24 = load i8, i8* %avaiMode.addr, align 1
  %conv44 = zext i8 %24 to i32
  %cmp45 = icmp eq i32 %conv44, 3
  br i1 %cmp45, label %if.then47, label %if.else54, !prof !277

if.then47:                                        ; preds = %if.end43
  %25 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %26 = load i32, i32* %startx.addr, align 4
  %sub48 = sub i32 %26, 1
  %idxprom49 = zext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [144 x i8], [144 x i8]* %25, i64 %idxprom49
  %27 = load i32, i32* %starty.addr, align 4
  %sub51 = sub i32 %27, 1
  %idxprom52 = zext i32 %sub51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx50, i64 0, i64 %idxprom52
  %28 = load i8, i8* %arrayidx53, align 1
  store i8 %28, i8* %X, align 1
  br label %if.end55

if.else54:                                        ; preds = %if.end43
  store i8 -128, i8* %X, align 1
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then47
  %29 = load i8, i8* %predmode.addr, align 1
  %conv56 = zext i8 %29 to i32
  switch i32 %conv56, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb94
    i32 2, label %sw.bb134
  ], !prof !278

sw.bb:                                            ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc91, %sw.bb
  %30 = load i32, i32* %k, align 4
  %cmp58 = icmp slt i32 %30, 16
  br i1 %cmp58, label %for.body60, label %for.end93, !prof !279

for.body60:                                       ; preds = %for.cond57
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc88, %for.body60
  %31 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %31, 4
  br i1 %cmp62, label %for.body64, label %for.end90, !prof !280

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc85, %for.body64
  %32 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %32, 4
  br i1 %cmp66, label %for.body68, label %for.end87, !prof !281

for.body68:                                       ; preds = %for.cond65
  %33 = load i32, i32* %k, align 4
  %and = and i32 %33, 4
  %cmp69 = icmp ne i32 %and, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul = mul nsw i32 %conv70, 2
  %34 = load i32, i32* %k, align 4
  %and71 = and i32 %34, 1
  %cmp72 = icmp ne i32 %and71, 0
  %conv73 = zext i1 %cmp72 to i32
  %add74 = add nsw i32 %mul, %conv73
  %mul75 = mul nsw i32 %add74, 4
  %35 = load i32, i32* %i, align 4
  %add76 = add nsw i32 %mul75, %35
  store i32 %add76, i32* %x, align 4
  %36 = load i32, i32* %x, align 4
  %idxprom77 = sext i32 %36 to i64
  %arrayidx78 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom77
  %37 = load i8, i8* %arrayidx78, align 1
  %38 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %39 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %39 to i64
  %arrayidx80 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %38, i64 %idxprom79
  %40 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %40 to i64
  %arrayidx82 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx80, i64 0, i64 %idxprom81
  %41 = load i32, i32* %j, align 4
  %idxprom83 = sext i32 %41 to i64
  %arrayidx84 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx82, i64 0, i64 %idxprom83
  store i8 %37, i8* %arrayidx84, align 1
  br label %for.inc85

for.inc85:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc86 = add nsw i32 %42, 1
  store i32 %inc86, i32* %j, align 4
  br label %for.cond65

for.end87:                                        ; preds = %for.cond65
  br label %for.inc88

for.inc88:                                        ; preds = %for.end87
  %43 = load i32, i32* %i, align 4
  %inc89 = add nsw i32 %43, 1
  store i32 %inc89, i32* %i, align 4
  br label %for.cond61

for.end90:                                        ; preds = %for.cond61
  br label %for.inc91

for.inc91:                                        ; preds = %for.end90
  %44 = load i32, i32* %k, align 4
  %inc92 = add nsw i32 %44, 1
  store i32 %inc92, i32* %k, align 4
  br label %for.cond57

for.end93:                                        ; preds = %for.cond57
  br label %sw.epilog402

sw.bb94:                                          ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond95

for.cond95:                                       ; preds = %for.inc131, %sw.bb94
  %45 = load i32, i32* %k, align 4
  %cmp96 = icmp slt i32 %45, 16
  br i1 %cmp96, label %for.body98, label %for.end133, !prof !273

for.body98:                                       ; preds = %for.cond95
  store i32 0, i32* %i, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc128, %for.body98
  %46 = load i32, i32* %i, align 4
  %cmp100 = icmp slt i32 %46, 4
  br i1 %cmp100, label %for.body102, label %for.end130, !prof !282

for.body102:                                      ; preds = %for.cond99
  store i32 0, i32* %j, align 4
  br label %for.cond103

for.cond103:                                      ; preds = %for.inc125, %for.body102
  %47 = load i32, i32* %j, align 4
  %cmp104 = icmp slt i32 %47, 4
  br i1 %cmp104, label %for.body106, label %for.end127, !prof !283

for.body106:                                      ; preds = %for.cond103
  %48 = load i32, i32* %k, align 4
  %and107 = and i32 %48, 8
  %cmp108 = icmp ne i32 %and107, 0
  %conv109 = zext i1 %cmp108 to i32
  %mul110 = mul nsw i32 %conv109, 2
  %49 = load i32, i32* %k, align 4
  %and111 = and i32 %49, 2
  %cmp112 = icmp ne i32 %and111, 0
  %conv113 = zext i1 %cmp112 to i32
  %add114 = add nsw i32 %mul110, %conv113
  %mul115 = mul nsw i32 %add114, 4
  %50 = load i32, i32* %j, align 4
  %add116 = add nsw i32 %mul115, %50
  store i32 %add116, i32* %y, align 4
  %51 = load i32, i32* %y, align 4
  %idxprom117 = sext i32 %51 to i64
  %arrayidx118 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom117
  %52 = load i8, i8* %arrayidx118, align 1
  %53 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %54 = load i32, i32* %k, align 4
  %idxprom119 = sext i32 %54 to i64
  %arrayidx120 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %53, i64 %idxprom119
  %55 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %55 to i64
  %arrayidx122 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx120, i64 0, i64 %idxprom121
  %56 = load i32, i32* %j, align 4
  %idxprom123 = sext i32 %56 to i64
  %arrayidx124 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx122, i64 0, i64 %idxprom123
  store i8 %52, i8* %arrayidx124, align 1
  br label %for.inc125

for.inc125:                                       ; preds = %for.body106
  %57 = load i32, i32* %j, align 4
  %inc126 = add nsw i32 %57, 1
  store i32 %inc126, i32* %j, align 4
  br label %for.cond103

for.end127:                                       ; preds = %for.cond103
  br label %for.inc128

for.inc128:                                       ; preds = %for.end127
  %58 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %58, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond99

for.end130:                                       ; preds = %for.cond99
  br label %for.inc131

for.inc131:                                       ; preds = %for.end130
  %59 = load i32, i32* %k, align 4
  %inc132 = add nsw i32 %59, 1
  store i32 %inc132, i32* %k, align 4
  br label %for.cond95

for.end133:                                       ; preds = %for.cond95
  br label %sw.epilog402

sw.bb134:                                         ; preds = %if.end55
  store i32 0, i32* %sumx, align 4
  store i32 0, i32* %sumy, align 4
  %60 = load i8, i8* %avaiMode.addr, align 1
  %conv135 = zext i8 %60 to i32
  %rem136 = srem i32 %conv135, 2
  %tobool137 = icmp ne i32 %rem136, 0
  br i1 %tobool137, label %if.then138, label %if.end150, !prof !284

if.then138:                                       ; preds = %sw.bb134
  store i32 0, i32* %x, align 4
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc147, %if.then138
  %61 = load i32, i32* %x, align 4
  %cmp140 = icmp slt i32 %61, 16
  br i1 %cmp140, label %for.body142, label %for.end149, !prof !285

for.body142:                                      ; preds = %for.cond139
  %62 = load i32, i32* %sumx, align 4
  %63 = load i32, i32* %x, align 4
  %idxprom143 = sext i32 %63 to i64
  %arrayidx144 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom143
  %64 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %64 to i32
  %add146 = add nsw i32 %62, %conv145
  store i32 %add146, i32* %sumx, align 4
  br label %for.inc147

for.inc147:                                       ; preds = %for.body142
  %65 = load i32, i32* %x, align 4
  %inc148 = add nsw i32 %65, 1
  store i32 %inc148, i32* %x, align 4
  br label %for.cond139

for.end149:                                       ; preds = %for.cond139
  br label %if.end150

if.end150:                                        ; preds = %for.end149, %sw.bb134
  %66 = load i8, i8* %avaiMode.addr, align 1
  %conv151 = zext i8 %66 to i32
  %div152 = sdiv i32 %conv151, 2
  %tobool153 = icmp ne i32 %div152, 0
  br i1 %tobool153, label %if.then154, label %if.end166, !prof !286

if.then154:                                       ; preds = %if.end150
  store i32 0, i32* %y, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc163, %if.then154
  %67 = load i32, i32* %y, align 4
  %cmp156 = icmp slt i32 %67, 16
  br i1 %cmp156, label %for.body158, label %for.end165, !prof !287

for.body158:                                      ; preds = %for.cond155
  %68 = load i32, i32* %sumy, align 4
  %69 = load i32, i32* %y, align 4
  %idxprom159 = sext i32 %69 to i64
  %arrayidx160 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom159
  %70 = load i8, i8* %arrayidx160, align 1
  %conv161 = zext i8 %70 to i32
  %add162 = add nsw i32 %68, %conv161
  store i32 %add162, i32* %sumy, align 4
  br label %for.inc163

for.inc163:                                       ; preds = %for.body158
  %71 = load i32, i32* %y, align 4
  %inc164 = add nsw i32 %71, 1
  store i32 %inc164, i32* %y, align 4
  br label %for.cond155

for.end165:                                       ; preds = %for.cond155
  br label %if.end166

if.end166:                                        ; preds = %for.end165, %if.end150
  store i32 0, i32* %temp, align 4
  %72 = load i8, i8* %avaiMode.addr, align 1
  %conv167 = zext i8 %72 to i32
  switch i32 %conv167, label %sw.epilog [
    i32 3, label %sw.bb168
    i32 2, label %sw.bb171
    i32 1, label %sw.bb174
    i32 0, label %sw.bb177
  ], !prof !288

sw.bb168:                                         ; preds = %if.end166
  %73 = load i32, i32* %sumx, align 4
  %74 = load i32, i32* %sumy, align 4
  %add169 = add nsw i32 %73, %74
  %add170 = add nsw i32 %add169, 16
  %shr = ashr i32 %add170, 5
  store i32 %shr, i32* %temp, align 4
  br label %sw.epilog

sw.bb171:                                         ; preds = %if.end166
  %75 = load i32, i32* %sumy, align 4
  %add172 = add nsw i32 %75, 8
  %shr173 = ashr i32 %add172, 4
  store i32 %shr173, i32* %temp, align 4
  br label %sw.epilog

sw.bb174:                                         ; preds = %if.end166
  %76 = load i32, i32* %sumx, align 4
  %add175 = add nsw i32 %76, 8
  %shr176 = ashr i32 %add175, 4
  store i32 %shr176, i32* %temp, align 4
  br label %sw.epilog

sw.bb177:                                         ; preds = %if.end166
  store i32 128, i32* %temp, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb177, %sw.bb174, %sw.bb171, %sw.bb168, %if.end166
  store i32 0, i32* %k, align 4
  br label %for.cond178

for.cond178:                                      ; preds = %for.inc203, %sw.epilog
  %77 = load i32, i32* %k, align 4
  %cmp179 = icmp slt i32 %77, 16
  br i1 %cmp179, label %for.body181, label %for.end205, !prof !285

for.body181:                                      ; preds = %for.cond178
  store i32 0, i32* %i, align 4
  br label %for.cond182

for.cond182:                                      ; preds = %for.inc200, %for.body181
  %78 = load i32, i32* %i, align 4
  %cmp183 = icmp slt i32 %78, 4
  br i1 %cmp183, label %for.body185, label %for.end202, !prof !289

for.body185:                                      ; preds = %for.cond182
  store i32 0, i32* %j, align 4
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc197, %for.body185
  %79 = load i32, i32* %j, align 4
  %cmp187 = icmp slt i32 %79, 4
  br i1 %cmp187, label %for.body189, label %for.end199, !prof !290

for.body189:                                      ; preds = %for.cond186
  %80 = load i32, i32* %temp, align 4
  %conv190 = trunc i32 %80 to i8
  %81 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %82 = load i32, i32* %k, align 4
  %idxprom191 = sext i32 %82 to i64
  %arrayidx192 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %81, i64 %idxprom191
  %83 = load i32, i32* %i, align 4
  %idxprom193 = sext i32 %83 to i64
  %arrayidx194 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx192, i64 0, i64 %idxprom193
  %84 = load i32, i32* %j, align 4
  %idxprom195 = sext i32 %84 to i64
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx194, i64 0, i64 %idxprom195
  store i8 %conv190, i8* %arrayidx196, align 1
  br label %for.inc197

for.inc197:                                       ; preds = %for.body189
  %85 = load i32, i32* %j, align 4
  %inc198 = add nsw i32 %85, 1
  store i32 %inc198, i32* %j, align 4
  br label %for.cond186

for.end199:                                       ; preds = %for.cond186
  br label %for.inc200

for.inc200:                                       ; preds = %for.end199
  %86 = load i32, i32* %i, align 4
  %inc201 = add nsw i32 %86, 1
  store i32 %inc201, i32* %i, align 4
  br label %for.cond182

for.end202:                                       ; preds = %for.cond182
  br label %for.inc203

for.inc203:                                       ; preds = %for.end202
  %87 = load i32, i32* %k, align 4
  %inc204 = add nsw i32 %87, 1
  store i32 %inc204, i32* %k, align 4
  br label %for.cond178

for.end205:                                       ; preds = %for.cond178
  br label %sw.epilog402

sw.default:                                       ; preds = %if.end55
  %arrayidx206 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 8
  %88 = load i8, i8* %arrayidx206, align 8
  %conv207 = zext i8 %88 to i32
  %arrayidx208 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 6
  %89 = load i8, i8* %arrayidx208, align 2
  %conv209 = zext i8 %89 to i32
  %sub210 = sub nsw i32 %conv207, %conv209
  %arrayidx211 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 9
  %90 = load i8, i8* %arrayidx211, align 1
  %conv212 = zext i8 %90 to i32
  %arrayidx213 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 5
  %91 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %91 to i32
  %sub215 = sub nsw i32 %conv212, %conv214
  %mul216 = mul nsw i32 2, %sub215
  %add217 = add nsw i32 %sub210, %mul216
  %arrayidx218 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 10
  %92 = load i8, i8* %arrayidx218, align 2
  %conv219 = zext i8 %92 to i32
  %arrayidx220 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 4
  %93 = load i8, i8* %arrayidx220, align 4
  %conv221 = zext i8 %93 to i32
  %sub222 = sub nsw i32 %conv219, %conv221
  %mul223 = mul nsw i32 3, %sub222
  %add224 = add nsw i32 %add217, %mul223
  %arrayidx225 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 11
  %94 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %94 to i32
  %arrayidx227 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 3
  %95 = load i8, i8* %arrayidx227, align 1
  %conv228 = zext i8 %95 to i32
  %sub229 = sub nsw i32 %conv226, %conv228
  %mul230 = mul nsw i32 4, %sub229
  %add231 = add nsw i32 %add224, %mul230
  %arrayidx232 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 12
  %96 = load i8, i8* %arrayidx232, align 4
  %conv233 = zext i8 %96 to i32
  %arrayidx234 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 2
  %97 = load i8, i8* %arrayidx234, align 2
  %conv235 = zext i8 %97 to i32
  %sub236 = sub nsw i32 %conv233, %conv235
  %mul237 = mul nsw i32 5, %sub236
  %add238 = add nsw i32 %add231, %mul237
  %arrayidx239 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 13
  %98 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %98 to i32
  %arrayidx241 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 1
  %99 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %99 to i32
  %sub243 = sub nsw i32 %conv240, %conv242
  %mul244 = mul nsw i32 6, %sub243
  %add245 = add nsw i32 %add238, %mul244
  %arrayidx246 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 14
  %100 = load i8, i8* %arrayidx246, align 2
  %conv247 = zext i8 %100 to i32
  %arrayidx248 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 0
  %101 = load i8, i8* %arrayidx248, align 16
  %conv249 = zext i8 %101 to i32
  %sub250 = sub nsw i32 %conv247, %conv249
  %mul251 = mul nsw i32 7, %sub250
  %add252 = add nsw i32 %add245, %mul251
  %arrayidx253 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 15
  %102 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %102 to i32
  %103 = load i8, i8* %X, align 1
  %conv255 = zext i8 %103 to i32
  %sub256 = sub nsw i32 %conv254, %conv255
  %mul257 = mul nsw i32 8, %sub256
  %add258 = add nsw i32 %add252, %mul257
  store i32 %add258, i32* %H, align 4
  %arrayidx259 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 8
  %104 = load i8, i8* %arrayidx259, align 8
  %conv260 = zext i8 %104 to i32
  %arrayidx261 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 6
  %105 = load i8, i8* %arrayidx261, align 2
  %conv262 = zext i8 %105 to i32
  %sub263 = sub nsw i32 %conv260, %conv262
  %arrayidx264 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 9
  %106 = load i8, i8* %arrayidx264, align 1
  %conv265 = zext i8 %106 to i32
  %arrayidx266 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 5
  %107 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %107 to i32
  %sub268 = sub nsw i32 %conv265, %conv267
  %mul269 = mul nsw i32 2, %sub268
  %add270 = add nsw i32 %sub263, %mul269
  %arrayidx271 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 10
  %108 = load i8, i8* %arrayidx271, align 2
  %conv272 = zext i8 %108 to i32
  %arrayidx273 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 4
  %109 = load i8, i8* %arrayidx273, align 4
  %conv274 = zext i8 %109 to i32
  %sub275 = sub nsw i32 %conv272, %conv274
  %mul276 = mul nsw i32 3, %sub275
  %add277 = add nsw i32 %add270, %mul276
  %arrayidx278 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 11
  %110 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %110 to i32
  %arrayidx280 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 3
  %111 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %111 to i32
  %sub282 = sub nsw i32 %conv279, %conv281
  %mul283 = mul nsw i32 4, %sub282
  %add284 = add nsw i32 %add277, %mul283
  %arrayidx285 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 12
  %112 = load i8, i8* %arrayidx285, align 4
  %conv286 = zext i8 %112 to i32
  %arrayidx287 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 2
  %113 = load i8, i8* %arrayidx287, align 2
  %conv288 = zext i8 %113 to i32
  %sub289 = sub nsw i32 %conv286, %conv288
  %mul290 = mul nsw i32 5, %sub289
  %add291 = add nsw i32 %add284, %mul290
  %arrayidx292 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 13
  %114 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %114 to i32
  %arrayidx294 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 1
  %115 = load i8, i8* %arrayidx294, align 1
  %conv295 = zext i8 %115 to i32
  %sub296 = sub nsw i32 %conv293, %conv295
  %mul297 = mul nsw i32 6, %sub296
  %add298 = add nsw i32 %add291, %mul297
  %arrayidx299 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 14
  %116 = load i8, i8* %arrayidx299, align 2
  %conv300 = zext i8 %116 to i32
  %arrayidx301 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 0
  %117 = load i8, i8* %arrayidx301, align 16
  %conv302 = zext i8 %117 to i32
  %sub303 = sub nsw i32 %conv300, %conv302
  %mul304 = mul nsw i32 7, %sub303
  %add305 = add nsw i32 %add298, %mul304
  %arrayidx306 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 15
  %118 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %118 to i32
  %119 = load i8, i8* %X, align 1
  %conv308 = zext i8 %119 to i32
  %sub309 = sub nsw i32 %conv307, %conv308
  %mul310 = mul nsw i32 8, %sub309
  %add311 = add nsw i32 %add305, %mul310
  store i32 %add311, i32* %V, align 4
  %120 = load i32, i32* %H, align 4
  %mul312 = mul nsw i32 5, %120
  %add313 = add nsw i32 %mul312, 32
  %shr314 = ashr i32 %add313, 6
  store i32 %shr314, i32* %H, align 4
  %121 = load i32, i32* %V, align 4
  %mul315 = mul nsw i32 5, %121
  %add316 = add nsw i32 %mul315, 32
  %shr317 = ashr i32 %add316, 6
  store i32 %shr317, i32* %V, align 4
  %arrayidx318 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 15
  %122 = load i8, i8* %arrayidx318, align 1
  %conv319 = zext i8 %122 to i32
  %arrayidx320 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 15
  %123 = load i8, i8* %arrayidx320, align 1
  %conv321 = zext i8 %123 to i32
  %add322 = add nsw i32 %conv319, %conv321
  %mul323 = mul nsw i32 16, %add322
  store i32 %mul323, i32* %a, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond324

for.cond324:                                      ; preds = %for.inc399, %sw.default
  %124 = load i32, i32* %k, align 4
  %cmp325 = icmp slt i32 %124, 16
  br i1 %cmp325, label %for.body327, label %for.end401, !prof !291

for.body327:                                      ; preds = %for.cond324
  store i32 0, i32* %i, align 4
  br label %for.cond328

for.cond328:                                      ; preds = %for.inc396, %for.body327
  %125 = load i32, i32* %i, align 4
  %cmp329 = icmp slt i32 %125, 4
  br i1 %cmp329, label %for.body331, label %for.end398, !prof !292

for.body331:                                      ; preds = %for.cond328
  store i32 0, i32* %j, align 4
  br label %for.cond332

for.cond332:                                      ; preds = %for.inc393, %for.body331
  %126 = load i32, i32* %j, align 4
  %cmp333 = icmp slt i32 %126, 4
  br i1 %cmp333, label %for.body335, label %for.end395, !prof !293

for.body335:                                      ; preds = %for.cond332
  %127 = load i32, i32* %k, align 4
  %and336 = and i32 %127, 4
  %cmp337 = icmp ne i32 %and336, 0
  %conv338 = zext i1 %cmp337 to i32
  %mul339 = mul nsw i32 %conv338, 2
  %128 = load i32, i32* %k, align 4
  %and340 = and i32 %128, 1
  %cmp341 = icmp ne i32 %and340, 0
  %conv342 = zext i1 %cmp341 to i32
  %add343 = add nsw i32 %mul339, %conv342
  %mul344 = mul nsw i32 %add343, 4
  %129 = load i32, i32* %i, align 4
  %add345 = add nsw i32 %mul344, %129
  store i32 %add345, i32* %x, align 4
  %130 = load i32, i32* %k, align 4
  %and346 = and i32 %130, 8
  %cmp347 = icmp ne i32 %and346, 0
  %conv348 = zext i1 %cmp347 to i32
  %mul349 = mul nsw i32 %conv348, 2
  %131 = load i32, i32* %k, align 4
  %and350 = and i32 %131, 2
  %cmp351 = icmp ne i32 %and350, 0
  %conv352 = zext i1 %cmp351 to i32
  %add353 = add nsw i32 %mul349, %conv352
  %mul354 = mul nsw i32 %add353, 4
  %132 = load i32, i32* %j, align 4
  %add355 = add nsw i32 %mul354, %132
  store i32 %add355, i32* %y, align 4
  %133 = load i32, i32* %a, align 4
  %134 = load i32, i32* %H, align 4
  %135 = load i32, i32* %x, align 4
  %sub356 = sub nsw i32 %135, 7
  %mul357 = mul nsw i32 %134, %sub356
  %add358 = add nsw i32 %133, %mul357
  %136 = load i32, i32* %V, align 4
  %137 = load i32, i32* %y, align 4
  %sub359 = sub nsw i32 %137, 7
  %mul360 = mul nsw i32 %136, %sub359
  %add361 = add nsw i32 %add358, %mul360
  %add362 = add nsw i32 %add361, 16
  %shr363 = ashr i32 %add362, 5
  store i32 %shr363, i32* %tmp, align 4
  %138 = load i32, i32* %tmp, align 4
  %cmp364 = icmp slt i32 %138, 0
  br i1 %cmp364, label %if.then366, label %if.else373, !prof !294

if.then366:                                       ; preds = %for.body335
  %139 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %140 = load i32, i32* %k, align 4
  %idxprom367 = sext i32 %140 to i64
  %arrayidx368 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %139, i64 %idxprom367
  %141 = load i32, i32* %i, align 4
  %idxprom369 = sext i32 %141 to i64
  %arrayidx370 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx368, i64 0, i64 %idxprom369
  %142 = load i32, i32* %j, align 4
  %idxprom371 = sext i32 %142 to i64
  %arrayidx372 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 %idxprom371
  store i8 0, i8* %arrayidx372, align 1
  br label %if.end392

if.else373:                                       ; preds = %for.body335
  %143 = load i32, i32* %tmp, align 4
  %cmp374 = icmp sgt i32 %143, 255
  br i1 %cmp374, label %if.then376, label %if.else383, !prof !294

if.then376:                                       ; preds = %if.else373
  %144 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %145 = load i32, i32* %k, align 4
  %idxprom377 = sext i32 %145 to i64
  %arrayidx378 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %144, i64 %idxprom377
  %146 = load i32, i32* %i, align 4
  %idxprom379 = sext i32 %146 to i64
  %arrayidx380 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx378, i64 0, i64 %idxprom379
  %147 = load i32, i32* %j, align 4
  %idxprom381 = sext i32 %147 to i64
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx380, i64 0, i64 %idxprom381
  store i8 -1, i8* %arrayidx382, align 1
  br label %if.end391

if.else383:                                       ; preds = %if.else373
  %148 = load i32, i32* %tmp, align 4
  %conv384 = trunc i32 %148 to i8
  %149 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %150 = load i32, i32* %k, align 4
  %idxprom385 = sext i32 %150 to i64
  %arrayidx386 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %149, i64 %idxprom385
  %151 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %151 to i64
  %arrayidx388 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx386, i64 0, i64 %idxprom387
  %152 = load i32, i32* %j, align 4
  %idxprom389 = sext i32 %152 to i64
  %arrayidx390 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx388, i64 0, i64 %idxprom389
  store i8 %conv384, i8* %arrayidx390, align 1
  br label %if.end391

if.end391:                                        ; preds = %if.else383, %if.then376
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.then366
  br label %for.inc393

for.inc393:                                       ; preds = %if.end392
  %153 = load i32, i32* %j, align 4
  %inc394 = add nsw i32 %153, 1
  store i32 %inc394, i32* %j, align 4
  br label %for.cond332

for.end395:                                       ; preds = %for.cond332
  br label %for.inc396

for.inc396:                                       ; preds = %for.end395
  %154 = load i32, i32* %i, align 4
  %inc397 = add nsw i32 %154, 1
  store i32 %inc397, i32* %i, align 4
  br label %for.cond328

for.end398:                                       ; preds = %for.cond328
  br label %for.inc399

for.inc399:                                       ; preds = %for.end398
  %155 = load i32, i32* %k, align 4
  %inc400 = add nsw i32 %155, 1
  store i32 %inc400, i32* %k, align 4
  br label %for.cond324

for.end401:                                       ; preds = %for.cond324
  br label %sw.epilog402

sw.epilog402:                                     ; preds = %for.end401, %for.end205, %for.end133, %for.end93
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @prediction_Chroma([4 x [4 x i8]]* %predC, [72 x i8]* %SChroma, i8 zeroext %avaimode, i32 %startx, i32 %starty, i8 zeroext %pred_mod) #0 !prof !295 {
entry:
  %predC.addr = alloca [4 x [4 x i8]]*, align 8
  %SChroma.addr = alloca [72 x i8]*, align 8
  %avaimode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %pred_mod.addr = alloca i8, align 1
  %v = alloca [8 x i8], align 1
  %h = alloca [8 x i8], align 1
  %x = alloca i8, align 1
  %y = alloca i8, align 1
  %X = alloca i8, align 1
  %H = alloca i32, align 4
  %V = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %a = alloca i32, align 4
  %temp = alloca i32, align 4
  %js1 = alloca i32, align 4
  %js2 = alloca i32, align 4
  %js3 = alloca i32, align 4
  %js0 = alloca i32, align 4
  %temp103 = alloca [2 x [2 x i32]], align 16
  %i165 = alloca i32, align 4
  %j166 = alloca i32, align 4
  store [4 x [4 x i8]]* %predC, [4 x [4 x i8]]** %predC.addr, align 8
  store [72 x i8]* %SChroma, [72 x i8]** %SChroma.addr, align 8
  store i8 %avaimode, i8* %avaimode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %pred_mod, i8* %pred_mod.addr, align 1
  %0 = load i8, i8* %avaimode.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !296

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end, !prof !297

for.body:                                         ; preds = %for.cond
  %2 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %3 = load i32, i32* %startx.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [72 x i8], [72 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %starty.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, %5
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %6 = load i8, i8* %arrayidx3, align 1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom4
  store i8 %6, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %if.else
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %9, 8
  br i1 %cmp7, label %for.body9, label %for.end14, !prof !298

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom10
  store i8 -128, i8* %arrayidx11, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  br label %if.end

if.end:                                           ; preds = %for.end14, %for.end
  %12 = load i8, i8* %avaimode.addr, align 1
  %conv15 = zext i8 %12 to i32
  %rem = srem i32 %conv15, 2
  %tobool16 = icmp ne i32 %rem, 0
  br i1 %tobool16, label %if.then17, label %if.else33, !prof !299

if.then17:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc30, %if.then17
  %13 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %13, 8
  br i1 %cmp19, label %for.body21, label %for.end32, !prof !300

for.body21:                                       ; preds = %for.cond18
  %14 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %15 = load i32, i32* %startx.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %15, %16
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [72 x i8], [72 x i8]* %14, i64 %idxprom23
  %17 = load i32, i32* %starty.addr, align 4
  %sub25 = sub nsw i32 %17, 1
  %idxprom26 = sext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx24, i64 0, i64 %idxprom26
  %18 = load i8, i8* %arrayidx27, align 1
  %19 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %19 to i64
  %arrayidx29 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom28
  store i8 %18, i8* %arrayidx29, align 1
  br label %for.inc30

for.inc30:                                        ; preds = %for.body21
  %20 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %20, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond18

for.end32:                                        ; preds = %for.cond18
  br label %if.end43

if.else33:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc40, %if.else33
  %21 = load i32, i32* %i, align 4
  %cmp35 = icmp slt i32 %21, 8
  br i1 %cmp35, label %for.body37, label %for.end42, !prof !299

for.body37:                                       ; preds = %for.cond34
  %22 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %arrayidx39 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom38
  store i8 -128, i8* %arrayidx39, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %for.body37
  %23 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %23, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond34

for.end42:                                        ; preds = %for.cond34
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end32
  %24 = load i8, i8* %avaimode.addr, align 1
  %conv44 = zext i8 %24 to i32
  %cmp45 = icmp eq i32 %conv44, 3
  br i1 %cmp45, label %if.then47, label %if.else54, !prof !301

if.then47:                                        ; preds = %if.end43
  %25 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %26 = load i32, i32* %startx.addr, align 4
  %sub48 = sub nsw i32 %26, 1
  %idxprom49 = sext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [72 x i8], [72 x i8]* %25, i64 %idxprom49
  %27 = load i32, i32* %starty.addr, align 4
  %sub51 = sub nsw i32 %27, 1
  %idxprom52 = sext i32 %sub51 to i64
  %arrayidx53 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx50, i64 0, i64 %idxprom52
  %28 = load i8, i8* %arrayidx53, align 1
  store i8 %28, i8* %X, align 1
  br label %if.end55

if.else54:                                        ; preds = %if.end43
  store i8 -128, i8* %X, align 1
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then47
  %29 = load i8, i8* %pred_mod.addr, align 1
  %conv56 = zext i8 %29 to i32
  switch i32 %conv56, label %sw.default275 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb209
    i32 2, label %sw.bb242
  ], !prof !302

sw.bb:                                            ; preds = %if.end55
  store i32 0, i32* %js0, align 4
  store i32 0, i32* %js1, align 4
  store i32 0, i32* %js2, align 4
  store i32 0, i32* %js3, align 4
  %30 = load i8, i8* %avaimode.addr, align 1
  %conv57 = zext i8 %30 to i32
  %rem58 = srem i32 %conv57, 2
  %tobool59 = icmp ne i32 %rem58, 0
  br i1 %tobool59, label %if.then60, label %if.end79, !prof !303

if.then60:                                        ; preds = %sw.bb
  store i8 0, i8* %x, align 1
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc76, %if.then60
  %31 = load i8, i8* %x, align 1
  %conv62 = zext i8 %31 to i32
  %cmp63 = icmp slt i32 %conv62, 4
  br i1 %cmp63, label %for.body65, label %for.end78, !prof !304

for.body65:                                       ; preds = %for.cond61
  %32 = load i8, i8* %x, align 1
  %idxprom66 = zext i8 %32 to i64
  %arrayidx67 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom66
  %33 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %33 to i32
  %34 = load i32, i32* %js0, align 4
  %add69 = add nsw i32 %34, %conv68
  store i32 %add69, i32* %js0, align 4
  %35 = load i8, i8* %x, align 1
  %conv70 = zext i8 %35 to i32
  %add71 = add nsw i32 %conv70, 4
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom72
  %36 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %36 to i32
  %37 = load i32, i32* %js1, align 4
  %add75 = add nsw i32 %37, %conv74
  store i32 %add75, i32* %js1, align 4
  br label %for.inc76

for.inc76:                                        ; preds = %for.body65
  %38 = load i8, i8* %x, align 1
  %inc77 = add i8 %38, 1
  store i8 %inc77, i8* %x, align 1
  br label %for.cond61

for.end78:                                        ; preds = %for.cond61
  br label %if.end79

if.end79:                                         ; preds = %for.end78, %sw.bb
  %39 = load i8, i8* %avaimode.addr, align 1
  %conv80 = zext i8 %39 to i32
  %div81 = sdiv i32 %conv80, 2
  %tobool82 = icmp ne i32 %div81, 0
  br i1 %tobool82, label %if.then83, label %if.end102, !prof !305

if.then83:                                        ; preds = %if.end79
  store i8 0, i8* %y, align 1
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc99, %if.then83
  %40 = load i8, i8* %y, align 1
  %conv85 = zext i8 %40 to i32
  %cmp86 = icmp slt i32 %conv85, 4
  br i1 %cmp86, label %for.body88, label %for.end101, !prof !306

for.body88:                                       ; preds = %for.cond84
  %41 = load i8, i8* %y, align 1
  %idxprom89 = zext i8 %41 to i64
  %arrayidx90 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom89
  %42 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %42 to i32
  %43 = load i32, i32* %js2, align 4
  %add92 = add nsw i32 %43, %conv91
  store i32 %add92, i32* %js2, align 4
  %44 = load i8, i8* %y, align 1
  %conv93 = zext i8 %44 to i32
  %add94 = add nsw i32 %conv93, 4
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom95
  %45 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %45 to i32
  %46 = load i32, i32* %js3, align 4
  %add98 = add nsw i32 %46, %conv97
  store i32 %add98, i32* %js3, align 4
  br label %for.inc99

for.inc99:                                        ; preds = %for.body88
  %47 = load i8, i8* %y, align 1
  %inc100 = add i8 %47, 1
  store i8 %inc100, i8* %y, align 1
  br label %for.cond84

for.end101:                                       ; preds = %for.cond84
  br label %if.end102

if.end102:                                        ; preds = %for.end101, %if.end79
  %48 = load i8, i8* %avaimode.addr, align 1
  %conv104 = zext i8 %48 to i32
  switch i32 %conv104, label %sw.default [
    i32 0, label %sw.bb105
    i32 1, label %sw.bb114
    i32 2, label %sw.bb130
  ], !prof !307

sw.bb105:                                         ; preds = %if.end102
  %arrayidx106 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx107 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx106, i64 0, i64 0
  store i32 128, i32* %arrayidx107, align 16
  %arrayidx108 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx109 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx108, i64 0, i64 1
  store i32 128, i32* %arrayidx109, align 4
  %arrayidx110 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx110, i64 0, i64 0
  store i32 128, i32* %arrayidx111, align 8
  %arrayidx112 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx113 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx112, i64 0, i64 1
  store i32 128, i32* %arrayidx113, align 4
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.end102
  %49 = load i32, i32* %js0, align 4
  %add115 = add nsw i32 %49, 2
  %shr = ashr i32 %add115, 2
  %arrayidx116 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx117 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx116, i64 0, i64 0
  store i32 %shr, i32* %arrayidx117, align 16
  %50 = load i32, i32* %js1, align 4
  %add118 = add nsw i32 %50, 2
  %shr119 = ashr i32 %add118, 2
  %arrayidx120 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx120, i64 0, i64 1
  store i32 %shr119, i32* %arrayidx121, align 4
  %51 = load i32, i32* %js0, align 4
  %add122 = add nsw i32 %51, 2
  %shr123 = ashr i32 %add122, 2
  %arrayidx124 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx125 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx124, i64 0, i64 0
  store i32 %shr123, i32* %arrayidx125, align 8
  %52 = load i32, i32* %js1, align 4
  %add126 = add nsw i32 %52, 2
  %shr127 = ashr i32 %add126, 2
  %arrayidx128 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx129 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx128, i64 0, i64 1
  store i32 %shr127, i32* %arrayidx129, align 4
  br label %sw.epilog

sw.bb130:                                         ; preds = %if.end102
  %53 = load i32, i32* %js2, align 4
  %add131 = add nsw i32 %53, 2
  %shr132 = ashr i32 %add131, 2
  %arrayidx133 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx134 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx133, i64 0, i64 0
  store i32 %shr132, i32* %arrayidx134, align 16
  %54 = load i32, i32* %js2, align 4
  %add135 = add nsw i32 %54, 2
  %shr136 = ashr i32 %add135, 2
  %arrayidx137 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i64 0, i64 1
  store i32 %shr136, i32* %arrayidx138, align 4
  %55 = load i32, i32* %js3, align 4
  %add139 = add nsw i32 %55, 2
  %shr140 = ashr i32 %add139, 2
  %arrayidx141 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx142 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx141, i64 0, i64 0
  store i32 %shr140, i32* %arrayidx142, align 8
  %56 = load i32, i32* %js3, align 4
  %add143 = add nsw i32 %56, 2
  %shr144 = ashr i32 %add143, 2
  %arrayidx145 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx146 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx145, i64 0, i64 1
  store i32 %shr144, i32* %arrayidx146, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end102
  %57 = load i32, i32* %js2, align 4
  %58 = load i32, i32* %js0, align 4
  %add147 = add nsw i32 %57, %58
  %add148 = add nsw i32 %add147, 4
  %shr149 = ashr i32 %add148, 3
  %arrayidx150 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx151 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx150, i64 0, i64 0
  store i32 %shr149, i32* %arrayidx151, align 16
  %59 = load i32, i32* %js1, align 4
  %add152 = add nsw i32 %59, 2
  %shr153 = ashr i32 %add152, 2
  %arrayidx154 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx155 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx154, i64 0, i64 1
  store i32 %shr153, i32* %arrayidx155, align 4
  %60 = load i32, i32* %js3, align 4
  %add156 = add nsw i32 %60, 2
  %shr157 = ashr i32 %add156, 2
  %arrayidx158 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx159 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx158, i64 0, i64 0
  store i32 %shr157, i32* %arrayidx159, align 8
  %61 = load i32, i32* %js1, align 4
  %62 = load i32, i32* %js3, align 4
  %add160 = add nsw i32 %61, %62
  %add161 = add nsw i32 %add160, 4
  %shr162 = ashr i32 %add161, 3
  %arrayidx163 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx164 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx163, i64 0, i64 1
  store i32 %shr162, i32* %arrayidx164, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb130, %sw.bb114, %sw.bb105
  store i32 0, i32* %i165, align 4
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc206, %sw.epilog
  %63 = load i32, i32* %i165, align 4
  %cmp168 = icmp slt i32 %63, 2
  br i1 %cmp168, label %for.body170, label %for.end208, !prof !308

for.body170:                                      ; preds = %for.cond167
  store i32 0, i32* %j166, align 4
  br label %for.cond171

for.cond171:                                      ; preds = %for.inc203, %for.body170
  %64 = load i32, i32* %j166, align 4
  %cmp172 = icmp slt i32 %64, 2
  br i1 %cmp172, label %for.body174, label %for.end205, !prof !309

for.body174:                                      ; preds = %for.cond171
  store i8 0, i8* %x, align 1
  br label %for.cond175

for.cond175:                                      ; preds = %for.inc200, %for.body174
  %65 = load i8, i8* %x, align 1
  %conv176 = zext i8 %65 to i32
  %cmp177 = icmp slt i32 %conv176, 4
  br i1 %cmp177, label %for.body179, label %for.end202, !prof !310

for.body179:                                      ; preds = %for.cond175
  store i8 0, i8* %y, align 1
  br label %for.cond180

for.cond180:                                      ; preds = %for.inc197, %for.body179
  %66 = load i8, i8* %y, align 1
  %conv181 = zext i8 %66 to i32
  %cmp182 = icmp slt i32 %conv181, 4
  br i1 %cmp182, label %for.body184, label %for.end199, !prof !311

for.body184:                                      ; preds = %for.cond180
  %67 = load i32, i32* %i165, align 4
  %idxprom185 = sext i32 %67 to i64
  %arrayidx186 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 %idxprom185
  %68 = load i32, i32* %j166, align 4
  %idxprom187 = sext i32 %68 to i64
  %arrayidx188 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx186, i64 0, i64 %idxprom187
  %69 = load i32, i32* %arrayidx188, align 4
  %conv189 = trunc i32 %69 to i8
  %70 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %71 = load i32, i32* %j166, align 4
  %72 = load i32, i32* %i165, align 4
  %mul = mul nsw i32 %72, 2
  %add190 = add nsw i32 %71, %mul
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %70, i64 %idxprom191
  %73 = load i8, i8* %x, align 1
  %idxprom193 = zext i8 %73 to i64
  %arrayidx194 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx192, i64 0, i64 %idxprom193
  %74 = load i8, i8* %y, align 1
  %idxprom195 = zext i8 %74 to i64
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx194, i64 0, i64 %idxprom195
  store i8 %conv189, i8* %arrayidx196, align 1
  br label %for.inc197

for.inc197:                                       ; preds = %for.body184
  %75 = load i8, i8* %y, align 1
  %inc198 = add i8 %75, 1
  store i8 %inc198, i8* %y, align 1
  br label %for.cond180

for.end199:                                       ; preds = %for.cond180
  br label %for.inc200

for.inc200:                                       ; preds = %for.end199
  %76 = load i8, i8* %x, align 1
  %inc201 = add i8 %76, 1
  store i8 %inc201, i8* %x, align 1
  br label %for.cond175

for.end202:                                       ; preds = %for.cond175
  br label %for.inc203

for.inc203:                                       ; preds = %for.end202
  %77 = load i32, i32* %j166, align 4
  %inc204 = add nsw i32 %77, 1
  store i32 %inc204, i32* %j166, align 4
  br label %for.cond171

for.end205:                                       ; preds = %for.cond171
  br label %for.inc206

for.inc206:                                       ; preds = %for.end205
  %78 = load i32, i32* %i165, align 4
  %inc207 = add nsw i32 %78, 1
  store i32 %inc207, i32* %i165, align 4
  br label %for.cond167

for.end208:                                       ; preds = %for.cond167
  br label %sw.epilog402

sw.bb209:                                         ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond210

for.cond210:                                      ; preds = %for.inc239, %sw.bb209
  %79 = load i32, i32* %k, align 4
  %cmp211 = icmp slt i32 %79, 4
  br i1 %cmp211, label %for.body213, label %for.end241, !prof !312

for.body213:                                      ; preds = %for.cond210
  store i32 0, i32* %i, align 4
  br label %for.cond214

for.cond214:                                      ; preds = %for.inc236, %for.body213
  %80 = load i32, i32* %i, align 4
  %cmp215 = icmp slt i32 %80, 4
  br i1 %cmp215, label %for.body217, label %for.end238, !prof !313

for.body217:                                      ; preds = %for.cond214
  store i32 0, i32* %j, align 4
  br label %for.cond218

for.cond218:                                      ; preds = %for.inc233, %for.body217
  %81 = load i32, i32* %j, align 4
  %cmp219 = icmp slt i32 %81, 4
  br i1 %cmp219, label %for.body221, label %for.end235, !prof !314

for.body221:                                      ; preds = %for.cond218
  %82 = load i32, i32* %k, align 4
  %div222 = sdiv i32 %82, 2
  %mul223 = mul nsw i32 %div222, 4
  %83 = load i32, i32* %j, align 4
  %add224 = add nsw i32 %mul223, %83
  %idxprom225 = sext i32 %add224 to i64
  %arrayidx226 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom225
  %84 = load i8, i8* %arrayidx226, align 1
  %85 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %86 = load i32, i32* %k, align 4
  %idxprom227 = sext i32 %86 to i64
  %arrayidx228 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %85, i64 %idxprom227
  %87 = load i32, i32* %i, align 4
  %idxprom229 = sext i32 %87 to i64
  %arrayidx230 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx228, i64 0, i64 %idxprom229
  %88 = load i32, i32* %j, align 4
  %idxprom231 = sext i32 %88 to i64
  %arrayidx232 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx230, i64 0, i64 %idxprom231
  store i8 %84, i8* %arrayidx232, align 1
  br label %for.inc233

for.inc233:                                       ; preds = %for.body221
  %89 = load i32, i32* %j, align 4
  %inc234 = add nsw i32 %89, 1
  store i32 %inc234, i32* %j, align 4
  br label %for.cond218

for.end235:                                       ; preds = %for.cond218
  br label %for.inc236

for.inc236:                                       ; preds = %for.end235
  %90 = load i32, i32* %i, align 4
  %inc237 = add nsw i32 %90, 1
  store i32 %inc237, i32* %i, align 4
  br label %for.cond214

for.end238:                                       ; preds = %for.cond214
  br label %for.inc239

for.inc239:                                       ; preds = %for.end238
  %91 = load i32, i32* %k, align 4
  %inc240 = add nsw i32 %91, 1
  store i32 %inc240, i32* %k, align 4
  br label %for.cond210

for.end241:                                       ; preds = %for.cond210
  br label %sw.epilog402

sw.bb242:                                         ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond243

for.cond243:                                      ; preds = %for.inc272, %sw.bb242
  %92 = load i32, i32* %k, align 4
  %cmp244 = icmp slt i32 %92, 4
  br i1 %cmp244, label %for.body246, label %for.end274, !prof !315

for.body246:                                      ; preds = %for.cond243
  store i32 0, i32* %i, align 4
  br label %for.cond247

for.cond247:                                      ; preds = %for.inc269, %for.body246
  %93 = load i32, i32* %i, align 4
  %cmp248 = icmp slt i32 %93, 4
  br i1 %cmp248, label %for.body250, label %for.end271, !prof !316

for.body250:                                      ; preds = %for.cond247
  store i32 0, i32* %j, align 4
  br label %for.cond251

for.cond251:                                      ; preds = %for.inc266, %for.body250
  %94 = load i32, i32* %j, align 4
  %cmp252 = icmp slt i32 %94, 4
  br i1 %cmp252, label %for.body254, label %for.end268, !prof !317

for.body254:                                      ; preds = %for.cond251
  %95 = load i32, i32* %k, align 4
  %rem255 = srem i32 %95, 2
  %mul256 = mul nsw i32 %rem255, 4
  %96 = load i32, i32* %i, align 4
  %add257 = add nsw i32 %mul256, %96
  %idxprom258 = sext i32 %add257 to i64
  %arrayidx259 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom258
  %97 = load i8, i8* %arrayidx259, align 1
  %98 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %99 = load i32, i32* %k, align 4
  %idxprom260 = sext i32 %99 to i64
  %arrayidx261 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %98, i64 %idxprom260
  %100 = load i32, i32* %i, align 4
  %idxprom262 = sext i32 %100 to i64
  %arrayidx263 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx261, i64 0, i64 %idxprom262
  %101 = load i32, i32* %j, align 4
  %idxprom264 = sext i32 %101 to i64
  %arrayidx265 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx263, i64 0, i64 %idxprom264
  store i8 %97, i8* %arrayidx265, align 1
  br label %for.inc266

for.inc266:                                       ; preds = %for.body254
  %102 = load i32, i32* %j, align 4
  %inc267 = add nsw i32 %102, 1
  store i32 %inc267, i32* %j, align 4
  br label %for.cond251

for.end268:                                       ; preds = %for.cond251
  br label %for.inc269

for.inc269:                                       ; preds = %for.end268
  %103 = load i32, i32* %i, align 4
  %inc270 = add nsw i32 %103, 1
  store i32 %inc270, i32* %i, align 4
  br label %for.cond247

for.end271:                                       ; preds = %for.cond247
  br label %for.inc272

for.inc272:                                       ; preds = %for.end271
  %104 = load i32, i32* %k, align 4
  %inc273 = add nsw i32 %104, 1
  store i32 %inc273, i32* %k, align 4
  br label %for.cond243

for.end274:                                       ; preds = %for.cond243
  br label %sw.epilog402

sw.default275:                                    ; preds = %if.end55
  %arrayidx276 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 4
  %105 = load i8, i8* %arrayidx276, align 1
  %conv277 = zext i8 %105 to i32
  %arrayidx278 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 2
  %106 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %106 to i32
  %sub280 = sub nsw i32 %conv277, %conv279
  %arrayidx281 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 5
  %107 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %107 to i32
  %arrayidx283 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 1
  %108 = load i8, i8* %arrayidx283, align 1
  %conv284 = zext i8 %108 to i32
  %sub285 = sub nsw i32 %conv282, %conv284
  %mul286 = mul nsw i32 2, %sub285
  %add287 = add nsw i32 %sub280, %mul286
  %arrayidx288 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 6
  %109 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %109 to i32
  %arrayidx290 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 0
  %110 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %110 to i32
  %sub292 = sub nsw i32 %conv289, %conv291
  %mul293 = mul nsw i32 3, %sub292
  %add294 = add nsw i32 %add287, %mul293
  %arrayidx295 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 7
  %111 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %111 to i32
  %112 = load i8, i8* %X, align 1
  %conv297 = zext i8 %112 to i32
  %sub298 = sub nsw i32 %conv296, %conv297
  %mul299 = mul nsw i32 4, %sub298
  %add300 = add nsw i32 %add294, %mul299
  store i32 %add300, i32* %H, align 4
  %arrayidx301 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 4
  %113 = load i8, i8* %arrayidx301, align 1
  %conv302 = zext i8 %113 to i32
  %arrayidx303 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 2
  %114 = load i8, i8* %arrayidx303, align 1
  %conv304 = zext i8 %114 to i32
  %sub305 = sub nsw i32 %conv302, %conv304
  %arrayidx306 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 5
  %115 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %115 to i32
  %arrayidx308 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 1
  %116 = load i8, i8* %arrayidx308, align 1
  %conv309 = zext i8 %116 to i32
  %sub310 = sub nsw i32 %conv307, %conv309
  %mul311 = mul nsw i32 2, %sub310
  %add312 = add nsw i32 %sub305, %mul311
  %arrayidx313 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 6
  %117 = load i8, i8* %arrayidx313, align 1
  %conv314 = zext i8 %117 to i32
  %arrayidx315 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 0
  %118 = load i8, i8* %arrayidx315, align 1
  %conv316 = zext i8 %118 to i32
  %sub317 = sub nsw i32 %conv314, %conv316
  %mul318 = mul nsw i32 3, %sub317
  %add319 = add nsw i32 %add312, %mul318
  %arrayidx320 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 7
  %119 = load i8, i8* %arrayidx320, align 1
  %conv321 = zext i8 %119 to i32
  %120 = load i8, i8* %X, align 1
  %conv322 = zext i8 %120 to i32
  %sub323 = sub nsw i32 %conv321, %conv322
  %mul324 = mul nsw i32 4, %sub323
  %add325 = add nsw i32 %add319, %mul324
  store i32 %add325, i32* %V, align 4
  %121 = load i32, i32* %H, align 4
  %mul326 = mul nsw i32 17, %121
  %add327 = add nsw i32 %mul326, 16
  %shr328 = ashr i32 %add327, 5
  store i32 %shr328, i32* %H, align 4
  %122 = load i32, i32* %V, align 4
  %mul329 = mul nsw i32 17, %122
  %add330 = add nsw i32 %mul329, 16
  %shr331 = ashr i32 %add330, 5
  store i32 %shr331, i32* %V, align 4
  %arrayidx332 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 7
  %123 = load i8, i8* %arrayidx332, align 1
  %conv333 = zext i8 %123 to i32
  %arrayidx334 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 7
  %124 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %124 to i32
  %add336 = add nsw i32 %conv333, %conv335
  %mul337 = mul nsw i32 16, %add336
  store i32 %mul337, i32* %a, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond338

for.cond338:                                      ; preds = %for.inc399, %sw.default275
  %125 = load i32, i32* %k, align 4
  %cmp339 = icmp slt i32 %125, 4
  br i1 %cmp339, label %for.body341, label %for.end401, !prof !318

for.body341:                                      ; preds = %for.cond338
  store i32 0, i32* %i, align 4
  br label %for.cond342

for.cond342:                                      ; preds = %for.inc396, %for.body341
  %126 = load i32, i32* %i, align 4
  %cmp343 = icmp slt i32 %126, 4
  br i1 %cmp343, label %for.body345, label %for.end398, !prof !319

for.body345:                                      ; preds = %for.cond342
  store i32 0, i32* %j, align 4
  br label %for.cond346

for.cond346:                                      ; preds = %for.inc393, %for.body345
  %127 = load i32, i32* %j, align 4
  %cmp347 = icmp slt i32 %127, 4
  br i1 %cmp347, label %for.body349, label %for.end395, !prof !320

for.body349:                                      ; preds = %for.cond346
  %128 = load i32, i32* %a, align 4
  %129 = load i32, i32* %H, align 4
  %130 = load i32, i32* %k, align 4
  %rem350 = srem i32 %130, 2
  %mul351 = mul nsw i32 %rem350, 4
  %131 = load i32, i32* %i, align 4
  %add352 = add nsw i32 %mul351, %131
  %sub353 = sub nsw i32 %add352, 3
  %mul354 = mul nsw i32 %129, %sub353
  %add355 = add nsw i32 %128, %mul354
  %132 = load i32, i32* %V, align 4
  %133 = load i32, i32* %k, align 4
  %div356 = sdiv i32 %133, 2
  %mul357 = mul nsw i32 %div356, 4
  %134 = load i32, i32* %j, align 4
  %add358 = add nsw i32 %mul357, %134
  %sub359 = sub nsw i32 %add358, 3
  %mul360 = mul nsw i32 %132, %sub359
  %add361 = add nsw i32 %add355, %mul360
  %add362 = add nsw i32 %add361, 16
  %shr363 = ashr i32 %add362, 5
  store i32 %shr363, i32* %temp, align 4
  %135 = load i32, i32* %temp, align 4
  %cmp364 = icmp slt i32 %135, 0
  br i1 %cmp364, label %if.then366, label %if.else373, !prof !321

if.then366:                                       ; preds = %for.body349
  %136 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %137 = load i32, i32* %k, align 4
  %idxprom367 = sext i32 %137 to i64
  %arrayidx368 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %136, i64 %idxprom367
  %138 = load i32, i32* %i, align 4
  %idxprom369 = sext i32 %138 to i64
  %arrayidx370 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx368, i64 0, i64 %idxprom369
  %139 = load i32, i32* %j, align 4
  %idxprom371 = sext i32 %139 to i64
  %arrayidx372 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 %idxprom371
  store i8 0, i8* %arrayidx372, align 1
  br label %if.end392

if.else373:                                       ; preds = %for.body349
  %140 = load i32, i32* %temp, align 4
  %cmp374 = icmp sgt i32 %140, 255
  br i1 %cmp374, label %if.then376, label %if.else383, !prof !321

if.then376:                                       ; preds = %if.else373
  %141 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %142 = load i32, i32* %k, align 4
  %idxprom377 = sext i32 %142 to i64
  %arrayidx378 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %141, i64 %idxprom377
  %143 = load i32, i32* %i, align 4
  %idxprom379 = sext i32 %143 to i64
  %arrayidx380 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx378, i64 0, i64 %idxprom379
  %144 = load i32, i32* %j, align 4
  %idxprom381 = sext i32 %144 to i64
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx380, i64 0, i64 %idxprom381
  store i8 -1, i8* %arrayidx382, align 1
  br label %if.end391

if.else383:                                       ; preds = %if.else373
  %145 = load i32, i32* %temp, align 4
  %conv384 = trunc i32 %145 to i8
  %146 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %147 = load i32, i32* %k, align 4
  %idxprom385 = sext i32 %147 to i64
  %arrayidx386 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %146, i64 %idxprom385
  %148 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %148 to i64
  %arrayidx388 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx386, i64 0, i64 %idxprom387
  %149 = load i32, i32* %j, align 4
  %idxprom389 = sext i32 %149 to i64
  %arrayidx390 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx388, i64 0, i64 %idxprom389
  store i8 %conv384, i8* %arrayidx390, align 1
  br label %if.end391

if.end391:                                        ; preds = %if.else383, %if.then376
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.then366
  br label %for.inc393

for.inc393:                                       ; preds = %if.end392
  %150 = load i32, i32* %j, align 4
  %inc394 = add nsw i32 %150, 1
  store i32 %inc394, i32* %j, align 4
  br label %for.cond346

for.end395:                                       ; preds = %for.cond346
  br label %for.inc396

for.inc396:                                       ; preds = %for.end395
  %151 = load i32, i32* %i, align 4
  %inc397 = add nsw i32 %151, 1
  store i32 %inc397, i32* %i, align 4
  br label %for.cond342

for.end398:                                       ; preds = %for.cond342
  br label %for.inc399

for.inc399:                                       ; preds = %for.end398
  %152 = load i32, i32* %k, align 4
  %inc400 = add nsw i32 %152, 1
  store i32 %inc400, i32* %k, align 4
  br label %for.cond338

for.end401:                                       ; preds = %for.cond338
  br label %sw.epilog402

sw.epilog402:                                     ; preds = %for.end401, %for.end274, %for.end241, %for.end208
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_out_pic(%struct.StorablePicture* %pic, i32 %pic_index, [176 x [144 x i8]]* %Pic_Sluma, [88 x [72 x i8]]* %Pic_SChroma_0, [88 x [72 x i8]]* %Pic_SChroma_1, %struct._IO_FILE* %p_out) #0 !prof !322 {
entry:
  %pic.addr = alloca %struct.StorablePicture*, align 8
  %pic_index.addr = alloca i32, align 4
  %Pic_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %Pic_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %Pic_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %p_out.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.StorablePicture* %pic, %struct.StorablePicture** %pic.addr, align 8
  store i32 %pic_index, i32* %pic_index.addr, align 4
  store [176 x [144 x i8]]* %Pic_Sluma, [176 x [144 x i8]]** %Pic_Sluma.addr, align 8
  store [88 x [72 x i8]]* %Pic_SChroma_0, [88 x [72 x i8]]** %Pic_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %Pic_SChroma_1, [88 x [72 x i8]]** %Pic_SChroma_1.addr, align 8
  store %struct._IO_FILE* %p_out, %struct._IO_FILE** %p_out.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 144
  br i1 %cmp, label %for.body, label %for.end10, !prof !323

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 176
  br i1 %cmp2, label %for.body3, label %for.end, !prof !324

for.body3:                                        ; preds = %for.cond1
  %2 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %Pic_Sluma.addr, align 8
  %3 = load i32, i32* %pic_index.addr, align 4
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %2, i64 %idxprom
  %4 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx, i64 0, i64 %idxprom4
  %5 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx5, i64 0, i64 %idxprom6
  %6 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %6 to i32
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call = call i32 @fputc(i32 %conv, %struct._IO_FILE* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %9, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.end10
  %10 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %10, 72
  br i1 %cmp12, label %for.body14, label %for.end32, !prof !325

for.body14:                                       ; preds = %for.cond11
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc27, %for.body14
  %11 = load i32, i32* %j, align 4
  %cmp16 = icmp slt i32 %11, 88
  br i1 %cmp16, label %for.body18, label %for.end29, !prof !326

for.body18:                                       ; preds = %for.cond15
  %12 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %Pic_SChroma_0.addr, align 8
  %13 = load i32, i32* %pic_index.addr, align 4
  %idxprom19 = zext i32 %13 to i64
  %arrayidx20 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %12, i64 %idxprom19
  %14 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx20, i64 0, i64 %idxprom21
  %15 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %15 to i64
  %arrayidx24 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx22, i64 0, i64 %idxprom23
  %16 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %16 to i32
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call26 = call i32 @fputc(i32 %conv25, %struct._IO_FILE* %17)
  br label %for.inc27

for.inc27:                                        ; preds = %for.body18
  %18 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %18, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond15

for.end29:                                        ; preds = %for.cond15
  br label %for.inc30

for.inc30:                                        ; preds = %for.end29
  %19 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %19, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc52, %for.end32
  %20 = load i32, i32* %i, align 4
  %cmp34 = icmp slt i32 %20, 72
  br i1 %cmp34, label %for.body36, label %for.end54, !prof !325

for.body36:                                       ; preds = %for.cond33
  store i32 0, i32* %j, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc49, %for.body36
  %21 = load i32, i32* %j, align 4
  %cmp38 = icmp slt i32 %21, 88
  br i1 %cmp38, label %for.body40, label %for.end51, !prof !326

for.body40:                                       ; preds = %for.cond37
  %22 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %Pic_SChroma_1.addr, align 8
  %23 = load i32, i32* %pic_index.addr, align 4
  %idxprom41 = zext i32 %23 to i64
  %arrayidx42 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %22, i64 %idxprom41
  %24 = load i32, i32* %j, align 4
  %idxprom43 = sext i32 %24 to i64
  %arrayidx44 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx42, i64 0, i64 %idxprom43
  %25 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %25 to i64
  %arrayidx46 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx44, i64 0, i64 %idxprom45
  %26 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %26 to i32
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call48 = call i32 @fputc(i32 %conv47, %struct._IO_FILE* %27)
  br label %for.inc49

for.inc49:                                        ; preds = %for.body40
  %28 = load i32, i32* %j, align 4
  %inc50 = add nsw i32 %28, 1
  store i32 %inc50, i32* %j, align 4
  br label %for.cond37

for.end51:                                        ; preds = %for.cond37
  br label %for.inc52

for.inc52:                                        ; preds = %for.end51
  %29 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %29, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond33

for.end54:                                        ; preds = %for.cond33
  ret void
}

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !prof !96 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %AnnexbFileName = alloca [100 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %poc = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call noalias i8* @malloc(i64 84) #6
  %0 = bitcast i8* %call to %struct.ImageParameters*
  store %struct.ImageParameters* %0, %struct.ImageParameters** @img_inst, align 8
  %1 = load i32, i32* %argc.addr, align 4
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %if.then, label %if.end, !prof !327

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 0
  %3 = load i8*, i8** %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i32 0, i32 0), i8* %3)
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %argc.addr, align 4
  %cmp2 = icmp eq i32 %4, 3
  br i1 %cmp2, label %if.then3, label %if.else, !prof !118

if.then3:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %5 = load i8**, i8*** %argv.addr, align 8
  %arrayidx4 = getelementptr inbounds i8*, i8** %5, i64 1
  %6 = load i8*, i8** %arrayidx4, align 8
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.3, i32 0, i32 0), i8* %6) #6
  br label %if.end8

if.else:                                          ; preds = %if.end
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %call7 = call i8* @strcpy(i8* %arraydecay6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.4, i32 0, i32 0)) #6
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then3
  %arraydecay9 = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %call10 = call %struct._IO_FILE* @fopen(i8* %arraydecay9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  store %struct._IO_FILE* %call10, %struct._IO_FILE** @bitstr, align 8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %cmp11 = icmp eq %struct._IO_FILE* %7, null
  br i1 %cmp11, label %if.then12, label %if.end14, !prof !327

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 @puts(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i32 0, i32 0))
  call void @exit(i32 -1) #5
  unreachable

if.end14:                                         ; preds = %if.end8
  %call15 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0))
  store %struct._IO_FILE* %call15, %struct._IO_FILE** @p_out, align 8
  store i32 0, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([3 x %struct.StorablePicture]* @Pic to i8*), i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0, i32 0, i32 0), i8 0, i64 76032, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0, i32 0, i32 0), i8 0, i64 19008, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0, i32 0, i32 0), i8 0, i64 19008, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x %struct.StorablePictureInfo], [3 x %struct.StorablePictureInfo]* @Pic_info, i32 0, i32 0, i32 0, i32 0, i32 0), i8 0, i64 78408, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([2 x [22 x [18 x i8]]], [2 x [22 x [18 x i8]]]* @nz_coeff_chroma, i32 0, i32 0, i32 0, i32 0), i8 0, i64 792, i1 false)
  %8 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %9 = bitcast %struct.ImageParameters* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 84, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %poc, align 4
  br label %while.body

while.body:                                       ; preds = %if.end41, %if.end14
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %call16 = call i32 @GetAnnexbNALU(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, %struct._IO_FILE* %10)
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %if.then18, label %if.end19, !prof !328

if.then18:                                        ; preds = %while.body
  br label %while.end

if.end19:                                         ; preds = %while.body
  %11 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %call20 = call i32 @EBSPtoRBSP(i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i32 %11, i32 1)
  store i32 %call20, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %12 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %sub = sub i32 %12, 1
  call void @RBSPtoSODB(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, i32 %sub)
  call void @decode_main(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, %struct.StorablePicture* getelementptr inbounds ([3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i32 0, i32 0), [176 x [144 x i8]]* getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0), %struct.StorablePictureInfo* getelementptr inbounds ([3 x %struct.StorablePictureInfo], [3 x %struct.StorablePictureInfo]* @Pic_info, i32 0, i32 0))
  %13 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  %cmp21 = icmp eq i32 %13, 5
  br i1 %cmp21, label %if.then23, label %lor.lhs.false, !prof !329

lor.lhs.false:                                    ; preds = %if.end19
  %14 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  %cmp22 = icmp eq i32 %14, 1
  br i1 %cmp22, label %if.then23, label %if.end41, !prof !107

if.then23:                                        ; preds = %lor.lhs.false, %if.end19
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %if.then23
  %15 = load i32, i32* %j, align 4
  %cmp24 = icmp slt i32 %15, 3
  br i1 %cmp24, label %for.body, label %for.end40, !prof !330

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %16 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %16, 3
  br i1 %cmp26, label %for.body27, label %for.end, !prof !331

for.body27:                                       ; preds = %for.cond25
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %arrayidx28 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom
  %memoccupied = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx28, i32 0, i32 1
  %18 = load i8, i8* %memoccupied, align 4
  %conv = zext i8 %18 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.end36, !prof !332

land.lhs.true:                                    ; preds = %for.body27
  %19 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %19 to i64
  %arrayidx30 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom29
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx30, i32 0, i32 0
  %20 = load i32, i32* %Picorder_num, align 8
  %21 = load i32, i32* %poc, align 4
  %cmp31 = icmp eq i32 %20, %21
  br i1 %cmp31, label %if.then33, label %if.end36, !prof !333

if.then33:                                        ; preds = %land.lhs.true
  %22 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %22 to i64
  %arrayidx35 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom34
  %23 = load i32, i32* %i, align 4
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @p_out, align 8
  call void @write_out_pic(%struct.StorablePicture* %arrayidx35, i32 %23, [176 x [144 x i8]]* getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0), %struct._IO_FILE* %24)
  %25 = load i32, i32* %poc, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %poc, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true, %for.body27
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %26 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %26, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond25

for.end:                                          ; preds = %for.cond25
  br label %for.inc38

for.inc38:                                        ; preds = %for.end
  %27 = load i32, i32* %j, align 4
  %inc39 = add nsw i32 %27, 1
  store i32 %inc39, i32* %j, align 4
  br label %for.cond

for.end40:                                        ; preds = %for.cond
  br label %if.end41

if.end41:                                         ; preds = %for.end40, %lor.lhs.false
  br label %while.body

while.end:                                        ; preds = %if.then18
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %call42 = call i32 @fclose(%struct._IO_FILE* %28)
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @p_out, align 8
  %call43 = call i32 @fclose(%struct._IO_FILE* %29)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #4

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #4

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #1

declare dso_local i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip1y(i32 %x) #0 !prof !334 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 255, %0
  br i1 %cmp, label %if.then, label %if.else, !prof !335

if.then:                                          ; preds = %entry
  store i32 255, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp sgt i32 0, %1
  br i1 %cmp1, label %if.then2, label %if.else3, !prof !336

if.then2:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip1c(i32 %x) #0 !prof !205 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 255, %0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 255, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp sgt i32 0, %1
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip3(i32 %x, i32 %y, i32 %z) #0 !prof !337 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  %0 = load i32, i32* %z.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else, !prof !338

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %z.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sgt i32 %3, %4
  br i1 %cmp1, label %if.then2, label %if.else3, !prof !339

if.then2:                                         ; preds = %if.else
  %5 = load i32, i32* %y.addr, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %6 = load i32, i32* %z.addr, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @minpositive(i32 %x, i32 %y) #0 !prof !175 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.else4, !prof !340

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sge i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.else4, !prof !341

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp2 = icmp sgt i32 %2, %3
  br i1 %cmp2, label %if.then3, label %if.else, !prof !342

if.then3:                                         ; preds = %if.then
  %4 = load i32, i32* %y.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %x.addr, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.else4:                                         ; preds = %land.lhs.true, %entry
  %6 = load i32, i32* %x.addr, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %if.then6, label %if.else7, !prof !343

if.then6:                                         ; preds = %if.else4
  %8 = load i32, i32* %y.addr, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.else7:                                         ; preds = %if.else4
  %9 = load i32, i32* %x.addr, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else7, %if.then6, %if.else, %if.then3
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @InverseRasterScan(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e) #0 !prof !205 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %e.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %e, i32* %e.addr, align 4
  %0 = load i32, i32* %e.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %d.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 %2, %3
  %rem = srem i32 %1, %div
  %4 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %rem, %4
  store i32 %mul, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %a.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %div1 = sdiv i32 %6, %7
  %div2 = sdiv i32 %5, %div1
  %8 = load i32, i32* %c.addr, align 4
  %mul3 = mul nsw i32 %div2, %8
  store i32 %mul3, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @on_of_three(i8 zeroext %a, i8 zeroext %x, i8 zeroext %y, i8 zeroext %z) #0 !prof !205 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %x.addr = alloca i8, align 1
  %y.addr = alloca i8, align 1
  %z.addr = alloca i8, align 1
  store i8 %a, i8* %a.addr, align 1
  store i8 %x, i8* %x.addr, align 1
  store i8 %y, i8* %y.addr, align 1
  store i8 %z, i8* %z.addr, align 1
  %0 = load i8, i8* %x.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %a.addr, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %y.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %a.addr, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp ne i32 %conv3, %conv4
  br i1 %cmp5, label %land.lhs.true7, label %lor.lhs.false

land.lhs.true7:                                   ; preds = %land.lhs.true
  %4 = load i8, i8* %z.addr, align 1
  %conv8 = zext i8 %4 to i32
  %5 = load i8, i8* %a.addr, align 1
  %conv9 = zext i8 %5 to i32
  %cmp10 = icmp ne i32 %conv8, %conv9
  br i1 %cmp10, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %6 = load i8, i8* %x.addr, align 1
  %conv12 = zext i8 %6 to i32
  %7 = load i8, i8* %a.addr, align 1
  %conv13 = zext i8 %7 to i32
  %cmp14 = icmp ne i32 %conv12, %conv13
  br i1 %cmp14, label %land.lhs.true16, label %lor.lhs.false26

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %8 = load i8, i8* %y.addr, align 1
  %conv17 = zext i8 %8 to i32
  %9 = load i8, i8* %a.addr, align 1
  %conv18 = zext i8 %9 to i32
  %cmp19 = icmp eq i32 %conv17, %conv18
  br i1 %cmp19, label %land.lhs.true21, label %lor.lhs.false26

land.lhs.true21:                                  ; preds = %land.lhs.true16
  %10 = load i8, i8* %z.addr, align 1
  %conv22 = zext i8 %10 to i32
  %11 = load i8, i8* %a.addr, align 1
  %conv23 = zext i8 %11 to i32
  %cmp24 = icmp ne i32 %conv22, %conv23
  br i1 %cmp24, label %if.then, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %land.lhs.true21, %land.lhs.true16, %lor.lhs.false
  %12 = load i8, i8* %x.addr, align 1
  %conv27 = zext i8 %12 to i32
  %13 = load i8, i8* %a.addr, align 1
  %conv28 = zext i8 %13 to i32
  %cmp29 = icmp ne i32 %conv27, %conv28
  br i1 %cmp29, label %land.lhs.true31, label %if.else

land.lhs.true31:                                  ; preds = %lor.lhs.false26
  %14 = load i8, i8* %y.addr, align 1
  %conv32 = zext i8 %14 to i32
  %15 = load i8, i8* %a.addr, align 1
  %conv33 = zext i8 %15 to i32
  %cmp34 = icmp ne i32 %conv32, %conv33
  br i1 %cmp34, label %land.lhs.true36, label %if.else

land.lhs.true36:                                  ; preds = %land.lhs.true31
  %16 = load i8, i8* %z.addr, align 1
  %conv37 = zext i8 %16 to i32
  %17 = load i8, i8* %a.addr, align 1
  %conv38 = zext i8 %17 to i32
  %cmp39 = icmp eq i32 %conv37, %conv38
  br i1 %cmp39, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true36, %land.lhs.true21, %land.lhs.true7
  store i8 1, i8* %retval, align 1
  br label %return

if.else:                                          ; preds = %land.lhs.true36, %land.lhs.true31, %lor.lhs.false26
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else, %if.then
  %18 = load i8, i8* %retval, align 1
  ret i8 %18
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @median(i32 %x, i32 %y, i32 %z) #0 !prof !344 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp sge i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else6, !prof !345

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %z.addr, align 4
  %cmp1 = icmp sge i32 %2, %3
  br i1 %cmp1, label %if.then2, label %if.else, !prof !346

if.then2:                                         ; preds = %if.then
  %4 = load i32, i32* %y.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %x.addr, align 4
  %6 = load i32, i32* %z.addr, align 4
  %cmp3 = icmp sge i32 %5, %6
  br i1 %cmp3, label %if.then4, label %if.else5, !prof !102

if.then4:                                         ; preds = %if.else
  %7 = load i32, i32* %z.addr, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %if.else
  %8 = load i32, i32* %x.addr, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.else6:                                         ; preds = %entry
  %9 = load i32, i32* %x.addr, align 4
  %10 = load i32, i32* %z.addr, align 4
  %cmp7 = icmp sge i32 %9, %10
  br i1 %cmp7, label %if.then8, label %if.else9, !prof !327

if.then8:                                         ; preds = %if.else6
  %11 = load i32, i32* %x.addr, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

if.else9:                                         ; preds = %if.else6
  %12 = load i32, i32* %y.addr, align 4
  %13 = load i32, i32* %z.addr, align 4
  %cmp10 = icmp sge i32 %12, %13
  br i1 %cmp10, label %if.then11, label %if.else12, !prof !118

if.then11:                                        ; preds = %if.else9
  %14 = load i32, i32* %z.addr, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

if.else12:                                        ; preds = %if.else9
  %15 = load i32, i32* %y.addr, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else12, %if.then11, %if.then8, %if.else5, %if.then4, %if.then2
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @six_tab(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e, i32 %f) #0 !prof !205 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %e.addr = alloca i32, align 4
  %f.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %e, i32* %e.addr, align 4
  store i32 %f, i32* %f.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 5, %1
  %sub = sub nsw i32 %0, %mul
  %2 = load i32, i32* %c.addr, align 4
  %mul1 = mul nsw i32 20, %2
  %add = add nsw i32 %sub, %mul1
  %3 = load i32, i32* %d.addr, align 4
  %mul2 = mul nsw i32 20, %3
  %add3 = add nsw i32 %add, %mul2
  %4 = load i32, i32* %e.addr, align 4
  %mul4 = mul nsw i32 5, %4
  %sub5 = sub nsw i32 %add3, %mul4
  %5 = load i32, i32* %f.addr, align 4
  %add6 = add nsw i32 %sub5, %5
  ret i32 %add6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @GetAnnexbNALU(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct._IO_FILE* %bits) #0 !prof !347 {
entry:
  %retval = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bits.addr = alloca %struct._IO_FILE*, align 8
  %info2 = alloca i32, align 4
  %info3 = alloca i32, align 4
  %pos = alloca i32, align 4
  %StartCodeFound = alloca i32, align 4
  %rewind = alloca i32, align 4
  %Buf = alloca i8*, align 8
  %LeadingZero8BitsCount = alloca i32, align 4
  %TrailingZero8Bits = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct._IO_FILE* %bits, %struct._IO_FILE** %bits.addr, align 8
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %LeadingZero8BitsCount, align 4
  store i32 0, i32* %TrailingZero8Bits, align 4
  %call = call noalias i8* @calloc(i64 2450, i64 1) #6
  store i8* %call, i8** %Buf, align 8
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end, !prof !348

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call2 = call i32 @feof(%struct._IO_FILE* %0) #6
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %land.end, label %land.rhs, !prof !349

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call3 = call i32 @fgetc(%struct._IO_FILE* %1)
  %conv = trunc i32 %call3 to i8
  %2 = load i8*, i8** %Buf, align 8
  %3 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pos, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  %conv4 = zext i8 %conv to i32
  %cmp5 = icmp eq i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp5, %land.rhs ]
  br i1 %4, label %while.body, label %while.end, !prof !350

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call7 = call i32 @feof(%struct._IO_FILE* %5) #6
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then9, label %if.end14, !prof !328

if.then9:                                         ; preds = %while.end
  %6 = load i32, i32* %pos, align 4
  %cmp10 = icmp eq i32 %6, 0
  br i1 %cmp10, label %if.then12, label %if.else, !prof !118

if.then12:                                        ; preds = %if.then9
  %7 = load i8*, i8** %Buf, align 8
  call void @free(i8* %7) #6
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then9
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1.16, i32 0, i32 0))
  %8 = load i8*, i8** %Buf, align 8
  call void @free(i8* %8) #6
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %while.end
  %9 = load i8*, i8** %Buf, align 8
  %10 = load i32, i32* %pos, align 4
  %sub = sub nsw i32 %10, 1
  %idxprom15 = sext i32 %sub to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 %idxprom15
  %11 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %11 to i32
  %cmp18 = icmp ne i32 %conv17, 1
  br i1 %cmp18, label %if.then20, label %if.end22, !prof !351

if.then20:                                        ; preds = %if.end14
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.17, i32 0, i32 0))
  %12 = load i8*, i8** %Buf, align 8
  call void @free(i8* %12) #6
  store i32 -1, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end14
  %13 = load i32, i32* %pos, align 4
  %cmp23 = icmp slt i32 %13, 3
  br i1 %cmp23, label %if.then25, label %if.else27, !prof !351

if.then25:                                        ; preds = %if.end22
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.17, i32 0, i32 0))
  %14 = load i8*, i8** %Buf, align 8
  call void @free(i8* %14) #6
  store i32 -1, i32* %retval, align 4
  br label %return

if.else27:                                        ; preds = %if.end22
  %15 = load i32, i32* %pos, align 4
  %cmp28 = icmp eq i32 %15, 3
  br i1 %cmp28, label %if.then30, label %if.else31, !prof !351

if.then30:                                        ; preds = %if.else27
  %16 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %16, i32 0, i32 0
  store i32 3, i32* %startcodeprefix_len, align 8
  store i32 0, i32* %LeadingZero8BitsCount, align 4
  br label %if.end34

if.else31:                                        ; preds = %if.else27
  %17 = load i32, i32* %pos, align 4
  %sub32 = sub nsw i32 %17, 4
  store i32 %sub32, i32* %LeadingZero8BitsCount, align 4
  %18 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len33 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %18, i32 0, i32 0
  store i32 4, i32* %startcodeprefix_len33, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else31, %if.then30
  br label %if.end35

if.end35:                                         ; preds = %if.end34
  %19 = load i32, i32* @IsFirstByteStreamNALU, align 4
  %tobool36 = icmp ne i32 %19, 0
  br i1 %tobool36, label %if.end41, label %land.lhs.true, !prof !329

land.lhs.true:                                    ; preds = %if.end35
  %20 = load i32, i32* %LeadingZero8BitsCount, align 4
  %cmp37 = icmp sgt i32 %20, 0
  br i1 %cmp37, label %if.then39, label %if.end41, !prof !352

if.then39:                                        ; preds = %land.lhs.true
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3.18, i32 0, i32 0))
  %21 = load i8*, i8** %Buf, align 8
  call void @free(i8* %21) #6
  store i32 -1, i32* %retval, align 4
  br label %return

if.end41:                                         ; preds = %land.lhs.true, %if.end35
  store i32 0, i32* @IsFirstByteStreamNALU, align 4
  store i32 0, i32* %StartCodeFound, align 4
  store i32 0, i32* %info2, align 4
  store i32 0, i32* %info3, align 4
  br label %while.cond42

while.cond42:                                     ; preds = %lor.end, %if.end41
  %22 = load i32, i32* %StartCodeFound, align 4
  %tobool43 = icmp ne i32 %22, 0
  %lnot = xor i1 %tobool43, true
  br i1 %lnot, label %while.body44, label %while.end106, !prof !353

while.body44:                                     ; preds = %while.cond42
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call45 = call i32 @feof(%struct._IO_FILE* %23) #6
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.then47, label %if.end84, !prof !354

if.then47:                                        ; preds = %while.body44
  br label %while.cond48

while.cond48:                                     ; preds = %while.body56, %if.then47
  %24 = load i8*, i8** %Buf, align 8
  %25 = load i32, i32* %pos, align 4
  %sub49 = sub nsw i32 %25, 2
  %26 = load i32, i32* %TrailingZero8Bits, align 4
  %sub50 = sub nsw i32 %sub49, %26
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %24, i64 %idxprom51
  %27 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %27 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %while.body56, label %while.end58, !prof !327

while.body56:                                     ; preds = %while.cond48
  %28 = load i32, i32* %TrailingZero8Bits, align 4
  %inc57 = add nsw i32 %28, 1
  store i32 %inc57, i32* %TrailingZero8Bits, align 4
  br label %while.cond48

while.end58:                                      ; preds = %while.cond48
  %29 = load i32, i32* %pos, align 4
  %sub59 = sub nsw i32 %29, 1
  %30 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len60 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %30, i32 0, i32 0
  %31 = load i32, i32* %startcodeprefix_len60, align 8
  %sub61 = sub nsw i32 %sub59, %31
  %32 = load i32, i32* %LeadingZero8BitsCount, align 4
  %sub62 = sub nsw i32 %sub61, %32
  %33 = load i32, i32* %TrailingZero8Bits, align 4
  %sub63 = sub nsw i32 %sub62, %33
  %34 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %34, i32 0, i32 1
  store i32 %sub63, i32* %len, align 4
  %35 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len64 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %35, i32 0, i32 1
  %36 = load i32, i32* %len64, align 4
  %cmp65 = icmp ugt i32 %36, 2450
  br i1 %cmp65, label %if.then67, label %if.end68, !prof !327

if.then67:                                        ; preds = %while.end58
  call void @exit(i32 -1) #5
  unreachable

if.end68:                                         ; preds = %while.end58
  %37 = load i8*, i8** %nalu_buf.addr, align 8
  %38 = load i8*, i8** %Buf, align 8
  %39 = load i32, i32* %LeadingZero8BitsCount, align 4
  %40 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len69 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %40, i32 0, i32 0
  %41 = load i32, i32* %startcodeprefix_len69, align 8
  %add = add nsw i32 %39, %41
  %idxprom70 = sext i32 %add to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %38, i64 %idxprom70
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len72 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %42, i32 0, i32 1
  %43 = load i32, i32* %len72, align 4
  %conv73 = zext i32 %43 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %arrayidx71, i64 %conv73, i1 false)
  %44 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %45 to i32
  %shr = ashr i32 %conv75, 7
  %and = and i32 %shr, 1
  %46 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %forbidden_bit = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %46, i32 0, i32 4
  store i32 %and, i32* %forbidden_bit, align 8
  %47 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %48 to i32
  %shr78 = ashr i32 %conv77, 5
  %and79 = and i32 %shr78, 3
  %49 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %49, i32 0, i32 3
  store i32 %and79, i32* %nal_reference_idc, align 4
  %50 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx80, align 1
  %conv81 = zext i8 %51 to i32
  %and82 = and i32 %conv81, 31
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %52, i32 0, i32 2
  store i32 %and82, i32* %nal_unit_type, align 8
  %53 = load i8*, i8** %Buf, align 8
  call void @free(i8* %53) #6
  %54 = load i32, i32* %pos, align 4
  %sub83 = sub nsw i32 %54, 1
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %while.body44
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call85 = call i32 @fgetc(%struct._IO_FILE* %55)
  %conv86 = trunc i32 %call85 to i8
  %56 = load i8*, i8** %Buf, align 8
  %57 = load i32, i32* %pos, align 4
  %inc87 = add nsw i32 %57, 1
  store i32 %inc87, i32* %pos, align 4
  %idxprom88 = sext i32 %57 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %56, i64 %idxprom88
  store i8 %conv86, i8* %arrayidx89, align 1
  %58 = load i8*, i8** %Buf, align 8
  %59 = load i32, i32* %pos, align 4
  %sub90 = sub nsw i32 %59, 4
  %idxprom91 = sext i32 %sub90 to i64
  %arrayidx92 = getelementptr inbounds i8, i8* %58, i64 %idxprom91
  %call93 = call i32 @FindStartCode(i8* %arrayidx92, i32 3)
  store i32 %call93, i32* %info3, align 4
  %60 = load i32, i32* %info3, align 4
  %cmp94 = icmp ne i32 %60, 1
  br i1 %cmp94, label %if.then96, label %if.end101, !prof !355

if.then96:                                        ; preds = %if.end84
  %61 = load i8*, i8** %Buf, align 8
  %62 = load i32, i32* %pos, align 4
  %sub97 = sub nsw i32 %62, 3
  %idxprom98 = sext i32 %sub97 to i64
  %arrayidx99 = getelementptr inbounds i8, i8* %61, i64 %idxprom98
  %call100 = call i32 @FindStartCode(i8* %arrayidx99, i32 2)
  store i32 %call100, i32* %info2, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.then96, %if.end84
  %63 = load i32, i32* %info2, align 4
  %cmp102 = icmp eq i32 %63, 1
  br i1 %cmp102, label %lor.end, label %lor.rhs, !prof !356

lor.rhs:                                          ; preds = %if.end101
  %64 = load i32, i32* %info3, align 4
  %cmp104 = icmp eq i32 %64, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end101
  %65 = phi i1 [ true, %if.end101 ], [ %cmp104, %lor.rhs ]
  %lor.ext = zext i1 %65 to i32
  store i32 %lor.ext, i32* %StartCodeFound, align 4
  br label %while.cond42

while.end106:                                     ; preds = %while.cond42
  %66 = load i32, i32* %info3, align 4
  %cmp107 = icmp eq i32 %66, 1
  br i1 %cmp107, label %if.then109, label %if.end121, !prof !357

if.then109:                                       ; preds = %while.end106
  br label %while.cond110

while.cond110:                                    ; preds = %while.body118, %if.then109
  %67 = load i8*, i8** %Buf, align 8
  %68 = load i32, i32* %pos, align 4
  %sub111 = sub nsw i32 %68, 5
  %69 = load i32, i32* %TrailingZero8Bits, align 4
  %sub112 = sub nsw i32 %sub111, %69
  %idxprom113 = sext i32 %sub112 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %67, i64 %idxprom113
  %70 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %70 to i32
  %cmp116 = icmp eq i32 %conv115, 0
  br i1 %cmp116, label %while.body118, label %while.end120, !prof !352

while.body118:                                    ; preds = %while.cond110
  %71 = load i32, i32* %TrailingZero8Bits, align 4
  %inc119 = add nsw i32 %71, 1
  store i32 %inc119, i32* %TrailingZero8Bits, align 4
  br label %while.cond110

while.end120:                                     ; preds = %while.cond110
  br label %if.end121

if.end121:                                        ; preds = %while.end120, %while.end106
  store i32 0, i32* %rewind, align 4
  %72 = load i32, i32* %info3, align 4
  %cmp122 = icmp eq i32 %72, 1
  br i1 %cmp122, label %if.then124, label %if.else125, !prof !357

if.then124:                                       ; preds = %if.end121
  store i32 -4, i32* %rewind, align 4
  br label %if.end132

if.else125:                                       ; preds = %if.end121
  %73 = load i32, i32* %info2, align 4
  %cmp126 = icmp eq i32 %73, 1
  br i1 %cmp126, label %if.then128, label %if.else129

if.then128:                                       ; preds = %if.else125
  store i32 -3, i32* %rewind, align 4
  br label %if.end131

if.else129:                                       ; preds = %if.else125
  %call130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4.19, i32 0, i32 0))
  br label %if.end131

if.end131:                                        ; preds = %if.else129, %if.then128
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.then124
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %75 = load i32, i32* %rewind, align 4
  %conv133 = sext i32 %75 to i64
  %call134 = call i32 @fseek(%struct._IO_FILE* %74, i64 %conv133, i32 1)
  %cmp135 = icmp ne i32 0, %call134
  br i1 %cmp135, label %if.then137, label %if.end139, !prof !352

if.then137:                                       ; preds = %if.end132
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %77 = load i32, i32* %rewind, align 4
  %call138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5.20, i32 0, i32 0), i32 %77)
  %78 = load i8*, i8** %Buf, align 8
  call void @free(i8* %78) #6
  call void @exit(i32 -2) #5
  unreachable

if.end139:                                        ; preds = %if.end132
  %79 = load i32, i32* %pos, align 4
  %80 = load i32, i32* %rewind, align 4
  %add140 = add nsw i32 %79, %80
  %81 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len141 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %81, i32 0, i32 0
  %82 = load i32, i32* %startcodeprefix_len141, align 8
  %sub142 = sub nsw i32 %add140, %82
  %83 = load i32, i32* %LeadingZero8BitsCount, align 4
  %sub143 = sub nsw i32 %sub142, %83
  %84 = load i32, i32* %TrailingZero8Bits, align 4
  %sub144 = sub nsw i32 %sub143, %84
  %85 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len145 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %85, i32 0, i32 1
  store i32 %sub144, i32* %len145, align 4
  %86 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len146 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %86, i32 0, i32 1
  %87 = load i32, i32* %len146, align 4
  %cmp147 = icmp ugt i32 %87, 2450
  br i1 %cmp147, label %if.then149, label %if.end150, !prof !352

if.then149:                                       ; preds = %if.end139
  call void @exit(i32 -1) #5
  unreachable

if.end150:                                        ; preds = %if.end139
  %88 = load i8*, i8** %nalu_buf.addr, align 8
  %89 = load i8*, i8** %Buf, align 8
  %90 = load i32, i32* %LeadingZero8BitsCount, align 4
  %91 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len151 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %91, i32 0, i32 0
  %92 = load i32, i32* %startcodeprefix_len151, align 8
  %add152 = add nsw i32 %90, %92
  %idxprom153 = sext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds i8, i8* %89, i64 %idxprom153
  %93 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len155 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %93, i32 0, i32 1
  %94 = load i32, i32* %len155, align 4
  %conv156 = zext i32 %94 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %arrayidx154, i64 %conv156, i1 false)
  %95 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx157 = getelementptr inbounds i8, i8* %95, i64 0
  %96 = load i8, i8* %arrayidx157, align 1
  %conv158 = zext i8 %96 to i32
  %shr159 = ashr i32 %conv158, 7
  %and160 = and i32 %shr159, 1
  %97 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %forbidden_bit161 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %97, i32 0, i32 4
  store i32 %and160, i32* %forbidden_bit161, align 8
  %98 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %98, i64 0
  %99 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %99 to i32
  %shr164 = ashr i32 %conv163, 5
  %and165 = and i32 %shr164, 3
  %100 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc166 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %100, i32 0, i32 3
  store i32 %and165, i32* %nal_reference_idc166, align 4
  %101 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %101, i64 0
  %102 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %102 to i32
  %and169 = and i32 %conv168, 31
  %103 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type170 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %103, i32 0, i32 2
  store i32 %and169, i32* %nal_unit_type170, align 8
  %104 = load i8*, i8** %Buf, align 8
  call void @free(i8* %104) #6
  %105 = load i32, i32* %pos, align 4
  %106 = load i32, i32* %rewind, align 4
  %add171 = add nsw i32 %105, %106
  store i32 %add171, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end150, %if.end68, %if.then39, %if.then25, %if.then20, %if.else, %if.then12
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #4

; Function Attrs: nounwind
declare dso_local i32 @feof(%struct._IO_FILE*) #4

declare dso_local i32 @fgetc(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @FindStartCode(i8* %Buf, i32 %zeros_in_startcode) #0 !prof !358 !PGOFuncName !359 {
entry:
  %Buf.addr = alloca i8*, align 8
  %zeros_in_startcode.addr = alloca i32, align 4
  %info = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %Buf, i8** %Buf.addr, align 8
  store i32 %zeros_in_startcode, i32* %zeros_in_startcode.addr, align 4
  store i32 1, i32* %info, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %zeros_in_startcode.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end, !prof !360

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %Buf.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end, !prof !361

if.then:                                          ; preds = %for.body
  store i32 0, i32* %info, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i8*, i8** %Buf.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 %idxprom3
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  %cmp6 = icmp ne i32 %conv5, 1
  br i1 %cmp6, label %if.then8, label %if.end9, !prof !362

if.then8:                                         ; preds = %for.end
  store i32 0, i32* %info, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %for.end
  %9 = load i32, i32* %info, align 4
  ret i32 %9
}

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @EBSPtoRBSP(i8* %streamBuffer, i32 %end_bytepos, i32 %begin_bytepos) #0 !prof !94 {
entry:
  %retval = alloca i32, align 4
  %streamBuffer.addr = alloca i8*, align 8
  %end_bytepos.addr = alloca i32, align 4
  %begin_bytepos.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  store i8* %streamBuffer, i8** %streamBuffer.addr, align 8
  store i32 %end_bytepos, i32* %end_bytepos.addr, align 4
  store i32 %begin_bytepos, i32* %begin_bytepos.addr, align 4
  store i32 0, i32* %count, align 4
  %0 = load i32, i32* %end_bytepos.addr, align 4
  %1 = load i32, i32* %begin_bytepos.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end, !prof !351

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %end_bytepos.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %begin_bytepos.addr, align 4
  store i32 %3, i32* %j, align 4
  %4 = load i32, i32* %begin_bytepos.addr, align 4
  store i32 %4, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %end_bytepos.addr, align 4
  %cmp1 = icmp slt i32 %5, %6
  br i1 %cmp1, label %for.body, label %for.end, !prof !363

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %count, align 4
  %cmp2 = icmp eq i32 %7, 2
  br i1 %cmp2, label %land.lhs.true, label %if.end6, !prof !364

land.lhs.true:                                    ; preds = %for.body
  %8 = load i8*, i8** %streamBuffer.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i32
  %cmp3 = icmp eq i32 %conv, 3
  br i1 %cmp3, label %if.then5, label %if.end6, !prof !327

if.then5:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %for.body
  %12 = load i8*, i8** %streamBuffer.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %13 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %14 = load i8, i8* %arrayidx8, align 1
  %15 = load i8*, i8** %streamBuffer.addr, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %16 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %15, i64 %idxprom9
  store i8 %14, i8* %arrayidx10, align 1
  %17 = load i8*, i8** %streamBuffer.addr, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %18 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i64 %idxprom11
  %19 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %19 to i32
  %cmp14 = icmp eq i32 %conv13, 0
  br i1 %cmp14, label %if.then16, label %if.else, !prof !365

if.then16:                                        ; preds = %if.end6
  %20 = load i32, i32* %count, align 4
  %inc17 = add nsw i32 %20, 1
  store i32 %inc17, i32* %count, align 4
  br label %if.end18

if.else:                                          ; preds = %if.end6
  store i32 0, i32* %count, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  %21 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %22 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %j, align 4
  store i32 %23, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RBSPtoSODB(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %len) #0 !prof !94 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 8
  br i1 %cmp, label %for.body, label %for.end, !prof !366

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i32, i32* %len.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %3 to i32
  %4 = load i8, i8* %i, align 1
  %conv3 = zext i8 %4 to i32
  %shl = shl i32 1, %conv3
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end, !prof !367

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i8, i8* %i, align 1
  %inc = add i8 %5, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %6 = load i32, i32* %len.addr, align 4
  %mul = mul nsw i32 %6, 8
  %add = add nsw i32 %mul, 7
  %7 = load i8, i8* %i, align 1
  %conv4 = zext i8 %7 to i32
  %sub = sub nsw i32 %add, %conv4
  %conv5 = sext i32 %sub to i64
  %8 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %bit_length = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %8, i32 0, i32 5
  store i64 %conv5, i64* %bit_length, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @more_rbsp_data(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !205 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %bit_length = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %2, i32 0, i32 5
  %3 = load i64, i64* %bit_length, align 8
  %cmp = icmp ult i64 %1, %3
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  ret i8 %conv1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ProcessSPS(%struct.seq_parameter_set_rbsp_t* %SPS, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !96 {
entry:
  %SPS.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %profile_idc_tmp = alloca i8, align 1
  %c_set_flgs = alloca i8, align 1
  %lvl_idc_tmp = alloca i8, align 1
  %SPS_id = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.seq_parameter_set_rbsp_t* %SPS, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_8(%struct.NALU_t* %1, i8* %2, i64* %3)
  store i8 %call, i8* %profile_idc_tmp, align 1
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_8(%struct.NALU_t* %4, i8* %5, i64* %6)
  store i8 %call1, i8* %c_set_flgs, align 1
  %7 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_8(%struct.NALU_t* %7, i8* %8, i64* %9)
  store i8 %call2, i8* %lvl_idc_tmp, align 1
  %10 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call3 = call i32 @u_e(%struct.NALU_t* %10, i8* %11, i64* %12)
  store i32 %call3, i32* %SPS_id, align 4
  %13 = load i32, i32* %SPS_id, align 4
  %cmp = icmp ugt i32 %13, 4
  br i1 %cmp, label %if.then, label %if.end, !prof !327

if.then:                                          ; preds = %entry
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %14 = load i8, i8* %profile_idc_tmp, align 1
  %15 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %profile_idc = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %15, i32 0, i32 1
  store i8 %14, i8* %profile_idc, align 1
  %16 = load i8, i8* %c_set_flgs, align 1
  %conv = zext i8 %16 to i32
  %shr = ashr i32 %conv, 7
  %and = and i32 %shr, 1
  %conv4 = trunc i32 %and to i8
  %17 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set0_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %17, i32 0, i32 2
  store i8 %conv4, i8* %constrained_set0_flag, align 2
  %18 = load i8, i8* %c_set_flgs, align 1
  %conv5 = zext i8 %18 to i32
  %shr6 = ashr i32 %conv5, 6
  %and7 = and i32 %shr6, 1
  %conv8 = trunc i32 %and7 to i8
  %19 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set1_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %19, i32 0, i32 3
  store i8 %conv8, i8* %constrained_set1_flag, align 1
  %20 = load i8, i8* %c_set_flgs, align 1
  %conv9 = zext i8 %20 to i32
  %shr10 = ashr i32 %conv9, 5
  %and11 = and i32 %shr10, 1
  %conv12 = trunc i32 %and11 to i8
  %21 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set2_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %21, i32 0, i32 4
  store i8 %conv12, i8* %constrained_set2_flag, align 4
  %22 = load i8, i8* %lvl_idc_tmp, align 1
  %23 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %level_idc = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %23, i32 0, i32 5
  store i8 %22, i8* %level_idc, align 1
  %24 = load i32, i32* %SPS_id, align 4
  %25 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %seq_parameter_set_id = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %25, i32 0, i32 6
  store i32 %24, i32* %seq_parameter_set_id, align 4
  %26 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %Valid = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %26, i32 0, i32 0
  store i8 1, i8* %Valid, align 4
  %27 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %28 = load i8*, i8** %nalu_buf.addr, align 8
  %29 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call i32 @u_e(%struct.NALU_t* %27, i8* %28, i64* %29)
  %30 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %30, i32 0, i32 7
  store i32 %call13, i32* %log2_max_frame_num_minus4, align 4
  %31 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %32 = load i8*, i8** %nalu_buf.addr, align 8
  %33 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call14 = call i32 @u_e(%struct.NALU_t* %31, i8* %32, i64* %33)
  %34 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_order_cnt_type = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %34, i32 0, i32 8
  store i32 %call14, i32* %pic_order_cnt_type, align 4
  %35 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_order_cnt_type15 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %35, i32 0, i32 8
  %36 = load i32, i32* %pic_order_cnt_type15, align 4
  %tobool = icmp ne i32 %36, 0
  br i1 %tobool, label %if.then16, label %if.else, !prof !327

if.then16:                                        ; preds = %if.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call17 = call zeroext i8 @u_1(%struct.NALU_t* %37, i8* %38, i64* %39)
  %40 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %delta_pic_order_always_zero_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %40, i32 0, i32 10
  store i8 %call17, i8* %delta_pic_order_always_zero_flag, align 4
  %41 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %42 = load i8*, i8** %nalu_buf.addr, align 8
  %43 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call18 = call i32 @s_e(%struct.NALU_t* %41, i8* %42, i64* %43)
  %44 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_non_ref_pic = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %44, i32 0, i32 11
  store i32 %call18, i32* %offset_for_non_ref_pic, align 4
  %45 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %46 = load i8*, i8** %nalu_buf.addr, align 8
  %47 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call19 = call i32 @s_e(%struct.NALU_t* %45, i8* %46, i64* %47)
  %48 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_top_to_bottom_field = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %48, i32 0, i32 12
  store i32 %call19, i32* %offset_for_top_to_bottom_field, align 4
  %49 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %50 = load i8*, i8** %nalu_buf.addr, align 8
  %51 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call20 = call i32 @u_e(%struct.NALU_t* %49, i8* %50, i64* %51)
  %52 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %num_ref_frames_in_pic_order_cnt_cycle = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %52, i32 0, i32 13
  store i32 %call20, i32* %num_ref_frames_in_pic_order_cnt_cycle, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then16
  %53 = load i32, i32* %i, align 4
  %54 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %num_ref_frames_in_pic_order_cnt_cycle21 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %54, i32 0, i32 13
  %55 = load i32, i32* %num_ref_frames_in_pic_order_cnt_cycle21, align 4
  %cmp22 = icmp ult i32 %53, %55
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call24 = call i32 @s_e(%struct.NALU_t* %56, i8* %57, i64* %58)
  %59 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_ref_frame = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %59, i32 0, i32 14
  %60 = load i32, i32* %i, align 4
  %idxprom = zext i32 %60 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %offset_for_ref_frame, i64 0, i64 %idxprom
  store i32 %call24, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %61 = load i32, i32* %i, align 4
  %inc = add i32 %61, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end26

if.else:                                          ; preds = %if.end
  %62 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %63 = load i8*, i8** %nalu_buf.addr, align 8
  %64 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call25 = call i32 @u_e(%struct.NALU_t* %62, i8* %63, i64* %64)
  %65 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %65, i32 0, i32 9
  store i32 %call25, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %for.end
  %66 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %67 = load i8*, i8** %nalu_buf.addr, align 8
  %68 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call27 = call i32 @u_e(%struct.NALU_t* %66, i8* %67, i64* %68)
  %69 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %max_num_ref_frames = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %69, i32 0, i32 15
  store i32 %call27, i32* %max_num_ref_frames, align 4
  %70 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %71 = load i8*, i8** %nalu_buf.addr, align 8
  %72 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call28 = call zeroext i8 @u_1(%struct.NALU_t* %70, i8* %71, i64* %72)
  %73 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %gaps_in_frame_num_value_allowed_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %73, i32 0, i32 16
  store i8 %call28, i8* %gaps_in_frame_num_value_allowed_flag, align 4
  %74 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %75 = load i8*, i8** %nalu_buf.addr, align 8
  %76 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call29 = call i32 @u_e(%struct.NALU_t* %74, i8* %75, i64* %76)
  %77 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_width_in_mbs_minus1 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %77, i32 0, i32 17
  store i32 %call29, i32* %pic_width_in_mbs_minus1, align 4
  %78 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %79 = load i8*, i8** %nalu_buf.addr, align 8
  %80 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call i32 @u_e(%struct.NALU_t* %78, i8* %79, i64* %80)
  %81 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_height_in_map_units_minus1 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %81, i32 0, i32 18
  store i32 %call30, i32* %pic_height_in_map_units_minus1, align 4
  %82 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %83 = load i8*, i8** %nalu_buf.addr, align 8
  %84 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call31 = call zeroext i8 @u_1(%struct.NALU_t* %82, i8* %83, i64* %84)
  %85 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_mbs_only_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %85, i32 0, i32 19
  store i8 %call31, i8* %frame_mbs_only_flag, align 4
  %86 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_mbs_only_flag32 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %86, i32 0, i32 19
  %87 = load i8, i8* %frame_mbs_only_flag32, align 4
  %tobool33 = icmp ne i8 %87, 0
  br i1 %tobool33, label %if.end36, label %if.then34, !prof !118

if.then34:                                        ; preds = %if.end26
  %88 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %89 = load i8*, i8** %nalu_buf.addr, align 8
  %90 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call35 = call zeroext i8 @u_1(%struct.NALU_t* %88, i8* %89, i64* %90)
  %91 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %mb_adaptive_frame_field_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %91, i32 0, i32 20
  store i8 %call35, i8* %mb_adaptive_frame_field_flag, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end26
  %92 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %93 = load i8*, i8** %nalu_buf.addr, align 8
  %94 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call zeroext i8 @u_1(%struct.NALU_t* %92, i8* %93, i64* %94)
  %95 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %direct_8x8_inference_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %95, i32 0, i32 21
  store i8 %call37, i8* %direct_8x8_inference_flag, align 2
  %96 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %97 = load i8*, i8** %nalu_buf.addr, align 8
  %98 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call38 = call zeroext i8 @u_1(%struct.NALU_t* %96, i8* %97, i64* %98)
  %99 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %99, i32 0, i32 22
  store i8 %call38, i8* %frame_cropping_flag, align 1
  %100 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_flag39 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %100, i32 0, i32 22
  %101 = load i8, i8* %frame_cropping_flag39, align 1
  %tobool40 = icmp ne i8 %101, 0
  br i1 %tobool40, label %if.then41, label %if.end46, !prof !327

if.then41:                                        ; preds = %if.end36
  %102 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %103 = load i8*, i8** %nalu_buf.addr, align 8
  %104 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call42 = call i32 @u_e(%struct.NALU_t* %102, i8* %103, i64* %104)
  %105 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_left_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %105, i32 0, i32 23
  store i32 %call42, i32* %frame_cropping_rect_left_offset, align 4
  %106 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %107 = load i8*, i8** %nalu_buf.addr, align 8
  %108 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call43 = call i32 @u_e(%struct.NALU_t* %106, i8* %107, i64* %108)
  %109 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_right_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %109, i32 0, i32 24
  store i32 %call43, i32* %frame_cropping_rect_right_offset, align 4
  %110 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %111 = load i8*, i8** %nalu_buf.addr, align 8
  %112 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call44 = call i32 @u_e(%struct.NALU_t* %110, i8* %111, i64* %112)
  %113 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_top_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %113, i32 0, i32 25
  store i32 %call44, i32* %frame_cropping_rect_top_offset, align 4
  %114 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %115 = load i8*, i8** %nalu_buf.addr, align 8
  %116 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call45 = call i32 @u_e(%struct.NALU_t* %114, i8* %115, i64* %116)
  %117 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_bottom_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %117, i32 0, i32 26
  store i32 %call45, i32* %frame_cropping_rect_bottom_offset, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then41, %if.end36
  %118 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %119 = load i8*, i8** %nalu_buf.addr, align 8
  %120 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call47 = call zeroext i8 @u_1(%struct.NALU_t* %118, i8* %119, i64* %120)
  %121 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %vui_parameters_present_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %121, i32 0, i32 27
  store i8 %call47, i8* %vui_parameters_present_flag, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ProcessPPS(%struct.pic_parameter_set_rbsp_t* %pps, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !96 {
entry:
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pps_id = alloca i32, align 4
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  store i32 %call, i32* %pps_id, align 4
  %4 = load i32, i32* %pps_id, align 4
  %cmp = icmp sgt i32 %4, 5
  br i1 %cmp, label %if.then, label %if.end, !prof !327

if.then:                                          ; preds = %entry
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %pps_id, align 4
  %6 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_parameter_set_id = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %6, i32 0, i32 1
  store i32 %5, i32* %pic_parameter_set_id, align 4
  %7 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %Valid = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %7, i32 0, i32 0
  store i8 1, i8* %Valid, align 4
  %8 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %9 = load i8*, i8** %nalu_buf.addr, align 8
  %10 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %8, i8* %9, i64* %10)
  %11 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %seq_parameter_set_id = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %11, i32 0, i32 2
  store i32 %call1, i32* %seq_parameter_set_id, align 4
  %12 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %13 = load i8*, i8** %nalu_buf.addr, align 8
  %14 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %12, i8* %13, i64* %14)
  %15 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %entropy_coding_mode_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %15, i32 0, i32 3
  store i8 %call2, i8* %entropy_coding_mode_flag, align 4
  %16 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %17 = load i8*, i8** %nalu_buf.addr, align 8
  %18 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call3 = call zeroext i8 @u_1(%struct.NALU_t* %16, i8* %17, i64* %18)
  %19 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %bottom_field_pic_order_in_frame_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %19, i32 0, i32 4
  store i8 %call3, i8* %bottom_field_pic_order_in_frame_present_flag, align 1
  %20 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %21 = load i8*, i8** %nalu_buf.addr, align 8
  %22 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call4 = call i32 @u_e(%struct.NALU_t* %20, i8* %21, i64* %22)
  %23 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_slice_groups_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %23, i32 0, i32 5
  store i32 %call4, i32* %num_slice_groups_minus1, align 4
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call5 = call i32 @u_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %27 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %27, i32 0, i32 6
  store i32 %call5, i32* %num_ref_idx_l0_active_minus1, align 4
  %28 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %29 = load i8*, i8** %nalu_buf.addr, align 8
  %30 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_e(%struct.NALU_t* %28, i8* %29, i64* %30)
  %31 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %31, i32 0, i32 7
  store i32 %call6, i32* %num_ref_idx_l1_active_minus1, align 4
  %32 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %33 = load i8*, i8** %nalu_buf.addr, align 8
  %34 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call7 = call zeroext i8 @u_1(%struct.NALU_t* %32, i8* %33, i64* %34)
  %35 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %weighted_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %35, i32 0, i32 8
  store i8 %call7, i8* %weighted_pred_flag, align 4
  %36 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %37 = load i8*, i8** %nalu_buf.addr, align 8
  %38 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call8 = call i32 @u_n(i32 2, %struct.NALU_t* %36, i8* %37, i64* %38)
  %conv = trunc i32 %call8 to i8
  %39 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %weighted_bipred_idc = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %39, i32 0, i32 9
  store i8 %conv, i8* %weighted_bipred_idc, align 1
  %40 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %41 = load i8*, i8** %nalu_buf.addr, align 8
  %42 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call9 = call i32 @s_e(%struct.NALU_t* %40, i8* %41, i64* %42)
  %43 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qp_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %43, i32 0, i32 10
  store i32 %call9, i32* %pic_init_qp_minus26, align 4
  %44 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %45 = load i8*, i8** %nalu_buf.addr, align 8
  %46 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call10 = call i32 @s_e(%struct.NALU_t* %44, i8* %45, i64* %46)
  %47 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qs_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %47, i32 0, i32 11
  store i32 %call10, i32* %pic_init_qs_minus26, align 4
  %48 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %49 = load i8*, i8** %nalu_buf.addr, align 8
  %50 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call11 = call i32 @s_e(%struct.NALU_t* %48, i8* %49, i64* %50)
  %51 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %chroma_qp_index_offset = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %51, i32 0, i32 12
  store i32 %call11, i32* %chroma_qp_index_offset, align 4
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call zeroext i8 @u_1(%struct.NALU_t* %52, i8* %53, i64* %54)
  %55 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %deblocking_filter_control_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %55, i32 0, i32 13
  store i8 %call12, i8* %deblocking_filter_control_present_flag, align 4
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call zeroext i8 @u_1(%struct.NALU_t* %56, i8* %57, i64* %58)
  %59 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %constrained_intra_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %59, i32 0, i32 14
  store i8 %call13, i8* %constrained_intra_pred_flag, align 1
  %60 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %61 = load i8*, i8** %nalu_buf.addr, align 8
  %62 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call14 = call zeroext i8 @u_1(%struct.NALU_t* %60, i8* %61, i64* %62)
  %63 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %redundant_pic_cnt_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %63, i32 0, i32 15
  store i8 %call14, i8* %redundant_pic_cnt_present_flag, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_pred_weight_table(%struct.pred_weight_table_rbsp_t* %PWT, i8 signext %B_slice, %struct.pic_parameter_set_rbsp_t* %pps, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !205 {
entry:
  %PWT.addr = alloca %struct.pred_weight_table_rbsp_t*, align 8
  %B_slice.addr = alloca i8, align 1
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.pred_weight_table_rbsp_t* %PWT, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  store i8 %B_slice, i8* %B_slice.addr, align 1
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  %3 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_log2_weight_denom = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %3, i32 0, i32 0
  store i32 %call, i32* %luma_log2_weight_denom, align 4
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %4, i8* %5, i64* %6)
  %7 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_log2_weight_denom = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %7, i32 0, i32 1
  store i32 %call1, i32* %chroma_log2_weight_denom, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %9, i32 0, i32 6
  %10 = load i32, i32* %num_ref_idx_l0_active_minus1, align 4
  %cmp = icmp ule i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %11, i8* %12, i64* %13)
  %14 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %14, i32 0, i32 2
  %15 = load i32, i32* %i, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0_flag, i64 0, i64 %idxprom
  store i8 %call2, i8* %arrayidx, align 1
  %16 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0_flag3 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %16, i32 0, i32 2
  %17 = load i32, i32* %i, align 4
  %idxprom4 = zext i32 %17 to i64
  %arrayidx5 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0_flag3, i64 0, i64 %idxprom4
  %18 = load i8, i8* %arrayidx5, align 1
  %tobool = icmp ne i8 %18, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @s_e(%struct.NALU_t* %19, i8* %20, i64* %21)
  %conv = trunc i32 %call6 to i8
  %22 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %22, i32 0, i32 3
  %23 = load i32, i32* %i, align 4
  %idxprom7 = zext i32 %23 to i64
  %arrayidx8 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0, i64 0, i64 %idxprom7
  store i8 %conv, i8* %arrayidx8, align 1
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call9 = call i32 @s_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %conv10 = trunc i32 %call9 to i8
  %27 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_offset_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %27, i32 0, i32 4
  %28 = load i32, i32* %i, align 4
  %idxprom11 = zext i32 %28 to i64
  %arrayidx12 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_offset_l0, i64 0, i64 %idxprom11
  store i8 %conv10, i8* %arrayidx12, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %29 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %30 = load i8*, i8** %nalu_buf.addr, align 8
  %31 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call zeroext i8 @u_1(%struct.NALU_t* %29, i8* %30, i64* %31)
  %32 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %32, i32 0, i32 5
  %33 = load i32, i32* %i, align 4
  %idxprom14 = zext i32 %33 to i64
  %arrayidx15 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l0_flag, i64 0, i64 %idxprom14
  store i8 %call13, i8* %arrayidx15, align 1
  %34 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0_flag16 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %34, i32 0, i32 5
  %35 = load i32, i32* %i, align 4
  %idxprom17 = zext i32 %35 to i64
  %arrayidx18 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l0_flag16, i64 0, i64 %idxprom17
  %36 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %36, 0
  br i1 %tobool19, label %if.then20, label %if.end43

if.then20:                                        ; preds = %if.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call21 = call i32 @s_e(%struct.NALU_t* %37, i8* %38, i64* %39)
  %conv22 = trunc i32 %call21 to i8
  %40 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %40, i32 0, i32 6
  %41 = load i32, i32* %i, align 4
  %idxprom23 = zext i32 %41 to i64
  %arrayidx24 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l0, i64 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx24, i64 0, i64 0
  store i8 %conv22, i8* %arrayidx25, align 2
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %43 = load i8*, i8** %nalu_buf.addr, align 8
  %44 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call26 = call i32 @s_e(%struct.NALU_t* %42, i8* %43, i64* %44)
  %conv27 = trunc i32 %call26 to i8
  %45 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %45, i32 0, i32 7
  %46 = load i32, i32* %i, align 4
  %idxprom28 = zext i32 %46 to i64
  %arrayidx29 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l0, i64 0, i64 %idxprom28
  %arrayidx30 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx29, i64 0, i64 0
  store i8 %conv27, i8* %arrayidx30, align 2
  %47 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %48 = load i8*, i8** %nalu_buf.addr, align 8
  %49 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call31 = call i32 @s_e(%struct.NALU_t* %47, i8* %48, i64* %49)
  %conv32 = trunc i32 %call31 to i8
  %50 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l033 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %50, i32 0, i32 6
  %51 = load i32, i32* %i, align 4
  %idxprom34 = zext i32 %51 to i64
  %arrayidx35 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l033, i64 0, i64 %idxprom34
  %arrayidx36 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx35, i64 0, i64 1
  store i8 %conv32, i8* %arrayidx36, align 1
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call i32 @s_e(%struct.NALU_t* %52, i8* %53, i64* %54)
  %conv38 = trunc i32 %call37 to i8
  %55 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l039 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %55, i32 0, i32 7
  %56 = load i32, i32* %i, align 4
  %idxprom40 = zext i32 %56 to i64
  %arrayidx41 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l039, i64 0, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx41, i64 0, i64 1
  store i8 %conv38, i8* %arrayidx42, align 1
  br label %if.end43

if.end43:                                         ; preds = %if.then20, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %57 = load i32, i32* %i, align 4
  %inc = add i32 %57, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %58 = load i8, i8* %B_slice.addr, align 1
  %tobool44 = icmp ne i8 %58, 0
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %for.end
  br label %return

if.end46:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc99, %if.end46
  %59 = load i32, i32* %i, align 4
  %60 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %60, i32 0, i32 7
  %61 = load i32, i32* %num_ref_idx_l1_active_minus1, align 4
  %cmp48 = icmp ule i32 %59, %61
  br i1 %cmp48, label %for.body50, label %for.end101

for.body50:                                       ; preds = %for.cond47
  %62 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %63 = load i8*, i8** %nalu_buf.addr, align 8
  %64 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call zeroext i8 @u_1(%struct.NALU_t* %62, i8* %63, i64* %64)
  %65 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %65, i32 0, i32 8
  %66 = load i32, i32* %i, align 4
  %idxprom52 = zext i32 %66 to i64
  %arrayidx53 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1_flag, i64 0, i64 %idxprom52
  store i8 %call51, i8* %arrayidx53, align 1
  %67 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1_flag54 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %67, i32 0, i32 8
  %68 = load i32, i32* %i, align 4
  %idxprom55 = zext i32 %68 to i64
  %arrayidx56 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1_flag54, i64 0, i64 %idxprom55
  %69 = load i8, i8* %arrayidx56, align 1
  %tobool57 = icmp ne i8 %69, 0
  br i1 %tobool57, label %if.then58, label %if.end67

if.then58:                                        ; preds = %for.body50
  %70 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %71 = load i8*, i8** %nalu_buf.addr, align 8
  %72 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call59 = call i32 @s_e(%struct.NALU_t* %70, i8* %71, i64* %72)
  %conv60 = trunc i32 %call59 to i8
  %73 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %73, i32 0, i32 9
  %74 = load i32, i32* %i, align 4
  %idxprom61 = zext i32 %74 to i64
  %arrayidx62 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1, i64 0, i64 %idxprom61
  store i8 %conv60, i8* %arrayidx62, align 1
  %75 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %76 = load i8*, i8** %nalu_buf.addr, align 8
  %77 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call63 = call i32 @s_e(%struct.NALU_t* %75, i8* %76, i64* %77)
  %conv64 = trunc i32 %call63 to i8
  %78 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_offset_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %78, i32 0, i32 10
  %79 = load i32, i32* %i, align 4
  %idxprom65 = zext i32 %79 to i64
  %arrayidx66 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_offset_l1, i64 0, i64 %idxprom65
  store i8 %conv64, i8* %arrayidx66, align 1
  br label %if.end67

if.end67:                                         ; preds = %if.then58, %for.body50
  %80 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %81 = load i8*, i8** %nalu_buf.addr, align 8
  %82 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call68 = call zeroext i8 @u_1(%struct.NALU_t* %80, i8* %81, i64* %82)
  %83 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %83, i32 0, i32 11
  %84 = load i32, i32* %i, align 4
  %idxprom69 = zext i32 %84 to i64
  %arrayidx70 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l1_flag, i64 0, i64 %idxprom69
  store i8 %call68, i8* %arrayidx70, align 1
  %85 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1_flag71 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %85, i32 0, i32 11
  %86 = load i32, i32* %i, align 4
  %idxprom72 = zext i32 %86 to i64
  %arrayidx73 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l1_flag71, i64 0, i64 %idxprom72
  %87 = load i8, i8* %arrayidx73, align 1
  %tobool74 = icmp ne i8 %87, 0
  br i1 %tobool74, label %if.then75, label %if.end98

if.then75:                                        ; preds = %if.end67
  %88 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %89 = load i8*, i8** %nalu_buf.addr, align 8
  %90 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call76 = call i32 @s_e(%struct.NALU_t* %88, i8* %89, i64* %90)
  %conv77 = trunc i32 %call76 to i8
  %91 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %91, i32 0, i32 12
  %92 = load i32, i32* %i, align 4
  %idxprom78 = zext i32 %92 to i64
  %arrayidx79 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l1, i64 0, i64 %idxprom78
  %arrayidx80 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx79, i64 0, i64 0
  store i8 %conv77, i8* %arrayidx80, align 2
  %93 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %94 = load i8*, i8** %nalu_buf.addr, align 8
  %95 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call81 = call i32 @s_e(%struct.NALU_t* %93, i8* %94, i64* %95)
  %conv82 = trunc i32 %call81 to i8
  %96 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %96, i32 0, i32 13
  %97 = load i32, i32* %i, align 4
  %idxprom83 = zext i32 %97 to i64
  %arrayidx84 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l1, i64 0, i64 %idxprom83
  %arrayidx85 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx84, i64 0, i64 0
  store i8 %conv82, i8* %arrayidx85, align 2
  %98 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %99 = load i8*, i8** %nalu_buf.addr, align 8
  %100 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call86 = call i32 @s_e(%struct.NALU_t* %98, i8* %99, i64* %100)
  %conv87 = trunc i32 %call86 to i8
  %101 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l188 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %101, i32 0, i32 12
  %102 = load i32, i32* %i, align 4
  %idxprom89 = zext i32 %102 to i64
  %arrayidx90 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l188, i64 0, i64 %idxprom89
  %arrayidx91 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx90, i64 0, i64 1
  store i8 %conv87, i8* %arrayidx91, align 1
  %103 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %104 = load i8*, i8** %nalu_buf.addr, align 8
  %105 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call92 = call i32 @s_e(%struct.NALU_t* %103, i8* %104, i64* %105)
  %conv93 = trunc i32 %call92 to i8
  %106 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l194 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %106, i32 0, i32 13
  %107 = load i32, i32* %i, align 4
  %idxprom95 = zext i32 %107 to i64
  %arrayidx96 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l194, i64 0, i64 %idxprom95
  %arrayidx97 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx96, i64 0, i64 1
  store i8 %conv93, i8* %arrayidx97, align 1
  br label %if.end98

if.end98:                                         ; preds = %if.then75, %if.end67
  br label %for.inc99

for.inc99:                                        ; preds = %if.end98
  %108 = load i32, i32* %i, align 4
  %inc100 = add i32 %108, 1
  store i32 %inc100, i32* %i, align 4
  br label %for.cond47

for.end101:                                       ; preds = %for.cond47
  br label %return

return:                                           ; preds = %for.end101, %if.then45
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_dec_ref_pic_marking(%struct.dec_ref_pic_marking_rbsp_t* %drpm, %struct.ImageParameters* %img, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !368 {
entry:
  %drpm.addr = alloca %struct.dec_ref_pic_marking_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.dec_ref_pic_marking_rbsp_t* %drpm, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %0, i32 0, i32 2
  %1 = load i32, i32* %nal_unit_type, align 8
  %cmp = icmp eq i32 %1, 5
  br i1 %cmp, label %if.then, label %if.else, !prof !99

if.then:                                          ; preds = %entry
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %2, i8* %3, i64* %4)
  %5 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %no_output_of_prior_pics_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %5, i32 0, i32 0
  store i8 %call, i8* %no_output_of_prior_pics_flag, align 4
  %6 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_1(%struct.NALU_t* %6, i8* %7, i64* %8)
  %9 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %long_term_reference_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %9, i32 0, i32 1
  store i8 %call1, i8* %long_term_reference_flag, align 1
  br label %if.end19

if.else:                                          ; preds = %entry
  %10 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %10, i8* %11, i64* %12)
  %13 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %13, i32 0, i32 2
  store i8 %call2, i8* %adaptive_ref_pic_marking_mode_flag, align 2
  %14 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag3 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %14, i32 0, i32 2
  %15 = load i8, i8* %adaptive_ref_pic_marking_mode_flag3, align 2
  %tobool = icmp ne i8 %15, 0
  br i1 %tobool, label %if.then4, label %if.end18, !prof !369

if.then4:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %16 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %16, 10
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_e(%struct.NALU_t* %17, i8* %18, i64* %19)
  %conv = trunc i32 %call6 to i8
  %20 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %Memory_control_operation = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %20, i32 0, i32 3
  %21 = load i32, i32* %i, align 4
  %idxprom = sext i32 %21 to i64
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %Memory_control_operation, i64 0, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  %22 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %Memory_control_operation7 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %22, i32 0, i32 3
  %23 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %23 to i64
  %arrayidx9 = getelementptr inbounds [10 x i8], [10 x i8]* %Memory_control_operation7, i64 0, i64 %idxprom8
  %24 = load i8, i8* %arrayidx9, align 1
  %tobool10 = icmp ne i8 %24, 0
  br i1 %tobool10, label %if.then11, label %if.else15

if.then11:                                        ; preds = %for.body
  %25 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call i32 @u_e(%struct.NALU_t* %25, i8* %26, i64* %27)
  %28 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %operation_value = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %28, i32 0, i32 4
  %29 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %29 to i64
  %arrayidx14 = getelementptr inbounds [10 x i32], [10 x i32]* %operation_value, i64 0, i64 %idxprom13
  store i32 %call12, i32* %arrayidx14, align 4
  br label %if.end

if.else15:                                        ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %if.then11
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.else15, %for.cond
  %31 = load i32, i32* %i, align 4
  %conv16 = trunc i32 %31 to i8
  %32 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag17 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %32, i32 0, i32 2
  store i8 %conv16, i8* %adaptive_ref_pic_marking_mode_flag17, align 2
  br label %if.end18

if.end18:                                         ; preds = %for.end, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ProcessSH(%struct.seq_parameter_set_rbsp_t* %active_sps, %struct.pic_parameter_set_rbsp_t* %active_pps, %struct.slice_header_rbsp_t* %SH, %struct.ImageParameters* %img, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !322 {
entry:
  %active_sps.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %active_pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %SH.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.seq_parameter_set_rbsp_t* %active_sps, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  store %struct.pic_parameter_set_rbsp_t* %active_pps, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  store %struct.slice_header_rbsp_t* %SH, %struct.slice_header_rbsp_t** %SH.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  %4 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %first_mb_in_slice = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %4, i32 0, i32 0
  store i32 %call, i32* %first_mb_in_slice, align 4
  %5 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %5, i8* %6, i64* %7)
  %rem = urem i32 %call1, 5
  %conv = trunc i32 %rem to i8
  %8 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %8, i32 0, i32 1
  store i8 %conv, i8* %slice_type, align 4
  %9 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call i32 @u_e(%struct.NALU_t* %9, i8* %10, i64* %11)
  %conv3 = trunc i32 %call2 to i8
  %12 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pic_parameter_set_id = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %12, i32 0, i32 2
  store i8 %conv3, i8* %pic_parameter_set_id, align 1
  %13 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %13, i32 0, i32 7
  %14 = load i32, i32* %log2_max_frame_num_minus4, align 4
  %add = add i32 %14, 4
  %15 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %16 = load i8*, i8** %nalu_buf.addr, align 8
  %17 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call4 = call i32 @u_n(i32 %add, %struct.NALU_t* %15, i8* %16, i64* %17)
  %18 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %frame_num = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %18, i32 0, i32 3
  store i32 %call4, i32* %frame_num, align 4
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %19, i32 0, i32 2
  %20 = load i32, i32* %nal_unit_type, align 8
  %cmp = icmp eq i32 %20, 5
  %conv5 = zext i1 %cmp to i32
  %21 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %21, i32 0, i32 0
  store i32 %conv5, i32* %IdrPicFlag, align 4
  %22 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag6 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %22, i32 0, i32 0
  %23 = load i32, i32* %IdrPicFlag6, align 4
  %tobool = icmp ne i32 %23, 0
  br i1 %tobool, label %if.then, label %if.end, !prof !370

if.then:                                          ; preds = %entry
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call7 = call i32 @u_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %27 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %idr_pic_id = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %27, i32 0, i32 6
  store i32 %call7, i32* %idr_pic_id, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %pic_order_cnt_type = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %28, i32 0, i32 8
  %29 = load i32, i32* %pic_order_cnt_type, align 4
  %cmp8 = icmp eq i32 %29, 0
  br i1 %cmp8, label %if.then10, label %if.end13, !prof !77

if.then10:                                        ; preds = %if.end
  %30 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %30, i32 0, i32 9
  %31 = load i32, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  %add11 = add i32 %31, 4
  %32 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %33 = load i8*, i8** %nalu_buf.addr, align 8
  %34 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call i32 @u_n(i32 %add11, %struct.NALU_t* %32, i8* %33, i64* %34)
  %35 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pic_order_cnt_lsb = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %35, i32 0, i32 7
  store i32 %call12, i32* %pic_order_cnt_lsb, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.end
  %36 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type14 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %36, i32 0, i32 1
  %37 = load i8, i8* %slice_type14, align 4
  %conv15 = zext i8 %37 to i32
  %cmp16 = icmp eq i32 %conv15, 1
  br i1 %cmp16, label %if.then18, label %if.end20, !prof !371

if.then18:                                        ; preds = %if.end13
  %38 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %39 = load i8*, i8** %nalu_buf.addr, align 8
  %40 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call19 = call zeroext i8 @u_1(%struct.NALU_t* %38, i8* %39, i64* %40)
  %41 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %direct_spatial_mv_pred_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %41, i32 0, i32 11
  store i8 %call19, i8* %direct_spatial_mv_pred_flag, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end13
  %42 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type21 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %42, i32 0, i32 1
  %43 = load i8, i8* %slice_type21, align 4
  %conv22 = zext i8 %43 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br i1 %cmp23, label %if.then29, label %lor.lhs.false, !prof !370

lor.lhs.false:                                    ; preds = %if.end20
  %44 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type25 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %44, i32 0, i32 1
  %45 = load i8, i8* %slice_type25, align 4
  %conv26 = zext i8 %45 to i32
  %cmp27 = icmp eq i32 %conv26, 1
  br i1 %cmp27, label %if.then29, label %if.end45, !prof !372

if.then29:                                        ; preds = %lor.lhs.false, %if.end20
  %46 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %47 = load i8*, i8** %nalu_buf.addr, align 8
  %48 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call zeroext i8 @u_1(%struct.NALU_t* %46, i8* %47, i64* %48)
  %49 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_active_override_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %49, i32 0, i32 12
  store i8 %call30, i8* %num_ref_idx_active_override_flag, align 1
  %50 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_active_override_flag31 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %50, i32 0, i32 12
  %51 = load i8, i8* %num_ref_idx_active_override_flag31, align 1
  %tobool32 = icmp ne i8 %51, 0
  br i1 %tobool32, label %if.then33, label %if.end44, !prof !99

if.then33:                                        ; preds = %if.then29
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call34 = call i32 @u_e(%struct.NALU_t* %52, i8* %53, i64* %54)
  %conv35 = trunc i32 %call34 to i8
  %55 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %55, i32 0, i32 13
  store i8 %conv35, i8* %num_ref_idx_l0_active_minus1, align 2
  %56 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type36 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %56, i32 0, i32 1
  %57 = load i8, i8* %slice_type36, align 4
  %conv37 = zext i8 %57 to i32
  %cmp38 = icmp eq i32 %conv37, 1
  br i1 %cmp38, label %if.then40, label %if.end43, !prof !327

if.then40:                                        ; preds = %if.then33
  %58 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %59 = load i8*, i8** %nalu_buf.addr, align 8
  %60 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call41 = call i32 @u_e(%struct.NALU_t* %58, i8* %59, i64* %60)
  %conv42 = trunc i32 %call41 to i8
  %61 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %61, i32 0, i32 14
  store i8 %conv42, i8* %num_ref_idx_l1_active_minus1, align 1
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.then33
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then29
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %lor.lhs.false
  %62 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type46 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %62, i32 0, i32 1
  %63 = load i8, i8* %slice_type46, align 4
  %conv47 = zext i8 %63 to i32
  %cmp48 = icmp ne i32 %conv47, 2
  br i1 %cmp48, label %if.then50, label %if.end73, !prof !373

if.then50:                                        ; preds = %if.end45
  %64 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %65 = load i8*, i8** %nalu_buf.addr, align 8
  %66 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call zeroext i8 @u_1(%struct.NALU_t* %64, i8* %65, i64* %66)
  %67 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %67, i32 0, i32 15
  store i8 %call51, i8* %ref_pic_list_modification_flag_l0, align 4
  %68 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l052 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %68, i32 0, i32 15
  %69 = load i8, i8* %ref_pic_list_modification_flag_l052, align 4
  %tobool53 = icmp ne i8 %69, 0
  br i1 %tobool53, label %if.then54, label %if.end72, !prof !100

if.then54:                                        ; preds = %if.then50
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then54
  %70 = load i32, i32* %i, align 4
  %cmp55 = icmp slt i32 %70, 3
  br i1 %cmp55, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %71 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %72 = load i8*, i8** %nalu_buf.addr, align 8
  %73 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call57 = call i32 @u_e(%struct.NALU_t* %71, i8* %72, i64* %73)
  %conv58 = trunc i32 %call57 to i8
  %74 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %74, i32 0, i32 17
  %75 = load i32, i32* %i, align 4
  %idxprom = sext i32 %75 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l0, i64 0, i64 %idxprom
  store i8 %conv58, i8* %arrayidx, align 1
  %76 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l059 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %76, i32 0, i32 17
  %77 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %77 to i64
  %arrayidx61 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l059, i64 0, i64 %idxprom60
  %78 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %78 to i32
  %cmp63 = icmp ne i32 %conv62, 3
  br i1 %cmp63, label %if.then65, label %if.else

if.then65:                                        ; preds = %for.body
  %79 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %80 = load i8*, i8** %nalu_buf.addr, align 8
  %81 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call66 = call i32 @u_e(%struct.NALU_t* %79, i8* %80, i64* %81)
  %82 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_value_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %82, i32 0, i32 18
  %83 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %83 to i64
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %modification_value_l0, i64 0, i64 %idxprom67
  store i32 %call66, i32* %arrayidx68, align 4
  br label %if.end69

if.else:                                          ; preds = %for.body
  br label %for.end

if.end69:                                         ; preds = %if.then65
  br label %for.inc

for.inc:                                          ; preds = %if.end69
  %84 = load i32, i32* %i, align 4
  %inc = add nsw i32 %84, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.else, %for.cond
  %85 = load i32, i32* %i, align 4
  %conv70 = trunc i32 %85 to i8
  %86 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l071 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %86, i32 0, i32 15
  store i8 %conv70, i8* %ref_pic_list_modification_flag_l071, align 4
  br label %if.end72

if.end72:                                         ; preds = %for.end, %if.then50
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end45
  %87 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type74 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %87, i32 0, i32 1
  %88 = load i8, i8* %slice_type74, align 4
  %conv75 = zext i8 %88 to i32
  %cmp76 = icmp eq i32 %conv75, 1
  br i1 %cmp76, label %if.then78, label %if.end109, !prof !371

if.then78:                                        ; preds = %if.end73
  %89 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %90 = load i8*, i8** %nalu_buf.addr, align 8
  %91 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call79 = call zeroext i8 @u_1(%struct.NALU_t* %89, i8* %90, i64* %91)
  %92 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %92, i32 0, i32 16
  store i8 %call79, i8* %ref_pic_list_modification_flag_l1, align 1
  %93 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l180 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %93, i32 0, i32 16
  %94 = load i8, i8* %ref_pic_list_modification_flag_l180, align 1
  %tobool81 = icmp ne i8 %94, 0
  br i1 %tobool81, label %if.then82, label %if.end108, !prof !369

if.then82:                                        ; preds = %if.then78
  store i32 0, i32* %i, align 4
  br label %for.cond83

for.cond83:                                       ; preds = %for.inc103, %if.then82
  %95 = load i32, i32* %i, align 4
  %cmp84 = icmp slt i32 %95, 3
  br i1 %cmp84, label %for.body86, label %for.end105

for.body86:                                       ; preds = %for.cond83
  %96 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %97 = load i8*, i8** %nalu_buf.addr, align 8
  %98 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call87 = call i32 @u_e(%struct.NALU_t* %96, i8* %97, i64* %98)
  %conv88 = trunc i32 %call87 to i8
  %99 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %99, i32 0, i32 19
  %100 = load i32, i32* %i, align 4
  %idxprom89 = sext i32 %100 to i64
  %arrayidx90 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l1, i64 0, i64 %idxprom89
  store i8 %conv88, i8* %arrayidx90, align 1
  %101 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l191 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %101, i32 0, i32 19
  %102 = load i32, i32* %i, align 4
  %idxprom92 = sext i32 %102 to i64
  %arrayidx93 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l191, i64 0, i64 %idxprom92
  %103 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %103 to i32
  %cmp95 = icmp ne i32 %conv94, 3
  br i1 %cmp95, label %if.then97, label %if.else101

if.then97:                                        ; preds = %for.body86
  %104 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %105 = load i8*, i8** %nalu_buf.addr, align 8
  %106 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call98 = call i32 @u_e(%struct.NALU_t* %104, i8* %105, i64* %106)
  %107 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_value_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %107, i32 0, i32 20
  %108 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %108 to i64
  %arrayidx100 = getelementptr inbounds [5 x i32], [5 x i32]* %modification_value_l1, i64 0, i64 %idxprom99
  store i32 %call98, i32* %arrayidx100, align 4
  br label %if.end102

if.else101:                                       ; preds = %for.body86
  br label %for.end105

if.end102:                                        ; preds = %if.then97
  br label %for.inc103

for.inc103:                                       ; preds = %if.end102
  %109 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %109, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond83

for.end105:                                       ; preds = %if.else101, %for.cond83
  %110 = load i32, i32* %i, align 4
  %conv106 = trunc i32 %110 to i8
  %111 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l1107 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %111, i32 0, i32 16
  store i8 %conv106, i8* %ref_pic_list_modification_flag_l1107, align 1
  br label %if.end108

if.end108:                                        ; preds = %for.end105, %if.then78
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end73
  %112 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %weighted_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %112, i32 0, i32 8
  %113 = load i8, i8* %weighted_pred_flag, align 4
  %conv110 = zext i8 %113 to i32
  %tobool111 = icmp ne i32 %conv110, 0
  br i1 %tobool111, label %land.lhs.true, label %lor.lhs.false116, !prof !374

land.lhs.true:                                    ; preds = %if.end109
  %114 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type112 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %114, i32 0, i32 1
  %115 = load i8, i8* %slice_type112, align 4
  %conv113 = zext i8 %115 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true, %if.end109
  %116 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %weighted_bipred_idc = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %116, i32 0, i32 9
  %117 = load i8, i8* %weighted_bipred_idc, align 1
  %conv117 = zext i8 %117 to i32
  %tobool118 = icmp ne i32 %conv117, 0
  br i1 %tobool118, label %land.lhs.true119, label %if.end128, !prof !374

land.lhs.true119:                                 ; preds = %lor.lhs.false116
  %118 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type120 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %118, i32 0, i32 1
  %119 = load i8, i8* %slice_type120, align 4
  %conv121 = zext i8 %119 to i32
  %cmp122 = icmp eq i32 %conv121, 1
  br i1 %cmp122, label %if.then124, label %if.end128

if.then124:                                       ; preds = %land.lhs.true119, %land.lhs.true
  %120 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pred_weight_table = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %120, i32 0, i32 21
  %121 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type125 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %121, i32 0, i32 1
  %122 = load i8, i8* %slice_type125, align 4
  %conv126 = zext i8 %122 to i32
  %sub = sub nsw i32 %conv126, 1
  %conv127 = trunc i32 %sub to i8
  %123 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %124 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %125 = load i8*, i8** %nalu_buf.addr, align 8
  %126 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @process_pred_weight_table(%struct.pred_weight_table_rbsp_t* %pred_weight_table, i8 signext %conv127, %struct.pic_parameter_set_rbsp_t* %123, %struct.NALU_t* %124, i8* %125, i64* %126)
  br label %if.end128

if.end128:                                        ; preds = %if.then124, %land.lhs.true119, %lor.lhs.false116
  %127 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %127, i32 0, i32 3
  %128 = load i32, i32* %nal_reference_idc, align 4
  %cmp129 = icmp ne i32 %128, 0
  br i1 %cmp129, label %if.then131, label %if.end132, !prof !373

if.then131:                                       ; preds = %if.end128
  %129 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %dec_ref_pic_marking = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %129, i32 0, i32 22
  %130 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %131 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %132 = load i8*, i8** %nalu_buf.addr, align 8
  %133 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @process_dec_ref_pic_marking(%struct.dec_ref_pic_marking_rbsp_t* %dec_ref_pic_marking, %struct.ImageParameters* %130, %struct.NALU_t* %131, i8* %132, i64* %133)
  br label %if.end132

if.end132:                                        ; preds = %if.then131, %if.end128
  %134 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %135 = load i8*, i8** %nalu_buf.addr, align 8
  %136 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call133 = call i32 @s_e(%struct.NALU_t* %134, i8* %135, i64* %136)
  %137 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_qp_delta = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %137, i32 0, i32 24
  store i32 %call133, i32* %slice_qp_delta, align 4
  %138 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %deblocking_filter_control_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %138, i32 0, i32 13
  %139 = load i8, i8* %deblocking_filter_control_present_flag, align 4
  %tobool134 = icmp ne i8 %139, 0
  br i1 %tobool134, label %if.then135, label %if.end146, !prof !77

if.then135:                                       ; preds = %if.end132
  %140 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %141 = load i8*, i8** %nalu_buf.addr, align 8
  %142 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call136 = call i32 @u_e(%struct.NALU_t* %140, i8* %141, i64* %142)
  %conv137 = trunc i32 %call136 to i8
  %143 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %disable_deblocking_filter_idc = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %143, i32 0, i32 25
  store i8 %conv137, i8* %disable_deblocking_filter_idc, align 4
  %144 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %disable_deblocking_filter_idc138 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %144, i32 0, i32 25
  %145 = load i8, i8* %disable_deblocking_filter_idc138, align 4
  %conv139 = zext i8 %145 to i32
  %cmp140 = icmp ne i32 %conv139, 1
  br i1 %cmp140, label %if.then142, label %if.end145, !prof !374

if.then142:                                       ; preds = %if.then135
  %146 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %147 = load i8*, i8** %nalu_buf.addr, align 8
  %148 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call143 = call i32 @s_e(%struct.NALU_t* %146, i8* %147, i64* %148)
  %149 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_alpha_c0_offset_div2 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %149, i32 0, i32 26
  store i32 %call143, i32* %slice_alpha_c0_offset_div2, align 4
  %150 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %151 = load i8*, i8** %nalu_buf.addr, align 8
  %152 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call144 = call i32 @s_e(%struct.NALU_t* %150, i8* %151, i64* %152)
  %153 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_beta_offset_div2 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %153, i32 0, i32 27
  store i32 %call144, i32* %slice_beta_offset_div2, align 4
  br label %if.end145

if.end145:                                        ; preds = %if.then142, %if.then135
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.end132
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @intepretSLiceHeader(%struct.slice_header_rbsp_t* %sliceheader, %struct.seq_parameter_set_rbsp_t* %sps, %struct.pic_parameter_set_rbsp_t* %pps, i8 zeroext %nalu_idc, i8 zeroext %nalu_ref_idc, %struct.ImageParameters* %img, %struct.StorablePicture* %PicBuff) #0 !prof !322 {
entry:
  %sliceheader.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %sps.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu_idc.addr = alloca i8, align 1
  %nalu_ref_idc.addr = alloca i8, align 1
  %img.addr = alloca %struct.ImageParameters*, align 8
  %PicBuff.addr = alloca %struct.StorablePicture*, align 8
  %PicOrderCntMsb = alloca i32, align 4
  store %struct.slice_header_rbsp_t* %sliceheader, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  store %struct.seq_parameter_set_rbsp_t* %sps, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store i8 %nalu_idc, i8* %nalu_idc.addr, align 1
  store i8 %nalu_ref_idc, i8* %nalu_ref_idc.addr, align 1
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.StorablePicture* %PicBuff, %struct.StorablePicture** %PicBuff.addr, align 8
  %0 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %0, i32 0, i32 7
  %1 = load i32, i32* %log2_max_frame_num_minus4, align 4
  %add = add i32 %1, 4
  %shl = shl i32 1, %add
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxFrameNum = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 1
  store i32 %shl, i32* %MaxFrameNum, align 4
  %3 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %3, i32 0, i32 9
  %4 = load i32, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  %add1 = add i32 %4, 4
  %shl2 = shl i32 1, %add1
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 2
  store i32 %shl2, i32* %MaxPicOrderCntLsb, align 4
  %6 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ExpectedDeltaPerPicOrderCntCycle = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %6, i32 0, i32 3
  store i32 0, i32* %ExpectedDeltaPerPicOrderCntCycle, align 4
  %7 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %mb_adaptive_frame_field_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %7, i32 0, i32 20
  %8 = load i8, i8* %mb_adaptive_frame_field_flag, align 1
  %conv = zext i8 %8 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end, !prof !374

land.rhs:                                         ; preds = %entry
  %9 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %field_pic_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %9, i32 0, i32 4
  %10 = load i8, i8* %field_pic_flag, align 4
  %conv3 = zext i8 %10 to i32
  %cmp = icmp ne i32 %conv3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %11 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  %conv5 = trunc i32 %land.ext to i8
  %12 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %12, i32 0, i32 4
  store i8 %conv5, i8* %MbaffFrameFlag, align 4
  %13 = load i8, i8* %nalu_idc.addr, align 1
  %conv6 = zext i8 %13 to i32
  %cmp7 = icmp eq i32 %conv6, 5
  %conv8 = zext i1 %cmp7 to i32
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 0
  store i32 %conv8, i32* %IdrPicFlag, align 4
  %15 = load i8, i8* %nalu_idc.addr, align 1
  %conv9 = zext i8 %15 to i32
  %cmp10 = icmp eq i32 %conv9, 5
  br i1 %cmp10, label %if.then, label %if.end, !prof !370

if.then:                                          ; preds = %land.end
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 7
  store i32 0, i32* %prevPicOrderCntMsb, align 4
  %17 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %17, i32 0, i32 6
  store i32 0, i32* %prevPicOrderCntLsb, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %18 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %18, i32 0, i32 7
  %19 = load i32, i32* %pic_order_cnt_lsb, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb12 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 6
  %21 = load i32, i32* %prevPicOrderCntLsb12, align 4
  %cmp13 = icmp slt i32 %19, %21
  br i1 %cmp13, label %land.lhs.true, label %if.else, !prof !371

land.lhs.true:                                    ; preds = %if.end
  %22 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb15 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %22, i32 0, i32 6
  %23 = load i32, i32* %prevPicOrderCntLsb15, align 4
  %24 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb16 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %24, i32 0, i32 7
  %25 = load i32, i32* %pic_order_cnt_lsb16, align 4
  %sub = sub nsw i32 %23, %25
  %26 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %26, i32 0, i32 2
  %27 = load i32, i32* %MaxPicOrderCntLsb17, align 4
  %div = sdiv i32 %27, 2
  %cmp18 = icmp sge i32 %sub, %div
  br i1 %cmp18, label %if.then20, label %if.else, !prof !369

if.then20:                                        ; preds = %land.lhs.true
  %28 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb21 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %28, i32 0, i32 7
  %29 = load i32, i32* %prevPicOrderCntMsb21, align 4
  %30 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb22 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %30, i32 0, i32 2
  %31 = load i32, i32* %MaxPicOrderCntLsb22, align 4
  %add23 = add nsw i32 %29, %31
  store i32 %add23, i32* %PicOrderCntMsb, align 4
  br label %if.end43

if.else:                                          ; preds = %land.lhs.true, %if.end
  %32 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb24 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %32, i32 0, i32 7
  %33 = load i32, i32* %pic_order_cnt_lsb24, align 4
  %34 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb25 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %34, i32 0, i32 6
  %35 = load i32, i32* %prevPicOrderCntLsb25, align 4
  %cmp26 = icmp sgt i32 %33, %35
  br i1 %cmp26, label %land.lhs.true28, label %if.else40, !prof !371

land.lhs.true28:                                  ; preds = %if.else
  %36 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb29 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %36, i32 0, i32 7
  %37 = load i32, i32* %pic_order_cnt_lsb29, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 6
  %39 = load i32, i32* %prevPicOrderCntLsb30, align 4
  %sub31 = sub nsw i32 %37, %39
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb32 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 2
  %41 = load i32, i32* %MaxPicOrderCntLsb32, align 4
  %div33 = sdiv i32 %41, 2
  %cmp34 = icmp sgt i32 %sub31, %div33
  br i1 %cmp34, label %if.then36, label %if.else40, !prof !369

if.then36:                                        ; preds = %land.lhs.true28
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb37 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 7
  %43 = load i32, i32* %prevPicOrderCntMsb37, align 4
  %44 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %44, i32 0, i32 2
  %45 = load i32, i32* %MaxPicOrderCntLsb38, align 4
  %sub39 = sub nsw i32 %43, %45
  store i32 %sub39, i32* %PicOrderCntMsb, align 4
  br label %if.end42

if.else40:                                        ; preds = %land.lhs.true28, %if.else
  %46 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb41 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %46, i32 0, i32 7
  %47 = load i32, i32* %prevPicOrderCntMsb41, align 4
  store i32 %47, i32* %PicOrderCntMsb, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then36
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then20
  %48 = load i32, i32* %PicOrderCntMsb, align 4
  %49 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb44 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %49, i32 0, i32 7
  %50 = load i32, i32* %pic_order_cnt_lsb44, align 4
  %add45 = add nsw i32 %48, %50
  %51 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %51, i32 0, i32 8
  store i32 %add45, i32* %PictureOrderCount, align 4
  %52 = load i8, i8* %nalu_ref_idc.addr, align 1
  %conv46 = zext i8 %52 to i32
  %cmp47 = icmp ne i32 %conv46, 0
  br i1 %cmp47, label %if.then49, label %if.end53, !prof !373

if.then49:                                        ; preds = %if.end43
  %53 = load i32, i32* %PicOrderCntMsb, align 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb50 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 7
  store i32 %53, i32* %prevPicOrderCntMsb50, align 4
  %55 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb51 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %55, i32 0, i32 7
  %56 = load i32, i32* %pic_order_cnt_lsb51, align 4
  %57 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb52 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %57, i32 0, i32 6
  store i32 %56, i32* %prevPicOrderCntLsb52, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then49, %if.end43
  %58 = load i8, i8* %nalu_ref_idc.addr, align 1
  %conv54 = zext i8 %58 to i32
  %cmp55 = icmp ne i32 %conv54, 0
  br i1 %cmp55, label %if.then57, label %if.else59, !prof !373

if.then57:                                        ; preds = %if.end53
  %59 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ref_mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %59, i32 0, i32 14
  %60 = load i32, i32* %ref_mem_idx, align 4
  %rem = srem i32 %60, 2
  %61 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %61, i32 0, i32 9
  store i32 %rem, i32* %mem_idx, align 4
  %62 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ref_mem_idx58 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %62, i32 0, i32 14
  %63 = load i32, i32* %ref_mem_idx58, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %ref_mem_idx58, align 4
  br label %if.end61

if.else59:                                        ; preds = %if.end53
  %64 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx60 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %64, i32 0, i32 9
  store i32 2, i32* %mem_idx60, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else59, %if.then57
  %65 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %65, i32 0, i32 1
  %66 = load i8, i8* %slice_type, align 4
  %conv62 = zext i8 %66 to i32
  %cmp63 = icmp eq i32 %conv62, 0
  br i1 %cmp63, label %if.then65, label %if.end67, !prof !370

if.then65:                                        ; preds = %if.end61
  %67 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %68 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %68, i32 0, i32 12
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i32 0, i32 0
  %69 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %frame_num = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %69, i32 0, i32 3
  %70 = load i32, i32* %frame_num, align 4
  %71 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxFrameNum66 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %71, i32 0, i32 1
  %72 = load i32, i32* %MaxFrameNum66, align 4
  call void @init_listP(%struct.StorablePicture* %67, i32* %arraydecay, i32 %70, i32 %72)
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %if.end61
  %73 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type68 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %73, i32 0, i32 1
  %74 = load i8, i8* %slice_type68, align 4
  %conv69 = zext i8 %74 to i32
  %cmp70 = icmp eq i32 %conv69, 1
  br i1 %cmp70, label %if.then72, label %if.end78, !prof !371

if.then72:                                        ; preds = %if.end67
  %75 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %76 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list073 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %76, i32 0, i32 12
  %arraydecay74 = getelementptr inbounds [3 x i32], [3 x i32]* %list073, i32 0, i32 0
  %77 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %77, i32 0, i32 13
  %arraydecay75 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i32 0, i32 0
  %78 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount76 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %78, i32 0, i32 8
  %79 = load i32, i32* %PictureOrderCount76, align 4
  %div77 = sdiv i32 %79, 2
  call void @init_listB(%struct.StorablePicture* %75, i32* %arraydecay74, i32* %arraydecay75, i32 %div77)
  br label %if.end78

if.end78:                                         ; preds = %if.then72, %if.end67
  %80 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %frame_num79 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %80, i32 0, i32 3
  %81 = load i32, i32* %frame_num79, align 4
  %conv80 = trunc i32 %81 to i8
  %82 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %83 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx81 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %83, i32 0, i32 9
  %84 = load i32, i32* %mem_idx81, align 4
  %idxprom = sext i32 %84 to i64
  %arrayidx = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %82, i64 %idxprom
  %frame_num82 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx, i32 0, i32 2
  store i8 %conv80, i8* %frame_num82, align 1
  %85 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount83 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %85, i32 0, i32 8
  %86 = load i32, i32* %PictureOrderCount83, align 4
  %div84 = sdiv i32 %86, 2
  %87 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %88 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx85 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %88, i32 0, i32 9
  %89 = load i32, i32* %mem_idx85, align 4
  %idxprom86 = sext i32 %89 to i64
  %arrayidx87 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %87, i64 %idxprom86
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx87, i32 0, i32 0
  store i32 %div84, i32* %Picorder_num, align 4
  %90 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %91 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx88 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %91, i32 0, i32 9
  %92 = load i32, i32* %mem_idx88, align 4
  %idxprom89 = sext i32 %92 to i64
  %arrayidx90 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %90, i64 %idxprom89
  %memoccupied = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx90, i32 0, i32 1
  store i8 1, i8* %memoccupied, align 4
  %93 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type91 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %93, i32 0, i32 1
  %94 = load i8, i8* %slice_type91, align 4
  %95 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %96 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx92 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %96, i32 0, i32 9
  %97 = load i32, i32* %mem_idx92, align 4
  %idxprom93 = sext i32 %97 to i64
  %arrayidx94 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %95, i64 %idxprom93
  %type = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx94, i32 0, i32 3
  store i8 %94, i8* %type, align 2
  %98 = load i8, i8* %nalu_ref_idc.addr, align 1
  %tobool95 = icmp ne i8 %98, 0
  br i1 %tobool95, label %if.then96, label %if.else100, !prof !373

if.then96:                                        ; preds = %if.end78
  %99 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %100 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx97 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %100, i32 0, i32 9
  %101 = load i32, i32* %mem_idx97, align 4
  %idxprom98 = sext i32 %101 to i64
  %arrayidx99 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %99, i64 %idxprom98
  %use_for_char = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx99, i32 0, i32 4
  store i8 1, i8* %use_for_char, align 1
  br label %if.end105

if.else100:                                       ; preds = %if.end78
  %102 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx101 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 9
  %104 = load i32, i32* %mem_idx101, align 4
  %idxprom102 = sext i32 %104 to i64
  %arrayidx103 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %102, i64 %idxprom102
  %use_for_char104 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx103, i32 0, i32 4
  store i8 0, i8* %use_for_char104, align 1
  br label %if.end105

if.end105:                                        ; preds = %if.else100, %if.then96
  %105 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_active_override_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %105, i32 0, i32 12
  %106 = load i8, i8* %num_ref_idx_active_override_flag, align 1
  %conv106 = zext i8 %106 to i32
  %cmp107 = icmp eq i32 %conv106, 0
  br i1 %cmp107, label %if.then109, label %if.end114, !prof !155

if.then109:                                       ; preds = %if.end105
  %107 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %107, i32 0, i32 6
  %108 = load i32, i32* %num_ref_idx_l0_active_minus1, align 4
  %conv110 = trunc i32 %108 to i8
  %109 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_l0_active_minus1111 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %109, i32 0, i32 13
  store i8 %conv110, i8* %num_ref_idx_l0_active_minus1111, align 2
  %110 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %110, i32 0, i32 7
  %111 = load i32, i32* %num_ref_idx_l1_active_minus1, align 4
  %conv112 = trunc i32 %111 to i8
  %112 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_l1_active_minus1113 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %112, i32 0, i32 14
  store i8 %conv112, i8* %num_ref_idx_l1_active_minus1113, align 1
  br label %if.end114

if.end114:                                        ; preds = %if.then109, %if.end105
  %113 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qp_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %113, i32 0, i32 10
  %114 = load i32, i32* %pic_init_qp_minus26, align 4
  %add115 = add nsw i32 26, %114
  %115 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_qp_delta = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %115, i32 0, i32 24
  %116 = load i32, i32* %slice_qp_delta, align 4
  %add116 = add nsw i32 %add115, %116
  %117 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %sliceQPY = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %117, i32 0, i32 15
  store i32 %add116, i32* %sliceQPY, align 4
  %118 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %chroma_qp_index_offset = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %118, i32 0, i32 12
  %119 = load i32, i32* %chroma_qp_index_offset, align 4
  %120 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %chroma_offset = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %120, i32 0, i32 17
  store i32 %119, i32* %chroma_offset, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @matrix_mult4x4([4 x i32]* %A, [4 x i32]* %B, [4 x i32]* %C) #0 !prof !375 {
entry:
  %A.addr = alloca [4 x i32]*, align 8
  %B.addr = alloca [4 x i32]*, align 8
  %C.addr = alloca [4 x i32]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %sum = alloca i32, align 4
  store [4 x i32]* %A, [4 x i32]** %A.addr, align 8
  store [4 x i32]* %B, [4 x i32]** %B.addr, align 8
  store [4 x i32]* %C, [4 x i32]** %C.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end22, !prof !376

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc17, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end19, !prof !377

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %2, 4
  br i1 %cmp5, label %for.body6, label %for.end, !prof !378

for.body6:                                        ; preds = %for.cond4
  %3 = load [4 x i32]*, [4 x i32]** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %k, align 4
  %idxprom7 = sext i32 %5 to i64
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom7
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load [4 x i32]*, [4 x i32]** %B.addr, align 8
  %8 = load i32, i32* %k, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx10, i64 0, i64 %idxprom11
  %10 = load i32, i32* %arrayidx12, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %sum, align 4
  %add = add nsw i32 %11, %mul
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %13 = load i32, i32* %sum, align 4
  %14 = load [4 x i32]*, [4 x i32]** %C.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 %idxprom13
  %16 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx14, i64 0, i64 %idxprom15
  store i32 %13, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %17, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond1

for.end19:                                        ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end19
  %18 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @matrix_mult2x2([2 x i32]* %A, [2 x i32]* %B, [2 x i32]* %C) #0 !prof !205 {
entry:
  %A.addr = alloca [2 x i32]*, align 8
  %B.addr = alloca [2 x i32]*, align 8
  %C.addr = alloca [2 x i32]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %sum = alloca i32, align 4
  store [2 x i32]* %A, [2 x i32]** %A.addr, align 8
  store [2 x i32]* %B, [2 x i32]** %B.addr, align 8
  store [2 x i32]* %C, [2 x i32]** %C.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc17, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 2
  br i1 %cmp2, label %for.body3, label %for.end19

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %2, 2
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load [2 x i32]*, [2 x i32]** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %k, align 4
  %idxprom7 = sext i32 %5 to i64
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom7
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load [2 x i32]*, [2 x i32]** %B.addr, align 8
  %8 = load i32, i32* %k, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 %idxprom11
  %10 = load i32, i32* %arrayidx12, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %sum, align 4
  %add = add nsw i32 %11, %mul
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %13 = load i32, i32* %sum, align 4
  %14 = load [2 x i32]*, [2 x i32]** %C.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 %idxprom13
  %16 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx14, i64 0, i64 %idxprom15
  store i32 %13, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %17, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond1

for.end19:                                        ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end19
  %18 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_LevelScale4x4(i32 %m, i32 %i, i32 %j) #0 !prof !270 {
entry:
  %m.addr = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %v = alloca [6 x [2 x [2 x i32]]], align 16
  store i32 %m, i32* %m.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = bitcast [6 x [2 x [2 x i32]]]* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([6 x [2 x [2 x i32]]]* @__const.get_LevelScale4x4.v to i8*), i64 96, i1 false)
  %1 = load i32, i32* %m.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* %v, i64 0, i64 %idxprom
  %2 = load i32, i32* %i.addr, align 4
  %and = and i32 %2, 1
  %idxprom1 = sext i32 %and to i64
  %arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom1
  %3 = load i32, i32* %j.addr, align 4
  %and3 = and i32 %3, 1
  %idxprom4 = sext i32 %and3 to i64
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 %idxprom4
  %4 = load i32, i32* %arrayidx5, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_and_inv_trans_Intra16x16DC(i32 %qP, [4 x i32]* %c, i32 %qPm6, i32 %scale1, i32 %scale2, i32 %scale3) #0 !prof !270 {
entry:
  %qP.addr = alloca i32, align 4
  %c.addr = alloca [4 x i32]*, align 8
  %qPm6.addr = alloca i32, align 4
  %scale1.addr = alloca i32, align 4
  %scale2.addr = alloca i32, align 4
  %scale3.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %inv1 = alloca [4 x [4 x i32]], align 16
  %f = alloca [4 x [4 x i32]], align 16
  %temp = alloca [4 x [4 x i32]], align 16
  %LevelScale4x4 = alloca i32, align 4
  store i32 %qP, i32* %qP.addr, align 4
  store [4 x i32]* %c, [4 x i32]** %c.addr, align 8
  store i32 %qPm6, i32* %qPm6.addr, align 4
  store i32 %scale1, i32* %scale1.addr, align 4
  store i32 %scale2, i32* %scale2.addr, align 4
  store i32 %scale3, i32* %scale3.addr, align 4
  %0 = bitcast [4 x [4 x i32]]* %inv1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x i32]]* @__const.scale_and_inv_trans_Intra16x16DC.inv1 to i8*), i64 64, i1 false)
  %1 = load i32, i32* %qPm6.addr, align 4
  %call = call i32 @get_LevelScale4x4(i32 %1, i32 0, i32 0)
  store i32 %call, i32* %LevelScale4x4, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %inv1, i32 0, i32 0
  %2 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %arraydecay1 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i32 0, i32 0
  call void @matrix_mult4x4([4 x i32]* %arraydecay, [4 x i32]* %2, [4 x i32]* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %inv1, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i32 0, i32 0
  call void @matrix_mult4x4([4 x i32]* %arraydecay2, [4 x i32]* %arraydecay3, [4 x i32]* %arraydecay4)
  %3 = load i32, i32* %qP.addr, align 4
  %cmp = icmp sge i32 %3, 36
  br i1 %cmp, label %if.then, label %if.else, !prof !379

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.then
  %4 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %4, 4
  br i1 %cmp5, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %5, 4
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i64 0, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %7 to i64
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom9
  %8 = load i32, i32* %arrayidx10, align 4
  %9 = load i32, i32* %LevelScale4x4, align 4
  %mul = mul nsw i32 %8, %9
  %10 = load i32, i32* %scale1.addr, align 4
  %shl = shl i32 %mul, %10
  %11 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %12 to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 %idxprom11
  %13 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx12, i64 0, i64 %idxprom13
  store i32 %shl, i32* %arrayidx14, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc36, %if.else
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 4
  br i1 %cmp19, label %for.body20, label %for.end38, !prof !380

for.body20:                                       ; preds = %for.cond18
  store i32 0, i32* %j, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc33, %for.body20
  %17 = load i32, i32* %j, align 4
  %cmp22 = icmp slt i32 %17, 4
  br i1 %cmp22, label %for.body23, label %for.end35, !prof !381

for.body23:                                       ; preds = %for.cond21
  %18 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %18 to i64
  %arrayidx25 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i64 0, i64 %idxprom24
  %19 = load i32, i32* %j, align 4
  %idxprom26 = sext i32 %19 to i64
  %arrayidx27 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx25, i64 0, i64 %idxprom26
  %20 = load i32, i32* %arrayidx27, align 4
  %21 = load i32, i32* %LevelScale4x4, align 4
  %mul28 = mul nsw i32 %20, %21
  %22 = load i32, i32* %scale3.addr, align 4
  %add = add nsw i32 %mul28, %22
  %23 = load i32, i32* %scale2.addr, align 4
  %shr = ashr i32 %add, %23
  %24 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %25 to i64
  %arrayidx30 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 %idxprom29
  %26 = load i32, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %arrayidx32 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx30, i64 0, i64 %idxprom31
  store i32 %shr, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body23
  %27 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %27, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond21

for.end35:                                        ; preds = %for.cond21
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %28 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %28, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond18

for.end38:                                        ; preds = %for.cond18
  br label %if.end

if.end:                                           ; preds = %for.end38, %for.end17
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_residual4x4_and_trans_inverse(i32 %qP, i32 %qPm6, i32 %temp1, i32 %temp2, i32 %temp3, [4 x i32]* %c, [4 x i32]* %r, i32 %DC_comp, i8 zeroext %flag) #0 !prof !382 {
entry:
  %qP.addr = alloca i32, align 4
  %qPm6.addr = alloca i32, align 4
  %temp1.addr = alloca i32, align 4
  %temp2.addr = alloca i32, align 4
  %temp3.addr = alloca i32, align 4
  %c.addr = alloca [4 x i32]*, align 8
  %r.addr = alloca [4 x i32]*, align 8
  %DC_comp.addr = alloca i32, align 4
  %flag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca [4 x [4 x i32]], align 16
  %tmp = alloca [4 x [4 x i32]], align 16
  %i1 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %f = alloca [4 x i32], align 16
  store i32 %qP, i32* %qP.addr, align 4
  store i32 %qPm6, i32* %qPm6.addr, align 4
  store i32 %temp1, i32* %temp1.addr, align 4
  store i32 %temp2, i32* %temp2.addr, align 4
  store i32 %temp3, i32* %temp3.addr, align 4
  store [4 x i32]* %c, [4 x i32]** %c.addr, align 8
  store [4 x i32]* %r, [4 x i32]** %r.addr, align 8
  store i32 %DC_comp, i32* %DC_comp.addr, align 4
  store i8 %flag, i8* %flag.addr, align 1
  %0 = load i32, i32* %qP.addr, align 4
  %cmp = icmp sge i32 %0, 24
  br i1 %cmp, label %if.then, label %if.else, !prof !383

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 4
  br i1 %cmp1, label %for.body, label %for.end20, !prof !384

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp3 = icmp slt i32 %2, 4
  br i1 %cmp3, label %for.body4, label %for.end, !prof !385

for.body4:                                        ; preds = %for.cond2
  %3 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom5
  %6 = load i32, i32* %arrayidx6, align 4
  %7 = load i32, i32* %qPm6.addr, align 4
  %idxprom7 = sext i32 %7 to i64
  %arrayidx8 = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom7
  %8 = load i32, i32* %i, align 4
  %and = and i32 %8, 1
  %idxprom9 = sext i32 %and to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %and11 = and i32 %9, 1
  %idxprom12 = sext i32 %and11 to i64
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 %idxprom12
  %10 = load i32, i32* %arrayidx13, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %temp1.addr, align 4
  %shl = shl i32 %mul, %11
  %12 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %12 to i64
  %arrayidx15 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 %idxprom14
  %13 = load i32, i32* %j, align 4
  %idxprom16 = sext i32 %13 to i64
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx15, i64 0, i64 %idxprom16
  store i32 %shl, i32* %arrayidx17, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %15, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc47, %if.else
  %16 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %16, 4
  br i1 %cmp22, label %for.body23, label %for.end49

for.body23:                                       ; preds = %for.cond21
  store i32 0, i32* %j, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc44, %for.body23
  %17 = load i32, i32* %j, align 4
  %cmp25 = icmp slt i32 %17, 4
  br i1 %cmp25, label %for.body26, label %for.end46

for.body26:                                       ; preds = %for.cond24
  %18 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %19 to i64
  %arrayidx28 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 %idxprom27
  %20 = load i32, i32* %j, align 4
  %idxprom29 = sext i32 %20 to i64
  %arrayidx30 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx28, i64 0, i64 %idxprom29
  %21 = load i32, i32* %arrayidx30, align 4
  %22 = load i32, i32* %qPm6.addr, align 4
  %idxprom31 = sext i32 %22 to i64
  %arrayidx32 = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom31
  %23 = load i32, i32* %i, align 4
  %and33 = and i32 %23, 1
  %idxprom34 = sext i32 %and33 to i64
  %arrayidx35 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx32, i64 0, i64 %idxprom34
  %24 = load i32, i32* %j, align 4
  %and36 = and i32 %24, 1
  %idxprom37 = sext i32 %and36 to i64
  %arrayidx38 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx35, i64 0, i64 %idxprom37
  %25 = load i32, i32* %arrayidx38, align 4
  %mul39 = mul nsw i32 %21, %25
  %26 = load i32, i32* %temp3.addr, align 4
  %add = add nsw i32 %mul39, %26
  %27 = load i32, i32* %temp2.addr, align 4
  %shr = ashr i32 %add, %27
  %28 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %28 to i64
  %arrayidx41 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 %idxprom40
  %29 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %29 to i64
  %arrayidx43 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx41, i64 0, i64 %idxprom42
  store i32 %shr, i32* %arrayidx43, align 4
  br label %for.inc44

for.inc44:                                        ; preds = %for.body26
  %30 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %30, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond24

for.end46:                                        ; preds = %for.cond24
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %31 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %31, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond21

for.end49:                                        ; preds = %for.cond21
  br label %if.end

if.end:                                           ; preds = %for.end49, %for.end20
  %32 = load i8, i8* %flag.addr, align 1
  %tobool = icmp ne i8 %32, 0
  br i1 %tobool, label %if.then50, label %if.end53, !prof !386

if.then50:                                        ; preds = %if.end
  %33 = load i32, i32* %DC_comp.addr, align 4
  %arrayidx51 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %arrayidx52 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx51, i64 0, i64 0
  store i32 %33, i32* %arrayidx52, align 16
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc115, %if.end53
  %34 = load i32, i32* %j, align 4
  %cmp55 = icmp slt i32 %34, 4
  br i1 %cmp55, label %for.body56, label %for.end117, !prof !384

for.body56:                                       ; preds = %for.cond54
  %arrayidx57 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %35 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %35 to i64
  %arrayidx59 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx57, i64 0, i64 %idxprom58
  %36 = load i32, i32* %arrayidx59, align 4
  %arrayidx60 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 2
  %37 = load i32, i32* %j, align 4
  %idxprom61 = sext i32 %37 to i64
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx60, i64 0, i64 %idxprom61
  %38 = load i32, i32* %arrayidx62, align 4
  %add63 = add nsw i32 %36, %38
  %arrayidx64 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 0
  store i32 %add63, i32* %arrayidx64, align 16
  %arrayidx65 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %39 = load i32, i32* %j, align 4
  %idxprom66 = sext i32 %39 to i64
  %arrayidx67 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx65, i64 0, i64 %idxprom66
  %40 = load i32, i32* %arrayidx67, align 4
  %arrayidx68 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 2
  %41 = load i32, i32* %j, align 4
  %idxprom69 = sext i32 %41 to i64
  %arrayidx70 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx68, i64 0, i64 %idxprom69
  %42 = load i32, i32* %arrayidx70, align 4
  %sub = sub nsw i32 %40, %42
  %arrayidx71 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 1
  store i32 %sub, i32* %arrayidx71, align 4
  %arrayidx72 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 1
  %43 = load i32, i32* %j, align 4
  %idxprom73 = sext i32 %43 to i64
  %arrayidx74 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx72, i64 0, i64 %idxprom73
  %44 = load i32, i32* %arrayidx74, align 4
  %shr75 = ashr i32 %44, 1
  %arrayidx76 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 3
  %45 = load i32, i32* %j, align 4
  %idxprom77 = sext i32 %45 to i64
  %arrayidx78 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx76, i64 0, i64 %idxprom77
  %46 = load i32, i32* %arrayidx78, align 4
  %sub79 = sub nsw i32 %shr75, %46
  %arrayidx80 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 2
  store i32 %sub79, i32* %arrayidx80, align 8
  %arrayidx81 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 1
  %47 = load i32, i32* %j, align 4
  %idxprom82 = sext i32 %47 to i64
  %arrayidx83 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx81, i64 0, i64 %idxprom82
  %48 = load i32, i32* %arrayidx83, align 4
  %arrayidx84 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 3
  %49 = load i32, i32* %j, align 4
  %idxprom85 = sext i32 %49 to i64
  %arrayidx86 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx84, i64 0, i64 %idxprom85
  %50 = load i32, i32* %arrayidx86, align 4
  %shr87 = ashr i32 %50, 1
  %add88 = add nsw i32 %48, %shr87
  %arrayidx89 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 3
  store i32 %add88, i32* %arrayidx89, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc112, %for.body56
  %51 = load i32, i32* %i, align 4
  %cmp91 = icmp slt i32 %51, 2
  br i1 %cmp91, label %for.body92, label %for.end114, !prof !387

for.body92:                                       ; preds = %for.cond90
  %52 = load i32, i32* %i, align 4
  %sub93 = sub nsw i32 3, %52
  store i32 %sub93, i32* %i1, align 4
  %53 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %53 to i64
  %arrayidx95 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom94
  %54 = load i32, i32* %arrayidx95, align 4
  %55 = load i32, i32* %i1, align 4
  %idxprom96 = sext i32 %55 to i64
  %arrayidx97 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom96
  %56 = load i32, i32* %arrayidx97, align 4
  %add98 = add nsw i32 %54, %56
  %57 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %57 to i64
  %arrayidx100 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom99
  %58 = load i32, i32* %j, align 4
  %idxprom101 = sext i32 %58 to i64
  %arrayidx102 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx100, i64 0, i64 %idxprom101
  store i32 %add98, i32* %arrayidx102, align 4
  %59 = load i32, i32* %i, align 4
  %idxprom103 = sext i32 %59 to i64
  %arrayidx104 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom103
  %60 = load i32, i32* %arrayidx104, align 4
  %61 = load i32, i32* %i1, align 4
  %idxprom105 = sext i32 %61 to i64
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom105
  %62 = load i32, i32* %arrayidx106, align 4
  %sub107 = sub nsw i32 %60, %62
  %63 = load i32, i32* %i1, align 4
  %idxprom108 = sext i32 %63 to i64
  %arrayidx109 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom108
  %64 = load i32, i32* %j, align 4
  %idxprom110 = sext i32 %64 to i64
  %arrayidx111 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx109, i64 0, i64 %idxprom110
  store i32 %sub107, i32* %arrayidx111, align 4
  br label %for.inc112

for.inc112:                                       ; preds = %for.body92
  %65 = load i32, i32* %i, align 4
  %inc113 = add nsw i32 %65, 1
  store i32 %inc113, i32* %i, align 4
  br label %for.cond90

for.end114:                                       ; preds = %for.cond90
  br label %for.inc115

for.inc115:                                       ; preds = %for.end114
  %66 = load i32, i32* %j, align 4
  %inc116 = add nsw i32 %66, 1
  store i32 %inc116, i32* %j, align 4
  br label %for.cond54

for.end117:                                       ; preds = %for.cond54
  store i32 0, i32* %i, align 4
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc184, %for.end117
  %67 = load i32, i32* %i, align 4
  %cmp119 = icmp slt i32 %67, 4
  br i1 %cmp119, label %for.body120, label %for.end186, !prof !384

for.body120:                                      ; preds = %for.cond118
  %68 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %68 to i64
  %arrayidx122 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom121
  %arrayidx123 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx122, i64 0, i64 0
  %69 = load i32, i32* %arrayidx123, align 16
  %70 = load i32, i32* %i, align 4
  %idxprom124 = sext i32 %70 to i64
  %arrayidx125 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom124
  %arrayidx126 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx125, i64 0, i64 2
  %71 = load i32, i32* %arrayidx126, align 8
  %add127 = add nsw i32 %69, %71
  %arrayidx128 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 0
  store i32 %add127, i32* %arrayidx128, align 16
  %72 = load i32, i32* %i, align 4
  %idxprom129 = sext i32 %72 to i64
  %arrayidx130 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom129
  %arrayidx131 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx130, i64 0, i64 0
  %73 = load i32, i32* %arrayidx131, align 16
  %74 = load i32, i32* %i, align 4
  %idxprom132 = sext i32 %74 to i64
  %arrayidx133 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom132
  %arrayidx134 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx133, i64 0, i64 2
  %75 = load i32, i32* %arrayidx134, align 8
  %sub135 = sub nsw i32 %73, %75
  %arrayidx136 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 1
  store i32 %sub135, i32* %arrayidx136, align 4
  %76 = load i32, i32* %i, align 4
  %idxprom137 = sext i32 %76 to i64
  %arrayidx138 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom137
  %arrayidx139 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx138, i64 0, i64 1
  %77 = load i32, i32* %arrayidx139, align 4
  %shr140 = ashr i32 %77, 1
  %78 = load i32, i32* %i, align 4
  %idxprom141 = sext i32 %78 to i64
  %arrayidx142 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom141
  %arrayidx143 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx142, i64 0, i64 3
  %79 = load i32, i32* %arrayidx143, align 4
  %sub144 = sub nsw i32 %shr140, %79
  %arrayidx145 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 2
  store i32 %sub144, i32* %arrayidx145, align 8
  %80 = load i32, i32* %i, align 4
  %idxprom146 = sext i32 %80 to i64
  %arrayidx147 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom146
  %arrayidx148 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx147, i64 0, i64 1
  %81 = load i32, i32* %arrayidx148, align 4
  %82 = load i32, i32* %i, align 4
  %idxprom149 = sext i32 %82 to i64
  %arrayidx150 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom149
  %arrayidx151 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx150, i64 0, i64 3
  %83 = load i32, i32* %arrayidx151, align 4
  %shr152 = ashr i32 %83, 1
  %add153 = add nsw i32 %81, %shr152
  %arrayidx154 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 3
  store i32 %add153, i32* %arrayidx154, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc181, %for.body120
  %84 = load i32, i32* %j, align 4
  %cmp156 = icmp slt i32 %84, 2
  br i1 %cmp156, label %for.body157, label %for.end183, !prof !387

for.body157:                                      ; preds = %for.cond155
  %85 = load i32, i32* %j, align 4
  %sub158 = sub nsw i32 3, %85
  store i32 %sub158, i32* %j1, align 4
  %86 = load i32, i32* %j, align 4
  %idxprom159 = sext i32 %86 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom159
  %87 = load i32, i32* %arrayidx160, align 4
  %88 = load i32, i32* %j1, align 4
  %idxprom161 = sext i32 %88 to i64
  %arrayidx162 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom161
  %89 = load i32, i32* %arrayidx162, align 4
  %add163 = add nsw i32 %87, %89
  %add164 = add nsw i32 %add163, 32
  %shr165 = ashr i32 %add164, 6
  %90 = load [4 x i32]*, [4 x i32]** %r.addr, align 8
  %91 = load i32, i32* %i, align 4
  %idxprom166 = sext i32 %91 to i64
  %arrayidx167 = getelementptr inbounds [4 x i32], [4 x i32]* %90, i64 %idxprom166
  %92 = load i32, i32* %j, align 4
  %idxprom168 = sext i32 %92 to i64
  %arrayidx169 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx167, i64 0, i64 %idxprom168
  store i32 %shr165, i32* %arrayidx169, align 4
  %93 = load i32, i32* %j, align 4
  %idxprom170 = sext i32 %93 to i64
  %arrayidx171 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom170
  %94 = load i32, i32* %arrayidx171, align 4
  %95 = load i32, i32* %j1, align 4
  %idxprom172 = sext i32 %95 to i64
  %arrayidx173 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom172
  %96 = load i32, i32* %arrayidx173, align 4
  %sub174 = sub nsw i32 %94, %96
  %add175 = add nsw i32 %sub174, 32
  %shr176 = ashr i32 %add175, 6
  %97 = load [4 x i32]*, [4 x i32]** %r.addr, align 8
  %98 = load i32, i32* %i, align 4
  %idxprom177 = sext i32 %98 to i64
  %arrayidx178 = getelementptr inbounds [4 x i32], [4 x i32]* %97, i64 %idxprom177
  %99 = load i32, i32* %j1, align 4
  %idxprom179 = sext i32 %99 to i64
  %arrayidx180 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx178, i64 0, i64 %idxprom179
  store i32 %shr176, i32* %arrayidx180, align 4
  br label %for.inc181

for.inc181:                                       ; preds = %for.body157
  %100 = load i32, i32* %j, align 4
  %inc182 = add nsw i32 %100, 1
  store i32 %inc182, i32* %j, align 4
  br label %for.cond155

for.end183:                                       ; preds = %for.cond155
  br label %for.inc184

for.inc184:                                       ; preds = %for.end183
  %101 = load i32, i32* %i, align 4
  %inc185 = add nsw i32 %101, 1
  store i32 %inc185, i32* %i, align 4
  br label %for.cond118

for.end186:                                       ; preds = %for.cond118
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_and_inv_trans_chroma2x2([2 x i32]* %c, i32 %qP, i32 %qPcm6) #0 !prof !35 {
entry:
  %c.addr = alloca [2 x i32]*, align 8
  %qP.addr = alloca i32, align 4
  %qPcm6.addr = alloca i32, align 4
  %tran = alloca [2 x [2 x i32]], align 16
  %temp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [2 x i32]* %c, [2 x i32]** %c.addr, align 8
  store i32 %qP, i32* %qP.addr, align 4
  store i32 %qPcm6, i32* %qPcm6.addr, align 4
  %0 = load i32, i32* %qPcm6.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx1, i64 0, i64 0
  %1 = load i32, i32* %arrayidx2, align 16
  store i32 %1, i32* %temp, align 4
  %2 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx3, i64 0, i64 0
  %3 = load i32, i32* %arrayidx4, align 4
  %4 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %5 = load i32, i32* %arrayidx6, align 4
  %add = add nsw i32 %3, %5
  %6 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx7, i64 0, i64 1
  %7 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %add, %7
  %8 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 1
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %9 = load i32, i32* %arrayidx11, align 4
  %add12 = add nsw i32 %add9, %9
  %arrayidx13 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 0
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx13, i64 0, i64 0
  store i32 %add12, i32* %arrayidx14, align 16
  %10 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %11 = load i32, i32* %arrayidx16, align 4
  %12 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 1
  %arrayidx18 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx17, i64 0, i64 0
  %13 = load i32, i32* %arrayidx18, align 4
  %sub = sub nsw i32 %11, %13
  %14 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx19, i64 0, i64 1
  %15 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %sub, %15
  %16 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 1
  %arrayidx23 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx22, i64 0, i64 1
  %17 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %add21, %17
  %arrayidx25 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 1
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx25, i64 0, i64 0
  store i32 %sub24, i32* %arrayidx26, align 8
  %18 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0
  %arrayidx28 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx27, i64 0, i64 0
  %19 = load i32, i32* %arrayidx28, align 4
  %20 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 1
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx29, i64 0, i64 0
  %21 = load i32, i32* %arrayidx30, align 4
  %add31 = add nsw i32 %19, %21
  %22 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx32 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx32, i64 0, i64 1
  %23 = load i32, i32* %arrayidx33, align 4
  %sub34 = sub nsw i32 %add31, %23
  %24 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx35 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 1
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx35, i64 0, i64 1
  %25 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %sub34, %25
  %arrayidx38 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 0
  %arrayidx39 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx38, i64 0, i64 1
  store i32 %sub37, i32* %arrayidx39, align 4
  %26 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx40 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx40, i64 0, i64 0
  %27 = load i32, i32* %arrayidx41, align 4
  %28 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx42 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 1
  %arrayidx43 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx42, i64 0, i64 0
  %29 = load i32, i32* %arrayidx43, align 4
  %sub44 = sub nsw i32 %27, %29
  %30 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx45 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0
  %arrayidx46 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx45, i64 0, i64 1
  %31 = load i32, i32* %arrayidx46, align 4
  %sub47 = sub nsw i32 %sub44, %31
  %32 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 1
  %arrayidx49 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx48, i64 0, i64 1
  %33 = load i32, i32* %arrayidx49, align 4
  %add50 = add nsw i32 %sub47, %33
  %arrayidx51 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 1
  %arrayidx52 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx51, i64 0, i64 1
  store i32 %add50, i32* %arrayidx52, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc64, %entry
  %34 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %34, 2
  br i1 %cmp, label %for.body, label %for.end66, !prof !388

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc, %for.body
  %35 = load i32, i32* %j, align 4
  %cmp54 = icmp slt i32 %35, 2
  br i1 %cmp54, label %for.body55, label %for.end, !prof !389

for.body55:                                       ; preds = %for.cond53
  %36 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %36 to i64
  %arrayidx57 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 %idxprom56
  %37 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %37 to i64
  %arrayidx59 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx57, i64 0, i64 %idxprom58
  %38 = load i32, i32* %arrayidx59, align 4
  %39 = load i32, i32* %temp, align 4
  %mul = mul nsw i32 %38, %39
  %40 = load i32, i32* %qP.addr, align 4
  %div = sdiv i32 %40, 6
  %shl = shl i32 %mul, %div
  %shr = ashr i32 %shl, 5
  %41 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %42 to i64
  %arrayidx61 = getelementptr inbounds [2 x i32], [2 x i32]* %41, i64 %idxprom60
  %43 = load i32, i32* %j, align 4
  %idxprom62 = sext i32 %43 to i64
  %arrayidx63 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx61, i64 0, i64 %idxprom62
  store i32 %shr, i32* %arrayidx63, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body55
  %44 = load i32, i32* %j, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond53

for.end:                                          ; preds = %for.cond53
  br label %for.inc64

for.inc64:                                        ; preds = %for.end
  %45 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %45, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond

for.end66:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_luma([4 x i8]* %pred, [4 x i32]* %rMb, [144 x i8]* %Sluma, i32 %startx, i32 %starty, i8 zeroext %skip) #0 !prof !390 {
entry:
  %pred.addr = alloca [4 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %skip.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %pred, [4 x i8]** %pred.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %skip, i8* %skip.addr, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end20, !prof !391

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !392

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %skip.addr, align 1
  %conv = zext i8 %2 to i32
  %3 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom4
  %6 = load i32, i32* %arrayidx5, align 4
  %mul = mul nsw i32 %conv, %6
  %7 = load [4 x i8]*, [4 x i8]** %pred.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %idxprom6
  %9 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx7, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv10
  %call = call i32 @Clip1y(i32 %add)
  %conv11 = trunc i32 %call to i8
  %11 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %12 = load i32, i32* %startx.addr, align 4
  %13 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %12, %13
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds [144 x i8], [144 x i8]* %11, i64 %idxprom13
  %14 = load i32, i32* %starty.addr, align 4
  %15 = load i32, i32* %j, align 4
  %add15 = add nsw i32 %14, %15
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx14, i64 0, i64 %idxprom16
  store i8 %conv11, i8* %arrayidx17, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %17, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_Chroma([4 x i8]* %pred, [4 x i32]* %rMb, [72 x i8]* %SChroma, i32 %startx, i32 %starty, i8 zeroext %skip) #0 !prof !393 {
entry:
  %pred.addr = alloca [4 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %SChroma.addr = alloca [72 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %skip.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %pred, [4 x i8]** %pred.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store [72 x i8]* %SChroma, [72 x i8]** %SChroma.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %skip, i8* %skip.addr, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end22, !prof !394

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !395

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %skip.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp eq i32 %conv, 0
  %conv5 = zext i1 %cmp4 to i32
  %3 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom6
  %6 = load i32, i32* %arrayidx7, align 4
  %mul = mul nsw i32 %conv5, %6
  %7 = load [4 x i8]*, [4 x i8]** %pred.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %8 to i64
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %idxprom8
  %9 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %9 to i64
  %arrayidx11 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i64 0, i64 %idxprom10
  %10 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv12
  %call = call i32 @Clip1y(i32 %add)
  %conv13 = trunc i32 %call to i8
  %11 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %12 = load i32, i32* %startx.addr, align 4
  %13 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %12, %13
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [72 x i8], [72 x i8]* %11, i64 %idxprom15
  %14 = load i32, i32* %starty.addr, align 4
  %15 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %14, %15
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx16, i64 0, i64 %idxprom18
  store i8 %conv13, i8* %arrayidx19, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %17, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_luma(i8 zeroext %x, i8 zeroext %y, i8 zeroext %k, i32 %mbaddrx, i32 %mbaddry, i8 zeroext %CodedPatternLuma, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %tmpImode, i32 %coeffDCL, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1, [9 x i8]* %Imode, [36 x i8]* %IntraPredMode, [36 x i8]* %NzLuma, %struct.ImageParameters* %img, [4 x i8]* %predL, i8 signext %qPm6, i8 signext %qPy, i8 signext %temp1l, i8 signext %temp2l, i8 signext %temp3l, i8 signext %refidx0, i8 signext %refidx1, i32* %mvd0, i32* %mvd1, i8 zeroext %intra4x4predmode) #0 !prof !396 {
entry:
  %x.addr = alloca i8, align 1
  %y.addr = alloca i8, align 1
  %k.addr = alloca i8, align 1
  %mbaddrx.addr = alloca i32, align 4
  %mbaddry.addr = alloca i32, align 4
  %CodedPatternLuma.addr = alloca i8, align 1
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tmpImode.addr = alloca i32, align 4
  %coeffDCL.addr = alloca i32, align 4
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %IntraPredMode.addr = alloca [36 x i8]*, align 8
  %NzLuma.addr = alloca [36 x i8]*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %predL.addr = alloca [4 x i8]*, align 8
  %qPm6.addr = alloca i8, align 1
  %qPy.addr = alloca i8, align 1
  %temp1l.addr = alloca i8, align 1
  %temp2l.addr = alloca i8, align 1
  %temp3l.addr = alloca i8, align 1
  %refidx0.addr = alloca i8, align 1
  %refidx1.addr = alloca i8, align 1
  %mvd0.addr = alloca i32*, align 8
  %mvd1.addr = alloca i32*, align 8
  %intra4x4predmode.addr = alloca i8, align 1
  %nC = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %coeffACL = alloca [4 x [4 x i32]], align 16
  %predL4x4 = alloca [4 x [4 x i8]], align 16
  %xint0 = alloca i32, align 4
  %yint0 = alloca i32, align 4
  %xfrac0 = alloca i32, align 4
  %yfrac0 = alloca i32, align 4
  %xint1 = alloca i32, align 4
  %yint1 = alloca i32, align 4
  %xfrac1 = alloca i32, align 4
  %yfrac1 = alloca i32, align 4
  %rMbL = alloca [4 x [4 x i32]], align 16
  %avaimode = alloca i8, align 1
  %tmpidx0 = alloca i32, align 4
  %tmpidx1 = alloca i32, align 4
  %inter_temp0 = alloca [9 x [9 x i8]], align 16
  %inter_temp1 = alloca [9 x [9 x i8]], align 16
  store i8 %x, i8* %x.addr, align 1
  store i8 %y, i8* %y.addr, align 1
  store i8 %k, i8* %k.addr, align 1
  store i32 %mbaddrx, i32* %mbaddrx.addr, align 4
  store i32 %mbaddry, i32* %mbaddry.addr, align 4
  store i8 %CodedPatternLuma, i8* %CodedPatternLuma.addr, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %tmpImode, i32* %tmpImode.addr, align 4
  store i32 %coeffDCL, i32* %coeffDCL.addr, align 4
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store [36 x i8]* %IntraPredMode, [36 x i8]** %IntraPredMode.addr, align 8
  store [36 x i8]* %NzLuma, [36 x i8]** %NzLuma.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store [4 x i8]* %predL, [4 x i8]** %predL.addr, align 8
  store i8 %qPm6, i8* %qPm6.addr, align 1
  store i8 %qPy, i8* %qPy.addr, align 1
  store i8 %temp1l, i8* %temp1l.addr, align 1
  store i8 %temp2l, i8* %temp2l.addr, align 1
  store i8 %temp3l, i8* %temp3l.addr, align 1
  store i8 %refidx0, i8* %refidx0.addr, align 1
  store i8 %refidx1, i8* %refidx1.addr, align 1
  store i32* %mvd0, i32** %mvd0.addr, align 8
  store i32* %mvd1, i32** %mvd1.addr, align 8
  store i8 %intra4x4predmode, i8* %intra4x4predmode.addr, align 1
  store i32 0, i32* %nC, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %0 = bitcast [4 x [4 x i32]]* %coeffACL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 64, i1 false)
  %1 = bitcast [4 x [4 x i8]]* %predL4x4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 16, i1 false)
  store i32 0, i32* %xint0, align 4
  store i32 0, i32* %yint0, align 4
  store i32 0, i32* %xfrac0, align 4
  store i32 0, i32* %yfrac0, align 4
  store i32 0, i32* %xint1, align 4
  store i32 0, i32* %yint1, align 4
  store i32 0, i32* %xfrac1, align 4
  store i32 0, i32* %yfrac1, align 4
  %2 = bitcast [4 x [4 x i32]]* %rMbL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 64, i1 false)
  store i8 0, i8* %avaimode, align 1
  store i32 0, i32* %tmpidx0, align 4
  store i32 0, i32* %tmpidx1, align 4
  %3 = bitcast [9 x [9 x i8]]* %inter_temp0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 81, i1 false)
  %4 = bitcast [9 x [9 x i8]]* %inter_temp1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 81, i1 false)
  %5 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv = zext i8 %5 to i32
  %6 = load i8, i8* %k.addr, align 1
  %conv1 = zext i8 %6 to i32
  %div = sdiv i32 %conv1, 4
  %shl = shl i32 1, %div
  %and = and i32 %conv, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !397

if.then:                                          ; preds = %entry
  %7 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %8 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %9 = load i32, i32* %mbaddrx.addr, align 4
  %mul = mul nsw i32 %9, 4
  %10 = load i8, i8* %x.addr, align 1
  %conv2 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv2
  %11 = load i32, i32* %mbaddry.addr, align 4
  %mul3 = mul nsw i32 %11, 4
  %12 = load i8, i8* %y.addr, align 1
  %conv4 = zext i8 %12 to i32
  %add5 = add nsw i32 %mul3, %conv4
  %call = call zeroext i8 @nc_Luma([9 x i8]* %7, [36 x i8]* %8, i32 %add, i32 %add5)
  %conv6 = zext i8 %call to i32
  store i32 %conv6, i32* %nC, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i32 0, i32 0
  %13 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %14 = load i8*, i8** %nalu_buf.addr, align 8
  %15 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %16 = load i32, i32* %tmpImode.addr, align 4
  %cmp = icmp eq i32 %16, 1
  %conv7 = zext i1 %cmp to i32
  %17 = load i32, i32* %nC, align 4
  %call8 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay, %struct.NALU_t* %13, i8* %14, i64* %15, i32 %conv7, i32 15, i32 %17)
  %18 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %19 = load i32, i32* %mbaddrx.addr, align 4
  %mul9 = mul nsw i32 %19, 4
  %20 = load i8, i8* %x.addr, align 1
  %conv10 = zext i8 %20 to i32
  %add11 = add nsw i32 %mul9, %conv10
  %idxprom = sext i32 %add11 to i64
  %arrayidx = getelementptr inbounds [36 x i8], [36 x i8]* %18, i64 %idxprom
  %21 = load i32, i32* %mbaddry.addr, align 4
  %mul12 = mul nsw i32 %21, 4
  %22 = load i8, i8* %y.addr, align 1
  %conv13 = zext i8 %22 to i32
  %add14 = add nsw i32 %mul12, %conv13
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx, i64 0, i64 %idxprom15
  store i8 %call8, i8* %arrayidx16, align 1
  br label %if.end54

if.else:                                          ; preds = %entry
  %23 = load i32, i32* %tmpImode.addr, align 4
  %cmp17 = icmp eq i32 %23, 1
  br i1 %cmp17, label %if.then19, label %if.else43, !prof !398

if.then19:                                        ; preds = %if.else
  %24 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %25 = load i32, i32* %mbaddrx.addr, align 4
  %mul20 = mul nsw i32 %25, 4
  %26 = load i8, i8* %x.addr, align 1
  %conv21 = zext i8 %26 to i32
  %add22 = add nsw i32 %mul20, %conv21
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [36 x i8], [36 x i8]* %24, i64 %idxprom23
  %27 = load i32, i32* %mbaddry.addr, align 4
  %mul25 = mul nsw i32 %27, 4
  %28 = load i8, i8* %y.addr, align 1
  %conv26 = zext i8 %28 to i32
  %add27 = add nsw i32 %mul25, %conv26
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx24, i64 0, i64 %idxprom28
  store i8 0, i8* %arrayidx29, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %if.then19
  %29 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %29, 4
  br i1 %cmp30, label %for.body, label %for.end42, !prof !399

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %for.body
  %30 = load i32, i32* %j, align 4
  %cmp33 = icmp slt i32 %30, 4
  br i1 %cmp33, label %for.body35, label %for.end, !prof !400

for.body35:                                       ; preds = %for.cond32
  %31 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %31 to i64
  %arrayidx37 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i64 0, i64 %idxprom36
  %32 = load i32, i32* %j, align 4
  %idxprom38 = sext i32 %32 to i64
  %arrayidx39 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx37, i64 0, i64 %idxprom38
  store i32 0, i32* %arrayidx39, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body35
  %33 = load i32, i32* %j, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond32

for.end:                                          ; preds = %for.cond32
  br label %for.inc40

for.inc40:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %34, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond

for.end42:                                        ; preds = %for.cond
  br label %if.end

if.else43:                                        ; preds = %if.else
  %35 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %36 = load i32, i32* %mbaddrx.addr, align 4
  %mul44 = mul nsw i32 %36, 4
  %37 = load i8, i8* %x.addr, align 1
  %conv45 = zext i8 %37 to i32
  %add46 = add nsw i32 %mul44, %conv45
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds [36 x i8], [36 x i8]* %35, i64 %idxprom47
  %38 = load i32, i32* %mbaddry.addr, align 4
  %mul49 = mul nsw i32 %38, 4
  %39 = load i8, i8* %y.addr, align 1
  %conv50 = zext i8 %39 to i32
  %add51 = add nsw i32 %mul49, %conv50
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx48, i64 0, i64 %idxprom52
  store i8 0, i8* %arrayidx53, align 1
  br label %if.end

if.end:                                           ; preds = %if.else43, %for.end42
  br label %if.end54

if.end54:                                         ; preds = %if.end, %if.then
  %40 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv55 = zext i8 %40 to i32
  %41 = load i8, i8* %k.addr, align 1
  %conv56 = zext i8 %41 to i32
  %div57 = sdiv i32 %conv56, 4
  %shl58 = shl i32 1, %div57
  %and59 = and i32 %conv55, %shl58
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.then63, label %lor.lhs.false, !prof !397

lor.lhs.false:                                    ; preds = %if.end54
  %42 = load i32, i32* %tmpImode.addr, align 4
  %cmp61 = icmp eq i32 %42, 1
  br i1 %cmp61, label %if.then63, label %if.end74, !prof !398

if.then63:                                        ; preds = %lor.lhs.false, %if.end54
  %43 = load i8, i8* %qPy.addr, align 1
  %conv64 = sext i8 %43 to i32
  %44 = load i8, i8* %qPm6.addr, align 1
  %conv65 = sext i8 %44 to i32
  %45 = load i8, i8* %temp1l.addr, align 1
  %conv66 = sext i8 %45 to i32
  %46 = load i8, i8* %temp2l.addr, align 1
  %conv67 = sext i8 %46 to i32
  %47 = load i8, i8* %temp3l.addr, align 1
  %conv68 = sext i8 %47 to i32
  %arraydecay69 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i32 0, i32 0
  %arraydecay70 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %48 = load i32, i32* %coeffDCL.addr, align 4
  %49 = load i32, i32* %tmpImode.addr, align 4
  %cmp71 = icmp eq i32 %49, 1
  %conv72 = zext i1 %cmp71 to i32
  %conv73 = trunc i32 %conv72 to i8
  call void @scale_residual4x4_and_trans_inverse(i32 %conv64, i32 %conv65, i32 %conv66, i32 %conv67, i32 %conv68, [4 x i32]* %arraydecay69, [4 x i32]* %arraydecay70, i32 %48, i8 zeroext %conv73)
  br label %if.end74

if.end74:                                         ; preds = %if.then63, %lor.lhs.false
  %50 = load i32, i32* %tmpImode.addr, align 4
  %cmp75 = icmp eq i32 %50, 0
  br i1 %cmp75, label %if.then77, label %if.else127, !prof !401

if.then77:                                        ; preds = %if.end74
  %51 = load i32, i32* %mbaddrx.addr, align 4
  %mul78 = mul nsw i32 %51, 4
  %52 = load i8, i8* %x.addr, align 1
  %conv79 = zext i8 %52 to i32
  %add80 = add nsw i32 %mul78, %conv79
  %cmp81 = icmp sgt i32 %add80, 0
  %conv82 = zext i1 %cmp81 to i32
  %mul83 = mul nsw i32 %conv82, 2
  %53 = load i32, i32* %mbaddry.addr, align 4
  %mul84 = mul nsw i32 %53, 4
  %54 = load i8, i8* %y.addr, align 1
  %conv85 = zext i8 %54 to i32
  %add86 = add nsw i32 %mul84, %conv85
  %cmp87 = icmp sgt i32 %add86, 0
  %conv88 = zext i1 %cmp87 to i32
  %add89 = add nsw i32 %mul83, %conv88
  %conv90 = trunc i32 %add89 to i8
  store i8 %conv90, i8* %avaimode, align 1
  %arraydecay91 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %predL4x4, i32 0, i32 0
  %55 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %56 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %56, i32 0, i32 9
  %57 = load i32, i32* %mem_idx, align 4
  %idxprom92 = sext i32 %57 to i64
  %arrayidx93 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %55, i64 %idxprom92
  %arraydecay94 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx93, i32 0, i32 0
  %58 = load i8, i8* %intra4x4predmode.addr, align 1
  %59 = load i8, i8* %avaimode, align 1
  %60 = load i32, i32* %mbaddrx.addr, align 4
  %mul95 = mul nsw i32 %60, 4
  %61 = load i8, i8* %x.addr, align 1
  %conv96 = zext i8 %61 to i32
  %add97 = add nsw i32 %mul95, %conv96
  %mul98 = mul nsw i32 %add97, 4
  %62 = load i32, i32* %mbaddry.addr, align 4
  %mul99 = mul nsw i32 %62, 4
  %63 = load i8, i8* %y.addr, align 1
  %conv100 = zext i8 %63 to i32
  %add101 = add nsw i32 %mul99, %conv100
  %mul102 = mul nsw i32 %add101, 4
  %64 = load i8, i8* %k.addr, align 1
  %conv103 = zext i8 %64 to i32
  call void @predict_intra4x4_luma_NonField([4 x i8]* %arraydecay91, [144 x i8]* %arraydecay94, i8 zeroext %58, i8 zeroext %59, i32 %mul98, i32 %mul102, i32 %conv103)
  %arraydecay104 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %predL4x4, i32 0, i32 0
  %arraydecay105 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %65 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %66 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx106 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %66, i32 0, i32 9
  %67 = load i32, i32* %mem_idx106, align 4
  %idxprom107 = sext i32 %67 to i64
  %arrayidx108 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %65, i64 %idxprom107
  %arraydecay109 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx108, i32 0, i32 0
  %68 = load i32, i32* %mbaddrx.addr, align 4
  %mul110 = mul nsw i32 %68, 4
  %69 = load i8, i8* %x.addr, align 1
  %conv111 = zext i8 %69 to i32
  %add112 = add nsw i32 %mul110, %conv111
  %mul113 = mul nsw i32 %add112, 4
  %70 = load i32, i32* %mbaddry.addr, align 4
  %mul114 = mul nsw i32 %70, 4
  %71 = load i8, i8* %y.addr, align 1
  %conv115 = zext i8 %71 to i32
  %add116 = add nsw i32 %mul114, %conv115
  %mul117 = mul nsw i32 %add116, 4
  %72 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv118 = zext i8 %72 to i32
  %73 = load i8, i8* %k.addr, align 1
  %conv119 = zext i8 %73 to i32
  %div120 = sdiv i32 %conv119, 4
  %shl121 = shl i32 1, %div120
  %and122 = and i32 %conv118, %shl121
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %lor.end, label %lor.rhs, !prof !402

lor.rhs:                                          ; preds = %if.then77
  %74 = load i32, i32* %tmpImode.addr, align 4
  %cmp124 = icmp eq i32 %74, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then77
  %75 = phi i1 [ true, %if.then77 ], [ %cmp124, %lor.rhs ]
  %lor.ext = zext i1 %75 to i32
  %conv126 = trunc i32 %lor.ext to i8
  call void @write_luma([4 x i8]* %arraydecay104, [4 x i32]* %arraydecay105, [144 x i8]* %arraydecay109, i32 %mul113, i32 %mul117, i8 zeroext %conv126)
  br label %if.end460

if.else127:                                       ; preds = %if.end74
  %76 = load i32, i32* %tmpImode.addr, align 4
  %cmp128 = icmp eq i32 %76, 1
  br i1 %cmp128, label %if.then130, label %if.else156, !prof !403

if.then130:                                       ; preds = %if.else127
  %77 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arraydecay131 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %78 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %79 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx132 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %79, i32 0, i32 9
  %80 = load i32, i32* %mem_idx132, align 4
  %idxprom133 = sext i32 %80 to i64
  %arrayidx134 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %78, i64 %idxprom133
  %arraydecay135 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx134, i32 0, i32 0
  %81 = load i32, i32* %mbaddrx.addr, align 4
  %mul136 = mul nsw i32 %81, 4
  %82 = load i8, i8* %x.addr, align 1
  %conv137 = zext i8 %82 to i32
  %add138 = add nsw i32 %mul136, %conv137
  %mul139 = mul nsw i32 %add138, 4
  %83 = load i32, i32* %mbaddry.addr, align 4
  %mul140 = mul nsw i32 %83, 4
  %84 = load i8, i8* %y.addr, align 1
  %conv141 = zext i8 %84 to i32
  %add142 = add nsw i32 %mul140, %conv141
  %mul143 = mul nsw i32 %add142, 4
  %85 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv144 = zext i8 %85 to i32
  %86 = load i8, i8* %k.addr, align 1
  %conv145 = zext i8 %86 to i32
  %div146 = sdiv i32 %conv145, 4
  %shl147 = shl i32 1, %div146
  %and148 = and i32 %conv144, %shl147
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %lor.end153, label %lor.rhs150, !prof !404

lor.rhs150:                                       ; preds = %if.then130
  %87 = load i32, i32* %tmpImode.addr, align 4
  %cmp151 = icmp eq i32 %87, 1
  br label %lor.end153

lor.end153:                                       ; preds = %lor.rhs150, %if.then130
  %88 = phi i1 [ true, %if.then130 ], [ %cmp151, %lor.rhs150 ]
  %lor.ext154 = zext i1 %88 to i32
  %conv155 = trunc i32 %lor.ext154 to i8
  call void @write_luma([4 x i8]* %77, [4 x i32]* %arraydecay131, [144 x i8]* %arraydecay135, i32 %mul139, i32 %mul143, i8 zeroext %conv155)
  br label %if.end459

if.else156:                                       ; preds = %if.else127
  %89 = load i8, i8* %refidx0.addr, align 1
  %conv157 = sext i8 %89 to i32
  %cmp158 = icmp sge i32 %conv157, 0
  br i1 %cmp158, label %land.lhs.true, label %if.else188, !prof !405

land.lhs.true:                                    ; preds = %if.else156
  %90 = load i8, i8* %refidx1.addr, align 1
  %conv160 = sext i8 %90 to i32
  %cmp161 = icmp slt i32 %conv160, 0
  br i1 %cmp161, label %if.then163, label %if.else188, !prof !406

if.then163:                                       ; preds = %land.lhs.true
  %91 = load i32, i32* %mbaddrx.addr, align 4
  %mul164 = mul nsw i32 %91, 4
  %92 = load i8, i8* %x.addr, align 1
  %conv165 = zext i8 %92 to i32
  %add166 = add nsw i32 %mul164, %conv165
  %mul167 = mul nsw i32 %add166, 4
  %93 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx168 = getelementptr inbounds i32, i32* %93, i64 0
  %94 = load i32, i32* %arrayidx168, align 4
  %shr = ashr i32 %94, 2
  %add169 = add nsw i32 %mul167, %shr
  store i32 %add169, i32* %xint0, align 4
  %95 = load i32, i32* %mbaddry.addr, align 4
  %mul170 = mul nsw i32 %95, 4
  %96 = load i8, i8* %y.addr, align 1
  %conv171 = zext i8 %96 to i32
  %add172 = add nsw i32 %mul170, %conv171
  %mul173 = mul nsw i32 %add172, 4
  %97 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx174 = getelementptr inbounds i32, i32* %97, i64 1
  %98 = load i32, i32* %arrayidx174, align 4
  %shr175 = ashr i32 %98, 2
  %add176 = add nsw i32 %mul173, %shr175
  store i32 %add176, i32* %yint0, align 4
  %99 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx177 = getelementptr inbounds i32, i32* %99, i64 0
  %100 = load i32, i32* %arrayidx177, align 4
  %and178 = and i32 %100, 3
  store i32 %and178, i32* %xfrac0, align 4
  %101 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx179 = getelementptr inbounds i32, i32* %101, i64 1
  %102 = load i32, i32* %arrayidx179, align 4
  %and180 = and i32 %102, 3
  store i32 %and180, i32* %yfrac0, align 4
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 12
  %104 = load i8, i8* %refidx0.addr, align 1
  %conv181 = sext i8 %104 to i32
  %cmp182 = icmp sge i32 %conv181, 0
  %conv183 = zext i1 %cmp182 to i32
  %105 = load i8, i8* %refidx0.addr, align 1
  %conv184 = sext i8 %105 to i32
  %mul185 = mul nsw i32 %conv183, %conv184
  %idxprom186 = sext i32 %mul185 to i64
  %arrayidx187 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i64 0, i64 %idxprom186
  %106 = load i32, i32* %arrayidx187, align 4
  store i32 %106, i32* %tmpidx0, align 4
  br label %if.end285

if.else188:                                       ; preds = %land.lhs.true, %if.else156
  %107 = load i8, i8* %refidx1.addr, align 1
  %conv189 = sext i8 %107 to i32
  %cmp190 = icmp sge i32 %conv189, 0
  br i1 %cmp190, label %land.lhs.true192, label %if.else222, !prof !407

land.lhs.true192:                                 ; preds = %if.else188
  %108 = load i8, i8* %refidx0.addr, align 1
  %conv193 = sext i8 %108 to i32
  %cmp194 = icmp slt i32 %conv193, 0
  br i1 %cmp194, label %if.then196, label %if.else222, !prof !408

if.then196:                                       ; preds = %land.lhs.true192
  %109 = load i32, i32* %mbaddrx.addr, align 4
  %mul197 = mul nsw i32 %109, 4
  %110 = load i8, i8* %x.addr, align 1
  %conv198 = zext i8 %110 to i32
  %add199 = add nsw i32 %mul197, %conv198
  %mul200 = mul nsw i32 %add199, 4
  %111 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx201 = getelementptr inbounds i32, i32* %111, i64 0
  %112 = load i32, i32* %arrayidx201, align 4
  %shr202 = ashr i32 %112, 2
  %add203 = add nsw i32 %mul200, %shr202
  store i32 %add203, i32* %xint0, align 4
  %113 = load i32, i32* %mbaddry.addr, align 4
  %mul204 = mul nsw i32 %113, 4
  %114 = load i8, i8* %y.addr, align 1
  %conv205 = zext i8 %114 to i32
  %add206 = add nsw i32 %mul204, %conv205
  %mul207 = mul nsw i32 %add206, 4
  %115 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx208 = getelementptr inbounds i32, i32* %115, i64 1
  %116 = load i32, i32* %arrayidx208, align 4
  %shr209 = ashr i32 %116, 2
  %add210 = add nsw i32 %mul207, %shr209
  store i32 %add210, i32* %yint0, align 4
  %117 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx211 = getelementptr inbounds i32, i32* %117, i64 0
  %118 = load i32, i32* %arrayidx211, align 4
  %and212 = and i32 %118, 3
  store i32 %and212, i32* %xfrac0, align 4
  %119 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx213 = getelementptr inbounds i32, i32* %119, i64 1
  %120 = load i32, i32* %arrayidx213, align 4
  %and214 = and i32 %120, 3
  store i32 %and214, i32* %yfrac0, align 4
  %121 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %121, i32 0, i32 13
  %122 = load i8, i8* %refidx1.addr, align 1
  %conv215 = sext i8 %122 to i32
  %cmp216 = icmp sge i32 %conv215, 0
  %conv217 = zext i1 %cmp216 to i32
  %123 = load i8, i8* %refidx1.addr, align 1
  %conv218 = sext i8 %123 to i32
  %mul219 = mul nsw i32 %conv217, %conv218
  %idxprom220 = sext i32 %mul219 to i64
  %arrayidx221 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 %idxprom220
  %124 = load i32, i32* %arrayidx221, align 4
  store i32 %124, i32* %tmpidx0, align 4
  br label %if.end284

if.else222:                                       ; preds = %land.lhs.true192, %if.else188
  %125 = load i8, i8* %refidx1.addr, align 1
  %conv223 = sext i8 %125 to i32
  %cmp224 = icmp sge i32 %conv223, 0
  br i1 %cmp224, label %land.lhs.true226, label %if.end283, !prof !407

land.lhs.true226:                                 ; preds = %if.else222
  %126 = load i8, i8* %refidx0.addr, align 1
  %conv227 = sext i8 %126 to i32
  %cmp228 = icmp sge i32 %conv227, 0
  br i1 %cmp228, label %if.then230, label %if.end283, !prof !407

if.then230:                                       ; preds = %land.lhs.true226
  %127 = load i32, i32* %mbaddrx.addr, align 4
  %mul231 = mul nsw i32 %127, 4
  %128 = load i8, i8* %x.addr, align 1
  %conv232 = zext i8 %128 to i32
  %add233 = add nsw i32 %mul231, %conv232
  %mul234 = mul nsw i32 %add233, 4
  %129 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx235 = getelementptr inbounds i32, i32* %129, i64 0
  %130 = load i32, i32* %arrayidx235, align 4
  %shr236 = ashr i32 %130, 2
  %add237 = add nsw i32 %mul234, %shr236
  store i32 %add237, i32* %xint1, align 4
  %131 = load i32, i32* %mbaddry.addr, align 4
  %mul238 = mul nsw i32 %131, 4
  %132 = load i8, i8* %y.addr, align 1
  %conv239 = zext i8 %132 to i32
  %add240 = add nsw i32 %mul238, %conv239
  %mul241 = mul nsw i32 %add240, 4
  %133 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx242 = getelementptr inbounds i32, i32* %133, i64 1
  %134 = load i32, i32* %arrayidx242, align 4
  %shr243 = ashr i32 %134, 2
  %add244 = add nsw i32 %mul241, %shr243
  store i32 %add244, i32* %yint1, align 4
  %135 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx245 = getelementptr inbounds i32, i32* %135, i64 0
  %136 = load i32, i32* %arrayidx245, align 4
  %and246 = and i32 %136, 3
  store i32 %and246, i32* %xfrac1, align 4
  %137 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx247 = getelementptr inbounds i32, i32* %137, i64 1
  %138 = load i32, i32* %arrayidx247, align 4
  %and248 = and i32 %138, 3
  store i32 %and248, i32* %yfrac1, align 4
  %139 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1249 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %139, i32 0, i32 13
  %140 = load i8, i8* %refidx1.addr, align 1
  %conv250 = sext i8 %140 to i32
  %cmp251 = icmp sge i32 %conv250, 0
  %conv252 = zext i1 %cmp251 to i32
  %141 = load i8, i8* %refidx1.addr, align 1
  %conv253 = sext i8 %141 to i32
  %mul254 = mul nsw i32 %conv252, %conv253
  %idxprom255 = sext i32 %mul254 to i64
  %arrayidx256 = getelementptr inbounds [3 x i32], [3 x i32]* %list1249, i64 0, i64 %idxprom255
  %142 = load i32, i32* %arrayidx256, align 4
  store i32 %142, i32* %tmpidx1, align 4
  %143 = load i32, i32* %mbaddrx.addr, align 4
  %mul257 = mul nsw i32 %143, 4
  %144 = load i8, i8* %x.addr, align 1
  %conv258 = zext i8 %144 to i32
  %add259 = add nsw i32 %mul257, %conv258
  %mul260 = mul nsw i32 %add259, 4
  %145 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx261 = getelementptr inbounds i32, i32* %145, i64 0
  %146 = load i32, i32* %arrayidx261, align 4
  %shr262 = ashr i32 %146, 2
  %add263 = add nsw i32 %mul260, %shr262
  store i32 %add263, i32* %xint0, align 4
  %147 = load i32, i32* %mbaddry.addr, align 4
  %mul264 = mul nsw i32 %147, 4
  %148 = load i8, i8* %y.addr, align 1
  %conv265 = zext i8 %148 to i32
  %add266 = add nsw i32 %mul264, %conv265
  %mul267 = mul nsw i32 %add266, 4
  %149 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx268 = getelementptr inbounds i32, i32* %149, i64 1
  %150 = load i32, i32* %arrayidx268, align 4
  %shr269 = ashr i32 %150, 2
  %add270 = add nsw i32 %mul267, %shr269
  store i32 %add270, i32* %yint0, align 4
  %151 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx271 = getelementptr inbounds i32, i32* %151, i64 0
  %152 = load i32, i32* %arrayidx271, align 4
  %and272 = and i32 %152, 3
  store i32 %and272, i32* %xfrac0, align 4
  %153 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx273 = getelementptr inbounds i32, i32* %153, i64 1
  %154 = load i32, i32* %arrayidx273, align 4
  %and274 = and i32 %154, 3
  store i32 %and274, i32* %yfrac0, align 4
  %155 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0275 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %155, i32 0, i32 12
  %156 = load i8, i8* %refidx0.addr, align 1
  %conv276 = sext i8 %156 to i32
  %cmp277 = icmp sge i32 %conv276, 0
  %conv278 = zext i1 %cmp277 to i32
  %157 = load i8, i8* %refidx0.addr, align 1
  %conv279 = sext i8 %157 to i32
  %mul280 = mul nsw i32 %conv278, %conv279
  %idxprom281 = sext i32 %mul280 to i64
  %arrayidx282 = getelementptr inbounds [3 x i32], [3 x i32]* %list0275, i64 0, i64 %idxprom281
  %158 = load i32, i32* %arrayidx282, align 4
  store i32 %158, i32* %tmpidx0, align 4
  br label %if.end283

if.end283:                                        ; preds = %if.then230, %land.lhs.true226, %if.else222
  br label %if.end284

if.end284:                                        ; preds = %if.end283, %if.then196
  br label %if.end285

if.end285:                                        ; preds = %if.end284, %if.then163
  %159 = load i8, i8* %refidx0.addr, align 1
  %conv286 = sext i8 %159 to i32
  %cmp287 = icmp sge i32 %conv286, 0
  br i1 %cmp287, label %land.lhs.true289, label %if.else333, !prof !405

land.lhs.true289:                                 ; preds = %if.end285
  %160 = load i8, i8* %refidx1.addr, align 1
  %conv290 = sext i8 %160 to i32
  %cmp291 = icmp sge i32 %conv290, 0
  br i1 %cmp291, label %land.lhs.true293, label %if.else333, !prof !409

land.lhs.true293:                                 ; preds = %land.lhs.true289
  %161 = load i32, i32* %xfrac0, align 4
  %cmp294 = icmp eq i32 %161, 0
  br i1 %cmp294, label %land.lhs.true296, label %if.else333, !prof !407

land.lhs.true296:                                 ; preds = %land.lhs.true293
  %162 = load i32, i32* %yfrac0, align 4
  %cmp297 = icmp eq i32 %162, 0
  br i1 %cmp297, label %land.lhs.true299, label %if.else333, !prof !407

land.lhs.true299:                                 ; preds = %land.lhs.true296
  %163 = load i32, i32* %xfrac1, align 4
  %cmp300 = icmp eq i32 %163, 0
  br i1 %cmp300, label %land.lhs.true302, label %if.else333, !prof !407

land.lhs.true302:                                 ; preds = %land.lhs.true299
  %164 = load i32, i32* %yfrac1, align 4
  %cmp303 = icmp eq i32 %164, 0
  br i1 %cmp303, label %if.then305, label %if.else333, !prof !407

if.then305:                                       ; preds = %land.lhs.true302
  %165 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %166 = load i32, i32* %tmpidx0, align 4
  %idxprom306 = sext i32 %166 to i64
  %arrayidx307 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %165, i64 %idxprom306
  %arraydecay308 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx307, i32 0, i32 0
  %167 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %168 = load i32, i32* %tmpidx1, align 4
  %idxprom309 = sext i32 %168 to i64
  %arrayidx310 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %167, i64 %idxprom309
  %arraydecay311 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx310, i32 0, i32 0
  %169 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %170 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx312 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %170, i32 0, i32 9
  %171 = load i32, i32* %mem_idx312, align 4
  %idxprom313 = sext i32 %171 to i64
  %arrayidx314 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %169, i64 %idxprom313
  %arraydecay315 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx314, i32 0, i32 0
  %172 = load i32, i32* %mbaddrx.addr, align 4
  %mul316 = mul nsw i32 %172, 4
  %173 = load i8, i8* %x.addr, align 1
  %conv317 = zext i8 %173 to i32
  %add318 = add nsw i32 %mul316, %conv317
  %mul319 = mul nsw i32 %add318, 4
  %174 = load i32, i32* %mbaddry.addr, align 4
  %mul320 = mul nsw i32 %174, 4
  %175 = load i8, i8* %y.addr, align 1
  %conv321 = zext i8 %175 to i32
  %add322 = add nsw i32 %mul320, %conv321
  %mul323 = mul nsw i32 %add322, 4
  %176 = load i32, i32* %xint0, align 4
  %177 = load i32, i32* %yint0, align 4
  %178 = load i32, i32* %xint1, align 4
  %179 = load i32, i32* %yint1, align 4
  %arraydecay324 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %180 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv325 = zext i8 %180 to i32
  %181 = load i8, i8* %k.addr, align 1
  %conv326 = zext i8 %181 to i32
  %div327 = sdiv i32 %conv326, 4
  %shl328 = shl i32 1, %div327
  %and329 = and i32 %conv325, %shl328
  %cmp330 = icmp ne i32 %and329, 0
  %conv331 = zext i1 %cmp330 to i32
  %conv332 = trunc i32 %conv331 to i8
  call void @inter_luma_double_bizero_skip([144 x i8]* %arraydecay308, [144 x i8]* %arraydecay311, [144 x i8]* %arraydecay315, i32 %mul319, i32 %mul323, i32 %176, i32 %177, i32 %178, i32 %179, [4 x i32]* %arraydecay324, i8 zeroext %conv332)
  br label %if.end458

if.else333:                                       ; preds = %land.lhs.true302, %land.lhs.true299, %land.lhs.true296, %land.lhs.true293, %land.lhs.true289, %if.end285
  %182 = load i8, i8* %refidx0.addr, align 1
  %conv334 = sext i8 %182 to i32
  %cmp335 = icmp sge i32 %conv334, 0
  br i1 %cmp335, label %land.lhs.true337, label %if.else410, !prof !410

land.lhs.true337:                                 ; preds = %if.else333
  %183 = load i8, i8* %refidx1.addr, align 1
  %conv338 = sext i8 %183 to i32
  %cmp339 = icmp sge i32 %conv338, 0
  br i1 %cmp339, label %if.then341, label %if.else410, !prof !411

if.then341:                                       ; preds = %land.lhs.true337
  %184 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %185 = load i32, i32* %tmpidx0, align 4
  %idxprom342 = sext i32 %185 to i64
  %arrayidx343 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %184, i64 %idxprom342
  %arraydecay344 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx343, i32 0, i32 0
  %186 = load i32, i32* %xint0, align 4
  %187 = load i32, i32* %yint0, align 4
  %188 = load i32, i32* %xfrac0, align 4
  %conv345 = trunc i32 %188 to i8
  %189 = load i32, i32* %yfrac0, align 4
  %conv346 = trunc i32 %189 to i8
  %arraydecay347 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay344, i32 %186, i32 %187, i8 zeroext %conv345, i8 zeroext %conv346, [9 x i8]* %arraydecay347)
  %190 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %191 = load i32, i32* %tmpidx1, align 4
  %idxprom348 = sext i32 %191 to i64
  %arrayidx349 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %190, i64 %idxprom348
  %arraydecay350 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx349, i32 0, i32 0
  %192 = load i32, i32* %xint1, align 4
  %193 = load i32, i32* %yint1, align 4
  %194 = load i32, i32* %xfrac1, align 4
  %conv351 = trunc i32 %194 to i8
  %195 = load i32, i32* %yfrac1, align 4
  %conv352 = trunc i32 %195 to i8
  %arraydecay353 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp1, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay350, i32 %192, i32 %193, i8 zeroext %conv351, i8 zeroext %conv352, [9 x i8]* %arraydecay353)
  %196 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %197 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx354 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %197, i32 0, i32 9
  %198 = load i32, i32* %mem_idx354, align 4
  %idxprom355 = sext i32 %198 to i64
  %arrayidx356 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %196, i64 %idxprom355
  %arraydecay357 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx356, i32 0, i32 0
  %199 = load i32, i32* %mbaddrx.addr, align 4
  %mul358 = mul nsw i32 %199, 4
  %200 = load i8, i8* %x.addr, align 1
  %conv359 = zext i8 %200 to i32
  %add360 = add nsw i32 %mul358, %conv359
  %mul361 = mul nsw i32 %add360, 4
  %201 = load i32, i32* %mbaddry.addr, align 4
  %mul362 = mul nsw i32 %201, 4
  %202 = load i8, i8* %y.addr, align 1
  %conv363 = zext i8 %202 to i32
  %add364 = add nsw i32 %mul362, %conv363
  %mul365 = mul nsw i32 %add364, 4
  %203 = load i32, i32* %xfrac0, align 4
  %conv366 = trunc i32 %203 to i8
  %204 = load i32, i32* %yfrac0, align 4
  %conv367 = trunc i32 %204 to i8
  %205 = load i32, i32* %xfrac1, align 4
  %conv368 = trunc i32 %205 to i8
  %206 = load i32, i32* %yfrac1, align 4
  %conv369 = trunc i32 %206 to i8
  %207 = load i32, i32* %xfrac0, align 4
  %cmp370 = icmp eq i32 %207, 3
  br i1 %cmp370, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then341
  %208 = load i32, i32* %yfrac0, align 4
  %cmp372 = icmp ne i32 %208, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then341
  %209 = phi i1 [ false, %if.then341 ], [ %cmp372, %land.rhs ]
  %land.ext = zext i1 %209 to i32
  %conv374 = trunc i32 %land.ext to i8
  %210 = load i32, i32* %yfrac0, align 4
  %cmp375 = icmp eq i32 %210, 3
  br i1 %cmp375, label %land.rhs377, label %land.end380

land.rhs377:                                      ; preds = %land.end
  %211 = load i32, i32* %xfrac0, align 4
  %cmp378 = icmp ne i32 %211, 0
  br label %land.end380

land.end380:                                      ; preds = %land.rhs377, %land.end
  %212 = phi i1 [ false, %land.end ], [ %cmp378, %land.rhs377 ]
  %land.ext381 = zext i1 %212 to i32
  %conv382 = trunc i32 %land.ext381 to i8
  %213 = load i32, i32* %xfrac1, align 4
  %cmp383 = icmp eq i32 %213, 3
  br i1 %cmp383, label %land.rhs385, label %land.end388

land.rhs385:                                      ; preds = %land.end380
  %214 = load i32, i32* %yfrac1, align 4
  %cmp386 = icmp ne i32 %214, 0
  br label %land.end388

land.end388:                                      ; preds = %land.rhs385, %land.end380
  %215 = phi i1 [ false, %land.end380 ], [ %cmp386, %land.rhs385 ]
  %land.ext389 = zext i1 %215 to i32
  %conv390 = trunc i32 %land.ext389 to i8
  %216 = load i32, i32* %yfrac1, align 4
  %cmp391 = icmp eq i32 %216, 3
  br i1 %cmp391, label %land.rhs393, label %land.end396

land.rhs393:                                      ; preds = %land.end388
  %217 = load i32, i32* %xfrac1, align 4
  %cmp394 = icmp ne i32 %217, 0
  br label %land.end396

land.end396:                                      ; preds = %land.rhs393, %land.end388
  %218 = phi i1 [ false, %land.end388 ], [ %cmp394, %land.rhs393 ]
  %land.ext397 = zext i1 %218 to i32
  %conv398 = trunc i32 %land.ext397 to i8
  %arraydecay399 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  %arraydecay400 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp1, i32 0, i32 0
  %arraydecay401 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %219 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv402 = zext i8 %219 to i32
  %220 = load i8, i8* %k.addr, align 1
  %conv403 = zext i8 %220 to i32
  %div404 = sdiv i32 %conv403, 4
  %shl405 = shl i32 1, %div404
  %and406 = and i32 %conv402, %shl405
  %cmp407 = icmp ne i32 %and406, 0
  %conv408 = zext i1 %cmp407 to i32
  %conv409 = trunc i32 %conv408 to i8
  call void @inter_luma_double_skip([144 x i8]* %arraydecay357, i32 %mul361, i32 %mul365, i8 zeroext %conv366, i8 zeroext %conv367, i8 zeroext %conv368, i8 zeroext %conv369, i8 zeroext %conv374, i8 zeroext %conv382, i8 zeroext %conv390, i8 zeroext %conv398, [9 x i8]* %arraydecay399, [9 x i8]* %arraydecay400, [4 x i32]* %arraydecay401, i8 zeroext %conv409)
  br label %if.end457

if.else410:                                       ; preds = %land.lhs.true337, %if.else333
  %221 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %222 = load i32, i32* %tmpidx0, align 4
  %idxprom411 = sext i32 %222 to i64
  %arrayidx412 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %221, i64 %idxprom411
  %arraydecay413 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx412, i32 0, i32 0
  %223 = load i32, i32* %xint0, align 4
  %224 = load i32, i32* %yint0, align 4
  %225 = load i32, i32* %xfrac0, align 4
  %conv414 = trunc i32 %225 to i8
  %226 = load i32, i32* %yfrac0, align 4
  %conv415 = trunc i32 %226 to i8
  %arraydecay416 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay413, i32 %223, i32 %224, i8 zeroext %conv414, i8 zeroext %conv415, [9 x i8]* %arraydecay416)
  %227 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %228 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx417 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %228, i32 0, i32 9
  %229 = load i32, i32* %mem_idx417, align 4
  %idxprom418 = sext i32 %229 to i64
  %arrayidx419 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %227, i64 %idxprom418
  %arraydecay420 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx419, i32 0, i32 0
  %arraydecay421 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %230 = load i32, i32* %mbaddrx.addr, align 4
  %mul422 = mul nsw i32 %230, 4
  %231 = load i8, i8* %x.addr, align 1
  %conv423 = zext i8 %231 to i32
  %add424 = add nsw i32 %mul422, %conv423
  %mul425 = mul nsw i32 %add424, 4
  %232 = load i32, i32* %mbaddry.addr, align 4
  %mul426 = mul nsw i32 %232, 4
  %233 = load i8, i8* %y.addr, align 1
  %conv427 = zext i8 %233 to i32
  %add428 = add nsw i32 %mul426, %conv427
  %mul429 = mul nsw i32 %add428, 4
  %234 = load i32, i32* %xfrac0, align 4
  %conv430 = trunc i32 %234 to i8
  %235 = load i32, i32* %yfrac0, align 4
  %conv431 = trunc i32 %235 to i8
  %236 = load i32, i32* %xfrac0, align 4
  %cmp432 = icmp eq i32 %236, 3
  br i1 %cmp432, label %land.rhs434, label %land.end437, !prof !412

land.rhs434:                                      ; preds = %if.else410
  %237 = load i32, i32* %yfrac0, align 4
  %cmp435 = icmp ne i32 %237, 0
  br label %land.end437

land.end437:                                      ; preds = %land.rhs434, %if.else410
  %238 = phi i1 [ false, %if.else410 ], [ %cmp435, %land.rhs434 ]
  %land.ext438 = zext i1 %238 to i32
  %conv439 = trunc i32 %land.ext438 to i8
  %239 = load i32, i32* %yfrac0, align 4
  %cmp440 = icmp eq i32 %239, 3
  br i1 %cmp440, label %land.rhs442, label %land.end445, !prof !413

land.rhs442:                                      ; preds = %land.end437
  %240 = load i32, i32* %xfrac0, align 4
  %cmp443 = icmp ne i32 %240, 0
  br label %land.end445

land.end445:                                      ; preds = %land.rhs442, %land.end437
  %241 = phi i1 [ false, %land.end437 ], [ %cmp443, %land.rhs442 ]
  %land.ext446 = zext i1 %241 to i32
  %conv447 = trunc i32 %land.ext446 to i8
  %arraydecay448 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  %242 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv449 = zext i8 %242 to i32
  %243 = load i8, i8* %k.addr, align 1
  %conv450 = zext i8 %243 to i32
  %div451 = sdiv i32 %conv450, 4
  %shl452 = shl i32 1, %div451
  %and453 = and i32 %conv449, %shl452
  %cmp454 = icmp ne i32 %and453, 0
  %conv455 = zext i1 %cmp454 to i32
  %conv456 = trunc i32 %conv455 to i8
  call void @inter_luma_single([144 x i8]* %arraydecay420, [4 x i32]* %arraydecay421, i32 %mul425, i32 %mul429, i8 zeroext %conv430, i8 zeroext %conv431, i8 zeroext %conv439, i8 zeroext %conv447, [9 x i8]* %arraydecay448, i8 zeroext %conv456)
  br label %if.end457

if.end457:                                        ; preds = %land.end445, %land.end396
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %if.then305
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %lor.end153
  br label %if.end460

if.end460:                                        ; preds = %if.end459, %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_chroma(i8 zeroext %CodedPatternChroma, [22 x [18 x i8]]* %NzChroma, [9 x i8]* %Imode, i32 %mbaddrx, i32 %mbaddry, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 signext %qPc, i8 signext %qPcm6, i8 signext %temp1c, i8 signext %temp2c, i8 signext %temp3c, [2 x i32]* %coeffDCC_0, [2 x i32]* %coeffDCC_1, [2 x i8]* %refidx0, [2 x i8]* %refidx1, [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]* %mvd1, %struct.ImageParameters* %img, i8 zeroext %tmpImode, [4 x [4 x i8]]* %predC_0, [4 x [4 x i8]]* %predC_1, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1) #0 !prof !414 {
entry:
  %CodedPatternChroma.addr = alloca i8, align 1
  %NzChroma.addr = alloca [22 x [18 x i8]]*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %mbaddrx.addr = alloca i32, align 4
  %mbaddry.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %qPc.addr = alloca i8, align 1
  %qPcm6.addr = alloca i8, align 1
  %temp1c.addr = alloca i8, align 1
  %temp2c.addr = alloca i8, align 1
  %temp3c.addr = alloca i8, align 1
  %coeffDCC_0.addr = alloca [2 x i32]*, align 8
  %coeffDCC_1.addr = alloca [2 x i32]*, align 8
  %refidx0.addr = alloca [2 x i8]*, align 8
  %refidx1.addr = alloca [2 x i8]*, align 8
  %mvd0.addr = alloca [4 x [2 x i32]]*, align 8
  %mvd1.addr = alloca [4 x [2 x i32]]*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %tmpImode.addr = alloca i8, align 1
  %predC_0.addr = alloca [4 x [4 x i8]]*, align 8
  %predC_1.addr = alloca [4 x [4 x i8]]*, align 8
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %nC = alloca i32, align 4
  %coeffACC_0 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %coeffACC_1 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %rMbC_0 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %rMbC_1 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %mvdC0 = alloca [2 x [2 x [2 x i32]]], align 16
  %mvdC1 = alloca [2 x [2 x [2 x i32]]], align 16
  %tmpidx0 = alloca i32, align 4
  %tmpidx1 = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8 %CodedPatternChroma, i8* %CodedPatternChroma.addr, align 1
  store [22 x [18 x i8]]* %NzChroma, [22 x [18 x i8]]** %NzChroma.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store i32 %mbaddrx, i32* %mbaddrx.addr, align 4
  store i32 %mbaddry, i32* %mbaddry.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %qPc, i8* %qPc.addr, align 1
  store i8 %qPcm6, i8* %qPcm6.addr, align 1
  store i8 %temp1c, i8* %temp1c.addr, align 1
  store i8 %temp2c, i8* %temp2c.addr, align 1
  store i8 %temp3c, i8* %temp3c.addr, align 1
  store [2 x i32]* %coeffDCC_0, [2 x i32]** %coeffDCC_0.addr, align 8
  store [2 x i32]* %coeffDCC_1, [2 x i32]** %coeffDCC_1.addr, align 8
  store [2 x i8]* %refidx0, [2 x i8]** %refidx0.addr, align 8
  store [2 x i8]* %refidx1, [2 x i8]** %refidx1.addr, align 8
  store [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]** %mvd0.addr, align 8
  store [4 x [2 x i32]]* %mvd1, [4 x [2 x i32]]** %mvd1.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store i8 %tmpImode, i8* %tmpImode.addr, align 1
  store [4 x [4 x i8]]* %predC_0, [4 x [4 x i8]]** %predC_0.addr, align 8
  store [4 x [4 x i8]]* %predC_1, [4 x [4 x i8]]** %predC_1.addr, align 8
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store i32 0, i32* %nC, align 4
  %0 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 256, i1 false)
  %1 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %2 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 256, i1 false)
  %3 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 256, i1 false)
  %4 = bitcast [2 x [2 x [2 x i32]]]* %mvdC0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 32, i1 false)
  %5 = bitcast [2 x [2 x [2 x i32]]]* %mvdC1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 32, i1 false)
  store i32 0, i32* %tmpidx0, align 4
  store i32 0, i32* %tmpidx1, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc60, %entry
  %6 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, 2
  br i1 %cmp, label %for.body, label %for.end62, !prof !415

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc57, %for.body
  %7 = load i32, i32* %x, align 4
  %cmp2 = icmp slt i32 %7, 2
  br i1 %cmp2, label %for.body3, label %for.end59, !prof !416

for.body3:                                        ; preds = %for.cond1
  %8 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !417

if.then:                                          ; preds = %for.body3
  %9 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %10 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %10, i64 0
  %arraydecay = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx, i32 0, i32 0
  %11 = load i32, i32* %mbaddrx.addr, align 4
  %mul = mul nsw i32 %11, 2
  %12 = load i32, i32* %x, align 4
  %add = add nsw i32 %mul, %12
  %13 = load i32, i32* %mbaddry.addr, align 4
  %mul4 = mul nsw i32 %13, 2
  %14 = load i32, i32* %y, align 4
  %add5 = add nsw i32 %mul4, %14
  %call = call zeroext i8 @nc_Chroma([9 x i8]* %9, [18 x i8]* %arraydecay, i32 %add, i32 %add5)
  %conv6 = zext i8 %call to i32
  store i32 %conv6, i32* %nC, align 4
  %15 = load i32, i32* %x, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx7 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom
  %16 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %16 to i64
  %arrayidx9 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx7, i64 0, i64 %idxprom8
  %arraydecay10 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx9, i32 0, i32 0
  %17 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %20 = load i32, i32* %nC, align 4
  %call11 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay10, %struct.NALU_t* %17, i8* %18, i64* %19, i32 1, i32 15, i32 %20)
  %21 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx12 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %21, i64 0
  %22 = load i32, i32* %mbaddrx.addr, align 4
  %mul13 = mul nsw i32 %22, 2
  %23 = load i32, i32* %x, align 4
  %add14 = add nsw i32 %mul13, %23
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx12, i64 0, i64 %idxprom15
  %24 = load i32, i32* %mbaddry.addr, align 4
  %mul17 = mul nsw i32 %24, 2
  %25 = load i32, i32* %y, align 4
  %add18 = add nsw i32 %mul17, %25
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx16, i64 0, i64 %idxprom19
  store i8 %call11, i8* %arrayidx20, align 1
  br label %if.end

if.else:                                          ; preds = %for.body3
  %26 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx21 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %26, i64 0
  %27 = load i32, i32* %mbaddrx.addr, align 4
  %mul22 = mul nsw i32 %27, 2
  %28 = load i32, i32* %x, align 4
  %add23 = add nsw i32 %mul22, %28
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx21, i64 0, i64 %idxprom24
  %29 = load i32, i32* %mbaddry.addr, align 4
  %mul26 = mul nsw i32 %29, 2
  %30 = load i32, i32* %y, align 4
  %add27 = add nsw i32 %mul26, %30
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx25, i64 0, i64 %idxprom28
  store i8 0, i8* %arrayidx29, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc54, %if.else
  %31 = load i32, i32* %i, align 4
  %cmp31 = icmp slt i32 %31, 4
  br i1 %cmp31, label %for.body33, label %for.end56, !prof !418

for.body33:                                       ; preds = %for.cond30
  store i32 0, i32* %j, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc, %for.body33
  %32 = load i32, i32* %j, align 4
  %cmp35 = icmp slt i32 %32, 4
  br i1 %cmp35, label %for.body37, label %for.end, !prof !419

for.body37:                                       ; preds = %for.cond34
  %33 = load i32, i32* %x, align 4
  %idxprom38 = sext i32 %33 to i64
  %arrayidx39 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom38
  %34 = load i32, i32* %y, align 4
  %idxprom40 = sext i32 %34 to i64
  %arrayidx41 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx39, i64 0, i64 %idxprom40
  %35 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %35 to i64
  %arrayidx43 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx41, i64 0, i64 %idxprom42
  %36 = load i32, i32* %j, align 4
  %idxprom44 = sext i32 %36 to i64
  %arrayidx45 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx43, i64 0, i64 %idxprom44
  store i32 0, i32* %arrayidx45, align 4
  %37 = load i32, i32* %x, align 4
  %idxprom46 = sext i32 %37 to i64
  %arrayidx47 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom46
  %38 = load i32, i32* %y, align 4
  %idxprom48 = sext i32 %38 to i64
  %arrayidx49 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx47, i64 0, i64 %idxprom48
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx49, i64 0, i64 %idxprom50
  %40 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %40 to i64
  %arrayidx53 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx51, i64 0, i64 %idxprom52
  store i32 0, i32* %arrayidx53, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body37
  %41 = load i32, i32* %j, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond34

for.end:                                          ; preds = %for.cond34
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %42 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %42, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond30

for.end56:                                        ; preds = %for.cond30
  br label %if.end

if.end:                                           ; preds = %for.end56, %if.then
  br label %for.inc57

for.inc57:                                        ; preds = %if.end
  %43 = load i32, i32* %x, align 4
  %inc58 = add nsw i32 %43, 1
  store i32 %inc58, i32* %x, align 4
  br label %for.cond1

for.end59:                                        ; preds = %for.cond1
  br label %for.inc60

for.inc60:                                        ; preds = %for.end59
  %44 = load i32, i32* %y, align 4
  %inc61 = add nsw i32 %44, 1
  store i32 %inc61, i32* %y, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc142, %for.end62
  %45 = load i32, i32* %y, align 4
  %cmp64 = icmp slt i32 %45, 2
  br i1 %cmp64, label %for.body66, label %for.end144, !prof !415

for.body66:                                       ; preds = %for.cond63
  store i32 0, i32* %x, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc139, %for.body66
  %46 = load i32, i32* %x, align 4
  %cmp68 = icmp slt i32 %46, 2
  br i1 %cmp68, label %for.body70, label %for.end141, !prof !416

for.body70:                                       ; preds = %for.cond67
  %47 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv71 = zext i8 %47 to i32
  %and72 = and i32 %conv71, 2
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.else98, !prof !417

if.then74:                                        ; preds = %for.body70
  %48 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %49 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx75 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %49, i64 1
  %arraydecay76 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx75, i32 0, i32 0
  %50 = load i32, i32* %mbaddrx.addr, align 4
  %mul77 = mul nsw i32 %50, 2
  %51 = load i32, i32* %x, align 4
  %add78 = add nsw i32 %mul77, %51
  %52 = load i32, i32* %mbaddry.addr, align 4
  %mul79 = mul nsw i32 %52, 2
  %53 = load i32, i32* %y, align 4
  %add80 = add nsw i32 %mul79, %53
  %call81 = call zeroext i8 @nc_Chroma([9 x i8]* %48, [18 x i8]* %arraydecay76, i32 %add78, i32 %add80)
  %conv82 = zext i8 %call81 to i32
  store i32 %conv82, i32* %nC, align 4
  %54 = load i32, i32* %x, align 4
  %idxprom83 = sext i32 %54 to i64
  %arrayidx84 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom83
  %55 = load i32, i32* %y, align 4
  %idxprom85 = sext i32 %55 to i64
  %arrayidx86 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx84, i64 0, i64 %idxprom85
  %arraydecay87 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx86, i32 0, i32 0
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %59 = load i32, i32* %nC, align 4
  %call88 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay87, %struct.NALU_t* %56, i8* %57, i64* %58, i32 1, i32 15, i32 %59)
  %60 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx89 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %60, i64 1
  %61 = load i32, i32* %mbaddrx.addr, align 4
  %mul90 = mul nsw i32 %61, 2
  %62 = load i32, i32* %x, align 4
  %add91 = add nsw i32 %mul90, %62
  %idxprom92 = sext i32 %add91 to i64
  %arrayidx93 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx89, i64 0, i64 %idxprom92
  %63 = load i32, i32* %mbaddry.addr, align 4
  %mul94 = mul nsw i32 %63, 2
  %64 = load i32, i32* %y, align 4
  %add95 = add nsw i32 %mul94, %64
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx93, i64 0, i64 %idxprom96
  store i8 %call88, i8* %arrayidx97, align 1
  br label %if.end138

if.else98:                                        ; preds = %for.body70
  %65 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx99 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %65, i64 1
  %66 = load i32, i32* %mbaddrx.addr, align 4
  %mul100 = mul nsw i32 %66, 2
  %67 = load i32, i32* %x, align 4
  %add101 = add nsw i32 %mul100, %67
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx99, i64 0, i64 %idxprom102
  %68 = load i32, i32* %mbaddry.addr, align 4
  %mul104 = mul nsw i32 %68, 2
  %69 = load i32, i32* %y, align 4
  %add105 = add nsw i32 %mul104, %69
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx103, i64 0, i64 %idxprom106
  store i8 0, i8* %arrayidx107, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond108

for.cond108:                                      ; preds = %for.inc135, %if.else98
  %70 = load i32, i32* %i, align 4
  %cmp109 = icmp slt i32 %70, 4
  br i1 %cmp109, label %for.body111, label %for.end137, !prof !418

for.body111:                                      ; preds = %for.cond108
  store i32 0, i32* %j, align 4
  br label %for.cond112

for.cond112:                                      ; preds = %for.inc132, %for.body111
  %71 = load i32, i32* %j, align 4
  %cmp113 = icmp slt i32 %71, 4
  br i1 %cmp113, label %for.body115, label %for.end134, !prof !419

for.body115:                                      ; preds = %for.cond112
  %72 = load i32, i32* %x, align 4
  %idxprom116 = sext i32 %72 to i64
  %arrayidx117 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom116
  %73 = load i32, i32* %y, align 4
  %idxprom118 = sext i32 %73 to i64
  %arrayidx119 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx117, i64 0, i64 %idxprom118
  %74 = load i32, i32* %i, align 4
  %idxprom120 = sext i32 %74 to i64
  %arrayidx121 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx119, i64 0, i64 %idxprom120
  %75 = load i32, i32* %j, align 4
  %idxprom122 = sext i32 %75 to i64
  %arrayidx123 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx121, i64 0, i64 %idxprom122
  store i32 0, i32* %arrayidx123, align 4
  %76 = load i32, i32* %x, align 4
  %idxprom124 = sext i32 %76 to i64
  %arrayidx125 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom124
  %77 = load i32, i32* %y, align 4
  %idxprom126 = sext i32 %77 to i64
  %arrayidx127 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx125, i64 0, i64 %idxprom126
  %78 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %78 to i64
  %arrayidx129 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx127, i64 0, i64 %idxprom128
  %79 = load i32, i32* %j, align 4
  %idxprom130 = sext i32 %79 to i64
  %arrayidx131 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx129, i64 0, i64 %idxprom130
  store i32 0, i32* %arrayidx131, align 4
  br label %for.inc132

for.inc132:                                       ; preds = %for.body115
  %80 = load i32, i32* %j, align 4
  %inc133 = add nsw i32 %80, 1
  store i32 %inc133, i32* %j, align 4
  br label %for.cond112

for.end134:                                       ; preds = %for.cond112
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %81 = load i32, i32* %i, align 4
  %inc136 = add nsw i32 %81, 1
  store i32 %inc136, i32* %i, align 4
  br label %for.cond108

for.end137:                                       ; preds = %for.cond108
  br label %if.end138

if.end138:                                        ; preds = %for.end137, %if.then74
  br label %for.inc139

for.inc139:                                       ; preds = %if.end138
  %82 = load i32, i32* %x, align 4
  %inc140 = add nsw i32 %82, 1
  store i32 %inc140, i32* %x, align 4
  br label %for.cond67

for.end141:                                       ; preds = %for.cond67
  br label %for.inc142

for.inc142:                                       ; preds = %for.end141
  %83 = load i32, i32* %y, align 4
  %inc143 = add nsw i32 %83, 1
  store i32 %inc143, i32* %y, align 4
  br label %for.cond63

for.end144:                                       ; preds = %for.cond63
  store i32 0, i32* %y, align 4
  br label %for.cond145

for.cond145:                                      ; preds = %for.inc611, %for.end144
  %84 = load i32, i32* %y, align 4
  %cmp146 = icmp slt i32 %84, 2
  br i1 %cmp146, label %for.body148, label %for.end613, !prof !415

for.body148:                                      ; preds = %for.cond145
  store i32 0, i32* %x, align 4
  br label %for.cond149

for.cond149:                                      ; preds = %for.inc608, %for.body148
  %85 = load i32, i32* %x, align 4
  %cmp150 = icmp slt i32 %85, 2
  br i1 %cmp150, label %for.body152, label %for.end610, !prof !416

for.body152:                                      ; preds = %for.cond149
  %86 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv153 = zext i8 %86 to i32
  %and154 = and i32 %conv153, 3
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then156, label %if.end195, !prof !420

if.then156:                                       ; preds = %for.body152
  %87 = load i8, i8* %qPc.addr, align 1
  %conv157 = sext i8 %87 to i32
  %88 = load i8, i8* %qPcm6.addr, align 1
  %conv158 = sext i8 %88 to i32
  %89 = load i8, i8* %temp1c.addr, align 1
  %conv159 = sext i8 %89 to i32
  %90 = load i8, i8* %temp2c.addr, align 1
  %conv160 = sext i8 %90 to i32
  %91 = load i8, i8* %temp3c.addr, align 1
  %conv161 = sext i8 %91 to i32
  %92 = load i32, i32* %x, align 4
  %idxprom162 = sext i32 %92 to i64
  %arrayidx163 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom162
  %93 = load i32, i32* %y, align 4
  %idxprom164 = sext i32 %93 to i64
  %arrayidx165 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx163, i64 0, i64 %idxprom164
  %arraydecay166 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx165, i32 0, i32 0
  %94 = load i32, i32* %x, align 4
  %idxprom167 = sext i32 %94 to i64
  %arrayidx168 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom167
  %95 = load i32, i32* %y, align 4
  %idxprom169 = sext i32 %95 to i64
  %arrayidx170 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx168, i64 0, i64 %idxprom169
  %arraydecay171 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx170, i32 0, i32 0
  %96 = load [2 x i32]*, [2 x i32]** %coeffDCC_0.addr, align 8
  %97 = load i32, i32* %x, align 4
  %idxprom172 = sext i32 %97 to i64
  %arrayidx173 = getelementptr inbounds [2 x i32], [2 x i32]* %96, i64 %idxprom172
  %98 = load i32, i32* %y, align 4
  %idxprom174 = sext i32 %98 to i64
  %arrayidx175 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx173, i64 0, i64 %idxprom174
  %99 = load i32, i32* %arrayidx175, align 4
  call void @scale_residual4x4_and_trans_inverse(i32 %conv157, i32 %conv158, i32 %conv159, i32 %conv160, i32 %conv161, [4 x i32]* %arraydecay166, [4 x i32]* %arraydecay171, i32 %99, i8 zeroext 1)
  %100 = load i8, i8* %qPc.addr, align 1
  %conv176 = sext i8 %100 to i32
  %101 = load i8, i8* %qPcm6.addr, align 1
  %conv177 = sext i8 %101 to i32
  %102 = load i8, i8* %temp1c.addr, align 1
  %conv178 = sext i8 %102 to i32
  %103 = load i8, i8* %temp2c.addr, align 1
  %conv179 = sext i8 %103 to i32
  %104 = load i8, i8* %temp3c.addr, align 1
  %conv180 = sext i8 %104 to i32
  %105 = load i32, i32* %x, align 4
  %idxprom181 = sext i32 %105 to i64
  %arrayidx182 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom181
  %106 = load i32, i32* %y, align 4
  %idxprom183 = sext i32 %106 to i64
  %arrayidx184 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx182, i64 0, i64 %idxprom183
  %arraydecay185 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx184, i32 0, i32 0
  %107 = load i32, i32* %x, align 4
  %idxprom186 = sext i32 %107 to i64
  %arrayidx187 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom186
  %108 = load i32, i32* %y, align 4
  %idxprom188 = sext i32 %108 to i64
  %arrayidx189 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx187, i64 0, i64 %idxprom188
  %arraydecay190 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx189, i32 0, i32 0
  %109 = load [2 x i32]*, [2 x i32]** %coeffDCC_1.addr, align 8
  %110 = load i32, i32* %x, align 4
  %idxprom191 = sext i32 %110 to i64
  %arrayidx192 = getelementptr inbounds [2 x i32], [2 x i32]* %109, i64 %idxprom191
  %111 = load i32, i32* %y, align 4
  %idxprom193 = sext i32 %111 to i64
  %arrayidx194 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx192, i64 0, i64 %idxprom193
  %112 = load i32, i32* %arrayidx194, align 4
  call void @scale_residual4x4_and_trans_inverse(i32 %conv176, i32 %conv177, i32 %conv178, i32 %conv179, i32 %conv180, [4 x i32]* %arraydecay185, [4 x i32]* %arraydecay190, i32 %112, i8 zeroext 1)
  br label %if.end195

if.end195:                                        ; preds = %if.then156, %for.body152
  %113 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %114 = load i32, i32* %x, align 4
  %idxprom196 = sext i32 %114 to i64
  %arrayidx197 = getelementptr inbounds [2 x i8], [2 x i8]* %113, i64 %idxprom196
  %115 = load i32, i32* %y, align 4
  %idxprom198 = sext i32 %115 to i64
  %arrayidx199 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx197, i64 0, i64 %idxprom198
  %116 = load i8, i8* %arrayidx199, align 1
  %conv200 = sext i8 %116 to i32
  %cmp201 = icmp sge i32 %conv200, 0
  br i1 %cmp201, label %land.lhs.true, label %if.else295, !prof !421

land.lhs.true:                                    ; preds = %if.end195
  %117 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %118 = load i32, i32* %x, align 4
  %idxprom203 = sext i32 %118 to i64
  %arrayidx204 = getelementptr inbounds [2 x i8], [2 x i8]* %117, i64 %idxprom203
  %119 = load i32, i32* %y, align 4
  %idxprom205 = sext i32 %119 to i64
  %arrayidx206 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx204, i64 0, i64 %idxprom205
  %120 = load i8, i8* %arrayidx206, align 1
  %conv207 = sext i8 %120 to i32
  %cmp208 = icmp sge i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else295, !prof !422

if.then210:                                       ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond211

for.cond211:                                      ; preds = %for.inc278, %if.then210
  %121 = load i32, i32* %i, align 4
  %cmp212 = icmp slt i32 %121, 2
  br i1 %cmp212, label %for.body214, label %for.end280, !prof !423

for.body214:                                      ; preds = %for.cond211
  store i32 0, i32* %j, align 4
  br label %for.cond215

for.cond215:                                      ; preds = %for.inc275, %for.body214
  %122 = load i32, i32* %j, align 4
  %cmp216 = icmp slt i32 %122, 2
  br i1 %cmp216, label %for.body218, label %for.end277, !prof !424

for.body218:                                      ; preds = %for.cond215
  %123 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %124 = load i32, i32* %x, align 4
  %mul219 = mul nsw i32 %124, 2
  %125 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %mul219, %125
  %idxprom221 = sext i32 %add220 to i64
  %arrayidx222 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %123, i64 %idxprom221
  %126 = load i32, i32* %y, align 4
  %mul223 = mul nsw i32 %126, 2
  %127 = load i32, i32* %j, align 4
  %add224 = add nsw i32 %mul223, %127
  %idxprom225 = sext i32 %add224 to i64
  %arrayidx226 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx222, i64 0, i64 %idxprom225
  %arrayidx227 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx226, i64 0, i64 0
  %128 = load i32, i32* %arrayidx227, align 4
  %129 = load i32, i32* %i, align 4
  %idxprom228 = sext i32 %129 to i64
  %arrayidx229 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom228
  %130 = load i32, i32* %j, align 4
  %idxprom230 = sext i32 %130 to i64
  %arrayidx231 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx229, i64 0, i64 %idxprom230
  %arrayidx232 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx231, i64 0, i64 0
  store i32 %128, i32* %arrayidx232, align 8
  %131 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %132 = load i32, i32* %x, align 4
  %mul233 = mul nsw i32 %132, 2
  %133 = load i32, i32* %i, align 4
  %add234 = add nsw i32 %mul233, %133
  %idxprom235 = sext i32 %add234 to i64
  %arrayidx236 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %131, i64 %idxprom235
  %134 = load i32, i32* %y, align 4
  %mul237 = mul nsw i32 %134, 2
  %135 = load i32, i32* %j, align 4
  %add238 = add nsw i32 %mul237, %135
  %idxprom239 = sext i32 %add238 to i64
  %arrayidx240 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx236, i64 0, i64 %idxprom239
  %arrayidx241 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx240, i64 0, i64 0
  %136 = load i32, i32* %arrayidx241, align 4
  %137 = load i32, i32* %i, align 4
  %idxprom242 = sext i32 %137 to i64
  %arrayidx243 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i64 0, i64 %idxprom242
  %138 = load i32, i32* %j, align 4
  %idxprom244 = sext i32 %138 to i64
  %arrayidx245 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx243, i64 0, i64 %idxprom244
  %arrayidx246 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx245, i64 0, i64 0
  store i32 %136, i32* %arrayidx246, align 8
  %139 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %140 = load i32, i32* %x, align 4
  %mul247 = mul nsw i32 %140, 2
  %141 = load i32, i32* %i, align 4
  %add248 = add nsw i32 %mul247, %141
  %idxprom249 = sext i32 %add248 to i64
  %arrayidx250 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %139, i64 %idxprom249
  %142 = load i32, i32* %y, align 4
  %mul251 = mul nsw i32 %142, 2
  %143 = load i32, i32* %j, align 4
  %add252 = add nsw i32 %mul251, %143
  %idxprom253 = sext i32 %add252 to i64
  %arrayidx254 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx250, i64 0, i64 %idxprom253
  %arrayidx255 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx254, i64 0, i64 1
  %144 = load i32, i32* %arrayidx255, align 4
  %145 = load i32, i32* %i, align 4
  %idxprom256 = sext i32 %145 to i64
  %arrayidx257 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom256
  %146 = load i32, i32* %j, align 4
  %idxprom258 = sext i32 %146 to i64
  %arrayidx259 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx257, i64 0, i64 %idxprom258
  %arrayidx260 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx259, i64 0, i64 1
  store i32 %144, i32* %arrayidx260, align 4
  %147 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %148 = load i32, i32* %x, align 4
  %mul261 = mul nsw i32 %148, 2
  %149 = load i32, i32* %i, align 4
  %add262 = add nsw i32 %mul261, %149
  %idxprom263 = sext i32 %add262 to i64
  %arrayidx264 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %147, i64 %idxprom263
  %150 = load i32, i32* %y, align 4
  %mul265 = mul nsw i32 %150, 2
  %151 = load i32, i32* %j, align 4
  %add266 = add nsw i32 %mul265, %151
  %idxprom267 = sext i32 %add266 to i64
  %arrayidx268 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx264, i64 0, i64 %idxprom267
  %arrayidx269 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx268, i64 0, i64 1
  %152 = load i32, i32* %arrayidx269, align 4
  %153 = load i32, i32* %i, align 4
  %idxprom270 = sext i32 %153 to i64
  %arrayidx271 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i64 0, i64 %idxprom270
  %154 = load i32, i32* %j, align 4
  %idxprom272 = sext i32 %154 to i64
  %arrayidx273 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx271, i64 0, i64 %idxprom272
  %arrayidx274 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx273, i64 0, i64 1
  store i32 %152, i32* %arrayidx274, align 4
  br label %for.inc275

for.inc275:                                       ; preds = %for.body218
  %155 = load i32, i32* %j, align 4
  %inc276 = add nsw i32 %155, 1
  store i32 %inc276, i32* %j, align 4
  br label %for.cond215

for.end277:                                       ; preds = %for.cond215
  br label %for.inc278

for.inc278:                                       ; preds = %for.end277
  %156 = load i32, i32* %i, align 4
  %inc279 = add nsw i32 %156, 1
  store i32 %inc279, i32* %i, align 4
  br label %for.cond211

for.end280:                                       ; preds = %for.cond211
  %157 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %157, i32 0, i32 12
  %158 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %159 = load i32, i32* %x, align 4
  %idxprom281 = sext i32 %159 to i64
  %arrayidx282 = getelementptr inbounds [2 x i8], [2 x i8]* %158, i64 %idxprom281
  %160 = load i32, i32* %y, align 4
  %idxprom283 = sext i32 %160 to i64
  %arrayidx284 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx282, i64 0, i64 %idxprom283
  %161 = load i8, i8* %arrayidx284, align 1
  %conv285 = sext i8 %161 to i32
  %idxprom286 = zext i32 %conv285 to i64
  %arrayidx287 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i64 0, i64 %idxprom286
  %162 = load i32, i32* %arrayidx287, align 4
  store i32 %162, i32* %tmpidx0, align 4
  %163 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %163, i32 0, i32 13
  %164 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %165 = load i32, i32* %x, align 4
  %idxprom288 = sext i32 %165 to i64
  %arrayidx289 = getelementptr inbounds [2 x i8], [2 x i8]* %164, i64 %idxprom288
  %166 = load i32, i32* %y, align 4
  %idxprom290 = sext i32 %166 to i64
  %arrayidx291 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx289, i64 0, i64 %idxprom290
  %167 = load i8, i8* %arrayidx291, align 1
  %conv292 = sext i8 %167 to i32
  %idxprom293 = zext i32 %conv292 to i64
  %arrayidx294 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 %idxprom293
  %168 = load i32, i32* %arrayidx294, align 4
  store i32 %168, i32* %tmpidx1, align 4
  br label %if.end431

if.else295:                                       ; preds = %land.lhs.true, %if.end195
  %169 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %170 = load i32, i32* %x, align 4
  %idxprom296 = sext i32 %170 to i64
  %arrayidx297 = getelementptr inbounds [2 x i8], [2 x i8]* %169, i64 %idxprom296
  %171 = load i32, i32* %y, align 4
  %idxprom298 = sext i32 %171 to i64
  %arrayidx299 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx297, i64 0, i64 %idxprom298
  %172 = load i8, i8* %arrayidx299, align 1
  %conv300 = sext i8 %172 to i32
  %cmp301 = icmp sge i32 %conv300, 0
  br i1 %cmp301, label %land.lhs.true303, label %if.else362, !prof !425

land.lhs.true303:                                 ; preds = %if.else295
  %173 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %174 = load i32, i32* %x, align 4
  %idxprom304 = sext i32 %174 to i64
  %arrayidx305 = getelementptr inbounds [2 x i8], [2 x i8]* %173, i64 %idxprom304
  %175 = load i32, i32* %y, align 4
  %idxprom306 = sext i32 %175 to i64
  %arrayidx307 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx305, i64 0, i64 %idxprom306
  %176 = load i8, i8* %arrayidx307, align 1
  %conv308 = sext i8 %176 to i32
  %cmp309 = icmp slt i32 %conv308, 0
  br i1 %cmp309, label %if.then311, label %if.else362, !prof !425

if.then311:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %i, align 4
  br label %for.cond312

for.cond312:                                      ; preds = %for.inc351, %if.then311
  %177 = load i32, i32* %i, align 4
  %cmp313 = icmp slt i32 %177, 2
  br i1 %cmp313, label %for.body315, label %for.end353, !prof !426

for.body315:                                      ; preds = %for.cond312
  store i32 0, i32* %j, align 4
  br label %for.cond316

for.cond316:                                      ; preds = %for.inc348, %for.body315
  %178 = load i32, i32* %j, align 4
  %cmp317 = icmp slt i32 %178, 2
  br i1 %cmp317, label %for.body319, label %for.end350, !prof !193

for.body319:                                      ; preds = %for.cond316
  %179 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %180 = load i32, i32* %x, align 4
  %mul320 = mul nsw i32 %180, 2
  %181 = load i32, i32* %i, align 4
  %add321 = add nsw i32 %mul320, %181
  %idxprom322 = sext i32 %add321 to i64
  %arrayidx323 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %179, i64 %idxprom322
  %182 = load i32, i32* %y, align 4
  %mul324 = mul nsw i32 %182, 2
  %183 = load i32, i32* %j, align 4
  %add325 = add nsw i32 %mul324, %183
  %idxprom326 = sext i32 %add325 to i64
  %arrayidx327 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx323, i64 0, i64 %idxprom326
  %arrayidx328 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx327, i64 0, i64 0
  %184 = load i32, i32* %arrayidx328, align 4
  %185 = load i32, i32* %i, align 4
  %idxprom329 = sext i32 %185 to i64
  %arrayidx330 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom329
  %186 = load i32, i32* %j, align 4
  %idxprom331 = sext i32 %186 to i64
  %arrayidx332 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx330, i64 0, i64 %idxprom331
  %arrayidx333 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx332, i64 0, i64 0
  store i32 %184, i32* %arrayidx333, align 8
  %187 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %188 = load i32, i32* %x, align 4
  %mul334 = mul nsw i32 %188, 2
  %189 = load i32, i32* %i, align 4
  %add335 = add nsw i32 %mul334, %189
  %idxprom336 = sext i32 %add335 to i64
  %arrayidx337 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %187, i64 %idxprom336
  %190 = load i32, i32* %y, align 4
  %mul338 = mul nsw i32 %190, 2
  %191 = load i32, i32* %j, align 4
  %add339 = add nsw i32 %mul338, %191
  %idxprom340 = sext i32 %add339 to i64
  %arrayidx341 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx337, i64 0, i64 %idxprom340
  %arrayidx342 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx341, i64 0, i64 1
  %192 = load i32, i32* %arrayidx342, align 4
  %193 = load i32, i32* %i, align 4
  %idxprom343 = sext i32 %193 to i64
  %arrayidx344 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom343
  %194 = load i32, i32* %j, align 4
  %idxprom345 = sext i32 %194 to i64
  %arrayidx346 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx344, i64 0, i64 %idxprom345
  %arrayidx347 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx346, i64 0, i64 1
  store i32 %192, i32* %arrayidx347, align 4
  br label %for.inc348

for.inc348:                                       ; preds = %for.body319
  %195 = load i32, i32* %j, align 4
  %inc349 = add nsw i32 %195, 1
  store i32 %inc349, i32* %j, align 4
  br label %for.cond316

for.end350:                                       ; preds = %for.cond316
  br label %for.inc351

for.inc351:                                       ; preds = %for.end350
  %196 = load i32, i32* %i, align 4
  %inc352 = add nsw i32 %196, 1
  store i32 %inc352, i32* %i, align 4
  br label %for.cond312

for.end353:                                       ; preds = %for.cond312
  %197 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0354 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %197, i32 0, i32 12
  %198 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %199 = load i32, i32* %x, align 4
  %idxprom355 = sext i32 %199 to i64
  %arrayidx356 = getelementptr inbounds [2 x i8], [2 x i8]* %198, i64 %idxprom355
  %200 = load i32, i32* %y, align 4
  %idxprom357 = sext i32 %200 to i64
  %arrayidx358 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx356, i64 0, i64 %idxprom357
  %201 = load i8, i8* %arrayidx358, align 1
  %conv359 = sext i8 %201 to i32
  %idxprom360 = zext i32 %conv359 to i64
  %arrayidx361 = getelementptr inbounds [3 x i32], [3 x i32]* %list0354, i64 0, i64 %idxprom360
  %202 = load i32, i32* %arrayidx361, align 4
  store i32 %202, i32* %tmpidx0, align 4
  br label %if.end430

if.else362:                                       ; preds = %land.lhs.true303, %if.else295
  %203 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %204 = load i32, i32* %x, align 4
  %idxprom363 = sext i32 %204 to i64
  %arrayidx364 = getelementptr inbounds [2 x i8], [2 x i8]* %203, i64 %idxprom363
  %205 = load i32, i32* %y, align 4
  %idxprom365 = sext i32 %205 to i64
  %arrayidx366 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx364, i64 0, i64 %idxprom365
  %206 = load i8, i8* %arrayidx366, align 1
  %conv367 = sext i8 %206 to i32
  %cmp368 = icmp slt i32 %conv367, 0
  br i1 %cmp368, label %land.lhs.true370, label %if.end429

land.lhs.true370:                                 ; preds = %if.else362
  %207 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %208 = load i32, i32* %x, align 4
  %idxprom371 = sext i32 %208 to i64
  %arrayidx372 = getelementptr inbounds [2 x i8], [2 x i8]* %207, i64 %idxprom371
  %209 = load i32, i32* %y, align 4
  %idxprom373 = sext i32 %209 to i64
  %arrayidx374 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx372, i64 0, i64 %idxprom373
  %210 = load i8, i8* %arrayidx374, align 1
  %conv375 = sext i8 %210 to i32
  %cmp376 = icmp sge i32 %conv375, 0
  br i1 %cmp376, label %if.then378, label %if.end429

if.then378:                                       ; preds = %land.lhs.true370
  store i32 0, i32* %i, align 4
  br label %for.cond379

for.cond379:                                      ; preds = %for.inc418, %if.then378
  %211 = load i32, i32* %i, align 4
  %cmp380 = icmp slt i32 %211, 2
  br i1 %cmp380, label %for.body382, label %for.end420

for.body382:                                      ; preds = %for.cond379
  store i32 0, i32* %j, align 4
  br label %for.cond383

for.cond383:                                      ; preds = %for.inc415, %for.body382
  %212 = load i32, i32* %j, align 4
  %cmp384 = icmp slt i32 %212, 2
  br i1 %cmp384, label %for.body386, label %for.end417

for.body386:                                      ; preds = %for.cond383
  %213 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %214 = load i32, i32* %x, align 4
  %mul387 = mul nsw i32 %214, 2
  %215 = load i32, i32* %i, align 4
  %add388 = add nsw i32 %mul387, %215
  %idxprom389 = sext i32 %add388 to i64
  %arrayidx390 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %213, i64 %idxprom389
  %216 = load i32, i32* %y, align 4
  %mul391 = mul nsw i32 %216, 2
  %217 = load i32, i32* %j, align 4
  %add392 = add nsw i32 %mul391, %217
  %idxprom393 = sext i32 %add392 to i64
  %arrayidx394 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx390, i64 0, i64 %idxprom393
  %arrayidx395 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx394, i64 0, i64 0
  %218 = load i32, i32* %arrayidx395, align 4
  %219 = load i32, i32* %i, align 4
  %idxprom396 = sext i32 %219 to i64
  %arrayidx397 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom396
  %220 = load i32, i32* %j, align 4
  %idxprom398 = sext i32 %220 to i64
  %arrayidx399 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx397, i64 0, i64 %idxprom398
  %arrayidx400 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx399, i64 0, i64 0
  store i32 %218, i32* %arrayidx400, align 8
  %221 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %222 = load i32, i32* %x, align 4
  %mul401 = mul nsw i32 %222, 2
  %223 = load i32, i32* %i, align 4
  %add402 = add nsw i32 %mul401, %223
  %idxprom403 = sext i32 %add402 to i64
  %arrayidx404 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %221, i64 %idxprom403
  %224 = load i32, i32* %y, align 4
  %mul405 = mul nsw i32 %224, 2
  %225 = load i32, i32* %j, align 4
  %add406 = add nsw i32 %mul405, %225
  %idxprom407 = sext i32 %add406 to i64
  %arrayidx408 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx404, i64 0, i64 %idxprom407
  %arrayidx409 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx408, i64 0, i64 1
  %226 = load i32, i32* %arrayidx409, align 4
  %227 = load i32, i32* %i, align 4
  %idxprom410 = sext i32 %227 to i64
  %arrayidx411 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom410
  %228 = load i32, i32* %j, align 4
  %idxprom412 = sext i32 %228 to i64
  %arrayidx413 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx411, i64 0, i64 %idxprom412
  %arrayidx414 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx413, i64 0, i64 1
  store i32 %226, i32* %arrayidx414, align 4
  br label %for.inc415

for.inc415:                                       ; preds = %for.body386
  %229 = load i32, i32* %j, align 4
  %inc416 = add nsw i32 %229, 1
  store i32 %inc416, i32* %j, align 4
  br label %for.cond383

for.end417:                                       ; preds = %for.cond383
  br label %for.inc418

for.inc418:                                       ; preds = %for.end417
  %230 = load i32, i32* %i, align 4
  %inc419 = add nsw i32 %230, 1
  store i32 %inc419, i32* %i, align 4
  br label %for.cond379

for.end420:                                       ; preds = %for.cond379
  %231 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1421 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %231, i32 0, i32 13
  %232 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %233 = load i32, i32* %x, align 4
  %idxprom422 = sext i32 %233 to i64
  %arrayidx423 = getelementptr inbounds [2 x i8], [2 x i8]* %232, i64 %idxprom422
  %234 = load i32, i32* %y, align 4
  %idxprom424 = sext i32 %234 to i64
  %arrayidx425 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx423, i64 0, i64 %idxprom424
  %235 = load i8, i8* %arrayidx425, align 1
  %conv426 = sext i8 %235 to i32
  %idxprom427 = zext i32 %conv426 to i64
  %arrayidx428 = getelementptr inbounds [3 x i32], [3 x i32]* %list1421, i64 0, i64 %idxprom427
  %236 = load i32, i32* %arrayidx428, align 4
  store i32 %236, i32* %tmpidx0, align 4
  br label %if.end429

if.end429:                                        ; preds = %for.end420, %land.lhs.true370, %if.else362
  br label %if.end430

if.end430:                                        ; preds = %if.end429, %for.end353
  br label %if.end431

if.end431:                                        ; preds = %if.end430, %for.end280
  %237 = load i8, i8* %tmpImode.addr, align 1
  %conv432 = zext i8 %237 to i32
  %cmp433 = icmp eq i32 %conv432, 0
  br i1 %cmp433, label %if.then438, label %lor.lhs.false, !prof !427

lor.lhs.false:                                    ; preds = %if.end431
  %238 = load i8, i8* %tmpImode.addr, align 1
  %conv435 = zext i8 %238 to i32
  %cmp436 = icmp eq i32 %conv435, 1
  br i1 %cmp436, label %if.then438, label %if.else486, !prof !428

if.then438:                                       ; preds = %lor.lhs.false, %if.end431
  %239 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC_0.addr, align 8
  %240 = load i32, i32* %x, align 4
  %241 = load i32, i32* %y, align 4
  %mul439 = mul nsw i32 %241, 2
  %add440 = add nsw i32 %240, %mul439
  %idxprom441 = sext i32 %add440 to i64
  %arrayidx442 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %239, i64 %idxprom441
  %arraydecay443 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx442, i32 0, i32 0
  %242 = load i32, i32* %x, align 4
  %idxprom444 = sext i32 %242 to i64
  %arrayidx445 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom444
  %243 = load i32, i32* %y, align 4
  %idxprom446 = sext i32 %243 to i64
  %arrayidx447 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx445, i64 0, i64 %idxprom446
  %arraydecay448 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx447, i32 0, i32 0
  %244 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %245 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %245, i32 0, i32 9
  %246 = load i32, i32* %mem_idx, align 4
  %idxprom449 = sext i32 %246 to i64
  %arrayidx450 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %244, i64 %idxprom449
  %arraydecay451 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx450, i32 0, i32 0
  %247 = load i32, i32* %mbaddrx.addr, align 4
  %mul452 = mul nsw i32 %247, 2
  %248 = load i32, i32* %x, align 4
  %add453 = add nsw i32 %mul452, %248
  %mul454 = mul nsw i32 %add453, 4
  %249 = load i32, i32* %mbaddry.addr, align 4
  %mul455 = mul nsw i32 %249, 2
  %250 = load i32, i32* %y, align 4
  %add456 = add nsw i32 %mul455, %250
  %mul457 = mul nsw i32 %add456, 4
  %251 = load i8, i8* %tmpImode.addr, align 1
  %conv458 = zext i8 %251 to i32
  %cmp459 = icmp eq i32 %conv458, 3
  %conv460 = zext i1 %cmp459 to i32
  %conv461 = trunc i32 %conv460 to i8
  call void @write_Chroma([4 x i8]* %arraydecay443, [4 x i32]* %arraydecay448, [72 x i8]* %arraydecay451, i32 %mul454, i32 %mul457, i8 zeroext %conv461)
  %252 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC_1.addr, align 8
  %253 = load i32, i32* %x, align 4
  %254 = load i32, i32* %y, align 4
  %mul462 = mul nsw i32 %254, 2
  %add463 = add nsw i32 %253, %mul462
  %idxprom464 = sext i32 %add463 to i64
  %arrayidx465 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %252, i64 %idxprom464
  %arraydecay466 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx465, i32 0, i32 0
  %255 = load i32, i32* %x, align 4
  %idxprom467 = sext i32 %255 to i64
  %arrayidx468 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom467
  %256 = load i32, i32* %y, align 4
  %idxprom469 = sext i32 %256 to i64
  %arrayidx470 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx468, i64 0, i64 %idxprom469
  %arraydecay471 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx470, i32 0, i32 0
  %257 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %258 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx472 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %258, i32 0, i32 9
  %259 = load i32, i32* %mem_idx472, align 4
  %idxprom473 = sext i32 %259 to i64
  %arrayidx474 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %257, i64 %idxprom473
  %arraydecay475 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx474, i32 0, i32 0
  %260 = load i32, i32* %mbaddrx.addr, align 4
  %mul476 = mul nsw i32 %260, 2
  %261 = load i32, i32* %x, align 4
  %add477 = add nsw i32 %mul476, %261
  %mul478 = mul nsw i32 %add477, 4
  %262 = load i32, i32* %mbaddry.addr, align 4
  %mul479 = mul nsw i32 %262, 2
  %263 = load i32, i32* %y, align 4
  %add480 = add nsw i32 %mul479, %263
  %mul481 = mul nsw i32 %add480, 4
  %264 = load i8, i8* %tmpImode.addr, align 1
  %conv482 = zext i8 %264 to i32
  %cmp483 = icmp eq i32 %conv482, 3
  %conv484 = zext i1 %cmp483 to i32
  %conv485 = trunc i32 %conv484 to i8
  call void @write_Chroma([4 x i8]* %arraydecay466, [4 x i32]* %arraydecay471, [72 x i8]* %arraydecay475, i32 %mul478, i32 %mul481, i8 zeroext %conv485)
  br label %if.end607

if.else486:                                       ; preds = %lor.lhs.false
  %265 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %266 = load i32, i32* %x, align 4
  %idxprom487 = sext i32 %266 to i64
  %arrayidx488 = getelementptr inbounds [2 x i8], [2 x i8]* %265, i64 %idxprom487
  %267 = load i32, i32* %y, align 4
  %idxprom489 = sext i32 %267 to i64
  %arrayidx490 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx488, i64 0, i64 %idxprom489
  %268 = load i8, i8* %arrayidx490, align 1
  %conv491 = sext i8 %268 to i32
  %cmp492 = icmp sge i32 %conv491, 0
  br i1 %cmp492, label %land.lhs.true494, label %if.else559, !prof !429

land.lhs.true494:                                 ; preds = %if.else486
  %269 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %270 = load i32, i32* %x, align 4
  %idxprom495 = sext i32 %270 to i64
  %arrayidx496 = getelementptr inbounds [2 x i8], [2 x i8]* %269, i64 %idxprom495
  %271 = load i32, i32* %y, align 4
  %idxprom497 = sext i32 %271 to i64
  %arrayidx498 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx496, i64 0, i64 %idxprom497
  %272 = load i8, i8* %arrayidx498, align 1
  %conv499 = sext i8 %272 to i32
  %cmp500 = icmp sge i32 %conv499, 0
  br i1 %cmp500, label %if.then502, label %if.else559, !prof !430

if.then502:                                       ; preds = %land.lhs.true494
  %273 = load i32, i32* %x, align 4
  %idxprom503 = sext i32 %273 to i64
  %arrayidx504 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom503
  %274 = load i32, i32* %y, align 4
  %idxprom505 = sext i32 %274 to i64
  %arrayidx506 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx504, i64 0, i64 %idxprom505
  %arraydecay507 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx506, i32 0, i32 0
  %arraydecay508 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %arraydecay509 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i32 0, i32 0
  %275 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %276 = load i32, i32* %tmpidx0, align 4
  %idxprom510 = sext i32 %276 to i64
  %arrayidx511 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %275, i64 %idxprom510
  %arraydecay512 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx511, i32 0, i32 0
  %277 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %278 = load i32, i32* %tmpidx1, align 4
  %idxprom513 = sext i32 %278 to i64
  %arrayidx514 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %277, i64 %idxprom513
  %arraydecay515 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx514, i32 0, i32 0
  %279 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %280 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx516 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %280, i32 0, i32 9
  %281 = load i32, i32* %mem_idx516, align 4
  %idxprom517 = sext i32 %281 to i64
  %arrayidx518 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %279, i64 %idxprom517
  %arraydecay519 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx518, i32 0, i32 0
  %282 = load i32, i32* %mbaddrx.addr, align 4
  %mul520 = mul nsw i32 %282, 2
  %283 = load i32, i32* %x, align 4
  %add521 = add nsw i32 %mul520, %283
  %mul522 = mul nsw i32 %add521, 4
  %284 = load i32, i32* %mbaddry.addr, align 4
  %mul523 = mul nsw i32 %284, 2
  %285 = load i32, i32* %y, align 4
  %add524 = add nsw i32 %mul523, %285
  %mul525 = mul nsw i32 %add524, 4
  %286 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv526 = zext i8 %286 to i32
  %and527 = and i32 %conv526, 3
  %cmp528 = icmp ne i32 %and527, 0
  %conv529 = zext i1 %cmp528 to i32
  %conv530 = trunc i32 %conv529 to i8
  call void @inter_prediction_chroma_subblock_double([4 x i32]* %arraydecay507, [2 x [2 x i32]]* %arraydecay508, [2 x [2 x i32]]* %arraydecay509, [72 x i8]* %arraydecay512, [72 x i8]* %arraydecay515, [72 x i8]* %arraydecay519, i32 %mul522, i32 %mul525, i8 zeroext %conv530)
  %287 = load i32, i32* %x, align 4
  %idxprom531 = sext i32 %287 to i64
  %arrayidx532 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom531
  %288 = load i32, i32* %y, align 4
  %idxprom533 = sext i32 %288 to i64
  %arrayidx534 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx532, i64 0, i64 %idxprom533
  %arraydecay535 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx534, i32 0, i32 0
  %arraydecay536 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %arraydecay537 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i32 0, i32 0
  %289 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %290 = load i32, i32* %tmpidx0, align 4
  %idxprom538 = sext i32 %290 to i64
  %arrayidx539 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %289, i64 %idxprom538
  %arraydecay540 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx539, i32 0, i32 0
  %291 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %292 = load i32, i32* %tmpidx1, align 4
  %idxprom541 = sext i32 %292 to i64
  %arrayidx542 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %291, i64 %idxprom541
  %arraydecay543 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx542, i32 0, i32 0
  %293 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %294 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx544 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %294, i32 0, i32 9
  %295 = load i32, i32* %mem_idx544, align 4
  %idxprom545 = sext i32 %295 to i64
  %arrayidx546 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %293, i64 %idxprom545
  %arraydecay547 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx546, i32 0, i32 0
  %296 = load i32, i32* %mbaddrx.addr, align 4
  %mul548 = mul nsw i32 %296, 2
  %297 = load i32, i32* %x, align 4
  %add549 = add nsw i32 %mul548, %297
  %mul550 = mul nsw i32 %add549, 4
  %298 = load i32, i32* %mbaddry.addr, align 4
  %mul551 = mul nsw i32 %298, 2
  %299 = load i32, i32* %y, align 4
  %add552 = add nsw i32 %mul551, %299
  %mul553 = mul nsw i32 %add552, 4
  %300 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv554 = zext i8 %300 to i32
  %and555 = and i32 %conv554, 3
  %cmp556 = icmp ne i32 %and555, 0
  %conv557 = zext i1 %cmp556 to i32
  %conv558 = trunc i32 %conv557 to i8
  call void @inter_prediction_chroma_subblock_double([4 x i32]* %arraydecay535, [2 x [2 x i32]]* %arraydecay536, [2 x [2 x i32]]* %arraydecay537, [72 x i8]* %arraydecay540, [72 x i8]* %arraydecay543, [72 x i8]* %arraydecay547, i32 %mul550, i32 %mul553, i8 zeroext %conv558)
  br label %if.end606

if.else559:                                       ; preds = %land.lhs.true494, %if.else486
  %301 = load i32, i32* %x, align 4
  %idxprom560 = sext i32 %301 to i64
  %arrayidx561 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom560
  %302 = load i32, i32* %y, align 4
  %idxprom562 = sext i32 %302 to i64
  %arrayidx563 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx561, i64 0, i64 %idxprom562
  %arraydecay564 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx563, i32 0, i32 0
  %arraydecay565 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %303 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %304 = load i32, i32* %tmpidx0, align 4
  %idxprom566 = sext i32 %304 to i64
  %arrayidx567 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %303, i64 %idxprom566
  %arraydecay568 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx567, i32 0, i32 0
  %305 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %306 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx569 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %306, i32 0, i32 9
  %307 = load i32, i32* %mem_idx569, align 4
  %idxprom570 = sext i32 %307 to i64
  %arrayidx571 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %305, i64 %idxprom570
  %arraydecay572 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx571, i32 0, i32 0
  %308 = load i32, i32* %mbaddrx.addr, align 4
  %mul573 = mul nsw i32 %308, 2
  %309 = load i32, i32* %x, align 4
  %add574 = add nsw i32 %mul573, %309
  %mul575 = mul nsw i32 %add574, 4
  %310 = load i32, i32* %mbaddry.addr, align 4
  %mul576 = mul nsw i32 %310, 2
  %311 = load i32, i32* %y, align 4
  %add577 = add nsw i32 %mul576, %311
  %mul578 = mul nsw i32 %add577, 4
  %312 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv579 = zext i8 %312 to i32
  %and580 = and i32 %conv579, 3
  %cmp581 = icmp ne i32 %and580, 0
  %conv582 = zext i1 %cmp581 to i32
  call void @inter_prediction_chroma_subblock_single([4 x i32]* %arraydecay564, [2 x [2 x i32]]* %arraydecay565, [72 x i8]* %arraydecay568, [72 x i8]* %arraydecay572, i32 %mul575, i32 %mul578, i32 %conv582)
  %313 = load i32, i32* %x, align 4
  %idxprom583 = sext i32 %313 to i64
  %arrayidx584 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom583
  %314 = load i32, i32* %y, align 4
  %idxprom585 = sext i32 %314 to i64
  %arrayidx586 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx584, i64 0, i64 %idxprom585
  %arraydecay587 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx586, i32 0, i32 0
  %arraydecay588 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %315 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %316 = load i32, i32* %tmpidx0, align 4
  %idxprom589 = sext i32 %316 to i64
  %arrayidx590 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %315, i64 %idxprom589
  %arraydecay591 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx590, i32 0, i32 0
  %317 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %318 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx592 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %318, i32 0, i32 9
  %319 = load i32, i32* %mem_idx592, align 4
  %idxprom593 = sext i32 %319 to i64
  %arrayidx594 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %317, i64 %idxprom593
  %arraydecay595 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx594, i32 0, i32 0
  %320 = load i32, i32* %mbaddrx.addr, align 4
  %mul596 = mul nsw i32 %320, 2
  %321 = load i32, i32* %x, align 4
  %add597 = add nsw i32 %mul596, %321
  %mul598 = mul nsw i32 %add597, 4
  %322 = load i32, i32* %mbaddry.addr, align 4
  %mul599 = mul nsw i32 %322, 2
  %323 = load i32, i32* %y, align 4
  %add600 = add nsw i32 %mul599, %323
  %mul601 = mul nsw i32 %add600, 4
  %324 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv602 = zext i8 %324 to i32
  %and603 = and i32 %conv602, 3
  %cmp604 = icmp ne i32 %and603, 0
  %conv605 = zext i1 %cmp604 to i32
  call void @inter_prediction_chroma_subblock_single([4 x i32]* %arraydecay587, [2 x [2 x i32]]* %arraydecay588, [72 x i8]* %arraydecay591, [72 x i8]* %arraydecay595, i32 %mul598, i32 %mul601, i32 %conv605)
  br label %if.end606

if.end606:                                        ; preds = %if.else559, %if.then502
  br label %if.end607

if.end607:                                        ; preds = %if.end606, %if.then438
  br label %for.inc608

for.inc608:                                       ; preds = %if.end607
  %325 = load i32, i32* %x, align 4
  %inc609 = add nsw i32 %325, 1
  store i32 %inc609, i32* %x, align 4
  br label %for.cond149

for.end610:                                       ; preds = %for.cond149
  br label %for.inc611

for.inc611:                                       ; preds = %for.end610
  %326 = load i32, i32* %y, align 4
  %inc612 = add nsw i32 %326, 1
  store i32 %inc612, i32* %y, align 4
  br label %for.cond145

for.end613:                                       ; preds = %for.cond145
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ProcessSlice(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1, %struct.StorablePictureInfo* %PICINFO, [9 x i8]* %Imode, [36 x i8]* %IntraPredMode, [36 x i8]* %NzLuma, [22 x [18 x i8]]* %NzChroma, i8 zeroext %constraint_intra_flag, %struct.slice_header_rbsp_t* %SH, %struct.ImageParameters* %img) #0 !prof !322 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %PICINFO.addr = alloca %struct.StorablePictureInfo*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %IntraPredMode.addr = alloca [36 x i8]*, align 8
  %NzLuma.addr = alloca [36 x i8]*, align 8
  %NzChroma.addr = alloca [22 x [18 x i8]]*, align 8
  %constraint_intra_flag.addr = alloca i8, align 1
  %SH.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %qPprev = alloca i32, align 4
  %type = alloca i32, align 4
  %qPCtable = alloca [22 x i32], align 16
  %power2 = alloca [6 x i32], align 16
  %intratypecutoff = alloca [3 x i32], align 4
  %MbType = alloca i8, align 1
  %MbSkipFlag = alloca i8, align 1
  %PrevSkip = alloca i8, align 1
  %MbSkipRun = alloca i32, align 4
  %tmpImode = alloca i8, align 1
  %nC = alloca i8, align 1
  %tmpmbtp = alloca i8, align 1
  %coded_block_pattern = alloca i8, align 1
  %CodedPatternLuma = alloca i8, align 1
  %CodedPatternChroma = alloca i8, align 1
  %IntraChromaPredMode = alloca i8, align 1
  %Intra16x16PredMode = alloca i8, align 1
  %mb_qp_delta = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mbaddrx = alloca i32, align 4
  %mbaddry = alloca i32, align 4
  %refCOL = alloca [2 x [2 x i8]], align 1
  %mvCOL = alloca [4 x [4 x [2 x i32]]], align 16
  %refidx0 = alloca [2 x [2 x i8]], align 1
  %refidx1 = alloca [2 x [2 x i8]], align 1
  %mvd0 = alloca [4 x [4 x [2 x i32]]], align 16
  %mvd1 = alloca [4 x [4 x [2 x i32]]], align 16
  %intra4x4predmode = alloca [16 x i8], align 16
  %predL = alloca [16 x [4 x [4 x i8]]], align 16
  %predC_0 = alloca [4 x [4 x [4 x i8]]], align 16
  %predC_1 = alloca [4 x [4 x [4 x i8]]], align 16
  %qPm6 = alloca i8, align 1
  %qPi = alloca i8, align 1
  %qPy = alloca i8, align 1
  %qPc = alloca i8, align 1
  %qPcm6 = alloca i8, align 1
  %temp1l = alloca i8, align 1
  %temp2l = alloca i8, align 1
  %temp3l = alloca i8, align 1
  %temp1c = alloca i8, align 1
  %temp2c = alloca i8, align 1
  %temp3c = alloca i8, align 1
  %scale1 = alloca i8, align 1
  %scale2 = alloca i8, align 1
  %scale3 = alloca i8, align 1
  %coeffDCL = alloca [4 x [4 x i32]], align 16
  %coeffDCC_0 = alloca [4 x [2 x i32]], align 16
  %coeffDCC_1 = alloca [4 x [2 x i32]], align 16
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store %struct.StorablePictureInfo* %PICINFO, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store [36 x i8]* %IntraPredMode, [36 x i8]** %IntraPredMode.addr, align 8
  store [36 x i8]* %NzLuma, [36 x i8]** %NzLuma.addr, align 8
  store [22 x [18 x i8]]* %NzChroma, [22 x [18 x i8]]** %NzChroma.addr, align 8
  store i8 %constraint_intra_flag, i8* %constraint_intra_flag.addr, align 1
  store %struct.slice_header_rbsp_t* %SH, %struct.slice_header_rbsp_t** %SH.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %sliceQPY = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 15
  %1 = load i32, i32* %sliceQPY, align 4
  store i32 %1, i32* %qPprev, align 4
  %2 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %2, i32 0, i32 1
  %3 = load i8, i8* %slice_type, align 4
  %conv = zext i8 %3 to i32
  store i32 %conv, i32* %type, align 4
  %4 = bitcast [22 x i32]* %qPCtable to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 bitcast ([22 x i32]* @__const.ProcessSlice.qPCtable to i8*), i64 88, i1 false)
  %5 = bitcast [6 x i32]* %power2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([6 x i32]* @__const.ProcessSlice.power2 to i8*), i64 24, i1 false)
  %6 = bitcast [3 x i32]* %intratypecutoff to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([3 x i32]* @__const.ProcessSlice.intratypecutoff to i8*), i64 12, i1 false)
  store i8 0, i8* %MbType, align 1
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  store i32 0, i32* %MbSkipRun, align 4
  store i8 0, i8* %tmpImode, align 1
  store i8 0, i8* %nC, align 1
  store i8 0, i8* %tmpmbtp, align 1
  store i8 0, i8* %coded_block_pattern, align 1
  store i8 0, i8* %CodedPatternLuma, align 1
  store i8 0, i8* %CodedPatternChroma, align 1
  store i8 0, i8* %IntraChromaPredMode, align 1
  store i8 0, i8* %Intra16x16PredMode, align 1
  store i32 0, i32* %mb_qp_delta, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %mbaddrx, align 4
  store i32 0, i32* %mbaddry, align 4
  %7 = bitcast [2 x [2 x i8]]* %refCOL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 4, i1 false)
  %8 = bitcast [4 x [4 x [2 x i32]]]* %mvCOL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 128, i1 false)
  %9 = bitcast [2 x [2 x i8]]* %refidx0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 0, i64 4, i1 false)
  %10 = bitcast [2 x [2 x i8]]* %refidx1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 4, i1 false)
  %11 = bitcast [4 x [4 x [2 x i32]]]* %mvd0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %11, i8 0, i64 128, i1 false)
  %12 = bitcast [4 x [4 x [2 x i32]]]* %mvd1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 128, i1 false)
  %13 = bitcast [16 x i8]* %intra4x4predmode to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %13, i8 0, i64 16, i1 false)
  %14 = bitcast [16 x [4 x [4 x i8]]]* %predL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 0, i64 256, i1 false)
  %15 = bitcast [4 x [4 x [4 x i8]]]* %predC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %15, i8 0, i64 64, i1 false)
  %16 = bitcast [4 x [4 x [4 x i8]]]* %predC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 64, i1 false)
  store i8 0, i8* %qPm6, align 1
  store i8 0, i8* %qPi, align 1
  store i8 0, i8* %qPy, align 1
  store i8 0, i8* %qPc, align 1
  store i8 0, i8* %qPcm6, align 1
  store i8 0, i8* %temp1l, align 1
  store i8 0, i8* %temp2l, align 1
  store i8 0, i8* %temp3l, align 1
  store i8 0, i8* %temp1c, align 1
  store i8 0, i8* %temp2c, align 1
  store i8 0, i8* %temp3c, align 1
  store i8 0, i8* %scale1, align 1
  store i8 0, i8* %scale2, align 1
  store i8 0, i8* %scale3, align 1
  %17 = bitcast [4 x [4 x i32]]* %coeffDCL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %17, i8 0, i64 64, i1 false)
  %18 = bitcast [4 x [2 x i32]]* %coeffDCC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 32, i1 false)
  %19 = bitcast [4 x [2 x i32]]* %coeffDCC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 32, i1 false)
  store i32 0, i32* %mbaddry, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc613, %entry
  %20 = load i32, i32* %mbaddry, align 4
  %cmp = icmp slt i32 %20, 9
  br i1 %cmp, label %for.body, label %for.end615, !prof !431

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %mbaddrx, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc610, %for.body
  %21 = load i32, i32* %mbaddrx, align 4
  %cmp3 = icmp slt i32 %21, 11
  br i1 %cmp3, label %for.body5, label %for.end612, !prof !432

for.body5:                                        ; preds = %for.cond2
  %22 = load i32, i32* %type, align 4
  %cmp6 = icmp ne i32 %22, 2
  br i1 %cmp6, label %if.then, label %if.end25, !prof !433

if.then:                                          ; preds = %for.body5
  %23 = load i32, i32* %MbSkipRun, align 4
  %cmp8 = icmp eq i32 %23, 0
  br i1 %cmp8, label %land.lhs.true, label %if.else17, !prof !434

land.lhs.true:                                    ; preds = %if.then
  %24 = load i8, i8* %PrevSkip, align 1
  %conv10 = zext i8 %24 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.else17, !prof !435

if.then13:                                        ; preds = %land.lhs.true
  %25 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %25, i8* %26, i64* %27)
  store i32 %call, i32* %MbSkipRun, align 4
  %28 = load i32, i32* %MbSkipRun, align 4
  %cmp14 = icmp eq i32 %28, 0
  br i1 %cmp14, label %if.then16, label %if.else, !prof !436

if.then16:                                        ; preds = %if.then13
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  br label %if.end

if.else:                                          ; preds = %if.then13
  store i8 1, i8* %MbSkipFlag, align 1
  store i8 1, i8* %PrevSkip, align 1
  %29 = load i32, i32* %MbSkipRun, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %MbSkipRun, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then16
  br label %if.end24

if.else17:                                        ; preds = %land.lhs.true, %if.then
  %30 = load i32, i32* %MbSkipRun, align 4
  %cmp18 = icmp sgt i32 %30, 0
  br i1 %cmp18, label %if.then20, label %if.else22, !prof !437

if.then20:                                        ; preds = %if.else17
  store i8 1, i8* %MbSkipFlag, align 1
  %31 = load i32, i32* %MbSkipRun, align 4
  %dec21 = add nsw i32 %31, -1
  store i32 %dec21, i32* %MbSkipRun, align 4
  br label %if.end23

if.else22:                                        ; preds = %if.else17
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.else22, %if.then20
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %for.body5
  %32 = load i8, i8* %MbSkipFlag, align 1
  %conv26 = zext i8 %32 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %if.then29, label %if.else61, !prof !438

if.then29:                                        ; preds = %if.end25
  %33 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %34 = load i8*, i8** %nalu_buf.addr, align 8
  %35 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call i32 @u_e(%struct.NALU_t* %33, i8* %34, i64* %35)
  %conv31 = trunc i32 %call30 to i8
  store i8 %conv31, i8* %MbType, align 1
  store i8 %conv31, i8* %tmpmbtp, align 1
  %36 = load i8, i8* %MbType, align 1
  %conv32 = zext i8 %36 to i32
  %37 = load i32, i32* %type, align 4
  %idxprom = sext i32 %37 to i64
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %intratypecutoff, i64 0, i64 %idxprom
  %38 = load i32, i32* %arrayidx, align 4
  %cmp33 = icmp sge i32 %conv32, %38
  br i1 %cmp33, label %if.then35, label %if.else52, !prof !439

if.then35:                                        ; preds = %if.then29
  %39 = load i8, i8* %MbType, align 1
  %conv36 = zext i8 %39 to i32
  %40 = load i32, i32* %type, align 4
  %idxprom37 = sext i32 %40 to i64
  %arrayidx38 = getelementptr inbounds [3 x i32], [3 x i32]* %intratypecutoff, i64 0, i64 %idxprom37
  %41 = load i32, i32* %arrayidx38, align 4
  %sub = sub nsw i32 %conv36, %41
  %conv39 = trunc i32 %sub to i8
  store i8 %conv39, i8* %MbType, align 1
  %42 = load i8, i8* %MbType, align 1
  %conv40 = zext i8 %42 to i32
  %cmp41 = icmp eq i32 %conv40, 0
  br i1 %cmp41, label %cond.true, label %lor.lhs.false, !prof !440

lor.lhs.false:                                    ; preds = %if.then35
  %43 = load i8, i8* %MbType, align 1
  %conv43 = zext i8 %43 to i32
  %cmp44 = icmp eq i32 %conv43, 25
  br i1 %cmp44, label %cond.true, label %cond.false, !prof !379

cond.true:                                        ; preds = %lor.lhs.false, %if.then35
  %44 = load i8, i8* %MbType, align 1
  %conv46 = zext i8 %44 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv46, %cond.true ], [ 1, %cond.false ]
  %conv47 = trunc i32 %cond to i8
  %45 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %46 = load i32, i32* %mbaddrx, align 4
  %idxprom48 = sext i32 %46 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %45, i64 %idxprom48
  %47 = load i32, i32* %mbaddry, align 4
  %idxprom50 = sext i32 %47 to i64
  %arrayidx51 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom50
  store i8 %conv47, i8* %arrayidx51, align 1
  store i8 %conv47, i8* %tmpImode, align 1
  br label %if.end60

if.else52:                                        ; preds = %if.then29
  %48 = load i8, i8* %MbType, align 1
  %conv53 = zext i8 %48 to i32
  %49 = load i32, i32* %type, align 4
  %tobool = icmp ne i32 %49, 0
  %50 = zext i1 %tobool to i64
  %cond54 = select i1 %tobool, i32 7, i32 1
  %add = add nsw i32 %conv53, %cond54
  %conv55 = trunc i32 %add to i8
  store i8 %conv55, i8* %MbType, align 1
  %51 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %52 = load i32, i32* %mbaddrx, align 4
  %idxprom56 = sext i32 %52 to i64
  %arrayidx57 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom56
  %53 = load i32, i32* %mbaddry, align 4
  %idxprom58 = sext i32 %53 to i64
  %arrayidx59 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx57, i64 0, i64 %idxprom58
  store i8 2, i8* %arrayidx59, align 1
  store i8 2, i8* %tmpImode, align 1
  br label %if.end60

if.end60:                                         ; preds = %if.else52, %cond.end
  br label %if.end69

if.else61:                                        ; preds = %if.end25
  %54 = load i32, i32* %type, align 4
  %tobool62 = icmp ne i32 %54, 0
  %55 = zext i1 %tobool62 to i64
  %cond63 = select i1 %tobool62, i32 6, i32 0
  %conv64 = trunc i32 %cond63 to i8
  store i8 %conv64, i8* %MbType, align 1
  %56 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %57 = load i32, i32* %mbaddrx, align 4
  %idxprom65 = sext i32 %57 to i64
  %arrayidx66 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom65
  %58 = load i32, i32* %mbaddry, align 4
  %idxprom67 = sext i32 %58 to i64
  %arrayidx68 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx66, i64 0, i64 %idxprom67
  store i8 3, i8* %arrayidx68, align 1
  store i8 3, i8* %tmpImode, align 1
  store i8 0, i8* %CodedPatternChroma, align 1
  store i8 0, i8* %CodedPatternLuma, align 1
  br label %if.end69

if.end69:                                         ; preds = %if.else61, %if.end60
  %59 = load i8, i8* %tmpImode, align 1
  %conv70 = zext i8 %59 to i32
  %cmp71 = icmp eq i32 %conv70, 2
  br i1 %cmp71, label %if.then77, label %lor.lhs.false73, !prof !441

lor.lhs.false73:                                  ; preds = %if.end69
  %60 = load i8, i8* %tmpImode, align 1
  %conv74 = zext i8 %60 to i32
  %cmp75 = icmp eq i32 %conv74, 3
  br i1 %cmp75, label %if.then77, label %if.else279, !prof !442

if.then77:                                        ; preds = %lor.lhs.false73, %if.end69
  %61 = load i32, i32* %type, align 4
  %cmp78 = icmp eq i32 %61, 1
  br i1 %cmp78, label %if.then80, label %if.end224, !prof !443

if.then80:                                        ; preds = %if.then77
  store i32 0, i32* %i, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc221, %if.then80
  %62 = load i32, i32* %i, align 4
  %cmp82 = icmp slt i32 %62, 4
  br i1 %cmp82, label %for.body84, label %for.end223, !prof !444

for.body84:                                       ; preds = %for.cond81
  store i32 0, i32* %j, align 4
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc, %for.body84
  %63 = load i32, i32* %j, align 4
  %cmp86 = icmp slt i32 %63, 4
  br i1 %cmp86, label %for.body88, label %for.end, !prof !445

for.body88:                                       ; preds = %for.cond85
  %64 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %65 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %65, i32 0, i32 13
  %arrayidx89 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 0
  %66 = load i32, i32* %arrayidx89, align 4
  %idxprom90 = sext i32 %66 to i64
  %arrayidx91 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %64, i64 %idxprom90
  %refIdxL0 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx91, i32 0, i32 0
  %67 = load i32, i32* %mbaddrx, align 4
  %mul = mul nsw i32 %67, 4
  %68 = load i32, i32* %i, align 4
  %add92 = add nsw i32 %mul, %68
  %div = sdiv i32 %add92, 2
  %idxprom93 = sext i32 %div to i64
  %arrayidx94 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0, i64 0, i64 %idxprom93
  %69 = load i32, i32* %mbaddry, align 4
  %mul95 = mul nsw i32 %69, 4
  %70 = load i32, i32* %j, align 4
  %add96 = add nsw i32 %mul95, %70
  %div97 = sdiv i32 %add96, 2
  %idxprom98 = sext i32 %div97 to i64
  %arrayidx99 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx94, i64 0, i64 %idxprom98
  %71 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %71 to i32
  %cmp101 = icmp sge i32 %conv100, 0
  br i1 %cmp101, label %if.then103, label %if.else162, !prof !446

if.then103:                                       ; preds = %for.body88
  %72 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %73 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1104 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %73, i32 0, i32 13
  %arrayidx105 = getelementptr inbounds [3 x i32], [3 x i32]* %list1104, i64 0, i64 0
  %74 = load i32, i32* %arrayidx105, align 4
  %idxprom106 = sext i32 %74 to i64
  %arrayidx107 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %72, i64 %idxprom106
  %refIdxL0108 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx107, i32 0, i32 0
  %75 = load i32, i32* %mbaddrx, align 4
  %mul109 = mul nsw i32 %75, 4
  %76 = load i32, i32* %i, align 4
  %add110 = add nsw i32 %mul109, %76
  %div111 = sdiv i32 %add110, 2
  %idxprom112 = sext i32 %div111 to i64
  %arrayidx113 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0108, i64 0, i64 %idxprom112
  %77 = load i32, i32* %mbaddry, align 4
  %mul114 = mul nsw i32 %77, 4
  %78 = load i32, i32* %j, align 4
  %add115 = add nsw i32 %mul114, %78
  %div116 = sdiv i32 %add115, 2
  %idxprom117 = sext i32 %div116 to i64
  %arrayidx118 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx113, i64 0, i64 %idxprom117
  %79 = load i8, i8* %arrayidx118, align 1
  %80 = load i32, i32* %i, align 4
  %div119 = sdiv i32 %80, 2
  %idxprom120 = sext i32 %div119 to i64
  %arrayidx121 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i64 0, i64 %idxprom120
  %81 = load i32, i32* %j, align 4
  %div122 = sdiv i32 %81, 2
  %idxprom123 = sext i32 %div122 to i64
  %arrayidx124 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx121, i64 0, i64 %idxprom123
  store i8 %79, i8* %arrayidx124, align 1
  %82 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %83 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1125 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %83, i32 0, i32 13
  %arrayidx126 = getelementptr inbounds [3 x i32], [3 x i32]* %list1125, i64 0, i64 0
  %84 = load i32, i32* %arrayidx126, align 4
  %idxprom127 = sext i32 %84 to i64
  %arrayidx128 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %82, i64 %idxprom127
  %mvd_l0 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx128, i32 0, i32 2
  %85 = load i32, i32* %mbaddrx, align 4
  %mul129 = mul nsw i32 %85, 4
  %86 = load i32, i32* %i, align 4
  %add130 = add nsw i32 %mul129, %86
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0, i64 0, i64 %idxprom131
  %87 = load i32, i32* %mbaddry, align 4
  %mul133 = mul nsw i32 %87, 4
  %88 = load i32, i32* %j, align 4
  %add134 = add nsw i32 %mul133, %88
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx132, i64 0, i64 %idxprom135
  %arrayidx137 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx136, i64 0, i64 0
  %89 = load i32, i32* %arrayidx137, align 4
  %90 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %90 to i64
  %arrayidx139 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom138
  %91 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %91 to i64
  %arrayidx141 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx139, i64 0, i64 %idxprom140
  %arrayidx142 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx141, i64 0, i64 0
  store i32 %89, i32* %arrayidx142, align 8
  %92 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %93 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1143 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %93, i32 0, i32 13
  %arrayidx144 = getelementptr inbounds [3 x i32], [3 x i32]* %list1143, i64 0, i64 0
  %94 = load i32, i32* %arrayidx144, align 4
  %idxprom145 = sext i32 %94 to i64
  %arrayidx146 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %92, i64 %idxprom145
  %mvd_l0147 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx146, i32 0, i32 2
  %95 = load i32, i32* %mbaddrx, align 4
  %mul148 = mul nsw i32 %95, 4
  %96 = load i32, i32* %i, align 4
  %add149 = add nsw i32 %mul148, %96
  %idxprom150 = sext i32 %add149 to i64
  %arrayidx151 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0147, i64 0, i64 %idxprom150
  %97 = load i32, i32* %mbaddry, align 4
  %mul152 = mul nsw i32 %97, 4
  %98 = load i32, i32* %j, align 4
  %add153 = add nsw i32 %mul152, %98
  %idxprom154 = sext i32 %add153 to i64
  %arrayidx155 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx151, i64 0, i64 %idxprom154
  %arrayidx156 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx155, i64 0, i64 1
  %99 = load i32, i32* %arrayidx156, align 4
  %100 = load i32, i32* %i, align 4
  %idxprom157 = sext i32 %100 to i64
  %arrayidx158 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom157
  %101 = load i32, i32* %j, align 4
  %idxprom159 = sext i32 %101 to i64
  %arrayidx160 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx158, i64 0, i64 %idxprom159
  %arrayidx161 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx160, i64 0, i64 1
  store i32 %99, i32* %arrayidx161, align 4
  br label %if.end220

if.else162:                                       ; preds = %for.body88
  %102 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1163 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 13
  %arrayidx164 = getelementptr inbounds [3 x i32], [3 x i32]* %list1163, i64 0, i64 0
  %104 = load i32, i32* %arrayidx164, align 4
  %idxprom165 = sext i32 %104 to i64
  %arrayidx166 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %102, i64 %idxprom165
  %refIdxL1 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx166, i32 0, i32 1
  %105 = load i32, i32* %mbaddrx, align 4
  %mul167 = mul nsw i32 %105, 4
  %106 = load i32, i32* %i, align 4
  %add168 = add nsw i32 %mul167, %106
  %div169 = sdiv i32 %add168, 2
  %idxprom170 = sext i32 %div169 to i64
  %arrayidx171 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1, i64 0, i64 %idxprom170
  %107 = load i32, i32* %mbaddry, align 4
  %mul172 = mul nsw i32 %107, 4
  %108 = load i32, i32* %j, align 4
  %add173 = add nsw i32 %mul172, %108
  %div174 = sdiv i32 %add173, 2
  %idxprom175 = sext i32 %div174 to i64
  %arrayidx176 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx171, i64 0, i64 %idxprom175
  %109 = load i8, i8* %arrayidx176, align 1
  %110 = load i32, i32* %i, align 4
  %div177 = sdiv i32 %110, 2
  %idxprom178 = sext i32 %div177 to i64
  %arrayidx179 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i64 0, i64 %idxprom178
  %111 = load i32, i32* %j, align 4
  %div180 = sdiv i32 %111, 2
  %idxprom181 = sext i32 %div180 to i64
  %arrayidx182 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx179, i64 0, i64 %idxprom181
  store i8 %109, i8* %arrayidx182, align 1
  %112 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %113 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1183 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %113, i32 0, i32 13
  %arrayidx184 = getelementptr inbounds [3 x i32], [3 x i32]* %list1183, i64 0, i64 0
  %114 = load i32, i32* %arrayidx184, align 4
  %idxprom185 = sext i32 %114 to i64
  %arrayidx186 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %112, i64 %idxprom185
  %mvd_l1 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx186, i32 0, i32 3
  %115 = load i32, i32* %mbaddrx, align 4
  %mul187 = mul nsw i32 %115, 4
  %116 = load i32, i32* %i, align 4
  %add188 = add nsw i32 %mul187, %116
  %idxprom189 = sext i32 %add188 to i64
  %arrayidx190 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1, i64 0, i64 %idxprom189
  %117 = load i32, i32* %mbaddry, align 4
  %mul191 = mul nsw i32 %117, 4
  %118 = load i32, i32* %j, align 4
  %add192 = add nsw i32 %mul191, %118
  %idxprom193 = sext i32 %add192 to i64
  %arrayidx194 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx190, i64 0, i64 %idxprom193
  %arrayidx195 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx194, i64 0, i64 0
  %119 = load i32, i32* %arrayidx195, align 4
  %120 = load i32, i32* %i, align 4
  %idxprom196 = sext i32 %120 to i64
  %arrayidx197 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom196
  %121 = load i32, i32* %j, align 4
  %idxprom198 = sext i32 %121 to i64
  %arrayidx199 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx197, i64 0, i64 %idxprom198
  %arrayidx200 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx199, i64 0, i64 0
  store i32 %119, i32* %arrayidx200, align 8
  %122 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %123 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1201 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %123, i32 0, i32 13
  %arrayidx202 = getelementptr inbounds [3 x i32], [3 x i32]* %list1201, i64 0, i64 0
  %124 = load i32, i32* %arrayidx202, align 4
  %idxprom203 = sext i32 %124 to i64
  %arrayidx204 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %122, i64 %idxprom203
  %mvd_l1205 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx204, i32 0, i32 3
  %125 = load i32, i32* %mbaddrx, align 4
  %mul206 = mul nsw i32 %125, 4
  %126 = load i32, i32* %i, align 4
  %add207 = add nsw i32 %mul206, %126
  %idxprom208 = sext i32 %add207 to i64
  %arrayidx209 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1205, i64 0, i64 %idxprom208
  %127 = load i32, i32* %mbaddry, align 4
  %mul210 = mul nsw i32 %127, 4
  %128 = load i32, i32* %j, align 4
  %add211 = add nsw i32 %mul210, %128
  %idxprom212 = sext i32 %add211 to i64
  %arrayidx213 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx209, i64 0, i64 %idxprom212
  %arrayidx214 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx213, i64 0, i64 1
  %129 = load i32, i32* %arrayidx214, align 4
  %130 = load i32, i32* %i, align 4
  %idxprom215 = sext i32 %130 to i64
  %arrayidx216 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom215
  %131 = load i32, i32* %j, align 4
  %idxprom217 = sext i32 %131 to i64
  %arrayidx218 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx216, i64 0, i64 %idxprom217
  %arrayidx219 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx218, i64 0, i64 1
  store i32 %129, i32* %arrayidx219, align 4
  br label %if.end220

if.end220:                                        ; preds = %if.else162, %if.then103
  br label %for.inc

for.inc:                                          ; preds = %if.end220
  %132 = load i32, i32* %j, align 4
  %inc = add nsw i32 %132, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond85

for.end:                                          ; preds = %for.cond85
  br label %for.inc221

for.inc221:                                       ; preds = %for.end
  %133 = load i32, i32* %i, align 4
  %inc222 = add nsw i32 %133, 1
  store i32 %inc222, i32* %i, align 4
  br label %for.cond81

for.end223:                                       ; preds = %for.cond81
  br label %if.end224

if.end224:                                        ; preds = %for.end223, %if.then77
  store i32 0, i32* %i, align 4
  br label %for.cond225

for.cond225:                                      ; preds = %for.inc245, %if.end224
  %134 = load i32, i32* %i, align 4
  %cmp226 = icmp slt i32 %134, 4
  br i1 %cmp226, label %for.body228, label %for.end247, !prof !447

for.body228:                                      ; preds = %for.cond225
  %135 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %136 = load i32, i32* %mbaddrx, align 4
  %mul229 = mul nsw i32 %136, 4
  %add230 = add nsw i32 %mul229, 3
  %idxprom231 = sext i32 %add230 to i64
  %arrayidx232 = getelementptr inbounds [36 x i8], [36 x i8]* %135, i64 %idxprom231
  %137 = load i32, i32* %mbaddry, align 4
  %mul233 = mul nsw i32 %137, 4
  %138 = load i32, i32* %i, align 4
  %add234 = add nsw i32 %mul233, %138
  %idxprom235 = sext i32 %add234 to i64
  %arrayidx236 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx232, i64 0, i64 %idxprom235
  store i8 2, i8* %arrayidx236, align 1
  %139 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %140 = load i32, i32* %mbaddrx, align 4
  %mul237 = mul nsw i32 %140, 4
  %141 = load i32, i32* %i, align 4
  %add238 = add nsw i32 %mul237, %141
  %idxprom239 = sext i32 %add238 to i64
  %arrayidx240 = getelementptr inbounds [36 x i8], [36 x i8]* %139, i64 %idxprom239
  %142 = load i32, i32* %mbaddry, align 4
  %mul241 = mul nsw i32 %142, 4
  %add242 = add nsw i32 %mul241, 3
  %idxprom243 = sext i32 %add242 to i64
  %arrayidx244 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx240, i64 0, i64 %idxprom243
  store i8 2, i8* %arrayidx244, align 1
  br label %for.inc245

for.inc245:                                       ; preds = %for.body228
  %143 = load i32, i32* %i, align 4
  %inc246 = add nsw i32 %143, 1
  store i32 %inc246, i32* %i, align 4
  br label %for.cond225

for.end247:                                       ; preds = %for.cond225
  %144 = load i8, i8* %tmpmbtp, align 1
  %145 = load i32, i32* %type, align 4
  %conv248 = trunc i32 %145 to i8
  %146 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %147 = load i8*, i8** %nalu_buf.addr, align 8
  %148 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %149 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %149, i32 0, i32 14
  %150 = load i8, i8* %num_ref_idx_l1_active_minus1, align 1
  %151 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %151, i32 0, i32 13
  %152 = load i8, i8* %num_ref_idx_l0_active_minus1, align 2
  %arraydecay = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i32 0, i32 0
  %arraydecay249 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i32 0, i32 0
  %arraydecay250 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i32 0, i32 0
  %arraydecay251 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i32 0, i32 0
  %153 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %154 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %154, i32 0, i32 9
  %155 = load i32, i32* %mem_idx, align 4
  %idxprom252 = sext i32 %155 to i64
  %arrayidx253 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %153, i64 %idxprom252
  %refIdxL0254 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx253, i32 0, i32 0
  %arraydecay255 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0254, i32 0, i32 0
  %156 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %157 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx256 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %157, i32 0, i32 9
  %158 = load i32, i32* %mem_idx256, align 4
  %idxprom257 = sext i32 %158 to i64
  %arrayidx258 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %156, i64 %idxprom257
  %refIdxL1259 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx258, i32 0, i32 1
  %arraydecay260 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1259, i32 0, i32 0
  %159 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %160 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx261 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %160, i32 0, i32 9
  %161 = load i32, i32* %mem_idx261, align 4
  %idxprom262 = sext i32 %161 to i64
  %arrayidx263 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %159, i64 %idxprom262
  %mvd_l0264 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx263, i32 0, i32 2
  %arraydecay265 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0264, i32 0, i32 0
  %162 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %163 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx266 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %163, i32 0, i32 9
  %164 = load i32, i32* %mem_idx266, align 4
  %idxprom267 = sext i32 %164 to i64
  %arrayidx268 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %162, i64 %idxprom267
  %mvd_l1269 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx268, i32 0, i32 3
  %arraydecay270 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1269, i32 0, i32 0
  %165 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %165, i32 0, i32 12
  %arraydecay271 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i32 0, i32 0
  %166 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1272 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %166, i32 0, i32 13
  %arraydecay273 = getelementptr inbounds [3 x i32], [3 x i32]* %list1272, i32 0, i32 0
  %167 = load i32, i32* %mbaddrx, align 4
  %168 = load i32, i32* %mbaddry, align 4
  %mul274 = mul nsw i32 %168, 11
  %add275 = add nsw i32 %167, %mul274
  %169 = load i8, i8* %MbSkipFlag, align 1
  %conv276 = zext i8 %169 to i32
  %arraydecay277 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i32 0, i32 0
  %arraydecay278 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i32 0, i32 0
  %170 = load i8, i8* %MbType, align 1
  call void @processinterMbType(i8 zeroext %144, i8 zeroext %conv248, %struct.NALU_t* %146, i8* %147, i64* %148, i8 zeroext %150, i8 zeroext %152, [2 x i8]* %arraydecay, [2 x i8]* %arraydecay249, [4 x [2 x i32]]* %arraydecay250, [4 x [2 x i32]]* %arraydecay251, [18 x i8]* %arraydecay255, [18 x i8]* %arraydecay260, [36 x [2 x i32]]* %arraydecay265, [36 x [2 x i32]]* %arraydecay270, i32* %arraydecay271, i32* %arraydecay273, i32 %add275, i32 %conv276, [2 x i8]* %arraydecay277, [4 x [2 x i32]]* %arraydecay278, i8 zeroext %170)
  br label %if.end336

if.else279:                                       ; preds = %lor.lhs.false73
  %171 = load i8, i8* %tmpImode, align 1
  %conv280 = zext i8 %171 to i32
  %cmp281 = icmp eq i32 %conv280, 1
  br i1 %cmp281, label %if.then287, label %lor.lhs.false283, !prof !448

lor.lhs.false283:                                 ; preds = %if.else279
  %172 = load i8, i8* %tmpImode, align 1
  %conv284 = zext i8 %172 to i32
  %cmp285 = icmp eq i32 %conv284, 0
  br i1 %cmp285, label %if.then287, label %if.end335, !prof !449

if.then287:                                       ; preds = %lor.lhs.false283, %if.else279
  %173 = load i8, i8* %tmpImode, align 1
  %conv288 = zext i8 %173 to i32
  %cmp289 = icmp eq i32 %conv288, 0
  br i1 %cmp289, label %if.then291, label %if.else305, !prof !440

if.then291:                                       ; preds = %if.then287
  %174 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %175 = load i8*, i8** %nalu_buf.addr, align 8
  %176 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %177 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %178 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %179 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx292 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %179, i32 0, i32 9
  %180 = load i32, i32* %mem_idx292, align 4
  %idxprom293 = sext i32 %180 to i64
  %arrayidx294 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %178, i64 %idxprom293
  %refIdxL0295 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx294, i32 0, i32 0
  %arraydecay296 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0295, i32 0, i32 0
  %181 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %182 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx297 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %182, i32 0, i32 9
  %183 = load i32, i32* %mem_idx297, align 4
  %idxprom298 = sext i32 %183 to i64
  %arrayidx299 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %181, i64 %idxprom298
  %refIdxL1300 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx299, i32 0, i32 1
  %arraydecay301 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1300, i32 0, i32 0
  %arraydecay302 = getelementptr inbounds [16 x i8], [16 x i8]* %intra4x4predmode, i32 0, i32 0
  %184 = load i8, i8* %constraint_intra_flag.addr, align 1
  %185 = load i32, i32* %mbaddrx, align 4
  %mul303 = mul nsw i32 %185, 4
  %186 = load i32, i32* %mbaddry, align 4
  %mul304 = mul nsw i32 %186, 4
  call void @IntraInfo(%struct.NALU_t* %174, i8* %175, i64* %176, [36 x i8]* %177, [18 x i8]* %arraydecay296, [18 x i8]* %arraydecay301, i8* %arraydecay302, i8 zeroext %184, i32 %mul303, i32 %mul304)
  br label %if.end329

if.else305:                                       ; preds = %if.then287
  store i32 0, i32* %i, align 4
  br label %for.cond306

for.cond306:                                      ; preds = %for.inc326, %if.else305
  %187 = load i32, i32* %i, align 4
  %cmp307 = icmp slt i32 %187, 4
  br i1 %cmp307, label %for.body309, label %for.end328, !prof !380

for.body309:                                      ; preds = %for.cond306
  %188 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %189 = load i32, i32* %mbaddrx, align 4
  %mul310 = mul nsw i32 %189, 4
  %add311 = add nsw i32 %mul310, 3
  %idxprom312 = sext i32 %add311 to i64
  %arrayidx313 = getelementptr inbounds [36 x i8], [36 x i8]* %188, i64 %idxprom312
  %190 = load i32, i32* %mbaddry, align 4
  %mul314 = mul nsw i32 %190, 4
  %191 = load i32, i32* %i, align 4
  %add315 = add nsw i32 %mul314, %191
  %idxprom316 = sext i32 %add315 to i64
  %arrayidx317 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx313, i64 0, i64 %idxprom316
  store i8 2, i8* %arrayidx317, align 1
  %192 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %193 = load i32, i32* %mbaddrx, align 4
  %mul318 = mul nsw i32 %193, 4
  %194 = load i32, i32* %i, align 4
  %add319 = add nsw i32 %mul318, %194
  %idxprom320 = sext i32 %add319 to i64
  %arrayidx321 = getelementptr inbounds [36 x i8], [36 x i8]* %192, i64 %idxprom320
  %195 = load i32, i32* %mbaddry, align 4
  %mul322 = mul nsw i32 %195, 4
  %add323 = add nsw i32 %mul322, 3
  %idxprom324 = sext i32 %add323 to i64
  %arrayidx325 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx321, i64 0, i64 %idxprom324
  store i8 2, i8* %arrayidx325, align 1
  br label %for.inc326

for.inc326:                                       ; preds = %for.body309
  %196 = load i32, i32* %i, align 4
  %inc327 = add nsw i32 %196, 1
  store i32 %inc327, i32* %i, align 4
  br label %for.cond306

for.end328:                                       ; preds = %for.cond306
  br label %if.end329

if.end329:                                        ; preds = %for.end328, %if.then291
  %197 = load i8, i8* %MbType, align 1
  %conv330 = zext i8 %197 to i32
  %sub331 = sub nsw i32 %conv330, 1
  %rem = srem i32 %sub331, 4
  %conv332 = trunc i32 %rem to i8
  store i8 %conv332, i8* %Intra16x16PredMode, align 1
  %198 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %199 = load i8*, i8** %nalu_buf.addr, align 8
  %200 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call333 = call i32 @u_e(%struct.NALU_t* %198, i8* %199, i64* %200)
  %conv334 = trunc i32 %call333 to i8
  store i8 %conv334, i8* %IntraChromaPredMode, align 1
  br label %if.end335

if.end335:                                        ; preds = %if.end329, %lor.lhs.false283
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %for.end247
  %201 = load i8, i8* %tmpImode, align 1
  %conv337 = zext i8 %201 to i32
  %cmp338 = icmp ne i32 %conv337, 25
  br i1 %cmp338, label %if.then340, label %if.end609, !prof !450

if.then340:                                       ; preds = %if.end336
  %202 = load i8, i8* %tmpImode, align 1
  %conv341 = zext i8 %202 to i32
  %cmp342 = icmp ne i32 %conv341, 3
  br i1 %cmp342, label %if.then344, label %if.end458, !prof !438

if.then344:                                       ; preds = %if.then340
  %203 = load i8, i8* %tmpImode, align 1
  %conv345 = zext i8 %203 to i32
  %cmp346 = icmp ne i32 %conv345, 1
  br i1 %cmp346, label %if.then348, label %if.else359, !prof !451

if.then348:                                       ; preds = %if.then344
  %204 = load i8, i8* %tmpImode, align 1
  %conv349 = zext i8 %204 to i32
  %cmp350 = icmp ne i32 %conv349, 0
  %conv351 = zext i1 %cmp350 to i32
  %205 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %206 = load i8*, i8** %nalu_buf.addr, align 8
  %207 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call352 = call zeroext i8 @m_e(i32 %conv351, %struct.NALU_t* %205, i8* %206, i64* %207)
  store i8 %call352, i8* %coded_block_pattern, align 1
  %208 = load i8, i8* %coded_block_pattern, align 1
  %conv353 = zext i8 %208 to i32
  %rem354 = srem i32 %conv353, 16
  %conv355 = trunc i32 %rem354 to i8
  store i8 %conv355, i8* %CodedPatternLuma, align 1
  %209 = load i8, i8* %coded_block_pattern, align 1
  %conv356 = zext i8 %209 to i32
  %div357 = sdiv i32 %conv356, 16
  %conv358 = trunc i32 %div357 to i8
  store i8 %conv358, i8* %CodedPatternChroma, align 1
  br label %if.end370

if.else359:                                       ; preds = %if.then344
  %210 = load i8, i8* %MbType, align 1
  %conv360 = zext i8 %210 to i32
  %sub361 = sub nsw i32 %conv360, 1
  %div362 = sdiv i32 %sub361, 4
  %rem363 = srem i32 %div362, 3
  %conv364 = trunc i32 %rem363 to i8
  store i8 %conv364, i8* %CodedPatternChroma, align 1
  %211 = load i8, i8* %MbType, align 1
  %conv365 = zext i8 %211 to i32
  %cmp366 = icmp sgt i32 %conv365, 12
  %212 = zext i1 %cmp366 to i64
  %cond368 = select i1 %cmp366, i32 15, i32 0
  %conv369 = trunc i32 %cond368 to i8
  store i8 %conv369, i8* %CodedPatternLuma, align 1
  br label %if.end370

if.end370:                                        ; preds = %if.else359, %if.then348
  %213 = load i8, i8* %CodedPatternChroma, align 1
  %conv371 = zext i8 %213 to i32
  %cmp372 = icmp sgt i32 %conv371, 0
  br i1 %cmp372, label %if.then382, label %lor.lhs.false374, !prof !452

lor.lhs.false374:                                 ; preds = %if.end370
  %214 = load i8, i8* %CodedPatternLuma, align 1
  %conv375 = zext i8 %214 to i32
  %cmp376 = icmp sgt i32 %conv375, 0
  br i1 %cmp376, label %if.then382, label %lor.lhs.false378, !prof !453

lor.lhs.false378:                                 ; preds = %lor.lhs.false374
  %215 = load i8, i8* %tmpImode, align 1
  %conv379 = zext i8 %215 to i32
  %cmp380 = icmp eq i32 %conv379, 1
  br i1 %cmp380, label %if.then382, label %if.end457, !prof !454

if.then382:                                       ; preds = %lor.lhs.false378, %lor.lhs.false374, %if.end370
  %216 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %217 = load i8*, i8** %nalu_buf.addr, align 8
  %218 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call383 = call i32 @s_e(%struct.NALU_t* %216, i8* %217, i64* %218)
  store i32 %call383, i32* %mb_qp_delta, align 4
  %219 = load i32, i32* %mb_qp_delta, align 4
  %220 = load i32, i32* %qPprev, align 4
  %add384 = add nsw i32 %220, %219
  store i32 %add384, i32* %qPprev, align 4
  %221 = load i32, i32* %qPprev, align 4
  %conv385 = trunc i32 %221 to i8
  store i8 %conv385, i8* %qPy, align 1
  %222 = load i8, i8* %qPy, align 1
  %conv386 = sext i8 %222 to i32
  %rem387 = srem i32 %conv386, 6
  %conv388 = trunc i32 %rem387 to i8
  store i8 %conv388, i8* %qPm6, align 1
  %223 = load i8, i8* %qPy, align 1
  %conv389 = sext i8 %223 to i32
  %div390 = sdiv i32 %conv389, 6
  %sub391 = sub nsw i32 %div390, 4
  %conv392 = trunc i32 %sub391 to i8
  store i8 %conv392, i8* %temp1l, align 1
  %224 = load i8, i8* %qPy, align 1
  %conv393 = sext i8 %224 to i32
  %div394 = sdiv i32 %conv393, 6
  %sub395 = sub nsw i32 4, %div394
  %conv396 = trunc i32 %sub395 to i8
  store i8 %conv396, i8* %temp2l, align 1
  %225 = load i8, i8* %temp1l, align 1
  %conv397 = sext i8 %225 to i32
  %cmp398 = icmp slt i32 %conv397, 0
  br i1 %cmp398, label %if.then400, label %if.end407, !prof !455

if.then400:                                       ; preds = %if.then382
  %226 = load i8, i8* %qPy, align 1
  %conv401 = sext i8 %226 to i32
  %div402 = sdiv i32 %conv401, 6
  %sub403 = sub nsw i32 3, %div402
  %idxprom404 = sext i32 %sub403 to i64
  %arrayidx405 = getelementptr inbounds [6 x i32], [6 x i32]* %power2, i64 0, i64 %idxprom404
  %227 = load i32, i32* %arrayidx405, align 4
  %conv406 = trunc i32 %227 to i8
  store i8 %conv406, i8* %temp3l, align 1
  br label %if.end407

if.end407:                                        ; preds = %if.then400, %if.then382
  %228 = load i8, i8* %qPy, align 1
  %conv408 = sext i8 %228 to i32
  %div409 = sdiv i32 %conv408, 6
  %sub410 = sub nsw i32 %div409, 6
  %conv411 = trunc i32 %sub410 to i8
  store i8 %conv411, i8* %scale1, align 1
  %229 = load i8, i8* %qPy, align 1
  %conv412 = sext i8 %229 to i32
  %div413 = sdiv i32 %conv412, 6
  %sub414 = sub nsw i32 6, %div413
  %conv415 = trunc i32 %sub414 to i8
  store i8 %conv415, i8* %scale2, align 1
  %230 = load i8, i8* %scale1, align 1
  %conv416 = sext i8 %230 to i32
  %cmp417 = icmp slt i32 %conv416, 0
  br i1 %cmp417, label %if.then419, label %if.end426, !prof !456

if.then419:                                       ; preds = %if.end407
  %231 = load i8, i8* %qPy, align 1
  %conv420 = sext i8 %231 to i32
  %div421 = sdiv i32 %conv420, 6
  %sub422 = sub nsw i32 5, %div421
  %idxprom423 = sext i32 %sub422 to i64
  %arrayidx424 = getelementptr inbounds [6 x i32], [6 x i32]* %power2, i64 0, i64 %idxprom423
  %232 = load i32, i32* %arrayidx424, align 4
  %conv425 = trunc i32 %232 to i8
  store i8 %conv425, i8* %scale3, align 1
  br label %if.end426

if.end426:                                        ; preds = %if.then419, %if.end407
  %233 = load i8, i8* %qPy, align 1
  %conv427 = sext i8 %233 to i32
  %234 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %chroma_offset = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %234, i32 0, i32 17
  %235 = load i32, i32* %chroma_offset, align 4
  %add428 = add nsw i32 %conv427, %235
  %call429 = call i32 @Clip3(i32 0, i32 51, i32 %add428)
  %conv430 = trunc i32 %call429 to i8
  store i8 %conv430, i8* %qPi, align 1
  %236 = load i8, i8* %qPi, align 1
  %conv431 = sext i8 %236 to i32
  %cmp432 = icmp slt i32 %conv431, 30
  br i1 %cmp432, label %if.then434, label %if.else435, !prof !456

if.then434:                                       ; preds = %if.end426
  %237 = load i8, i8* %qPi, align 1
  store i8 %237, i8* %qPc, align 1
  br label %if.end441

if.else435:                                       ; preds = %if.end426
  %238 = load i8, i8* %qPi, align 1
  %conv436 = sext i8 %238 to i32
  %sub437 = sub nsw i32 %conv436, 30
  %idxprom438 = sext i32 %sub437 to i64
  %arrayidx439 = getelementptr inbounds [22 x i32], [22 x i32]* %qPCtable, i64 0, i64 %idxprom438
  %239 = load i32, i32* %arrayidx439, align 4
  %conv440 = trunc i32 %239 to i8
  store i8 %conv440, i8* %qPc, align 1
  br label %if.end441

if.end441:                                        ; preds = %if.else435, %if.then434
  %240 = load i8, i8* %qPc, align 1
  %conv442 = sext i8 %240 to i32
  %rem443 = srem i32 %conv442, 6
  %conv444 = trunc i32 %rem443 to i8
  store i8 %conv444, i8* %qPcm6, align 1
  %241 = load i8, i8* %qPc, align 1
  %conv445 = sext i8 %241 to i32
  %div446 = sdiv i32 %conv445, 6
  %sub447 = sub nsw i32 %div446, 4
  %conv448 = trunc i32 %sub447 to i8
  store i8 %conv448, i8* %temp1c, align 1
  %242 = load i8, i8* %qPc, align 1
  %conv449 = sext i8 %242 to i32
  %div450 = sdiv i32 %conv449, 6
  %sub451 = sub nsw i32 4, %div450
  %conv452 = trunc i32 %sub451 to i8
  store i8 %conv452, i8* %temp2c, align 1
  %243 = load i8, i8* %qPc, align 1
  %conv453 = sext i8 %243 to i32
  %div454 = sdiv i32 %conv453, 6
  %sub455 = sub nsw i32 3, %div454
  %shl = shl i32 1, %sub455
  %conv456 = trunc i32 %shl to i8
  store i8 %conv456, i8* %temp3c, align 1
  br label %if.end457

if.end457:                                        ; preds = %if.end441, %lor.lhs.false378
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %if.then340
  %244 = load i8, i8* %tmpImode, align 1
  %conv459 = zext i8 %244 to i32
  %cmp460 = icmp eq i32 %conv459, 1
  br i1 %cmp460, label %if.then462, label %if.end489, !prof !457

if.then462:                                       ; preds = %if.end458
  %245 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %246 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %247 = load i32, i32* %mbaddrx, align 4
  %mul463 = mul nsw i32 %247, 4
  %248 = load i32, i32* %mbaddry, align 4
  %mul464 = mul nsw i32 %248, 4
  %call465 = call zeroext i8 @nc_Luma([9 x i8]* %245, [36 x i8]* %246, i32 %mul463, i32 %mul464)
  store i8 %call465, i8* %nC, align 1
  %arraydecay466 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i32 0, i32 0
  %249 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %250 = load i8*, i8** %nalu_buf.addr, align 8
  %251 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %252 = load i8, i8* %nC, align 1
  %conv467 = zext i8 %252 to i32
  %call468 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay466, %struct.NALU_t* %249, i8* %250, i64* %251, i32 0, i32 15, i32 %conv467)
  %253 = load i8, i8* %qPy, align 1
  %conv469 = sext i8 %253 to i32
  %arraydecay470 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i32 0, i32 0
  %254 = load i8, i8* %qPm6, align 1
  %conv471 = sext i8 %254 to i32
  %255 = load i8, i8* %scale1, align 1
  %conv472 = sext i8 %255 to i32
  %256 = load i8, i8* %scale2, align 1
  %conv473 = sext i8 %256 to i32
  %257 = load i8, i8* %scale3, align 1
  %conv474 = sext i8 %257 to i32
  call void @scale_and_inv_trans_Intra16x16DC(i32 %conv469, [4 x i32]* %arraydecay470, i32 %conv471, i32 %conv472, i32 %conv473, i32 %conv474)
  %arraydecay475 = getelementptr inbounds [16 x [4 x [4 x i8]]], [16 x [4 x [4 x i8]]]* %predL, i32 0, i32 0
  %258 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %259 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx476 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %259, i32 0, i32 9
  %260 = load i32, i32* %mem_idx476, align 4
  %idxprom477 = sext i32 %260 to i64
  %arrayidx478 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %258, i64 %idxprom477
  %arraydecay479 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx478, i32 0, i32 0
  %261 = load i8, i8* %Intra16x16PredMode, align 1
  %262 = load i32, i32* %mbaddrx, align 4
  %cmp480 = icmp sgt i32 %262, 0
  %conv481 = zext i1 %cmp480 to i32
  %mul482 = mul nsw i32 %conv481, 2
  %263 = load i32, i32* %mbaddry, align 4
  %cmp483 = icmp sgt i32 %263, 0
  %conv484 = zext i1 %cmp483 to i32
  %add485 = add nsw i32 %mul482, %conv484
  %conv486 = trunc i32 %add485 to i8
  %264 = load i32, i32* %mbaddrx, align 4
  %mul487 = mul nsw i32 %264, 16
  %265 = load i32, i32* %mbaddry, align 4
  %mul488 = mul nsw i32 %265, 16
  call void @predict_intra16x16_luma_NonField([4 x [4 x i8]]* %arraydecay475, [144 x i8]* %arraydecay479, i8 zeroext %261, i8 zeroext %conv486, i32 %mul487, i32 %mul488)
  br label %if.end489

if.end489:                                        ; preds = %if.then462, %if.end458
  store i32 0, i32* %k, align 4
  br label %for.cond490

for.cond490:                                      ; preds = %for.inc544, %if.end489
  %266 = load i32, i32* %k, align 4
  %cmp491 = icmp slt i32 %266, 16
  br i1 %cmp491, label %for.body493, label %for.end546, !prof !458

for.body493:                                      ; preds = %for.cond490
  %267 = load i32, i32* %k, align 4
  %and = and i32 %267, 4
  %cmp494 = icmp ne i32 %and, 0
  %conv495 = zext i1 %cmp494 to i32
  %mul496 = mul nsw i32 %conv495, 2
  %268 = load i32, i32* %k, align 4
  %and497 = and i32 %268, 1
  %cmp498 = icmp ne i32 %and497, 0
  %conv499 = zext i1 %cmp498 to i32
  %add500 = add nsw i32 %mul496, %conv499
  store i32 %add500, i32* %x, align 4
  %269 = load i32, i32* %k, align 4
  %and501 = and i32 %269, 8
  %cmp502 = icmp ne i32 %and501, 0
  %conv503 = zext i1 %cmp502 to i32
  %mul504 = mul nsw i32 %conv503, 2
  %270 = load i32, i32* %k, align 4
  %and505 = and i32 %270, 2
  %cmp506 = icmp ne i32 %and505, 0
  %conv507 = zext i1 %cmp506 to i32
  %add508 = add nsw i32 %mul504, %conv507
  store i32 %add508, i32* %y, align 4
  %271 = load i32, i32* %x, align 4
  %conv509 = trunc i32 %271 to i8
  %272 = load i32, i32* %y, align 4
  %conv510 = trunc i32 %272 to i8
  %273 = load i32, i32* %k, align 4
  %conv511 = trunc i32 %273 to i8
  %274 = load i32, i32* %mbaddrx, align 4
  %275 = load i32, i32* %mbaddry, align 4
  %276 = load i8, i8* %CodedPatternLuma, align 1
  %277 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %278 = load i8*, i8** %nalu_buf.addr, align 8
  %279 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %280 = load i8, i8* %tmpImode, align 1
  %conv512 = zext i8 %280 to i32
  %281 = load i32, i32* %x, align 4
  %idxprom513 = sext i32 %281 to i64
  %arrayidx514 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i64 0, i64 %idxprom513
  %282 = load i32, i32* %y, align 4
  %idxprom515 = sext i32 %282 to i64
  %arrayidx516 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx514, i64 0, i64 %idxprom515
  %283 = load i32, i32* %arrayidx516, align 4
  %284 = load %struct.StorablePicture*, %struct.StorablePicture** %PIC.addr, align 8
  %285 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %286 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %287 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %288 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %289 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %290 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %291 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %292 = load i32, i32* %k, align 4
  %idxprom517 = sext i32 %292 to i64
  %arrayidx518 = getelementptr inbounds [16 x [4 x [4 x i8]]], [16 x [4 x [4 x i8]]]* %predL, i64 0, i64 %idxprom517
  %arraydecay519 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx518, i32 0, i32 0
  %293 = load i8, i8* %qPm6, align 1
  %294 = load i8, i8* %qPy, align 1
  %295 = load i8, i8* %temp1l, align 1
  %296 = load i8, i8* %temp2l, align 1
  %297 = load i8, i8* %temp3l, align 1
  %298 = load i32, i32* %x, align 4
  %div520 = sdiv i32 %298, 2
  %idxprom521 = sext i32 %div520 to i64
  %arrayidx522 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i64 0, i64 %idxprom521
  %299 = load i32, i32* %y, align 4
  %div523 = sdiv i32 %299, 2
  %idxprom524 = sext i32 %div523 to i64
  %arrayidx525 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx522, i64 0, i64 %idxprom524
  %300 = load i8, i8* %arrayidx525, align 1
  %301 = load i32, i32* %x, align 4
  %div526 = sdiv i32 %301, 2
  %idxprom527 = sext i32 %div526 to i64
  %arrayidx528 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i64 0, i64 %idxprom527
  %302 = load i32, i32* %y, align 4
  %div529 = sdiv i32 %302, 2
  %idxprom530 = sext i32 %div529 to i64
  %arrayidx531 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx528, i64 0, i64 %idxprom530
  %303 = load i8, i8* %arrayidx531, align 1
  %304 = load i32, i32* %x, align 4
  %idxprom532 = sext i32 %304 to i64
  %arrayidx533 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i64 0, i64 %idxprom532
  %305 = load i32, i32* %y, align 4
  %idxprom534 = sext i32 %305 to i64
  %arrayidx535 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx533, i64 0, i64 %idxprom534
  %arraydecay536 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx535, i32 0, i32 0
  %306 = load i32, i32* %x, align 4
  %idxprom537 = sext i32 %306 to i64
  %arrayidx538 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i64 0, i64 %idxprom537
  %307 = load i32, i32* %y, align 4
  %idxprom539 = sext i32 %307 to i64
  %arrayidx540 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx538, i64 0, i64 %idxprom539
  %arraydecay541 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx540, i32 0, i32 0
  %308 = load i32, i32* %k, align 4
  %idxprom542 = sext i32 %308 to i64
  %arrayidx543 = getelementptr inbounds [16 x i8], [16 x i8]* %intra4x4predmode, i64 0, i64 %idxprom542
  %309 = load i8, i8* %arrayidx543, align 1
  call void @process_luma(i8 zeroext %conv509, i8 zeroext %conv510, i8 zeroext %conv511, i32 %274, i32 %275, i8 zeroext %276, %struct.NALU_t* %277, i8* %278, i64* %279, i32 %conv512, i32 %283, %struct.StorablePicture* %284, [176 x [144 x i8]]* %285, [88 x [72 x i8]]* %286, [88 x [72 x i8]]* %287, [9 x i8]* %288, [36 x i8]* %289, [36 x i8]* %290, %struct.ImageParameters* %291, [4 x i8]* %arraydecay519, i8 signext %293, i8 signext %294, i8 signext %295, i8 signext %296, i8 signext %297, i8 signext %300, i8 signext %303, i32* %arraydecay536, i32* %arraydecay541, i8 zeroext %309)
  br label %for.inc544

for.inc544:                                       ; preds = %for.body493
  %310 = load i32, i32* %k, align 4
  %inc545 = add nsw i32 %310, 1
  store i32 %inc545, i32* %k, align 4
  br label %for.cond490

for.end546:                                       ; preds = %for.cond490
  %311 = load i8, i8* %CodedPatternChroma, align 1
  %conv547 = zext i8 %311 to i32
  %and548 = and i32 %conv547, 3
  %tobool549 = icmp ne i32 %and548, 0
  br i1 %tobool549, label %if.then550, label %if.end563, !prof !459

if.then550:                                       ; preds = %for.end546
  %arraydecay551 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %312 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %313 = load i8*, i8** %nalu_buf.addr, align 8
  %314 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call552 = call zeroext i8 @residual_block_cavlc_4([2 x i32]* %arraydecay551, %struct.NALU_t* %312, i8* %313, i64* %314, i32 0, i32 3)
  %arraydecay553 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %315 = load i8, i8* %qPc, align 1
  %conv554 = sext i8 %315 to i32
  %316 = load i8, i8* %qPc, align 1
  %conv555 = sext i8 %316 to i32
  %rem556 = srem i32 %conv555, 6
  call void @scale_and_inv_trans_chroma2x2([2 x i32]* %arraydecay553, i32 %conv554, i32 %rem556)
  %arraydecay557 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %317 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %318 = load i8*, i8** %nalu_buf.addr, align 8
  %319 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call558 = call zeroext i8 @residual_block_cavlc_4([2 x i32]* %arraydecay557, %struct.NALU_t* %317, i8* %318, i64* %319, i32 0, i32 3)
  %arraydecay559 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %320 = load i8, i8* %qPc, align 1
  %conv560 = sext i8 %320 to i32
  %321 = load i8, i8* %qPc, align 1
  %conv561 = sext i8 %321 to i32
  %rem562 = srem i32 %conv561, 6
  call void @scale_and_inv_trans_chroma2x2([2 x i32]* %arraydecay559, i32 %conv560, i32 %rem562)
  br label %if.end563

if.end563:                                        ; preds = %if.then550, %for.end546
  %322 = load i8, i8* %tmpImode, align 1
  %conv564 = zext i8 %322 to i32
  %cmp565 = icmp eq i32 %conv564, 1
  br i1 %cmp565, label %if.then571, label %lor.lhs.false567, !prof !457

lor.lhs.false567:                                 ; preds = %if.end563
  %323 = load i8, i8* %tmpImode, align 1
  %conv568 = zext i8 %323 to i32
  %cmp569 = icmp eq i32 %conv568, 0
  br i1 %cmp569, label %if.then571, label %if.end600, !prof !460

if.then571:                                       ; preds = %lor.lhs.false567, %if.end563
  %arraydecay572 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_0, i32 0, i32 0
  %324 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %325 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx573 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %325, i32 0, i32 9
  %326 = load i32, i32* %mem_idx573, align 4
  %idxprom574 = sext i32 %326 to i64
  %arrayidx575 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %324, i64 %idxprom574
  %arraydecay576 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx575, i32 0, i32 0
  %327 = load i32, i32* %mbaddrx, align 4
  %cmp577 = icmp sgt i32 %327, 0
  %conv578 = zext i1 %cmp577 to i32
  %mul579 = mul nsw i32 %conv578, 2
  %328 = load i32, i32* %mbaddry, align 4
  %cmp580 = icmp sgt i32 %328, 0
  %conv581 = zext i1 %cmp580 to i32
  %add582 = add nsw i32 %mul579, %conv581
  %conv583 = trunc i32 %add582 to i8
  %329 = load i32, i32* %mbaddrx, align 4
  %mul584 = mul nsw i32 %329, 8
  %330 = load i32, i32* %mbaddry, align 4
  %mul585 = mul nsw i32 %330, 8
  %331 = load i8, i8* %IntraChromaPredMode, align 1
  call void @prediction_Chroma([4 x [4 x i8]]* %arraydecay572, [72 x i8]* %arraydecay576, i8 zeroext %conv583, i32 %mul584, i32 %mul585, i8 zeroext %331)
  %arraydecay586 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_1, i32 0, i32 0
  %332 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %333 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx587 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %333, i32 0, i32 9
  %334 = load i32, i32* %mem_idx587, align 4
  %idxprom588 = sext i32 %334 to i64
  %arrayidx589 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %332, i64 %idxprom588
  %arraydecay590 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx589, i32 0, i32 0
  %335 = load i32, i32* %mbaddrx, align 4
  %cmp591 = icmp sgt i32 %335, 0
  %conv592 = zext i1 %cmp591 to i32
  %mul593 = mul nsw i32 %conv592, 2
  %336 = load i32, i32* %mbaddry, align 4
  %cmp594 = icmp sgt i32 %336, 0
  %conv595 = zext i1 %cmp594 to i32
  %add596 = add nsw i32 %mul593, %conv595
  %conv597 = trunc i32 %add596 to i8
  %337 = load i32, i32* %mbaddrx, align 4
  %mul598 = mul nsw i32 %337, 8
  %338 = load i32, i32* %mbaddry, align 4
  %mul599 = mul nsw i32 %338, 8
  %339 = load i8, i8* %IntraChromaPredMode, align 1
  call void @prediction_Chroma([4 x [4 x i8]]* %arraydecay586, [72 x i8]* %arraydecay590, i8 zeroext %conv597, i32 %mul598, i32 %mul599, i8 zeroext %339)
  br label %if.end600

if.end600:                                        ; preds = %if.then571, %lor.lhs.false567
  %340 = load i8, i8* %CodedPatternChroma, align 1
  %341 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %342 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %343 = load i32, i32* %mbaddrx, align 4
  %344 = load i32, i32* %mbaddry, align 4
  %345 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %346 = load i8*, i8** %nalu_buf.addr, align 8
  %347 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %348 = load i8, i8* %qPc, align 1
  %349 = load i8, i8* %qPcm6, align 1
  %350 = load i8, i8* %temp1c, align 1
  %351 = load i8, i8* %temp2c, align 1
  %352 = load i8, i8* %temp3c, align 1
  %arraydecay601 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %arraydecay602 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %arraydecay603 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i32 0, i32 0
  %arraydecay604 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i32 0, i32 0
  %arraydecay605 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i32 0, i32 0
  %arraydecay606 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i32 0, i32 0
  %353 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %354 = load i8, i8* %tmpImode, align 1
  %arraydecay607 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_0, i32 0, i32 0
  %arraydecay608 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_1, i32 0, i32 0
  %355 = load %struct.StorablePicture*, %struct.StorablePicture** %PIC.addr, align 8
  %356 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %357 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %358 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  call void @process_chroma(i8 zeroext %340, [22 x [18 x i8]]* %341, [9 x i8]* %342, i32 %343, i32 %344, %struct.NALU_t* %345, i8* %346, i64* %347, i8 signext %348, i8 signext %349, i8 signext %350, i8 signext %351, i8 signext %352, [2 x i32]* %arraydecay601, [2 x i32]* %arraydecay602, [2 x i8]* %arraydecay603, [2 x i8]* %arraydecay604, [4 x [2 x i32]]* %arraydecay605, [4 x [2 x i32]]* %arraydecay606, %struct.ImageParameters* %353, i8 zeroext %354, [4 x [4 x i8]]* %arraydecay607, [4 x [4 x i8]]* %arraydecay608, %struct.StorablePicture* %355, [176 x [144 x i8]]* %356, [88 x [72 x i8]]* %357, [88 x [72 x i8]]* %358)
  br label %if.end609

if.end609:                                        ; preds = %if.end600, %if.end336
  br label %for.inc610

for.inc610:                                       ; preds = %if.end609
  %359 = load i32, i32* %mbaddrx, align 4
  %inc611 = add nsw i32 %359, 1
  store i32 %inc611, i32* %mbaddrx, align 4
  br label %for.cond2

for.end612:                                       ; preds = %for.cond2
  br label %for.inc613

for.inc613:                                       ; preds = %for.end612
  %360 = load i32, i32* %mbaddry, align 4
  %inc614 = add nsw i32 %360, 1
  store i32 %inc614, i32* %mbaddry, align 4
  br label %for.cond

for.end615:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @u_1(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !461 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bitpos = alloca i32, align 4
  %bytepos = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %div = udiv i64 %1, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %bytepos, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %rem = urem i64 %3, 8
  %sub = sub i64 7, %rem
  %conv1 = trunc i64 %sub to i32
  store i32 %conv1, i32* %bitpos, align 4
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %5 = load i64, i64* %4, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %4, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i32, i32* %bytepos, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %8 to i32
  %9 = load i32, i32* %bitpos, align 4
  %shr = ashr i32 %conv2, %9
  %and = and i32 %shr, 1
  %conv3 = trunc i32 %and to i8
  ret i8 %conv3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @u_8(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !368 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bytepos = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %div = udiv i64 %1, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %bytepos, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %add = add i64 %3, 8
  store i64 %add, i64* %2, align 8
  %4 = load i8*, i8** %nalu_buf.addr, align 8
  %5 = load i32, i32* %bytepos, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  ret i8 %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bytes_reverse_32(i32 %num) #0 !prof !462 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  %0 = load i32, i32* %num.addr, align 4
  %and = and i32 %0, 255
  %shl = shl i32 %and, 24
  %1 = load i32, i32* %num.addr, align 4
  %shr = lshr i32 %1, 8
  %and1 = and i32 %shr, 255
  %shl2 = shl i32 %and1, 16
  %or = or i32 %shl, %shl2
  %2 = load i32, i32* %num.addr, align 4
  %shr3 = lshr i32 %2, 16
  %and4 = and i32 %shr3, 255
  %shl5 = shl i32 %and4, 8
  %or6 = or i32 %or, %shl5
  %3 = load i32, i32* %num.addr, align 4
  %shr7 = lshr i32 %3, 24
  %and8 = and i32 %shr7, 255
  %or9 = or i32 %or6, %and8
  ret i32 %or9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @u_n(i32 %n, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !463 {
entry:
  %n.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %first_byte = alloca i32, align 4
  %last_byte = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %last_bit = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, 16
  br i1 %cmp, label %cond.true, label %cond.false, !prof !464

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.46, i32 0, i32 0), i32 85, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__.u_n, i32 0, i32 0)) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %1, %cond.true
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %div = udiv i64 %3, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %first_byte, align 4
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %5 = load i64, i64* %4, align 8
  %6 = load i32, i32* %n.addr, align 4
  %conv1 = sext i32 %6 to i64
  %add = add i64 %5, %conv1
  %div2 = udiv i64 %add, 8
  %conv3 = trunc i64 %div2 to i32
  store i32 %conv3, i32* %last_byte, align 4
  %7 = load i32, i32* %last_byte, align 4
  %8 = load i32, i32* %first_byte, align 4
  %sub = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub, 1
  store i32 %add4, i32* %num_bytes, align 4
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %10 = load i64, i64* %9, align 8
  %11 = load i32, i32* %n.addr, align 4
  %conv5 = sext i32 %11 to i64
  %add6 = add i64 %10, %conv5
  %rem = urem i64 %add6, 8
  %sub7 = sub i64 7, %rem
  %conv8 = trunc i64 %sub7 to i32
  store i32 %conv8, i32* %last_bit, align 4
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i32, i32* %first_byte, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  store i8 %14, i8* %temp_1, align 1
  %15 = load i8*, i8** %nalu_buf.addr, align 8
  %16 = load i32, i32* %first_byte, align 4
  %add9 = add nsw i32 %16, 1
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i64 %idxprom10
  %17 = load i8, i8* %arrayidx11, align 1
  store i8 %17, i8* %temp_2, align 1
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i32, i32* %first_byte, align 4
  %add12 = add nsw i32 %19, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i64 %idxprom13
  %20 = load i8, i8* %arrayidx14, align 1
  store i8 %20, i8* %temp_3, align 1
  %21 = load i8*, i8** %nalu_buf.addr, align 8
  %22 = load i32, i32* %first_byte, align 4
  %add15 = add nsw i32 %22, 3
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %21, i64 %idxprom16
  %23 = load i8, i8* %arrayidx17, align 1
  store i8 %23, i8* %temp_4, align 1
  %24 = load i8, i8* %temp_4, align 1
  %conv18 = zext i8 %24 to i32
  store i32 %conv18, i32* %temp, align 4
  %25 = load i32, i32* %temp, align 4
  %shl = shl i32 %25, 8
  %26 = load i8, i8* %temp_3, align 1
  %conv19 = zext i8 %26 to i32
  %or = or i32 %shl, %conv19
  store i32 %or, i32* %temp, align 4
  %27 = load i32, i32* %temp, align 4
  %shl20 = shl i32 %27, 8
  %28 = load i8, i8* %temp_2, align 1
  %conv21 = zext i8 %28 to i32
  %or22 = or i32 %shl20, %conv21
  store i32 %or22, i32* %temp, align 4
  %29 = load i32, i32* %temp, align 4
  %shl23 = shl i32 %29, 8
  %30 = load i8, i8* %temp_1, align 1
  %conv24 = zext i8 %30 to i32
  %or25 = or i32 %shl23, %conv24
  store i32 %or25, i32* %temp, align 4
  %31 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %31)
  store i32 %call, i32* %temp0, align 4
  %32 = load i32, i32* %temp0, align 4
  %33 = load i32, i32* %num_bytes, align 4
  %sub26 = sub nsw i32 4, %33
  %mul = mul nsw i32 8, %sub26
  %shr = lshr i32 %32, %mul
  store i32 %shr, i32* %temp1, align 4
  %34 = load i32, i32* %temp1, align 4
  %35 = load i32, i32* %last_bit, align 4
  %add27 = add nsw i32 %35, 1
  %shr28 = lshr i32 %34, %add27
  store i32 %shr28, i32* %temp2, align 4
  %36 = load i32, i32* %temp2, align 4
  %37 = load i32, i32* %n.addr, align 4
  %shl29 = shl i32 1, %37
  %sub30 = sub nsw i32 %shl29, 1
  %and = and i32 %36, %sub30
  store i32 %and, i32* %ret, align 4
  %38 = load i32, i32* %n.addr, align 4
  %conv31 = sext i32 %38 to i64
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %40 = load i64, i64* %39, align 8
  %add32 = add i64 %40, %conv31
  store i64 %add32, i64* %39, align 8
  %41 = load i32, i32* %ret, align 4
  ret i32 %41
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @u_e(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !465 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %leadingZeroBits = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 0, i32* %leadingZeroBits, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %0, i8* %1, i64* %2)
  %tobool = icmp ne i8 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end, !prof !466

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %leadingZeroBits, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %leadingZeroBits, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %leadingZeroBits, align 4
  %shl = shl i32 1, %4
  %sub = sub nsw i32 %shl, 1
  %5 = load i32, i32* %leadingZeroBits, align 4
  %6 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_n(i32 %5, %struct.NALU_t* %6, i8* %7, i64* %8)
  %add = add i32 %sub, %call1
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @s_e(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !467 {
entry:
  %retval = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %ret = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  store i32 %call, i32* %ret, align 4
  %3 = load i32, i32* %ret, align 4
  %rem = srem i32 %3, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !468

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ret, align 4
  %add = add nsw i32 %4, 1
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4
  %add1 = add nsw i32 %5, 1
  %sub = sub nsw i32 0, %add1
  %div2 = sdiv i32 %sub, 2
  store i32 %div2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @m_e(i32 %prediction_type, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !40 {
entry:
  %prediction_type.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %index = alloca i32, align 4
  store i32 %prediction_type, i32* %prediction_type.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  store i32 %call, i32* %index, align 4
  %3 = load i32, i32* %index, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [48 x [2 x i8]], [48 x [2 x i8]]* @NCBP, i64 0, i64 %idxprom
  %4 = load i32, i32* %prediction_type.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %5 = load i8, i8* %arrayidx2, align 1
  ret i8 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @t_e(i32 %n, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !96 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else, !prof !327

if.then:                                          ; preds = %entry
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  %conv = trunc i32 %call to i8
  store i8 %conv, i8* %retval, align 1
  br label %return

if.else:                                          ; preds = %entry
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_1(%struct.NALU_t* %4, i8* %5, i64* %6)
  %conv2 = zext i8 %call1 to i32
  %cmp3 = icmp ne i32 %conv2, 1
  %conv4 = zext i1 %cmp3 to i32
  %conv5 = trunc i32 %conv4 to i8
  store i8 %conv5, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i8, i8* %retval, align 1
  ret i8 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @showbits(i32 %n, i32 %temp0, i32 %offset) #0 !prof !469 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %temp0.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %first_byte = alloca i32, align 4
  %last_byte = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %last_bit = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %temp0, i32* %temp0.addr, align 4
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, 16
  br i1 %cmp, label %cond.true, label %cond.false, !prof !470

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.46, i32 0, i32 0), i32 182, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.showbits, i32 0, i32 0)) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %1, %cond.true
  %2 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end, !prof !471

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %3 = load i32, i32* %offset.addr, align 4
  %div = sdiv i32 %3, 8
  store i32 %div, i32* %first_byte, align 4
  %4 = load i32, i32* %offset.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %4, %5
  %div2 = sdiv i32 %add, 8
  store i32 %div2, i32* %last_byte, align 4
  %6 = load i32, i32* %last_byte, align 4
  %7 = load i32, i32* %first_byte, align 4
  %sub = sub nsw i32 %6, %7
  %add3 = add nsw i32 %sub, 1
  store i32 %add3, i32* %num_bytes, align 4
  %8 = load i32, i32* %offset.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %add4 = add nsw i32 %8, %9
  %rem = srem i32 %add4, 8
  %sub5 = sub nsw i32 7, %rem
  store i32 %sub5, i32* %last_bit, align 4
  %10 = load i32, i32* %temp0.addr, align 4
  %11 = load i32, i32* %num_bytes, align 4
  %sub6 = sub nsw i32 4, %11
  %mul = mul nsw i32 8, %sub6
  %shr = lshr i32 %10, %mul
  store i32 %shr, i32* %temp1, align 4
  %12 = load i32, i32* %temp1, align 4
  %13 = load i32, i32* %last_bit, align 4
  %add7 = add nsw i32 %13, 1
  %shr8 = lshr i32 %12, %add7
  store i32 %shr8, i32* %temp2, align 4
  %14 = load i32, i32* %temp2, align 4
  %15 = load i32, i32* %n.addr, align 4
  %shl = shl i32 1, %15
  %sub9 = sub nsw i32 %shl, 1
  %and = and i32 %14, %sub9
  store i32 %and, i32* %ret, align 4
  %16 = load i32, i32* %ret, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !28}

!0 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!1 = !{i32 1, !"ProfileSummary", !2}
!2 = !{!3, !4, !5, !6, !7, !8, !9, !10}
!3 = !{!"ProfileFormat", !"InstrProf"}
!4 = !{!"TotalCount", i64 3389984}
!5 = !{!"MaxCount", i64 605205}
!6 = !{!"MaxInternalCount", i64 274858}
!7 = !{!"MaxFunctionCount", i64 605205}
!8 = !{!"NumCounts", i64 730}
!9 = !{!"NumFunctions", i64 74}
!10 = !{!"DetailedSummary", !11}
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27}
!12 = !{i32 10000, i64 605205, i32 1}
!13 = !{i32 100000, i64 605205, i32 1}
!14 = !{i32 200000, i64 274858, i32 3}
!15 = !{i32 300000, i64 274858, i32 3}
!16 = !{i32 400000, i64 207400, i32 4}
!17 = !{i32 500000, i64 60608, i32 7}
!18 = !{i32 600000, i64 50048, i32 13}
!19 = !{i32 700000, i64 25408, i32 24}
!20 = !{i32 800000, i64 13581, i32 39}
!21 = !{i32 900000, i64 3166, i32 95}
!22 = !{i32 950000, i64 2176, i32 156}
!23 = !{i32 990000, i64 511, i32 268}
!24 = !{i32 999000, i64 80, i32 395}
!25 = !{i32 999900, i64 8, i32 463}
!26 = !{i32 999990, i64 2, i32 530}
!27 = !{i32 999999, i64 1, i32 557}
!28 = !{i32 1, !"wchar_size", i32 4}
!29 = !{!"function_entry_count", i64 3128}
!30 = !{!"branch_weights", i32 1, i32 3129}
!31 = !{!"branch_weights", i32 79, i32 3051}
!32 = !{!"branch_weights", i32 5, i32 75}
!33 = !{!"branch_weights", i32 12201, i32 3051}
!34 = !{!"branch_weights", i32 207401, i32 12201}
!35 = !{!"function_entry_count", i64 278}
!36 = !{!"branch_weights", i32 1113, i32 279}
!37 = !{!"branch_weights", i32 5561, i32 1113}
!38 = !{!"function_entry_count", i64 1660}
!39 = !{!"branch_weights", i32 24901, i32 1661}
!40 = !{!"function_entry_count", i64 182}
!41 = !{!"branch_weights", i32 729, i32 183}
!42 = !{!"function_entry_count", i64 2418}
!43 = !{!"branch_weights", i32 75, i32 2345}
!44 = !{!"branch_weights", i32 36271, i32 2419}
!45 = !{!"function_entry_count", i64 2925}
!46 = !{!"branch_weights", i32 3617, i32 2926}
!47 = !{!"branch_weights", i32 142, i32 2910}
!48 = !{!"branch_weights", i32 50049, i32 3129}
!49 = !{!"branch_weights", i32 1661, i32 1469}
!50 = !{!"branch_weights", i32 25, i32 1637}
!51 = !{!"branch_weights", i32 5265, i32 1661}
!52 = !{!"branch_weights", i32 2591, i32 2675}
!53 = !{!"branch_weights", i32 1900, i32 776}
!54 = !{!"branch_weights", i32 7, i32 770}
!55 = !{!"branch_weights", i32 5, i32 1902}
!56 = !{!"branch_weights", i32 5, i32 1}
!57 = !{!"branch_weights", i32 3, i32 1900}
!58 = !{!"branch_weights", i32 3, i32 2673}
!59 = !{!"branch_weights", i32 3, i32 1}
!60 = !{!"branch_weights", i32 1, i32 2675}
!61 = !{!"branch_weights", i32 785, i32 1891}
!62 = !{!"branch_weights", i32 518, i32 268}
!63 = !{!"branch_weights", i32 1350, i32 1326}
!64 = !{!"branch_weights", i32 776, i32 1900}
!65 = !{!"branch_weights", i32 274, i32 2402}
!66 = !{!"branch_weights", i32 274, i32 1}
!67 = !{!"branch_weights", i32 1661, i32 1}
!68 = !{!"branch_weights", i32 3605, i32 1661}
!69 = !{!"branch_weights", i32 2356, i32 1250}
!70 = !{!"branch_weights", i32 229, i32 51}
!71 = !{!"branch_weights", i32 1, i32 229}
!72 = !{!"branch_weights", i32 512, i32 229}
!73 = !{!"branch_weights", i32 261, i32 252}
!74 = !{!"branch_weights", i32 134, i32 119}
!75 = !{!"branch_weights", i32 6, i32 114}
!76 = !{!"branch_weights", i32 6, i32 134}
!77 = !{!"branch_weights", i32 6, i32 1}
!78 = !{!"branch_weights", i32 1, i32 134}
!79 = !{!"branch_weights", i32 1, i32 252}
!80 = !{!"branch_weights", i32 119, i32 134}
!81 = !{!"branch_weights", i32 109, i32 11}
!82 = !{!"branch_weights", i32 117, i32 136}
!83 = !{!"branch_weights", i32 64, i32 189}
!84 = !{!"branch_weights", i32 64, i32 1}
!85 = !{!"branch_weights", i32 183, i32 47}
!86 = !{!"branch_weights", i32 284, i32 229}
!87 = !{!"branch_weights", i32 64, i32 221}
!88 = !{!"function_entry_count", i64 2456}
!89 = !{!"branch_weights", i32 2399, i32 59}
!90 = !{!"branch_weights", i32 2401, i32 57}
!91 = !{!"function_entry_count", i64 672}
!92 = !{!"branch_weights", i32 649, i32 25}
!93 = !{!"branch_weights", i32 625, i32 49}
!94 = !{!"function_entry_count", i64 7}
!95 = !{!"branch_weights", i32 1, i32 2, i32 2, i32 6, i32 1}
!96 = !{!"function_entry_count", i64 1}
!97 = !{!"branch_weights", i32 4, i32 2}
!98 = !{!"branch_weights", i32 4, i32 4}
!99 = !{!"branch_weights", i32 2, i32 3}
!100 = !{!"branch_weights", i32 1, i32 4}
!101 = !{!"function_entry_count", i64 2}
!102 = !{!"branch_weights", i32 2, i32 2}
!103 = !{!"function_entry_count", i64 297}
!104 = !{!"branch_weights", i32 1, i32 298}
!105 = !{!"branch_weights", i32 2, i32 297}
!106 = !{!"branch_weights", i32 3, i32 2}
!107 = !{!"branch_weights", i32 5, i32 3}
!108 = !{!"branch_weights", i32 198, i32 101}
!109 = !{!"branch_weights", i32 1, i32 101}
!110 = !{!"branch_weights", i32 81, i32 218}
!111 = !{!"branch_weights", i32 1, i32 218}
!112 = !{!"branch_weights", i32 161, i32 81}
!113 = !{!"branch_weights", i32 321, i32 161}
!114 = !{!"branch_weights", i32 199, i32 20}
!115 = !{!"branch_weights", i32 397, i32 199}
!116 = !{!"branch_weights", i32 793, i32 397}
!117 = !{!"branch_weights", i32 792, i32 2}
!118 = !{!"branch_weights", i32 2, i32 1}
!119 = !{!"branch_weights", i32 39, i32 20}
!120 = !{!"branch_weights", i32 77, i32 39}
!121 = !{!"branch_weights", i32 218, i32 1}
!122 = !{!"branch_weights", i32 421, i32 218}
!123 = !{!"branch_weights", i32 820, i32 421}
!124 = !{!"branch_weights", i32 792, i32 29}
!125 = !{!"branch_weights", i32 1, i32 29}
!126 = !{!"branch_weights", i32 46, i32 29}
!127 = !{!"branch_weights", i32 78, i32 46}
!128 = !{!"branch_weights", i32 501, i32 298}
!129 = !{!"branch_weights", i32 900, i32 501}
!130 = !{!"branch_weights", i32 792, i32 109}
!131 = !{!"branch_weights", i32 1583, i32 792}
!132 = !{!"branch_weights", i32 3165, i32 1583}
!133 = !{!"branch_weights", i32 109, i32 1}
!134 = !{!"branch_weights", i32 109, i32 109}
!135 = !{!"branch_weights", i32 29, i32 81}
!136 = !{!"branch_weights", i32 419, i32 109}
!137 = !{!"branch_weights", i32 1589, i32 419}
!138 = !{!"branch_weights", i32 1, i32 109}
!139 = !{!"function_entry_count", i64 791}
!140 = !{!"branch_weights", i32 720, i32 73}
!141 = !{!"branch_weights", i32 704, i32 89}
!142 = !{!"branch_weights", i32 792, i32 1}
!143 = !{!"branch_weights", i32 9, i32 784}
!144 = !{!"branch_weights", i32 9, i32 1}
!145 = !{!"function_entry_count", i64 1690}
!146 = !{!"branch_weights", i32 1538, i32 154}
!147 = !{!"branch_weights", i32 1503, i32 189}
!148 = !{!"branch_weights", i32 1691, i32 1}
!149 = !{!"branch_weights", i32 81, i32 1611}
!150 = !{!"branch_weights", i32 7, i32 75}
!151 = !{!"branch_weights", i32 10, i32 66}
!152 = !{!"branch_weights", i32 9, i32 1668}
!153 = !{!"branch_weights", i32 8, i32 2}
!154 = !{!"branch_weights", i32 6, i32 1664}
!155 = !{!"branch_weights", i32 5, i32 2}
!156 = !{!"branch_weights", i32 4, i32 1662}
!157 = !{!"branch_weights", i32 180, i32 1484}
!158 = !{!"branch_weights", i32 180, i32 1}
!159 = !{!"branch_weights", i32 163, i32 18}
!160 = !{!"branch_weights", i32 1354, i32 148}
!161 = !{!"branch_weights", i32 1, i32 1354}
!162 = !{!"branch_weights", i32 148, i32 1354}
!163 = !{!"branch_weights", i32 131, i32 18}
!164 = !{!"branch_weights", i32 1, i32 131}
!165 = !{!"branch_weights", i32 18, i32 131}
!166 = !{!"branch_weights", i32 1, i32 18}
!167 = !{!"branch_weights", i32 18, i32 1484}
!168 = !{!"branch_weights", i32 66, i32 1436}
!169 = !{!"branch_weights", i32 66, i32 1}
!170 = !{!"branch_weights", i32 60, i32 7}
!171 = !{!"branch_weights", i32 54, i32 7}
!172 = !{!"branch_weights", i32 13, i32 1}
!173 = !{!"branch_weights", i32 12, i32 2}
!174 = !{!"branch_weights", i32 12, i32 1}
!175 = !{!"function_entry_count", i64 3164}
!176 = !{!"branch_weights", i32 1841, i32 1325}
!177 = !{!"branch_weights", i32 1841, i32 1}
!178 = !{!"branch_weights", i32 1825, i32 17}
!179 = !{!"branch_weights", i32 1825, i32 1}
!180 = !{!"branch_weights", i32 1817, i32 9}
!181 = !{!"branch_weights", i32 33, i32 3133}
!182 = !{!"branch_weights", i32 1, i32 3133}
!183 = !{!"branch_weights", i32 3133, i32 1}
!184 = !{!"branch_weights", i32 1801, i32 1333}
!185 = !{!"function_entry_count", i64 2481}
!186 = !{!"branch_weights", i32 1688, i32 795}
!187 = !{!"branch_weights", i32 7, i32 1682}
!188 = !{!"branch_weights", i32 2476, i32 1}
!189 = !{!"branch_weights", i32 795, i32 1682}
!190 = !{!"branch_weights", i32 1, i32 795}
!191 = !{!"branch_weights", i32 154, i32 2323}
!192 = !{!"function_entry_count", i64 794}
!193 = !{!"branch_weights", i32 1589, i32 795}
!194 = !{!"branch_weights", i32 3177, i32 1589}
!195 = !{!"branch_weights", i32 9529, i32 3177}
!196 = !{!"branch_weights", i32 28585, i32 9529}
!197 = !{!"branch_weights", i32 6353, i32 3177}
!198 = !{!"branch_weights", i32 12705, i32 6353}
!199 = !{!"function_entry_count", i64 1582}
!200 = !{!"branch_weights", i32 6329, i32 3165}
!201 = !{!"branch_weights", i32 18985, i32 6329}
!202 = !{!"branch_weights", i32 56953, i32 18985}
!203 = !{!"branch_weights", i32 12657, i32 6329}
!204 = !{!"branch_weights", i32 25313, i32 12657}
!205 = !{!"function_entry_count", i64 0}
!206 = !{!"function_entry_count", i64 56}
!207 = !{!"branch_weights", i32 505, i32 57}
!208 = !{!"branch_weights", i32 2017, i32 505}
!209 = !{!"function_entry_count", i64 1452}
!210 = !{!"branch_weights", i32 5809, i32 1453}
!211 = !{!"branch_weights", i32 52273, i32 5809}
!212 = !{!"function_entry_count", i64 80}
!213 = !{!"branch_weights", i32 721, i32 81}
!214 = !{!"branch_weights", i32 6481, i32 721}
!215 = !{!"branch_weights", i32 4897, i32 1585}
!216 = !{!"branch_weights", i32 2881, i32 2017}
!217 = !{!"branch_weights", i32 2681, i32 921}
!218 = !{!"branch_weights", i32 1601, i32 1081}
!219 = !{!"function_entry_count", i64 1588}
!220 = !{!"branch_weights", i32 1453, i32 137}
!221 = !{!"branch_weights", i32 1, i32 1453}
!222 = !{!"branch_weights", i32 57, i32 81}
!223 = !{!"branch_weights", i32 1, i32 57}
!224 = !{!"branch_weights", i32 81, i32 1}
!225 = !{!"branch_weights", i32 17, i32 65}
!226 = !{!"branch_weights", i32 25, i32 1}
!227 = !{!"branch_weights", i32 12657, i32 3165}
!228 = !{!"branch_weights", i32 50625, i32 12657}
!229 = !{!"branch_weights", i32 6353, i32 1589}
!230 = !{!"branch_weights", i32 25409, i32 6353}
!231 = !{!"branch_weights", i32 3457, i32 21953}
!232 = !{!"branch_weights", i32 3457, i32 1}
!233 = !{!"branch_weights", i32 2177, i32 23233}
!234 = !{!"branch_weights", i32 2177, i32 1}
!235 = !{!"branch_weights", i32 1, i32 3457}
!236 = !{!"branch_weights", i32 1, i32 2177}
!237 = !{!"branch_weights", i32 21953, i32 3457}
!238 = !{!"branch_weights", i32 21953, i32 1}
!239 = !{!"branch_weights", i32 2177, i32 1281}
!240 = !{!"branch_weights", i32 2049, i32 129}
!241 = !{!"branch_weights", i32 129, i32 1281}
!242 = !{!"branch_weights", i32 1, i32 129}
!243 = !{!"branch_weights", i32 23233, i32 2177}
!244 = !{!"branch_weights", i32 21185, i32 2049}
!245 = !{!"function_entry_count", i64 162}
!246 = !{!"branch_weights", i32 2593, i32 163}
!247 = !{!"branch_weights", i32 2545, i32 49}
!248 = !{!"branch_weights", i32 2545, i32 1}
!249 = !{!"branch_weights", i32 2475, i32 71}
!250 = !{!"branch_weights", i32 787, i32 1807}
!251 = !{!"branch_weights", i32 1637, i32 957}
!252 = !{!"branch_weights", i32 740, i32 218}
!253 = !{!"function_entry_count", i64 2592}
!254 = !{!"branch_weights", i32 2521, i32 73}
!255 = !{!"branch_weights", i32 163, i32 2431}
!256 = !{!"branch_weights", i32 163, i32 2269}
!257 = !{!"branch_weights", i32 163, i32 2107}
!258 = !{!"branch_weights", i32 163, i32 1945}
!259 = !{!"branch_weights", i32 163, i32 1783}
!260 = !{!"branch_weights", i32 1711, i32 73}
!261 = !{!"branch_weights", i32 9, i32 1703}
!262 = !{!"branch_weights", i32 1, i32 1703}
!263 = !{!"branch_weights", i32 2475, i32 119}
!264 = !{!"branch_weights", i32 1, i32 363, i32 810, i32 619, i32 130, i32 103, i32 170, i32 160, i32 127, i32 119}
!265 = !{!"branch_weights", i32 3, i32 271, i32 49, i32 43}
!266 = !{!"branch_weights", i32 1449, i32 363}
!267 = !{!"branch_weights", i32 5793, i32 1449}
!268 = !{!"branch_weights", i32 3237, i32 810}
!269 = !{!"branch_weights", i32 2473, i32 619}
!270 = !{!"function_entry_count", i64 36}
!271 = !{!"branch_weights", i32 31, i32 7}
!272 = !{!"branch_weights", i32 481, i32 31}
!273 = !{!"branch_weights", i32 97, i32 7}
!274 = !{!"branch_weights", i32 33, i32 5}
!275 = !{!"branch_weights", i32 513, i32 33}
!276 = !{!"branch_weights", i32 65, i32 5}
!277 = !{!"branch_weights", i32 27, i32 11}
!278 = !{!"branch_weights", i32 3, i32 22, i32 7, i32 8}
!279 = !{!"branch_weights", i32 337, i32 22}
!280 = !{!"branch_weights", i32 1345, i32 337}
!281 = !{!"branch_weights", i32 5377, i32 1345}
!282 = !{!"branch_weights", i32 385, i32 97}
!283 = !{!"branch_weights", i32 1537, i32 385}
!284 = !{!"branch_weights", i32 8, i32 1}
!285 = !{!"branch_weights", i32 113, i32 8}
!286 = !{!"branch_weights", i32 6, i32 3}
!287 = !{!"branch_weights", i32 81, i32 6}
!288 = !{!"branch_weights", i32 1, i32 6, i32 1, i32 3, i32 1}
!289 = !{!"branch_weights", i32 449, i32 113}
!290 = !{!"branch_weights", i32 1793, i32 449}
!291 = !{!"branch_weights", i32 33, i32 3}
!292 = !{!"branch_weights", i32 129, i32 33}
!293 = !{!"branch_weights", i32 513, i32 129}
!294 = !{!"branch_weights", i32 1, i32 513}
!295 = !{!"function_entry_count", i64 396}
!296 = !{!"branch_weights", i32 361, i32 37}
!297 = !{!"branch_weights", i32 2881, i32 361}
!298 = !{!"branch_weights", i32 289, i32 37}
!299 = !{!"branch_weights", i32 353, i32 45}
!300 = !{!"branch_weights", i32 2817, i32 353}
!301 = !{!"branch_weights", i32 321, i32 77}
!302 = !{!"branch_weights", i32 41, i32 203, i32 75, i32 81}
!303 = !{!"branch_weights", i32 175, i32 29}
!304 = !{!"branch_weights", i32 697, i32 175}
!305 = !{!"branch_weights", i32 167, i32 37}
!306 = !{!"branch_weights", i32 665, i32 167}
!307 = !{!"branch_weights", i32 143, i32 5, i32 33, i32 25}
!308 = !{!"branch_weights", i32 405, i32 203}
!309 = !{!"branch_weights", i32 809, i32 405}
!310 = !{!"branch_weights", i32 3233, i32 809}
!311 = !{!"branch_weights", i32 12929, i32 3233}
!312 = !{!"branch_weights", i32 297, i32 75}
!313 = !{!"branch_weights", i32 1185, i32 297}
!314 = !{!"branch_weights", i32 4737, i32 1185}
!315 = !{!"branch_weights", i32 321, i32 81}
!316 = !{!"branch_weights", i32 1281, i32 321}
!317 = !{!"branch_weights", i32 5121, i32 1281}
!318 = !{!"branch_weights", i32 161, i32 41}
!319 = !{!"branch_weights", i32 641, i32 161}
!320 = !{!"branch_weights", i32 2561, i32 641}
!321 = !{!"branch_weights", i32 1, i32 2561}
!322 = !{!"function_entry_count", i64 5}
!323 = !{!"branch_weights", i32 721, i32 6}
!324 = !{!"branch_weights", i32 126721, i32 721}
!325 = !{!"branch_weights", i32 361, i32 6}
!326 = !{!"branch_weights", i32 31681, i32 361}
!327 = !{!"branch_weights", i32 1, i32 2}
!328 = !{!"branch_weights", i32 2, i32 8}
!329 = !{!"branch_weights", i32 2, i32 7}
!330 = !{!"branch_weights", i32 16, i32 6}
!331 = !{!"branch_weights", i32 46, i32 16}
!332 = !{!"branch_weights", i32 37, i32 10}
!333 = !{!"branch_weights", i32 6, i32 32}
!334 = !{!"function_entry_count", i64 195712}
!335 = !{!"branch_weights", i32 1, i32 195713}
!336 = !{!"branch_weights", i32 5, i32 195709}
!337 = !{!"function_entry_count", i64 605205}
!338 = !{!"branch_weights", i32 477, i32 604730}
!339 = !{!"branch_weights", i32 2889, i32 601842}
!340 = !{!"branch_weights", i32 2845, i32 321}
!341 = !{!"branch_weights", i32 2685, i32 161}
!342 = !{!"branch_weights", i32 1, i32 2685}
!343 = !{!"branch_weights", i32 129, i32 353}
!344 = !{!"function_entry_count", i64 2872}
!345 = !{!"branch_weights", i32 2872, i32 2}
!346 = !{!"branch_weights", i32 2870, i32 3}
!347 = !{!"function_entry_count", i64 8}
!348 = !{!"branch_weights", i32 1, i32 9}
!349 = !{!"branch_weights", i32 2, i32 29}
!350 = !{!"branch_weights", i32 22, i32 9}
!351 = !{!"branch_weights", i32 1, i32 8}
!352 = !{!"branch_weights", i32 1, i32 7}
!353 = !{!"branch_weights", i32 4902, i32 7}
!354 = !{!"branch_weights", i32 2, i32 4901}
!355 = !{!"branch_weights", i32 4895, i32 7}
!356 = !{!"branch_weights", i32 1, i32 4901}
!357 = !{!"branch_weights", i32 7, i32 1}
!358 = !{!"function_entry_count", i64 9794}
!359 = !{!"nalu.c:FindStartCode"}
!360 = !{!"branch_weights", i32 24489, i32 9795}
!361 = !{!"branch_weights", i32 24177, i32 313}
!362 = !{!"branch_weights", i32 9739, i32 57}
!363 = !{!"branch_weights", i32 4869, i32 8}
!364 = !{!"branch_weights", i32 2, i32 4868}
!365 = !{!"branch_weights", i32 47, i32 4823}
!366 = !{!"branch_weights", i32 37, i32 1}
!367 = !{!"branch_weights", i32 8, i32 30}
!368 = !{!"function_entry_count", i64 3}
!369 = !{!"branch_weights", i32 1, i32 3}
!370 = !{!"branch_weights", i32 2, i32 5}
!371 = !{!"branch_weights", i32 3, i32 4}
!372 = !{!"branch_weights", i32 3, i32 3}
!373 = !{!"branch_weights", i32 4, i32 3}
!374 = !{!"branch_weights", i32 1, i32 6}
!375 = !{!"function_entry_count", i64 72}
!376 = !{!"branch_weights", i32 289, i32 73}
!377 = !{!"branch_weights", i32 1153, i32 289}
!378 = !{!"branch_weights", i32 4609, i32 1153}
!379 = !{!"branch_weights", i32 1, i32 37}
!380 = !{!"branch_weights", i32 145, i32 37}
!381 = !{!"branch_weights", i32 577, i32 145}
!382 = !{!"function_entry_count", i64 3788}
!383 = !{!"branch_weights", i32 3789, i32 1}
!384 = !{!"branch_weights", i32 15153, i32 3789}
!385 = !{!"branch_weights", i32 60609, i32 15153}
!386 = !{!"branch_weights", i32 1689, i32 2101}
!387 = !{!"branch_weights", i32 30305, i32 15153}
!388 = !{!"branch_weights", i32 557, i32 279}
!389 = !{!"branch_weights", i32 1113, i32 557}
!390 = !{!"function_entry_count", i64 3168}
!391 = !{!"branch_weights", i32 12673, i32 3169}
!392 = !{!"branch_weights", i32 50689, i32 12673}
!393 = !{!"function_entry_count", i64 1584}
!394 = !{!"branch_weights", i32 6337, i32 1585}
!395 = !{!"branch_weights", i32 25345, i32 6337}
!396 = !{!"function_entry_count", i64 7920}
!397 = !{!"branch_weights", i32 2421, i32 5501}
!398 = !{!"branch_weights", i32 257, i32 5245}
!399 = !{!"branch_weights", i32 1025, i32 257}
!400 = !{!"branch_weights", i32 4097, i32 1025}
!401 = !{!"branch_weights", i32 2593, i32 5329}
!402 = !{!"branch_weights", i32 2101, i32 493}
!403 = !{!"branch_weights", i32 577, i32 4753}
!404 = !{!"branch_weights", i32 321, i32 257}
!405 = !{!"branch_weights", i32 4753, i32 1}
!406 = !{!"branch_weights", i32 1589, i32 3165}
!407 = !{!"branch_weights", i32 3165, i32 1}
!408 = !{!"branch_weights", i32 1, i32 3165}
!409 = !{!"branch_weights", i32 3165, i32 1589}
!410 = !{!"branch_weights", i32 1589, i32 1}
!411 = !{!"branch_weights", i32 1, i32 1589}
!412 = !{!"branch_weights", i32 33, i32 1557}
!413 = !{!"branch_weights", i32 89, i32 1}
!414 = !{!"function_entry_count", i64 495}
!415 = !{!"branch_weights", i32 991, i32 496}
!416 = !{!"branch_weights", i32 1981, i32 991}
!417 = !{!"branch_weights", i32 337, i32 1645}
!418 = !{!"branch_weights", i32 6577, i32 1645}
!419 = !{!"branch_weights", i32 26305, i32 6577}
!420 = !{!"branch_weights", i32 557, i32 1425}
!421 = !{!"branch_weights", i32 1981, i32 1}
!422 = !{!"branch_weights", i32 1584, i32 398}
!423 = !{!"branch_weights", i32 3167, i32 1584}
!424 = !{!"branch_weights", i32 6333, i32 3167}
!425 = !{!"branch_weights", i32 398, i32 1}
!426 = !{!"branch_weights", i32 795, i32 398}
!427 = !{!"branch_weights", i32 649, i32 1333}
!428 = !{!"branch_weights", i32 145, i32 1189}
!429 = !{!"branch_weights", i32 1189, i32 1}
!430 = !{!"branch_weights", i32 792, i32 398}
!431 = !{!"branch_weights", i32 46, i32 6}
!432 = !{!"branch_weights", i32 496, i32 46}
!433 = !{!"branch_weights", i32 298, i32 199}
!434 = !{!"branch_weights", i32 40, i32 259}
!435 = !{!"branch_weights", i32 24, i32 17}
!436 = !{!"branch_weights", i32 5, i32 20}
!437 = !{!"branch_weights", i32 259, i32 17}
!438 = !{!"branch_weights", i32 219, i32 278}
!439 = !{!"branch_weights", i32 199, i32 21}
!440 = !{!"branch_weights", i32 163, i32 37}
!441 = !{!"branch_weights", i32 21, i32 476}
!442 = !{!"branch_weights", i32 278, i32 199}
!443 = !{!"branch_weights", i32 199, i32 100}
!444 = !{!"branch_weights", i32 793, i32 199}
!445 = !{!"branch_weights", i32 3169, i32 793}
!446 = !{!"branch_weights", i32 1841, i32 1329}
!447 = !{!"branch_weights", i32 1189, i32 298}
!448 = !{!"branch_weights", i32 37, i32 163}
!449 = !{!"branch_weights", i32 163, i32 1}
!450 = !{!"branch_weights", i32 496, i32 1}
!451 = !{!"branch_weights", i32 183, i32 37}
!452 = !{!"branch_weights", i32 140, i32 80}
!453 = !{!"branch_weights", i32 49, i32 32}
!454 = !{!"branch_weights", i32 11, i32 22}
!455 = !{!"branch_weights", i32 1, i32 198}
!456 = !{!"branch_weights", i32 198, i32 1}
!457 = !{!"branch_weights", i32 37, i32 460}
!458 = !{!"branch_weights", i32 7921, i32 496}
!459 = !{!"branch_weights", i32 140, i32 357}
!460 = !{!"branch_weights", i32 163, i32 298}
!461 = !{!"function_entry_count", i64 13581}
!462 = !{!"function_entry_count", i64 11596}
!463 = !{!"function_entry_count", i64 4008}
!464 = !{!"branch_weights", i32 4009, i32 1}
!465 = !{!"function_entry_count", i64 920}
!466 = !{!"branch_weights", i32 653, i32 921}
!467 = !{!"function_entry_count", i64 261}
!468 = !{!"branch_weights", i32 25, i32 238}
!469 = !{!"function_entry_count", i64 274858}
!470 = !{!"branch_weights", i32 274859, i32 1}
!471 = !{!"branch_weights", i32 48785, i32 226075}
