; ModuleID = '../src/vlc.c'
source_filename = "../src/vlc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }

@NCBP = dso_local constant [48 x [2 x i8]] [[2 x i8] c"/\00", [2 x i8] c"\1F\10", [2 x i8] c"\0F\01", [2 x i8] c"\00\02", [2 x i8] c"\17\04", [2 x i8] c"\1B\08", [2 x i8] c"\1D ", [2 x i8] c"\1E\03", [2 x i8] c"\07\05", [2 x i8] c"\0B\0A", [2 x i8] c"\0D\0C", [2 x i8] c"\0E\0F", [2 x i8] c"'/", [2 x i8] c"+\07", [2 x i8] c"-\0B", [2 x i8] c".\0D", [2 x i8] c"\10\0E", [2 x i8] c"\03\06", [2 x i8] c"\05\09", [2 x i8] c"\0A\1F", [2 x i8] c"\0C#", [2 x i8] c"\13%", [2 x i8] c"\15*", [2 x i8] c"\1A,", [2 x i8] c"\1C!", [2 x i8] c"#\22", [2 x i8] c"%$", [2 x i8] c"*(", [2 x i8] c",'", [2 x i8] c"\01+", [2 x i8] c"\02-", [2 x i8] c"\04.", [2 x i8] c"\08\11", [2 x i8] c"\11\12", [2 x i8] c"\12\14", [2 x i8] c"\14\18", [2 x i8] c"\18\13", [2 x i8] c"\06\15", [2 x i8] c"\09\1A", [2 x i8] c"\16\1C", [2 x i8] c"\19\17", [2 x i8] c" \1B", [2 x i8] c"!\1D", [2 x i8] c"\22\1E", [2 x i8] c"$\16", [2 x i8] c"(\19", [2 x i8] c"&&", [2 x i8] c"))"], align 16
@.str = private unnamed_addr constant [8 x i8] c"n <= 16\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"../src/vlc.c\00", align 1
@__PRETTY_FUNCTION__.u_n = private unnamed_addr constant [66 x i8] c"unsigned int u_n(int, NALU_t *, unsigned char *, unsigned long *)\00", align 1
@__PRETTY_FUNCTION__.showbits = private unnamed_addr constant [37 x i8] c"int showbits(int, unsigned int, int)\00", align 1
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @u_1(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !29 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bitpos = alloca i32, align 4
  %bytepos = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %div = udiv i64 %1, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %bytepos, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %rem = urem i64 %3, 8
  %sub = sub i64 7, %rem
  %conv1 = trunc i64 %sub to i32
  store i32 %conv1, i32* %bitpos, align 4
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %5 = load i64, i64* %4, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %4, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i32, i32* %bytepos, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %8 to i32
  %9 = load i32, i32* %bitpos, align 4
  %shr = ashr i32 %conv2, %9
  %and = and i32 %shr, 1
  %conv3 = trunc i32 %and to i8
  ret i8 %conv3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @u_8(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !30 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bytepos = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %div = udiv i64 %1, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %bytepos, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %add = add i64 %3, 8
  store i64 %add, i64* %2, align 8
  %4 = load i8*, i8** %nalu_buf.addr, align 8
  %5 = load i32, i32* %bytepos, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  ret i8 %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bytes_reverse_32(i32 %num) #0 !prof !31 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  %0 = load i32, i32* %num.addr, align 4
  %and = and i32 %0, 255
  %shl = shl i32 %and, 24
  %1 = load i32, i32* %num.addr, align 4
  %shr = lshr i32 %1, 8
  %and1 = and i32 %shr, 255
  %shl2 = shl i32 %and1, 16
  %or = or i32 %shl, %shl2
  %2 = load i32, i32* %num.addr, align 4
  %shr3 = lshr i32 %2, 16
  %and4 = and i32 %shr3, 255
  %shl5 = shl i32 %and4, 8
  %or6 = or i32 %or, %shl5
  %3 = load i32, i32* %num.addr, align 4
  %shr7 = lshr i32 %3, 24
  %and8 = and i32 %shr7, 255
  %or9 = or i32 %or6, %and8
  ret i32 %or9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @u_n(i32 %n, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !32 {
entry:
  %n.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %first_byte = alloca i32, align 4
  %last_byte = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %last_bit = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, 16
  br i1 %cmp, label %cond.true, label %cond.false, !prof !33

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 85, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__.u_n, i32 0, i32 0)) #2
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %1, %cond.true
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %div = udiv i64 %3, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %first_byte, align 4
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %5 = load i64, i64* %4, align 8
  %6 = load i32, i32* %n.addr, align 4
  %conv1 = sext i32 %6 to i64
  %add = add i64 %5, %conv1
  %div2 = udiv i64 %add, 8
  %conv3 = trunc i64 %div2 to i32
  store i32 %conv3, i32* %last_byte, align 4
  %7 = load i32, i32* %last_byte, align 4
  %8 = load i32, i32* %first_byte, align 4
  %sub = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub, 1
  store i32 %add4, i32* %num_bytes, align 4
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %10 = load i64, i64* %9, align 8
  %11 = load i32, i32* %n.addr, align 4
  %conv5 = sext i32 %11 to i64
  %add6 = add i64 %10, %conv5
  %rem = urem i64 %add6, 8
  %sub7 = sub i64 7, %rem
  %conv8 = trunc i64 %sub7 to i32
  store i32 %conv8, i32* %last_bit, align 4
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i32, i32* %first_byte, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  store i8 %14, i8* %temp_1, align 1
  %15 = load i8*, i8** %nalu_buf.addr, align 8
  %16 = load i32, i32* %first_byte, align 4
  %add9 = add nsw i32 %16, 1
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i64 %idxprom10
  %17 = load i8, i8* %arrayidx11, align 1
  store i8 %17, i8* %temp_2, align 1
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i32, i32* %first_byte, align 4
  %add12 = add nsw i32 %19, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i64 %idxprom13
  %20 = load i8, i8* %arrayidx14, align 1
  store i8 %20, i8* %temp_3, align 1
  %21 = load i8*, i8** %nalu_buf.addr, align 8
  %22 = load i32, i32* %first_byte, align 4
  %add15 = add nsw i32 %22, 3
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %21, i64 %idxprom16
  %23 = load i8, i8* %arrayidx17, align 1
  store i8 %23, i8* %temp_4, align 1
  %24 = load i8, i8* %temp_4, align 1
  %conv18 = zext i8 %24 to i32
  store i32 %conv18, i32* %temp, align 4
  %25 = load i32, i32* %temp, align 4
  %shl = shl i32 %25, 8
  %26 = load i8, i8* %temp_3, align 1
  %conv19 = zext i8 %26 to i32
  %or = or i32 %shl, %conv19
  store i32 %or, i32* %temp, align 4
  %27 = load i32, i32* %temp, align 4
  %shl20 = shl i32 %27, 8
  %28 = load i8, i8* %temp_2, align 1
  %conv21 = zext i8 %28 to i32
  %or22 = or i32 %shl20, %conv21
  store i32 %or22, i32* %temp, align 4
  %29 = load i32, i32* %temp, align 4
  %shl23 = shl i32 %29, 8
  %30 = load i8, i8* %temp_1, align 1
  %conv24 = zext i8 %30 to i32
  %or25 = or i32 %shl23, %conv24
  store i32 %or25, i32* %temp, align 4
  %31 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %31)
  store i32 %call, i32* %temp0, align 4
  %32 = load i32, i32* %temp0, align 4
  %33 = load i32, i32* %num_bytes, align 4
  %sub26 = sub nsw i32 4, %33
  %mul = mul nsw i32 8, %sub26
  %shr = lshr i32 %32, %mul
  store i32 %shr, i32* %temp1, align 4
  %34 = load i32, i32* %temp1, align 4
  %35 = load i32, i32* %last_bit, align 4
  %add27 = add nsw i32 %35, 1
  %shr28 = lshr i32 %34, %add27
  store i32 %shr28, i32* %temp2, align 4
  %36 = load i32, i32* %temp2, align 4
  %37 = load i32, i32* %n.addr, align 4
  %shl29 = shl i32 1, %37
  %sub30 = sub nsw i32 %shl29, 1
  %and = and i32 %36, %sub30
  store i32 %and, i32* %ret, align 4
  %38 = load i32, i32* %n.addr, align 4
  %conv31 = sext i32 %38 to i64
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %40 = load i64, i64* %39, align 8
  %add32 = add i64 %40, %conv31
  store i64 %add32, i64* %39, align 8
  %41 = load i32, i32* %ret, align 4
  ret i32 %41
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @u_e(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !34 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %leadingZeroBits = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 0, i32* %leadingZeroBits, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %0, i8* %1, i64* %2)
  %tobool = icmp ne i8 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end, !prof !35

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %leadingZeroBits, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %leadingZeroBits, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %leadingZeroBits, align 4
  %shl = shl i32 1, %4
  %sub = sub nsw i32 %shl, 1
  %5 = load i32, i32* %leadingZeroBits, align 4
  %6 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_n(i32 %5, %struct.NALU_t* %6, i8* %7, i64* %8)
  %add = add i32 %sub, %call1
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @s_e(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !36 {
entry:
  %retval = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %ret = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  store i32 %call, i32* %ret, align 4
  %3 = load i32, i32* %ret, align 4
  %rem = srem i32 %3, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !37

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ret, align 4
  %add = add nsw i32 %4, 1
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4
  %add1 = add nsw i32 %5, 1
  %sub = sub nsw i32 0, %add1
  %div2 = sdiv i32 %sub, 2
  store i32 %div2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @m_e(i32 %prediction_type, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !38 {
entry:
  %prediction_type.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %index = alloca i32, align 4
  store i32 %prediction_type, i32* %prediction_type.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  store i32 %call, i32* %index, align 4
  %3 = load i32, i32* %index, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [48 x [2 x i8]], [48 x [2 x i8]]* @NCBP, i64 0, i64 %idxprom
  %4 = load i32, i32* %prediction_type.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %5 = load i8, i8* %arrayidx2, align 1
  ret i8 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @t_e(i32 %n, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !39 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else, !prof !40

if.then:                                          ; preds = %entry
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  %conv = trunc i32 %call to i8
  store i8 %conv, i8* %retval, align 1
  br label %return

if.else:                                          ; preds = %entry
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_1(%struct.NALU_t* %4, i8* %5, i64* %6)
  %conv2 = zext i8 %call1 to i32
  %cmp3 = icmp ne i32 %conv2, 1
  %conv4 = zext i1 %cmp3 to i32
  %conv5 = trunc i32 %conv4 to i8
  store i8 %conv5, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i8, i8* %retval, align 1
  ret i8 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @showbits(i32 %n, i32 %temp0, i32 %offset) #0 !prof !41 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %temp0.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %first_byte = alloca i32, align 4
  %last_byte = alloca i32, align 4
  %num_bytes = alloca i32, align 4
  %last_bit = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %temp0, i32* %temp0.addr, align 4
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, 16
  br i1 %cmp, label %cond.true, label %cond.false, !prof !42

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 182, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.showbits, i32 0, i32 0)) #2
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %1, %cond.true
  %2 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end, !prof !43

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %3 = load i32, i32* %offset.addr, align 4
  %div = sdiv i32 %3, 8
  store i32 %div, i32* %first_byte, align 4
  %4 = load i32, i32* %offset.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %4, %5
  %div2 = sdiv i32 %add, 8
  store i32 %div2, i32* %last_byte, align 4
  %6 = load i32, i32* %last_byte, align 4
  %7 = load i32, i32* %first_byte, align 4
  %sub = sub nsw i32 %6, %7
  %add3 = add nsw i32 %sub, 1
  store i32 %add3, i32* %num_bytes, align 4
  %8 = load i32, i32* %offset.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %add4 = add nsw i32 %8, %9
  %rem = srem i32 %add4, 8
  %sub5 = sub nsw i32 7, %rem
  store i32 %sub5, i32* %last_bit, align 4
  %10 = load i32, i32* %temp0.addr, align 4
  %11 = load i32, i32* %num_bytes, align 4
  %sub6 = sub nsw i32 4, %11
  %mul = mul nsw i32 8, %sub6
  %shr = lshr i32 %10, %mul
  store i32 %shr, i32* %temp1, align 4
  %12 = load i32, i32* %temp1, align 4
  %13 = load i32, i32* %last_bit, align 4
  %add7 = add nsw i32 %13, 1
  %shr8 = lshr i32 %12, %add7
  store i32 %shr8, i32* %temp2, align 4
  %14 = load i32, i32* %temp2, align 4
  %15 = load i32, i32* %n.addr, align 4
  %shl = shl i32 1, %15
  %sub9 = sub nsw i32 %shl, 1
  %and = and i32 %14, %sub9
  store i32 %and, i32* %ret, align 4
  %16 = load i32, i32* %ret, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 13581}
!30 = !{!"function_entry_count", i64 3}
!31 = !{!"function_entry_count", i64 11596}
!32 = !{!"function_entry_count", i64 4008}
!33 = !{!"branch_weights", i32 4009, i32 1}
!34 = !{!"function_entry_count", i64 920}
!35 = !{!"branch_weights", i32 653, i32 921}
!36 = !{!"function_entry_count", i64 261}
!37 = !{!"branch_weights", i32 25, i32 238}
!38 = !{!"function_entry_count", i64 182}
!39 = !{!"function_entry_count", i64 1}
!40 = !{!"branch_weights", i32 1, i32 2}
!41 = !{!"function_entry_count", i64 274858}
!42 = !{!"branch_weights", i32 274859, i32 1}
!43 = !{!"branch_weights", i32 48785, i32 226075}
