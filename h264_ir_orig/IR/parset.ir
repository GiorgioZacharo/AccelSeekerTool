; ModuleID = '../src/parset.c'
source_filename = "../src/parset.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.seq_parameter_set_rbsp_t = type { i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i32, i32, i32, [256 x i32], i32, i8, i32, i32, i8, i8, i8, i8, i32, i32, i32, i32, i8 }
%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }
%struct.pic_parameter_set_rbsp_t = type { i8, i32, i32, i8, i8, i32, i32, i32, i8, i8, i32, i32, i32, i8, i8, i8 }
%struct.pred_weight_table_rbsp_t = type { i32, i32, [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]], [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]] }
%struct.dec_ref_pic_marking_rbsp_t = type { i8, i8, i8, [10 x i8], [10 x i32] }
%struct.ImageParameters = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i8, [3 x i32], [3 x i32], i32, i32, i32, i32 }
%struct.slice_header_rbsp_t = type { i32, i8, i8, i32, i8, i8, i32, i32, i32, [2 x i32], i32, i8, i8, i8, i8, i8, i8, [5 x i8], [5 x i32], [5 x i8], [5 x i32], %struct.pred_weight_table_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t, i8, i32, i8, i32, i32 }
%struct.StorablePicture = type { i32, i8, i8, i8, i8 }

@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ProcessSPS(%struct.seq_parameter_set_rbsp_t* %SPS, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !29 {
entry:
  %SPS.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %profile_idc_tmp = alloca i8, align 1
  %c_set_flgs = alloca i8, align 1
  %lvl_idc_tmp = alloca i8, align 1
  %SPS_id = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.seq_parameter_set_rbsp_t* %SPS, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_8(%struct.NALU_t* %1, i8* %2, i64* %3)
  store i8 %call, i8* %profile_idc_tmp, align 1
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_8(%struct.NALU_t* %4, i8* %5, i64* %6)
  store i8 %call1, i8* %c_set_flgs, align 1
  %7 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_8(%struct.NALU_t* %7, i8* %8, i64* %9)
  store i8 %call2, i8* %lvl_idc_tmp, align 1
  %10 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call3 = call i32 @u_e(%struct.NALU_t* %10, i8* %11, i64* %12)
  store i32 %call3, i32* %SPS_id, align 4
  %13 = load i32, i32* %SPS_id, align 4
  %cmp = icmp ugt i32 %13, 4
  br i1 %cmp, label %if.then, label %if.end, !prof !30

if.then:                                          ; preds = %entry
  call void @exit(i32 -1) #3
  unreachable

if.end:                                           ; preds = %entry
  %14 = load i8, i8* %profile_idc_tmp, align 1
  %15 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %profile_idc = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %15, i32 0, i32 1
  store i8 %14, i8* %profile_idc, align 1
  %16 = load i8, i8* %c_set_flgs, align 1
  %conv = zext i8 %16 to i32
  %shr = ashr i32 %conv, 7
  %and = and i32 %shr, 1
  %conv4 = trunc i32 %and to i8
  %17 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set0_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %17, i32 0, i32 2
  store i8 %conv4, i8* %constrained_set0_flag, align 2
  %18 = load i8, i8* %c_set_flgs, align 1
  %conv5 = zext i8 %18 to i32
  %shr6 = ashr i32 %conv5, 6
  %and7 = and i32 %shr6, 1
  %conv8 = trunc i32 %and7 to i8
  %19 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set1_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %19, i32 0, i32 3
  store i8 %conv8, i8* %constrained_set1_flag, align 1
  %20 = load i8, i8* %c_set_flgs, align 1
  %conv9 = zext i8 %20 to i32
  %shr10 = ashr i32 %conv9, 5
  %and11 = and i32 %shr10, 1
  %conv12 = trunc i32 %and11 to i8
  %21 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %constrained_set2_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %21, i32 0, i32 4
  store i8 %conv12, i8* %constrained_set2_flag, align 4
  %22 = load i8, i8* %lvl_idc_tmp, align 1
  %23 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %level_idc = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %23, i32 0, i32 5
  store i8 %22, i8* %level_idc, align 1
  %24 = load i32, i32* %SPS_id, align 4
  %25 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %seq_parameter_set_id = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %25, i32 0, i32 6
  store i32 %24, i32* %seq_parameter_set_id, align 4
  %26 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %Valid = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %26, i32 0, i32 0
  store i8 1, i8* %Valid, align 4
  %27 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %28 = load i8*, i8** %nalu_buf.addr, align 8
  %29 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call i32 @u_e(%struct.NALU_t* %27, i8* %28, i64* %29)
  %30 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %30, i32 0, i32 7
  store i32 %call13, i32* %log2_max_frame_num_minus4, align 4
  %31 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %32 = load i8*, i8** %nalu_buf.addr, align 8
  %33 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call14 = call i32 @u_e(%struct.NALU_t* %31, i8* %32, i64* %33)
  %34 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_order_cnt_type = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %34, i32 0, i32 8
  store i32 %call14, i32* %pic_order_cnt_type, align 4
  %35 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_order_cnt_type15 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %35, i32 0, i32 8
  %36 = load i32, i32* %pic_order_cnt_type15, align 4
  %tobool = icmp ne i32 %36, 0
  br i1 %tobool, label %if.then16, label %if.else, !prof !30

if.then16:                                        ; preds = %if.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call17 = call zeroext i8 @u_1(%struct.NALU_t* %37, i8* %38, i64* %39)
  %40 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %delta_pic_order_always_zero_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %40, i32 0, i32 10
  store i8 %call17, i8* %delta_pic_order_always_zero_flag, align 4
  %41 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %42 = load i8*, i8** %nalu_buf.addr, align 8
  %43 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call18 = call i32 @s_e(%struct.NALU_t* %41, i8* %42, i64* %43)
  %44 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_non_ref_pic = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %44, i32 0, i32 11
  store i32 %call18, i32* %offset_for_non_ref_pic, align 4
  %45 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %46 = load i8*, i8** %nalu_buf.addr, align 8
  %47 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call19 = call i32 @s_e(%struct.NALU_t* %45, i8* %46, i64* %47)
  %48 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_top_to_bottom_field = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %48, i32 0, i32 12
  store i32 %call19, i32* %offset_for_top_to_bottom_field, align 4
  %49 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %50 = load i8*, i8** %nalu_buf.addr, align 8
  %51 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call20 = call i32 @u_e(%struct.NALU_t* %49, i8* %50, i64* %51)
  %52 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %num_ref_frames_in_pic_order_cnt_cycle = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %52, i32 0, i32 13
  store i32 %call20, i32* %num_ref_frames_in_pic_order_cnt_cycle, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then16
  %53 = load i32, i32* %i, align 4
  %54 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %num_ref_frames_in_pic_order_cnt_cycle21 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %54, i32 0, i32 13
  %55 = load i32, i32* %num_ref_frames_in_pic_order_cnt_cycle21, align 4
  %cmp22 = icmp ult i32 %53, %55
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call24 = call i32 @s_e(%struct.NALU_t* %56, i8* %57, i64* %58)
  %59 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %offset_for_ref_frame = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %59, i32 0, i32 14
  %60 = load i32, i32* %i, align 4
  %idxprom = zext i32 %60 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %offset_for_ref_frame, i64 0, i64 %idxprom
  store i32 %call24, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %61 = load i32, i32* %i, align 4
  %inc = add i32 %61, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end26

if.else:                                          ; preds = %if.end
  %62 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %63 = load i8*, i8** %nalu_buf.addr, align 8
  %64 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call25 = call i32 @u_e(%struct.NALU_t* %62, i8* %63, i64* %64)
  %65 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %65, i32 0, i32 9
  store i32 %call25, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %for.end
  %66 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %67 = load i8*, i8** %nalu_buf.addr, align 8
  %68 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call27 = call i32 @u_e(%struct.NALU_t* %66, i8* %67, i64* %68)
  %69 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %max_num_ref_frames = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %69, i32 0, i32 15
  store i32 %call27, i32* %max_num_ref_frames, align 4
  %70 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %71 = load i8*, i8** %nalu_buf.addr, align 8
  %72 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call28 = call zeroext i8 @u_1(%struct.NALU_t* %70, i8* %71, i64* %72)
  %73 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %gaps_in_frame_num_value_allowed_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %73, i32 0, i32 16
  store i8 %call28, i8* %gaps_in_frame_num_value_allowed_flag, align 4
  %74 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %75 = load i8*, i8** %nalu_buf.addr, align 8
  %76 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call29 = call i32 @u_e(%struct.NALU_t* %74, i8* %75, i64* %76)
  %77 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_width_in_mbs_minus1 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %77, i32 0, i32 17
  store i32 %call29, i32* %pic_width_in_mbs_minus1, align 4
  %78 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %79 = load i8*, i8** %nalu_buf.addr, align 8
  %80 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call i32 @u_e(%struct.NALU_t* %78, i8* %79, i64* %80)
  %81 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %pic_height_in_map_units_minus1 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %81, i32 0, i32 18
  store i32 %call30, i32* %pic_height_in_map_units_minus1, align 4
  %82 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %83 = load i8*, i8** %nalu_buf.addr, align 8
  %84 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call31 = call zeroext i8 @u_1(%struct.NALU_t* %82, i8* %83, i64* %84)
  %85 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_mbs_only_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %85, i32 0, i32 19
  store i8 %call31, i8* %frame_mbs_only_flag, align 4
  %86 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_mbs_only_flag32 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %86, i32 0, i32 19
  %87 = load i8, i8* %frame_mbs_only_flag32, align 4
  %tobool33 = icmp ne i8 %87, 0
  br i1 %tobool33, label %if.end36, label %if.then34, !prof !31

if.then34:                                        ; preds = %if.end26
  %88 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %89 = load i8*, i8** %nalu_buf.addr, align 8
  %90 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call35 = call zeroext i8 @u_1(%struct.NALU_t* %88, i8* %89, i64* %90)
  %91 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %mb_adaptive_frame_field_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %91, i32 0, i32 20
  store i8 %call35, i8* %mb_adaptive_frame_field_flag, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end26
  %92 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %93 = load i8*, i8** %nalu_buf.addr, align 8
  %94 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call zeroext i8 @u_1(%struct.NALU_t* %92, i8* %93, i64* %94)
  %95 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %direct_8x8_inference_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %95, i32 0, i32 21
  store i8 %call37, i8* %direct_8x8_inference_flag, align 2
  %96 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %97 = load i8*, i8** %nalu_buf.addr, align 8
  %98 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call38 = call zeroext i8 @u_1(%struct.NALU_t* %96, i8* %97, i64* %98)
  %99 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %99, i32 0, i32 22
  store i8 %call38, i8* %frame_cropping_flag, align 1
  %100 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_flag39 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %100, i32 0, i32 22
  %101 = load i8, i8* %frame_cropping_flag39, align 1
  %tobool40 = icmp ne i8 %101, 0
  br i1 %tobool40, label %if.then41, label %if.end46, !prof !30

if.then41:                                        ; preds = %if.end36
  %102 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %103 = load i8*, i8** %nalu_buf.addr, align 8
  %104 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call42 = call i32 @u_e(%struct.NALU_t* %102, i8* %103, i64* %104)
  %105 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_left_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %105, i32 0, i32 23
  store i32 %call42, i32* %frame_cropping_rect_left_offset, align 4
  %106 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %107 = load i8*, i8** %nalu_buf.addr, align 8
  %108 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call43 = call i32 @u_e(%struct.NALU_t* %106, i8* %107, i64* %108)
  %109 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_right_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %109, i32 0, i32 24
  store i32 %call43, i32* %frame_cropping_rect_right_offset, align 4
  %110 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %111 = load i8*, i8** %nalu_buf.addr, align 8
  %112 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call44 = call i32 @u_e(%struct.NALU_t* %110, i8* %111, i64* %112)
  %113 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_top_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %113, i32 0, i32 25
  store i32 %call44, i32* %frame_cropping_rect_top_offset, align 4
  %114 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %115 = load i8*, i8** %nalu_buf.addr, align 8
  %116 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call45 = call i32 @u_e(%struct.NALU_t* %114, i8* %115, i64* %116)
  %117 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %frame_cropping_rect_bottom_offset = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %117, i32 0, i32 26
  store i32 %call45, i32* %frame_cropping_rect_bottom_offset, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then41, %if.end36
  %118 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %119 = load i8*, i8** %nalu_buf.addr, align 8
  %120 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call47 = call zeroext i8 @u_1(%struct.NALU_t* %118, i8* %119, i64* %120)
  %121 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %SPS.addr, align 8
  %vui_parameters_present_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %121, i32 0, i32 27
  store i8 %call47, i8* %vui_parameters_present_flag, align 4
  ret i32 0
}

declare dso_local zeroext i8 @u_8(%struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @u_e(%struct.NALU_t*, i8*, i64*) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

declare dso_local zeroext i8 @u_1(%struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @s_e(%struct.NALU_t*, i8*, i64*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ProcessPPS(%struct.pic_parameter_set_rbsp_t* %pps, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !29 {
entry:
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pps_id = alloca i32, align 4
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  store i32 %call, i32* %pps_id, align 4
  %4 = load i32, i32* %pps_id, align 4
  %cmp = icmp sgt i32 %4, 5
  br i1 %cmp, label %if.then, label %if.end, !prof !30

if.then:                                          ; preds = %entry
  call void @exit(i32 -1) #3
  unreachable

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %pps_id, align 4
  %6 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_parameter_set_id = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %6, i32 0, i32 1
  store i32 %5, i32* %pic_parameter_set_id, align 4
  %7 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %Valid = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %7, i32 0, i32 0
  store i8 1, i8* %Valid, align 4
  %8 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %9 = load i8*, i8** %nalu_buf.addr, align 8
  %10 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %8, i8* %9, i64* %10)
  %11 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %seq_parameter_set_id = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %11, i32 0, i32 2
  store i32 %call1, i32* %seq_parameter_set_id, align 4
  %12 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %13 = load i8*, i8** %nalu_buf.addr, align 8
  %14 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %12, i8* %13, i64* %14)
  %15 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %entropy_coding_mode_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %15, i32 0, i32 3
  store i8 %call2, i8* %entropy_coding_mode_flag, align 4
  %16 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %17 = load i8*, i8** %nalu_buf.addr, align 8
  %18 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call3 = call zeroext i8 @u_1(%struct.NALU_t* %16, i8* %17, i64* %18)
  %19 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %bottom_field_pic_order_in_frame_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %19, i32 0, i32 4
  store i8 %call3, i8* %bottom_field_pic_order_in_frame_present_flag, align 1
  %20 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %21 = load i8*, i8** %nalu_buf.addr, align 8
  %22 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call4 = call i32 @u_e(%struct.NALU_t* %20, i8* %21, i64* %22)
  %23 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_slice_groups_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %23, i32 0, i32 5
  store i32 %call4, i32* %num_slice_groups_minus1, align 4
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call5 = call i32 @u_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %27 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %27, i32 0, i32 6
  store i32 %call5, i32* %num_ref_idx_l0_active_minus1, align 4
  %28 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %29 = load i8*, i8** %nalu_buf.addr, align 8
  %30 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_e(%struct.NALU_t* %28, i8* %29, i64* %30)
  %31 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %31, i32 0, i32 7
  store i32 %call6, i32* %num_ref_idx_l1_active_minus1, align 4
  %32 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %33 = load i8*, i8** %nalu_buf.addr, align 8
  %34 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call7 = call zeroext i8 @u_1(%struct.NALU_t* %32, i8* %33, i64* %34)
  %35 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %weighted_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %35, i32 0, i32 8
  store i8 %call7, i8* %weighted_pred_flag, align 4
  %36 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %37 = load i8*, i8** %nalu_buf.addr, align 8
  %38 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call8 = call i32 @u_n(i32 2, %struct.NALU_t* %36, i8* %37, i64* %38)
  %conv = trunc i32 %call8 to i8
  %39 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %weighted_bipred_idc = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %39, i32 0, i32 9
  store i8 %conv, i8* %weighted_bipred_idc, align 1
  %40 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %41 = load i8*, i8** %nalu_buf.addr, align 8
  %42 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call9 = call i32 @s_e(%struct.NALU_t* %40, i8* %41, i64* %42)
  %43 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qp_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %43, i32 0, i32 10
  store i32 %call9, i32* %pic_init_qp_minus26, align 4
  %44 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %45 = load i8*, i8** %nalu_buf.addr, align 8
  %46 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call10 = call i32 @s_e(%struct.NALU_t* %44, i8* %45, i64* %46)
  %47 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qs_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %47, i32 0, i32 11
  store i32 %call10, i32* %pic_init_qs_minus26, align 4
  %48 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %49 = load i8*, i8** %nalu_buf.addr, align 8
  %50 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call11 = call i32 @s_e(%struct.NALU_t* %48, i8* %49, i64* %50)
  %51 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %chroma_qp_index_offset = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %51, i32 0, i32 12
  store i32 %call11, i32* %chroma_qp_index_offset, align 4
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call zeroext i8 @u_1(%struct.NALU_t* %52, i8* %53, i64* %54)
  %55 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %deblocking_filter_control_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %55, i32 0, i32 13
  store i8 %call12, i8* %deblocking_filter_control_present_flag, align 4
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call zeroext i8 @u_1(%struct.NALU_t* %56, i8* %57, i64* %58)
  %59 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %constrained_intra_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %59, i32 0, i32 14
  store i8 %call13, i8* %constrained_intra_pred_flag, align 1
  %60 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %61 = load i8*, i8** %nalu_buf.addr, align 8
  %62 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call14 = call zeroext i8 @u_1(%struct.NALU_t* %60, i8* %61, i64* %62)
  %63 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %redundant_pic_cnt_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %63, i32 0, i32 15
  store i8 %call14, i8* %redundant_pic_cnt_present_flag, align 2
  ret i32 0
}

declare dso_local i32 @u_n(i32, %struct.NALU_t*, i8*, i64*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_pred_weight_table(%struct.pred_weight_table_rbsp_t* %PWT, i8 signext %B_slice, %struct.pic_parameter_set_rbsp_t* %pps, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !32 {
entry:
  %PWT.addr = alloca %struct.pred_weight_table_rbsp_t*, align 8
  %B_slice.addr = alloca i8, align 1
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.pred_weight_table_rbsp_t* %PWT, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  store i8 %B_slice, i8* %B_slice.addr, align 1
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %0, i8* %1, i64* %2)
  %3 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_log2_weight_denom = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %3, i32 0, i32 0
  store i32 %call, i32* %luma_log2_weight_denom, align 4
  %4 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %4, i8* %5, i64* %6)
  %7 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_log2_weight_denom = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %7, i32 0, i32 1
  store i32 %call1, i32* %chroma_log2_weight_denom, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %9, i32 0, i32 6
  %10 = load i32, i32* %num_ref_idx_l0_active_minus1, align 4
  %cmp = icmp ule i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %11, i8* %12, i64* %13)
  %14 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %14, i32 0, i32 2
  %15 = load i32, i32* %i, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0_flag, i64 0, i64 %idxprom
  store i8 %call2, i8* %arrayidx, align 1
  %16 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0_flag3 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %16, i32 0, i32 2
  %17 = load i32, i32* %i, align 4
  %idxprom4 = zext i32 %17 to i64
  %arrayidx5 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0_flag3, i64 0, i64 %idxprom4
  %18 = load i8, i8* %arrayidx5, align 1
  %tobool = icmp ne i8 %18, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @s_e(%struct.NALU_t* %19, i8* %20, i64* %21)
  %conv = trunc i32 %call6 to i8
  %22 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %22, i32 0, i32 3
  %23 = load i32, i32* %i, align 4
  %idxprom7 = zext i32 %23 to i64
  %arrayidx8 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l0, i64 0, i64 %idxprom7
  store i8 %conv, i8* %arrayidx8, align 1
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call9 = call i32 @s_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %conv10 = trunc i32 %call9 to i8
  %27 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_offset_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %27, i32 0, i32 4
  %28 = load i32, i32* %i, align 4
  %idxprom11 = zext i32 %28 to i64
  %arrayidx12 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_offset_l0, i64 0, i64 %idxprom11
  store i8 %conv10, i8* %arrayidx12, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %29 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %30 = load i8*, i8** %nalu_buf.addr, align 8
  %31 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call13 = call zeroext i8 @u_1(%struct.NALU_t* %29, i8* %30, i64* %31)
  %32 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %32, i32 0, i32 5
  %33 = load i32, i32* %i, align 4
  %idxprom14 = zext i32 %33 to i64
  %arrayidx15 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l0_flag, i64 0, i64 %idxprom14
  store i8 %call13, i8* %arrayidx15, align 1
  %34 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0_flag16 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %34, i32 0, i32 5
  %35 = load i32, i32* %i, align 4
  %idxprom17 = zext i32 %35 to i64
  %arrayidx18 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l0_flag16, i64 0, i64 %idxprom17
  %36 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %36, 0
  br i1 %tobool19, label %if.then20, label %if.end43

if.then20:                                        ; preds = %if.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call21 = call i32 @s_e(%struct.NALU_t* %37, i8* %38, i64* %39)
  %conv22 = trunc i32 %call21 to i8
  %40 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %40, i32 0, i32 6
  %41 = load i32, i32* %i, align 4
  %idxprom23 = zext i32 %41 to i64
  %arrayidx24 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l0, i64 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx24, i64 0, i64 0
  store i8 %conv22, i8* %arrayidx25, align 2
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %43 = load i8*, i8** %nalu_buf.addr, align 8
  %44 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call26 = call i32 @s_e(%struct.NALU_t* %42, i8* %43, i64* %44)
  %conv27 = trunc i32 %call26 to i8
  %45 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l0 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %45, i32 0, i32 7
  %46 = load i32, i32* %i, align 4
  %idxprom28 = zext i32 %46 to i64
  %arrayidx29 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l0, i64 0, i64 %idxprom28
  %arrayidx30 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx29, i64 0, i64 0
  store i8 %conv27, i8* %arrayidx30, align 2
  %47 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %48 = load i8*, i8** %nalu_buf.addr, align 8
  %49 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call31 = call i32 @s_e(%struct.NALU_t* %47, i8* %48, i64* %49)
  %conv32 = trunc i32 %call31 to i8
  %50 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l033 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %50, i32 0, i32 6
  %51 = load i32, i32* %i, align 4
  %idxprom34 = zext i32 %51 to i64
  %arrayidx35 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l033, i64 0, i64 %idxprom34
  %arrayidx36 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx35, i64 0, i64 1
  store i8 %conv32, i8* %arrayidx36, align 1
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call i32 @s_e(%struct.NALU_t* %52, i8* %53, i64* %54)
  %conv38 = trunc i32 %call37 to i8
  %55 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l039 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %55, i32 0, i32 7
  %56 = load i32, i32* %i, align 4
  %idxprom40 = zext i32 %56 to i64
  %arrayidx41 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l039, i64 0, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx41, i64 0, i64 1
  store i8 %conv38, i8* %arrayidx42, align 1
  br label %if.end43

if.end43:                                         ; preds = %if.then20, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %57 = load i32, i32* %i, align 4
  %inc = add i32 %57, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %58 = load i8, i8* %B_slice.addr, align 1
  %tobool44 = icmp ne i8 %58, 0
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %for.end
  br label %return

if.end46:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc99, %if.end46
  %59 = load i32, i32* %i, align 4
  %60 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %60, i32 0, i32 7
  %61 = load i32, i32* %num_ref_idx_l1_active_minus1, align 4
  %cmp48 = icmp ule i32 %59, %61
  br i1 %cmp48, label %for.body50, label %for.end101

for.body50:                                       ; preds = %for.cond47
  %62 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %63 = load i8*, i8** %nalu_buf.addr, align 8
  %64 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call zeroext i8 @u_1(%struct.NALU_t* %62, i8* %63, i64* %64)
  %65 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %65, i32 0, i32 8
  %66 = load i32, i32* %i, align 4
  %idxprom52 = zext i32 %66 to i64
  %arrayidx53 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1_flag, i64 0, i64 %idxprom52
  store i8 %call51, i8* %arrayidx53, align 1
  %67 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1_flag54 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %67, i32 0, i32 8
  %68 = load i32, i32* %i, align 4
  %idxprom55 = zext i32 %68 to i64
  %arrayidx56 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1_flag54, i64 0, i64 %idxprom55
  %69 = load i8, i8* %arrayidx56, align 1
  %tobool57 = icmp ne i8 %69, 0
  br i1 %tobool57, label %if.then58, label %if.end67

if.then58:                                        ; preds = %for.body50
  %70 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %71 = load i8*, i8** %nalu_buf.addr, align 8
  %72 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call59 = call i32 @s_e(%struct.NALU_t* %70, i8* %71, i64* %72)
  %conv60 = trunc i32 %call59 to i8
  %73 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_weight_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %73, i32 0, i32 9
  %74 = load i32, i32* %i, align 4
  %idxprom61 = zext i32 %74 to i64
  %arrayidx62 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_weight_l1, i64 0, i64 %idxprom61
  store i8 %conv60, i8* %arrayidx62, align 1
  %75 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %76 = load i8*, i8** %nalu_buf.addr, align 8
  %77 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call63 = call i32 @s_e(%struct.NALU_t* %75, i8* %76, i64* %77)
  %conv64 = trunc i32 %call63 to i8
  %78 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %luma_offset_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %78, i32 0, i32 10
  %79 = load i32, i32* %i, align 4
  %idxprom65 = zext i32 %79 to i64
  %arrayidx66 = getelementptr inbounds [3 x i8], [3 x i8]* %luma_offset_l1, i64 0, i64 %idxprom65
  store i8 %conv64, i8* %arrayidx66, align 1
  br label %if.end67

if.end67:                                         ; preds = %if.then58, %for.body50
  %80 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %81 = load i8*, i8** %nalu_buf.addr, align 8
  %82 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call68 = call zeroext i8 @u_1(%struct.NALU_t* %80, i8* %81, i64* %82)
  %83 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1_flag = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %83, i32 0, i32 11
  %84 = load i32, i32* %i, align 4
  %idxprom69 = zext i32 %84 to i64
  %arrayidx70 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l1_flag, i64 0, i64 %idxprom69
  store i8 %call68, i8* %arrayidx70, align 1
  %85 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1_flag71 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %85, i32 0, i32 11
  %86 = load i32, i32* %i, align 4
  %idxprom72 = zext i32 %86 to i64
  %arrayidx73 = getelementptr inbounds [3 x i8], [3 x i8]* %chroma_weight_l1_flag71, i64 0, i64 %idxprom72
  %87 = load i8, i8* %arrayidx73, align 1
  %tobool74 = icmp ne i8 %87, 0
  br i1 %tobool74, label %if.then75, label %if.end98

if.then75:                                        ; preds = %if.end67
  %88 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %89 = load i8*, i8** %nalu_buf.addr, align 8
  %90 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call76 = call i32 @s_e(%struct.NALU_t* %88, i8* %89, i64* %90)
  %conv77 = trunc i32 %call76 to i8
  %91 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %91, i32 0, i32 12
  %92 = load i32, i32* %i, align 4
  %idxprom78 = zext i32 %92 to i64
  %arrayidx79 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l1, i64 0, i64 %idxprom78
  %arrayidx80 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx79, i64 0, i64 0
  store i8 %conv77, i8* %arrayidx80, align 2
  %93 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %94 = load i8*, i8** %nalu_buf.addr, align 8
  %95 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call81 = call i32 @s_e(%struct.NALU_t* %93, i8* %94, i64* %95)
  %conv82 = trunc i32 %call81 to i8
  %96 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l1 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %96, i32 0, i32 13
  %97 = load i32, i32* %i, align 4
  %idxprom83 = zext i32 %97 to i64
  %arrayidx84 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l1, i64 0, i64 %idxprom83
  %arrayidx85 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx84, i64 0, i64 0
  store i8 %conv82, i8* %arrayidx85, align 2
  %98 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %99 = load i8*, i8** %nalu_buf.addr, align 8
  %100 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call86 = call i32 @s_e(%struct.NALU_t* %98, i8* %99, i64* %100)
  %conv87 = trunc i32 %call86 to i8
  %101 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_weight_l188 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %101, i32 0, i32 12
  %102 = load i32, i32* %i, align 4
  %idxprom89 = zext i32 %102 to i64
  %arrayidx90 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_weight_l188, i64 0, i64 %idxprom89
  %arrayidx91 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx90, i64 0, i64 1
  store i8 %conv87, i8* %arrayidx91, align 1
  %103 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %104 = load i8*, i8** %nalu_buf.addr, align 8
  %105 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call92 = call i32 @s_e(%struct.NALU_t* %103, i8* %104, i64* %105)
  %conv93 = trunc i32 %call92 to i8
  %106 = load %struct.pred_weight_table_rbsp_t*, %struct.pred_weight_table_rbsp_t** %PWT.addr, align 8
  %chroma_offset_l194 = getelementptr inbounds %struct.pred_weight_table_rbsp_t, %struct.pred_weight_table_rbsp_t* %106, i32 0, i32 13
  %107 = load i32, i32* %i, align 4
  %idxprom95 = zext i32 %107 to i64
  %arrayidx96 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* %chroma_offset_l194, i64 0, i64 %idxprom95
  %arrayidx97 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx96, i64 0, i64 1
  store i8 %conv93, i8* %arrayidx97, align 1
  br label %if.end98

if.end98:                                         ; preds = %if.then75, %if.end67
  br label %for.inc99

for.inc99:                                        ; preds = %if.end98
  %108 = load i32, i32* %i, align 4
  %inc100 = add i32 %108, 1
  store i32 %inc100, i32* %i, align 4
  br label %for.cond47

for.end101:                                       ; preds = %for.cond47
  br label %return

return:                                           ; preds = %for.end101, %if.then45
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_dec_ref_pic_marking(%struct.dec_ref_pic_marking_rbsp_t* %drpm, %struct.ImageParameters* %img, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !33 {
entry:
  %drpm.addr = alloca %struct.dec_ref_pic_marking_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.dec_ref_pic_marking_rbsp_t* %drpm, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %0, i32 0, i32 2
  %1 = load i32, i32* %nal_unit_type, align 8
  %cmp = icmp eq i32 %1, 5
  br i1 %cmp, label %if.then, label %if.else, !prof !34

if.then:                                          ; preds = %entry
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %2, i8* %3, i64* %4)
  %5 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %no_output_of_prior_pics_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %5, i32 0, i32 0
  store i8 %call, i8* %no_output_of_prior_pics_flag, align 4
  %6 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call zeroext i8 @u_1(%struct.NALU_t* %6, i8* %7, i64* %8)
  %9 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %long_term_reference_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %9, i32 0, i32 1
  store i8 %call1, i8* %long_term_reference_flag, align 1
  br label %if.end19

if.else:                                          ; preds = %entry
  %10 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call zeroext i8 @u_1(%struct.NALU_t* %10, i8* %11, i64* %12)
  %13 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %13, i32 0, i32 2
  store i8 %call2, i8* %adaptive_ref_pic_marking_mode_flag, align 2
  %14 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag3 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %14, i32 0, i32 2
  %15 = load i8, i8* %adaptive_ref_pic_marking_mode_flag3, align 2
  %tobool = icmp ne i8 %15, 0
  br i1 %tobool, label %if.then4, label %if.end18, !prof !35

if.then4:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %16 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %16, 10
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_e(%struct.NALU_t* %17, i8* %18, i64* %19)
  %conv = trunc i32 %call6 to i8
  %20 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %Memory_control_operation = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %20, i32 0, i32 3
  %21 = load i32, i32* %i, align 4
  %idxprom = sext i32 %21 to i64
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %Memory_control_operation, i64 0, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  %22 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %Memory_control_operation7 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %22, i32 0, i32 3
  %23 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %23 to i64
  %arrayidx9 = getelementptr inbounds [10 x i8], [10 x i8]* %Memory_control_operation7, i64 0, i64 %idxprom8
  %24 = load i8, i8* %arrayidx9, align 1
  %tobool10 = icmp ne i8 %24, 0
  br i1 %tobool10, label %if.then11, label %if.else15

if.then11:                                        ; preds = %for.body
  %25 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call i32 @u_e(%struct.NALU_t* %25, i8* %26, i64* %27)
  %28 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %operation_value = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %28, i32 0, i32 4
  %29 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %29 to i64
  %arrayidx14 = getelementptr inbounds [10 x i32], [10 x i32]* %operation_value, i64 0, i64 %idxprom13
  store i32 %call12, i32* %arrayidx14, align 4
  br label %if.end

if.else15:                                        ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %if.then11
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.else15, %for.cond
  %31 = load i32, i32* %i, align 4
  %conv16 = trunc i32 %31 to i8
  %32 = load %struct.dec_ref_pic_marking_rbsp_t*, %struct.dec_ref_pic_marking_rbsp_t** %drpm.addr, align 8
  %adaptive_ref_pic_marking_mode_flag17 = getelementptr inbounds %struct.dec_ref_pic_marking_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t* %32, i32 0, i32 2
  store i8 %conv16, i8* %adaptive_ref_pic_marking_mode_flag17, align 2
  br label %if.end18

if.end18:                                         ; preds = %for.end, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ProcessSH(%struct.seq_parameter_set_rbsp_t* %active_sps, %struct.pic_parameter_set_rbsp_t* %active_pps, %struct.slice_header_rbsp_t* %SH, %struct.ImageParameters* %img, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !36 {
entry:
  %active_sps.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %active_pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %SH.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.seq_parameter_set_rbsp_t* %active_sps, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  store %struct.pic_parameter_set_rbsp_t* %active_pps, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  store %struct.slice_header_rbsp_t* %SH, %struct.slice_header_rbsp_t** %SH.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  store i64 8, i64* %0, align 8
  %1 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %1, i8* %2, i64* %3)
  %4 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %first_mb_in_slice = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %4, i32 0, i32 0
  store i32 %call, i32* %first_mb_in_slice, align 4
  %5 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call1 = call i32 @u_e(%struct.NALU_t* %5, i8* %6, i64* %7)
  %rem = urem i32 %call1, 5
  %conv = trunc i32 %rem to i8
  %8 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %8, i32 0, i32 1
  store i8 %conv, i8* %slice_type, align 4
  %9 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call i32 @u_e(%struct.NALU_t* %9, i8* %10, i64* %11)
  %conv3 = trunc i32 %call2 to i8
  %12 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pic_parameter_set_id = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %12, i32 0, i32 2
  store i8 %conv3, i8* %pic_parameter_set_id, align 1
  %13 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %13, i32 0, i32 7
  %14 = load i32, i32* %log2_max_frame_num_minus4, align 4
  %add = add i32 %14, 4
  %15 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %16 = load i8*, i8** %nalu_buf.addr, align 8
  %17 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call4 = call i32 @u_n(i32 %add, %struct.NALU_t* %15, i8* %16, i64* %17)
  %18 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %frame_num = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %18, i32 0, i32 3
  store i32 %call4, i32* %frame_num, align 4
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %19, i32 0, i32 2
  %20 = load i32, i32* %nal_unit_type, align 8
  %cmp = icmp eq i32 %20, 5
  %conv5 = zext i1 %cmp to i32
  %21 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %21, i32 0, i32 0
  store i32 %conv5, i32* %IdrPicFlag, align 4
  %22 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag6 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %22, i32 0, i32 0
  %23 = load i32, i32* %IdrPicFlag6, align 4
  %tobool = icmp ne i32 %23, 0
  br i1 %tobool, label %if.then, label %if.end, !prof !37

if.then:                                          ; preds = %entry
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call7 = call i32 @u_e(%struct.NALU_t* %24, i8* %25, i64* %26)
  %27 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %idr_pic_id = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %27, i32 0, i32 6
  store i32 %call7, i32* %idr_pic_id, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %pic_order_cnt_type = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %28, i32 0, i32 8
  %29 = load i32, i32* %pic_order_cnt_type, align 4
  %cmp8 = icmp eq i32 %29, 0
  br i1 %cmp8, label %if.then10, label %if.end13, !prof !38

if.then10:                                        ; preds = %if.end
  %30 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %active_sps.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %30, i32 0, i32 9
  %31 = load i32, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  %add11 = add i32 %31, 4
  %32 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %33 = load i8*, i8** %nalu_buf.addr, align 8
  %34 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call12 = call i32 @u_n(i32 %add11, %struct.NALU_t* %32, i8* %33, i64* %34)
  %35 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pic_order_cnt_lsb = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %35, i32 0, i32 7
  store i32 %call12, i32* %pic_order_cnt_lsb, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.end
  %36 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type14 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %36, i32 0, i32 1
  %37 = load i8, i8* %slice_type14, align 4
  %conv15 = zext i8 %37 to i32
  %cmp16 = icmp eq i32 %conv15, 1
  br i1 %cmp16, label %if.then18, label %if.end20, !prof !39

if.then18:                                        ; preds = %if.end13
  %38 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %39 = load i8*, i8** %nalu_buf.addr, align 8
  %40 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call19 = call zeroext i8 @u_1(%struct.NALU_t* %38, i8* %39, i64* %40)
  %41 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %direct_spatial_mv_pred_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %41, i32 0, i32 11
  store i8 %call19, i8* %direct_spatial_mv_pred_flag, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end13
  %42 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type21 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %42, i32 0, i32 1
  %43 = load i8, i8* %slice_type21, align 4
  %conv22 = zext i8 %43 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br i1 %cmp23, label %if.then29, label %lor.lhs.false, !prof !37

lor.lhs.false:                                    ; preds = %if.end20
  %44 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type25 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %44, i32 0, i32 1
  %45 = load i8, i8* %slice_type25, align 4
  %conv26 = zext i8 %45 to i32
  %cmp27 = icmp eq i32 %conv26, 1
  br i1 %cmp27, label %if.then29, label %if.end45, !prof !40

if.then29:                                        ; preds = %lor.lhs.false, %if.end20
  %46 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %47 = load i8*, i8** %nalu_buf.addr, align 8
  %48 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call zeroext i8 @u_1(%struct.NALU_t* %46, i8* %47, i64* %48)
  %49 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_active_override_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %49, i32 0, i32 12
  store i8 %call30, i8* %num_ref_idx_active_override_flag, align 1
  %50 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_active_override_flag31 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %50, i32 0, i32 12
  %51 = load i8, i8* %num_ref_idx_active_override_flag31, align 1
  %tobool32 = icmp ne i8 %51, 0
  br i1 %tobool32, label %if.then33, label %if.end44, !prof !34

if.then33:                                        ; preds = %if.then29
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %53 = load i8*, i8** %nalu_buf.addr, align 8
  %54 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call34 = call i32 @u_e(%struct.NALU_t* %52, i8* %53, i64* %54)
  %conv35 = trunc i32 %call34 to i8
  %55 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %55, i32 0, i32 13
  store i8 %conv35, i8* %num_ref_idx_l0_active_minus1, align 2
  %56 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type36 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %56, i32 0, i32 1
  %57 = load i8, i8* %slice_type36, align 4
  %conv37 = zext i8 %57 to i32
  %cmp38 = icmp eq i32 %conv37, 1
  br i1 %cmp38, label %if.then40, label %if.end43, !prof !30

if.then40:                                        ; preds = %if.then33
  %58 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %59 = load i8*, i8** %nalu_buf.addr, align 8
  %60 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call41 = call i32 @u_e(%struct.NALU_t* %58, i8* %59, i64* %60)
  %conv42 = trunc i32 %call41 to i8
  %61 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %61, i32 0, i32 14
  store i8 %conv42, i8* %num_ref_idx_l1_active_minus1, align 1
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.then33
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then29
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %lor.lhs.false
  %62 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type46 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %62, i32 0, i32 1
  %63 = load i8, i8* %slice_type46, align 4
  %conv47 = zext i8 %63 to i32
  %cmp48 = icmp ne i32 %conv47, 2
  br i1 %cmp48, label %if.then50, label %if.end73, !prof !41

if.then50:                                        ; preds = %if.end45
  %64 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %65 = load i8*, i8** %nalu_buf.addr, align 8
  %66 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call zeroext i8 @u_1(%struct.NALU_t* %64, i8* %65, i64* %66)
  %67 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %67, i32 0, i32 15
  store i8 %call51, i8* %ref_pic_list_modification_flag_l0, align 4
  %68 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l052 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %68, i32 0, i32 15
  %69 = load i8, i8* %ref_pic_list_modification_flag_l052, align 4
  %tobool53 = icmp ne i8 %69, 0
  br i1 %tobool53, label %if.then54, label %if.end72, !prof !42

if.then54:                                        ; preds = %if.then50
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then54
  %70 = load i32, i32* %i, align 4
  %cmp55 = icmp slt i32 %70, 3
  br i1 %cmp55, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %71 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %72 = load i8*, i8** %nalu_buf.addr, align 8
  %73 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call57 = call i32 @u_e(%struct.NALU_t* %71, i8* %72, i64* %73)
  %conv58 = trunc i32 %call57 to i8
  %74 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %74, i32 0, i32 17
  %75 = load i32, i32* %i, align 4
  %idxprom = sext i32 %75 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l0, i64 0, i64 %idxprom
  store i8 %conv58, i8* %arrayidx, align 1
  %76 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l059 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %76, i32 0, i32 17
  %77 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %77 to i64
  %arrayidx61 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l059, i64 0, i64 %idxprom60
  %78 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %78 to i32
  %cmp63 = icmp ne i32 %conv62, 3
  br i1 %cmp63, label %if.then65, label %if.else

if.then65:                                        ; preds = %for.body
  %79 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %80 = load i8*, i8** %nalu_buf.addr, align 8
  %81 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call66 = call i32 @u_e(%struct.NALU_t* %79, i8* %80, i64* %81)
  %82 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_value_l0 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %82, i32 0, i32 18
  %83 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %83 to i64
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %modification_value_l0, i64 0, i64 %idxprom67
  store i32 %call66, i32* %arrayidx68, align 4
  br label %if.end69

if.else:                                          ; preds = %for.body
  br label %for.end

if.end69:                                         ; preds = %if.then65
  br label %for.inc

for.inc:                                          ; preds = %if.end69
  %84 = load i32, i32* %i, align 4
  %inc = add nsw i32 %84, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.else, %for.cond
  %85 = load i32, i32* %i, align 4
  %conv70 = trunc i32 %85 to i8
  %86 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l071 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %86, i32 0, i32 15
  store i8 %conv70, i8* %ref_pic_list_modification_flag_l071, align 4
  br label %if.end72

if.end72:                                         ; preds = %for.end, %if.then50
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end45
  %87 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type74 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %87, i32 0, i32 1
  %88 = load i8, i8* %slice_type74, align 4
  %conv75 = zext i8 %88 to i32
  %cmp76 = icmp eq i32 %conv75, 1
  br i1 %cmp76, label %if.then78, label %if.end109, !prof !39

if.then78:                                        ; preds = %if.end73
  %89 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %90 = load i8*, i8** %nalu_buf.addr, align 8
  %91 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call79 = call zeroext i8 @u_1(%struct.NALU_t* %89, i8* %90, i64* %91)
  %92 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %92, i32 0, i32 16
  store i8 %call79, i8* %ref_pic_list_modification_flag_l1, align 1
  %93 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l180 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %93, i32 0, i32 16
  %94 = load i8, i8* %ref_pic_list_modification_flag_l180, align 1
  %tobool81 = icmp ne i8 %94, 0
  br i1 %tobool81, label %if.then82, label %if.end108, !prof !35

if.then82:                                        ; preds = %if.then78
  store i32 0, i32* %i, align 4
  br label %for.cond83

for.cond83:                                       ; preds = %for.inc103, %if.then82
  %95 = load i32, i32* %i, align 4
  %cmp84 = icmp slt i32 %95, 3
  br i1 %cmp84, label %for.body86, label %for.end105

for.body86:                                       ; preds = %for.cond83
  %96 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %97 = load i8*, i8** %nalu_buf.addr, align 8
  %98 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call87 = call i32 @u_e(%struct.NALU_t* %96, i8* %97, i64* %98)
  %conv88 = trunc i32 %call87 to i8
  %99 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %99, i32 0, i32 19
  %100 = load i32, i32* %i, align 4
  %idxprom89 = sext i32 %100 to i64
  %arrayidx90 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l1, i64 0, i64 %idxprom89
  store i8 %conv88, i8* %arrayidx90, align 1
  %101 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_of_pic_nums_idc_l191 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %101, i32 0, i32 19
  %102 = load i32, i32* %i, align 4
  %idxprom92 = sext i32 %102 to i64
  %arrayidx93 = getelementptr inbounds [5 x i8], [5 x i8]* %modification_of_pic_nums_idc_l191, i64 0, i64 %idxprom92
  %103 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %103 to i32
  %cmp95 = icmp ne i32 %conv94, 3
  br i1 %cmp95, label %if.then97, label %if.else101

if.then97:                                        ; preds = %for.body86
  %104 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %105 = load i8*, i8** %nalu_buf.addr, align 8
  %106 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call98 = call i32 @u_e(%struct.NALU_t* %104, i8* %105, i64* %106)
  %107 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %modification_value_l1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %107, i32 0, i32 20
  %108 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %108 to i64
  %arrayidx100 = getelementptr inbounds [5 x i32], [5 x i32]* %modification_value_l1, i64 0, i64 %idxprom99
  store i32 %call98, i32* %arrayidx100, align 4
  br label %if.end102

if.else101:                                       ; preds = %for.body86
  br label %for.end105

if.end102:                                        ; preds = %if.then97
  br label %for.inc103

for.inc103:                                       ; preds = %if.end102
  %109 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %109, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond83

for.end105:                                       ; preds = %if.else101, %for.cond83
  %110 = load i32, i32* %i, align 4
  %conv106 = trunc i32 %110 to i8
  %111 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %ref_pic_list_modification_flag_l1107 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %111, i32 0, i32 16
  store i8 %conv106, i8* %ref_pic_list_modification_flag_l1107, align 1
  br label %if.end108

if.end108:                                        ; preds = %for.end105, %if.then78
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end73
  %112 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %weighted_pred_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %112, i32 0, i32 8
  %113 = load i8, i8* %weighted_pred_flag, align 4
  %conv110 = zext i8 %113 to i32
  %tobool111 = icmp ne i32 %conv110, 0
  br i1 %tobool111, label %land.lhs.true, label %lor.lhs.false116, !prof !43

land.lhs.true:                                    ; preds = %if.end109
  %114 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type112 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %114, i32 0, i32 1
  %115 = load i8, i8* %slice_type112, align 4
  %conv113 = zext i8 %115 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true, %if.end109
  %116 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %weighted_bipred_idc = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %116, i32 0, i32 9
  %117 = load i8, i8* %weighted_bipred_idc, align 1
  %conv117 = zext i8 %117 to i32
  %tobool118 = icmp ne i32 %conv117, 0
  br i1 %tobool118, label %land.lhs.true119, label %if.end128, !prof !43

land.lhs.true119:                                 ; preds = %lor.lhs.false116
  %118 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type120 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %118, i32 0, i32 1
  %119 = load i8, i8* %slice_type120, align 4
  %conv121 = zext i8 %119 to i32
  %cmp122 = icmp eq i32 %conv121, 1
  br i1 %cmp122, label %if.then124, label %if.end128

if.then124:                                       ; preds = %land.lhs.true119, %land.lhs.true
  %120 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %pred_weight_table = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %120, i32 0, i32 21
  %121 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type125 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %121, i32 0, i32 1
  %122 = load i8, i8* %slice_type125, align 4
  %conv126 = zext i8 %122 to i32
  %sub = sub nsw i32 %conv126, 1
  %conv127 = trunc i32 %sub to i8
  %123 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %124 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %125 = load i8*, i8** %nalu_buf.addr, align 8
  %126 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @process_pred_weight_table(%struct.pred_weight_table_rbsp_t* %pred_weight_table, i8 signext %conv127, %struct.pic_parameter_set_rbsp_t* %123, %struct.NALU_t* %124, i8* %125, i64* %126)
  br label %if.end128

if.end128:                                        ; preds = %if.then124, %land.lhs.true119, %lor.lhs.false116
  %127 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %127, i32 0, i32 3
  %128 = load i32, i32* %nal_reference_idc, align 4
  %cmp129 = icmp ne i32 %128, 0
  br i1 %cmp129, label %if.then131, label %if.end132, !prof !41

if.then131:                                       ; preds = %if.end128
  %129 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %dec_ref_pic_marking = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %129, i32 0, i32 22
  %130 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %131 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %132 = load i8*, i8** %nalu_buf.addr, align 8
  %133 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @process_dec_ref_pic_marking(%struct.dec_ref_pic_marking_rbsp_t* %dec_ref_pic_marking, %struct.ImageParameters* %130, %struct.NALU_t* %131, i8* %132, i64* %133)
  br label %if.end132

if.end132:                                        ; preds = %if.then131, %if.end128
  %134 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %135 = load i8*, i8** %nalu_buf.addr, align 8
  %136 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call133 = call i32 @s_e(%struct.NALU_t* %134, i8* %135, i64* %136)
  %137 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_qp_delta = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %137, i32 0, i32 24
  store i32 %call133, i32* %slice_qp_delta, align 4
  %138 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %active_pps.addr, align 8
  %deblocking_filter_control_present_flag = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %138, i32 0, i32 13
  %139 = load i8, i8* %deblocking_filter_control_present_flag, align 4
  %tobool134 = icmp ne i8 %139, 0
  br i1 %tobool134, label %if.then135, label %if.end146, !prof !38

if.then135:                                       ; preds = %if.end132
  %140 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %141 = load i8*, i8** %nalu_buf.addr, align 8
  %142 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call136 = call i32 @u_e(%struct.NALU_t* %140, i8* %141, i64* %142)
  %conv137 = trunc i32 %call136 to i8
  %143 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %disable_deblocking_filter_idc = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %143, i32 0, i32 25
  store i8 %conv137, i8* %disable_deblocking_filter_idc, align 4
  %144 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %disable_deblocking_filter_idc138 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %144, i32 0, i32 25
  %145 = load i8, i8* %disable_deblocking_filter_idc138, align 4
  %conv139 = zext i8 %145 to i32
  %cmp140 = icmp ne i32 %conv139, 1
  br i1 %cmp140, label %if.then142, label %if.end145, !prof !43

if.then142:                                       ; preds = %if.then135
  %146 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %147 = load i8*, i8** %nalu_buf.addr, align 8
  %148 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call143 = call i32 @s_e(%struct.NALU_t* %146, i8* %147, i64* %148)
  %149 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_alpha_c0_offset_div2 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %149, i32 0, i32 26
  store i32 %call143, i32* %slice_alpha_c0_offset_div2, align 4
  %150 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %151 = load i8*, i8** %nalu_buf.addr, align 8
  %152 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call144 = call i32 @s_e(%struct.NALU_t* %150, i8* %151, i64* %152)
  %153 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_beta_offset_div2 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %153, i32 0, i32 27
  store i32 %call144, i32* %slice_beta_offset_div2, align 4
  br label %if.end145

if.end145:                                        ; preds = %if.then142, %if.then135
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.end132
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @intepretSLiceHeader(%struct.slice_header_rbsp_t* %sliceheader, %struct.seq_parameter_set_rbsp_t* %sps, %struct.pic_parameter_set_rbsp_t* %pps, i8 zeroext %nalu_idc, i8 zeroext %nalu_ref_idc, %struct.ImageParameters* %img, %struct.StorablePicture* %PicBuff) #0 !prof !36 {
entry:
  %sliceheader.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %sps.addr = alloca %struct.seq_parameter_set_rbsp_t*, align 8
  %pps.addr = alloca %struct.pic_parameter_set_rbsp_t*, align 8
  %nalu_idc.addr = alloca i8, align 1
  %nalu_ref_idc.addr = alloca i8, align 1
  %img.addr = alloca %struct.ImageParameters*, align 8
  %PicBuff.addr = alloca %struct.StorablePicture*, align 8
  %PicOrderCntMsb = alloca i32, align 4
  store %struct.slice_header_rbsp_t* %sliceheader, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  store %struct.seq_parameter_set_rbsp_t* %sps, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  store %struct.pic_parameter_set_rbsp_t* %pps, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  store i8 %nalu_idc, i8* %nalu_idc.addr, align 1
  store i8 %nalu_ref_idc, i8* %nalu_ref_idc.addr, align 1
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store %struct.StorablePicture* %PicBuff, %struct.StorablePicture** %PicBuff.addr, align 8
  %0 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %log2_max_frame_num_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %0, i32 0, i32 7
  %1 = load i32, i32* %log2_max_frame_num_minus4, align 4
  %add = add i32 %1, 4
  %shl = shl i32 1, %add
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxFrameNum = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 1
  store i32 %shl, i32* %MaxFrameNum, align 4
  %3 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %log2_max_pic_order_cnt_lsb_minus4 = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %3, i32 0, i32 9
  %4 = load i32, i32* %log2_max_pic_order_cnt_lsb_minus4, align 4
  %add1 = add i32 %4, 4
  %shl2 = shl i32 1, %add1
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 2
  store i32 %shl2, i32* %MaxPicOrderCntLsb, align 4
  %6 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ExpectedDeltaPerPicOrderCntCycle = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %6, i32 0, i32 3
  store i32 0, i32* %ExpectedDeltaPerPicOrderCntCycle, align 4
  %7 = load %struct.seq_parameter_set_rbsp_t*, %struct.seq_parameter_set_rbsp_t** %sps.addr, align 8
  %mb_adaptive_frame_field_flag = getelementptr inbounds %struct.seq_parameter_set_rbsp_t, %struct.seq_parameter_set_rbsp_t* %7, i32 0, i32 20
  %8 = load i8, i8* %mb_adaptive_frame_field_flag, align 1
  %conv = zext i8 %8 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end, !prof !43

land.rhs:                                         ; preds = %entry
  %9 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %field_pic_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %9, i32 0, i32 4
  %10 = load i8, i8* %field_pic_flag, align 4
  %conv3 = zext i8 %10 to i32
  %cmp = icmp ne i32 %conv3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %11 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  %conv5 = trunc i32 %land.ext to i8
  %12 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %12, i32 0, i32 4
  store i8 %conv5, i8* %MbaffFrameFlag, align 4
  %13 = load i8, i8* %nalu_idc.addr, align 1
  %conv6 = zext i8 %13 to i32
  %cmp7 = icmp eq i32 %conv6, 5
  %conv8 = zext i1 %cmp7 to i32
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %IdrPicFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 0
  store i32 %conv8, i32* %IdrPicFlag, align 4
  %15 = load i8, i8* %nalu_idc.addr, align 1
  %conv9 = zext i8 %15 to i32
  %cmp10 = icmp eq i32 %conv9, 5
  br i1 %cmp10, label %if.then, label %if.end, !prof !37

if.then:                                          ; preds = %land.end
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 7
  store i32 0, i32* %prevPicOrderCntMsb, align 4
  %17 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %17, i32 0, i32 6
  store i32 0, i32* %prevPicOrderCntLsb, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %18 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %18, i32 0, i32 7
  %19 = load i32, i32* %pic_order_cnt_lsb, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb12 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 6
  %21 = load i32, i32* %prevPicOrderCntLsb12, align 4
  %cmp13 = icmp slt i32 %19, %21
  br i1 %cmp13, label %land.lhs.true, label %if.else, !prof !39

land.lhs.true:                                    ; preds = %if.end
  %22 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb15 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %22, i32 0, i32 6
  %23 = load i32, i32* %prevPicOrderCntLsb15, align 4
  %24 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb16 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %24, i32 0, i32 7
  %25 = load i32, i32* %pic_order_cnt_lsb16, align 4
  %sub = sub nsw i32 %23, %25
  %26 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %26, i32 0, i32 2
  %27 = load i32, i32* %MaxPicOrderCntLsb17, align 4
  %div = sdiv i32 %27, 2
  %cmp18 = icmp sge i32 %sub, %div
  br i1 %cmp18, label %if.then20, label %if.else, !prof !35

if.then20:                                        ; preds = %land.lhs.true
  %28 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb21 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %28, i32 0, i32 7
  %29 = load i32, i32* %prevPicOrderCntMsb21, align 4
  %30 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb22 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %30, i32 0, i32 2
  %31 = load i32, i32* %MaxPicOrderCntLsb22, align 4
  %add23 = add nsw i32 %29, %31
  store i32 %add23, i32* %PicOrderCntMsb, align 4
  br label %if.end43

if.else:                                          ; preds = %land.lhs.true, %if.end
  %32 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb24 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %32, i32 0, i32 7
  %33 = load i32, i32* %pic_order_cnt_lsb24, align 4
  %34 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb25 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %34, i32 0, i32 6
  %35 = load i32, i32* %prevPicOrderCntLsb25, align 4
  %cmp26 = icmp sgt i32 %33, %35
  br i1 %cmp26, label %land.lhs.true28, label %if.else40, !prof !39

land.lhs.true28:                                  ; preds = %if.else
  %36 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb29 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %36, i32 0, i32 7
  %37 = load i32, i32* %pic_order_cnt_lsb29, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 6
  %39 = load i32, i32* %prevPicOrderCntLsb30, align 4
  %sub31 = sub nsw i32 %37, %39
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb32 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 2
  %41 = load i32, i32* %MaxPicOrderCntLsb32, align 4
  %div33 = sdiv i32 %41, 2
  %cmp34 = icmp sgt i32 %sub31, %div33
  br i1 %cmp34, label %if.then36, label %if.else40, !prof !35

if.then36:                                        ; preds = %land.lhs.true28
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb37 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 7
  %43 = load i32, i32* %prevPicOrderCntMsb37, align 4
  %44 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxPicOrderCntLsb38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %44, i32 0, i32 2
  %45 = load i32, i32* %MaxPicOrderCntLsb38, align 4
  %sub39 = sub nsw i32 %43, %45
  store i32 %sub39, i32* %PicOrderCntMsb, align 4
  br label %if.end42

if.else40:                                        ; preds = %land.lhs.true28, %if.else
  %46 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb41 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %46, i32 0, i32 7
  %47 = load i32, i32* %prevPicOrderCntMsb41, align 4
  store i32 %47, i32* %PicOrderCntMsb, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then36
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then20
  %48 = load i32, i32* %PicOrderCntMsb, align 4
  %49 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb44 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %49, i32 0, i32 7
  %50 = load i32, i32* %pic_order_cnt_lsb44, align 4
  %add45 = add nsw i32 %48, %50
  %51 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %51, i32 0, i32 8
  store i32 %add45, i32* %PictureOrderCount, align 4
  %52 = load i8, i8* %nalu_ref_idc.addr, align 1
  %conv46 = zext i8 %52 to i32
  %cmp47 = icmp ne i32 %conv46, 0
  br i1 %cmp47, label %if.then49, label %if.end53, !prof !41

if.then49:                                        ; preds = %if.end43
  %53 = load i32, i32* %PicOrderCntMsb, align 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntMsb50 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 7
  store i32 %53, i32* %prevPicOrderCntMsb50, align 4
  %55 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %pic_order_cnt_lsb51 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %55, i32 0, i32 7
  %56 = load i32, i32* %pic_order_cnt_lsb51, align 4
  %57 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %prevPicOrderCntLsb52 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %57, i32 0, i32 6
  store i32 %56, i32* %prevPicOrderCntLsb52, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then49, %if.end43
  %58 = load i8, i8* %nalu_ref_idc.addr, align 1
  %conv54 = zext i8 %58 to i32
  %cmp55 = icmp ne i32 %conv54, 0
  br i1 %cmp55, label %if.then57, label %if.else59, !prof !41

if.then57:                                        ; preds = %if.end53
  %59 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ref_mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %59, i32 0, i32 14
  %60 = load i32, i32* %ref_mem_idx, align 4
  %rem = srem i32 %60, 2
  %61 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %61, i32 0, i32 9
  store i32 %rem, i32* %mem_idx, align 4
  %62 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %ref_mem_idx58 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %62, i32 0, i32 14
  %63 = load i32, i32* %ref_mem_idx58, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %ref_mem_idx58, align 4
  br label %if.end61

if.else59:                                        ; preds = %if.end53
  %64 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx60 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %64, i32 0, i32 9
  store i32 2, i32* %mem_idx60, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else59, %if.then57
  %65 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %65, i32 0, i32 1
  %66 = load i8, i8* %slice_type, align 4
  %conv62 = zext i8 %66 to i32
  %cmp63 = icmp eq i32 %conv62, 0
  br i1 %cmp63, label %if.then65, label %if.end67, !prof !37

if.then65:                                        ; preds = %if.end61
  %67 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %68 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %68, i32 0, i32 12
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i32 0, i32 0
  %69 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %frame_num = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %69, i32 0, i32 3
  %70 = load i32, i32* %frame_num, align 4
  %71 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %MaxFrameNum66 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %71, i32 0, i32 1
  %72 = load i32, i32* %MaxFrameNum66, align 4
  call void @init_listP(%struct.StorablePicture* %67, i32* %arraydecay, i32 %70, i32 %72)
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %if.end61
  %73 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type68 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %73, i32 0, i32 1
  %74 = load i8, i8* %slice_type68, align 4
  %conv69 = zext i8 %74 to i32
  %cmp70 = icmp eq i32 %conv69, 1
  br i1 %cmp70, label %if.then72, label %if.end78, !prof !39

if.then72:                                        ; preds = %if.end67
  %75 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %76 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list073 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %76, i32 0, i32 12
  %arraydecay74 = getelementptr inbounds [3 x i32], [3 x i32]* %list073, i32 0, i32 0
  %77 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %77, i32 0, i32 13
  %arraydecay75 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i32 0, i32 0
  %78 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount76 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %78, i32 0, i32 8
  %79 = load i32, i32* %PictureOrderCount76, align 4
  %div77 = sdiv i32 %79, 2
  call void @init_listB(%struct.StorablePicture* %75, i32* %arraydecay74, i32* %arraydecay75, i32 %div77)
  br label %if.end78

if.end78:                                         ; preds = %if.then72, %if.end67
  %80 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %frame_num79 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %80, i32 0, i32 3
  %81 = load i32, i32* %frame_num79, align 4
  %conv80 = trunc i32 %81 to i8
  %82 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %83 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx81 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %83, i32 0, i32 9
  %84 = load i32, i32* %mem_idx81, align 4
  %idxprom = sext i32 %84 to i64
  %arrayidx = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %82, i64 %idxprom
  %frame_num82 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx, i32 0, i32 2
  store i8 %conv80, i8* %frame_num82, align 1
  %85 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %PictureOrderCount83 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %85, i32 0, i32 8
  %86 = load i32, i32* %PictureOrderCount83, align 4
  %div84 = sdiv i32 %86, 2
  %87 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %88 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx85 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %88, i32 0, i32 9
  %89 = load i32, i32* %mem_idx85, align 4
  %idxprom86 = sext i32 %89 to i64
  %arrayidx87 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %87, i64 %idxprom86
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx87, i32 0, i32 0
  store i32 %div84, i32* %Picorder_num, align 4
  %90 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %91 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx88 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %91, i32 0, i32 9
  %92 = load i32, i32* %mem_idx88, align 4
  %idxprom89 = sext i32 %92 to i64
  %arrayidx90 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %90, i64 %idxprom89
  %memoccupied = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx90, i32 0, i32 1
  store i8 1, i8* %memoccupied, align 4
  %93 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_type91 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %93, i32 0, i32 1
  %94 = load i8, i8* %slice_type91, align 4
  %95 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %96 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx92 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %96, i32 0, i32 9
  %97 = load i32, i32* %mem_idx92, align 4
  %idxprom93 = sext i32 %97 to i64
  %arrayidx94 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %95, i64 %idxprom93
  %type = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx94, i32 0, i32 3
  store i8 %94, i8* %type, align 2
  %98 = load i8, i8* %nalu_ref_idc.addr, align 1
  %tobool95 = icmp ne i8 %98, 0
  br i1 %tobool95, label %if.then96, label %if.else100, !prof !41

if.then96:                                        ; preds = %if.end78
  %99 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %100 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx97 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %100, i32 0, i32 9
  %101 = load i32, i32* %mem_idx97, align 4
  %idxprom98 = sext i32 %101 to i64
  %arrayidx99 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %99, i64 %idxprom98
  %use_for_char = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx99, i32 0, i32 4
  store i8 1, i8* %use_for_char, align 1
  br label %if.end105

if.else100:                                       ; preds = %if.end78
  %102 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBuff.addr, align 8
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx101 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 9
  %104 = load i32, i32* %mem_idx101, align 4
  %idxprom102 = sext i32 %104 to i64
  %arrayidx103 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %102, i64 %idxprom102
  %use_for_char104 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx103, i32 0, i32 4
  store i8 0, i8* %use_for_char104, align 1
  br label %if.end105

if.end105:                                        ; preds = %if.else100, %if.then96
  %105 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_active_override_flag = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %105, i32 0, i32 12
  %106 = load i8, i8* %num_ref_idx_active_override_flag, align 1
  %conv106 = zext i8 %106 to i32
  %cmp107 = icmp eq i32 %conv106, 0
  br i1 %cmp107, label %if.then109, label %if.end114, !prof !44

if.then109:                                       ; preds = %if.end105
  %107 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %107, i32 0, i32 6
  %108 = load i32, i32* %num_ref_idx_l0_active_minus1, align 4
  %conv110 = trunc i32 %108 to i8
  %109 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_l0_active_minus1111 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %109, i32 0, i32 13
  store i8 %conv110, i8* %num_ref_idx_l0_active_minus1111, align 2
  %110 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %110, i32 0, i32 7
  %111 = load i32, i32* %num_ref_idx_l1_active_minus1, align 4
  %conv112 = trunc i32 %111 to i8
  %112 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %num_ref_idx_l1_active_minus1113 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %112, i32 0, i32 14
  store i8 %conv112, i8* %num_ref_idx_l1_active_minus1113, align 1
  br label %if.end114

if.end114:                                        ; preds = %if.then109, %if.end105
  %113 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %pic_init_qp_minus26 = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %113, i32 0, i32 10
  %114 = load i32, i32* %pic_init_qp_minus26, align 4
  %add115 = add nsw i32 26, %114
  %115 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %sliceheader.addr, align 8
  %slice_qp_delta = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %115, i32 0, i32 24
  %116 = load i32, i32* %slice_qp_delta, align 4
  %add116 = add nsw i32 %add115, %116
  %117 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %sliceQPY = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %117, i32 0, i32 15
  store i32 %add116, i32* %sliceQPY, align 4
  %118 = load %struct.pic_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t** %pps.addr, align 8
  %chroma_qp_index_offset = getelementptr inbounds %struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* %118, i32 0, i32 12
  %119 = load i32, i32* %chroma_qp_index_offset, align 4
  %120 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %chroma_offset = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %120, i32 0, i32 17
  store i32 %119, i32* %chroma_offset, align 4
  ret void
}

declare dso_local void @init_listP(%struct.StorablePicture*, i32*, i32, i32) #1

declare dso_local void @init_listB(%struct.StorablePicture*, i32*, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 1}
!30 = !{!"branch_weights", i32 1, i32 2}
!31 = !{!"branch_weights", i32 2, i32 1}
!32 = !{!"function_entry_count", i64 0}
!33 = !{!"function_entry_count", i64 3}
!34 = !{!"branch_weights", i32 2, i32 3}
!35 = !{!"branch_weights", i32 1, i32 3}
!36 = !{!"function_entry_count", i64 5}
!37 = !{!"branch_weights", i32 2, i32 5}
!38 = !{!"branch_weights", i32 6, i32 1}
!39 = !{!"branch_weights", i32 3, i32 4}
!40 = !{!"branch_weights", i32 3, i32 3}
!41 = !{!"branch_weights", i32 4, i32 3}
!42 = !{!"branch_weights", i32 1, i32 4}
!43 = !{!"branch_weights", i32 1, i32 6}
!44 = !{!"branch_weights", i32 5, i32 2}
