; ModuleID = '../src/intrapred.c'
source_filename = "../src/intrapred.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }

@.str = private unnamed_addr constant [46 x i8] c"Error: illegal intra_4x4 prediction mode: %d\0A\00", align 1
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @IntraInfo(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, [36 x i8]* %pred_mode, [18 x i8]* %refidx0, [18 x i8]* %refidx1, i8* %tmpintramode, i8 zeroext %constrained_intra_pred_flag, i32 %startx, i32 %starty) #0 !prof !29 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pred_mode.addr = alloca [36 x i8]*, align 8
  %refidx0.addr = alloca [18 x i8]*, align 8
  %refidx1.addr = alloca [18 x i8]*, align 8
  %tmpintramode.addr = alloca i8*, align 8
  %constrained_intra_pred_flag.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %xoff = alloca i32, align 4
  %yoff = alloca i32, align 4
  %k = alloca i32, align 4
  %modetmp = alloca i32, align 4
  %predmodeA = alloca i8, align 1
  %predmodeB = alloca i8, align 1
  %previntramodeflag = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store [36 x i8]* %pred_mode, [36 x i8]** %pred_mode.addr, align 8
  store [18 x i8]* %refidx0, [18 x i8]** %refidx0.addr, align 8
  store [18 x i8]* %refidx1, [18 x i8]** %refidx1.addr, align 8
  store i8* %tmpintramode, i8** %tmpintramode.addr, align 8
  store i8 %constrained_intra_pred_flag, i8* %constrained_intra_pred_flag.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end, !prof !30

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %k, align 4
  %and = and i32 %1, 4
  %cmp1 = icmp ne i32 %and, 0
  %conv = zext i1 %cmp1 to i32
  %mul = mul nsw i32 %conv, 2
  %2 = load i32, i32* %k, align 4
  %and2 = and i32 %2, 1
  %cmp3 = icmp ne i32 %and2, 0
  %conv4 = zext i1 %cmp3 to i32
  %add = add nsw i32 %mul, %conv4
  store i32 %add, i32* %x, align 4
  %3 = load i32, i32* %k, align 4
  %and5 = and i32 %3, 8
  %cmp6 = icmp ne i32 %and5, 0
  %conv7 = zext i1 %cmp6 to i32
  %mul8 = mul nsw i32 %conv7, 2
  %4 = load i32, i32* %k, align 4
  %and9 = and i32 %4, 2
  %cmp10 = icmp ne i32 %and9, 0
  %conv11 = zext i1 %cmp10 to i32
  %add12 = add nsw i32 %mul8, %conv11
  store i32 %add12, i32* %y, align 4
  %5 = load i32, i32* %startx.addr, align 4
  %6 = load i32, i32* %x, align 4
  %add13 = add nsw i32 %5, %6
  store i32 %add13, i32* %xoff, align 4
  %7 = load i32, i32* %starty.addr, align 4
  %8 = load i32, i32* %y, align 4
  %add14 = add nsw i32 %7, %8
  store i32 %add14, i32* %yoff, align 4
  %9 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %10 = load i32, i32* %xoff, align 4
  %div = sdiv i32 %10, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 %idxprom
  %11 = load i32, i32* %yoff, align 4
  %div15 = sdiv i32 %11, 2
  %idxprom16 = sext i32 %div15 to i64
  %arrayidx17 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom16
  store i8 -1, i8* %arrayidx17, align 1
  %12 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %13 = load i32, i32* %xoff, align 4
  %div18 = sdiv i32 %13, 2
  %idxprom19 = sext i32 %div18 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %12, i64 %idxprom19
  %14 = load i32, i32* %yoff, align 4
  %div21 = sdiv i32 %14, 2
  %idxprom22 = sext i32 %div21 to i64
  %arrayidx23 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx20, i64 0, i64 %idxprom22
  store i8 -1, i8* %arrayidx23, align 1
  store i8 2, i8* %predmodeA, align 1
  store i8 2, i8* %predmodeB, align 1
  %15 = load i32, i32* %xoff, align 4
  %cmp24 = icmp sgt i32 %15, 0
  br i1 %cmp24, label %land.lhs.true, label %if.end, !prof !31

land.lhs.true:                                    ; preds = %for.body
  %16 = load i8, i8* %constrained_intra_pred_flag.addr, align 1
  %conv26 = zext i8 %16 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %land.lhs.true29, label %if.end, !prof !32

land.lhs.true29:                                  ; preds = %land.lhs.true
  %17 = load i32, i32* %yoff, align 4
  %cmp30 = icmp sgt i32 %17, 0
  br i1 %cmp30, label %if.then, label %if.end, !prof !33

if.then:                                          ; preds = %land.lhs.true29
  %18 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %19 = load i32, i32* %xoff, align 4
  %sub = sub nsw i32 %19, 1
  %idxprom32 = sext i32 %sub to i64
  %arrayidx33 = getelementptr inbounds [36 x i8], [36 x i8]* %18, i64 %idxprom32
  %20 = load i32, i32* %yoff, align 4
  %idxprom34 = sext i32 %20 to i64
  %arrayidx35 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx33, i64 0, i64 %idxprom34
  %21 = load i8, i8* %arrayidx35, align 1
  store i8 %21, i8* %predmodeA, align 1
  %22 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %23 = load i32, i32* %xoff, align 4
  %idxprom36 = sext i32 %23 to i64
  %arrayidx37 = getelementptr inbounds [36 x i8], [36 x i8]* %22, i64 %idxprom36
  %24 = load i32, i32* %yoff, align 4
  %sub38 = sub nsw i32 %24, 1
  %idxprom39 = sext i32 %sub38 to i64
  %arrayidx40 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx37, i64 0, i64 %idxprom39
  %25 = load i8, i8* %arrayidx40, align 1
  store i8 %25, i8* %predmodeB, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true29, %land.lhs.true, %for.body
  %26 = load i8, i8* %predmodeA, align 1
  %conv41 = sext i8 %26 to i32
  %27 = load i8, i8* %predmodeB, align 1
  %conv42 = sext i8 %27 to i32
  %cmp43 = icmp slt i32 %conv41, %conv42
  br i1 %cmp43, label %cond.true, label %cond.false, !prof !34

cond.true:                                        ; preds = %if.end
  %28 = load i8, i8* %predmodeA, align 1
  %conv45 = sext i8 %28 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %29 = load i8, i8* %predmodeB, align 1
  %conv46 = sext i8 %29 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv45, %cond.true ], [ %conv46, %cond.false ]
  store i32 %cond, i32* %modetmp, align 4
  %30 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %31 = load i8*, i8** %nalu_buf.addr, align 8
  %32 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %30, i8* %31, i64* %32)
  store i8 %call, i8* %previntramodeflag, align 1
  %33 = load i8, i8* %previntramodeflag, align 1
  %tobool = icmp ne i8 %33, 0
  br i1 %tobool, label %if.then47, label %if.else, !prof !35

if.then47:                                        ; preds = %cond.end
  %34 = load i32, i32* %modetmp, align 4
  %conv48 = trunc i32 %34 to i8
  %35 = load i8*, i8** %tmpintramode.addr, align 8
  %36 = load i32, i32* %k, align 4
  %idxprom49 = sext i32 %36 to i64
  %arrayidx50 = getelementptr inbounds i8, i8* %35, i64 %idxprom49
  store i8 %conv48, i8* %arrayidx50, align 1
  br label %if.end69

if.else:                                          ; preds = %cond.end
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call51 = call i32 @u_n(i32 3, %struct.NALU_t* %37, i8* %38, i64* %39)
  %conv52 = trunc i32 %call51 to i8
  %40 = load i8*, i8** %tmpintramode.addr, align 8
  %41 = load i32, i32* %k, align 4
  %idxprom53 = sext i32 %41 to i64
  %arrayidx54 = getelementptr inbounds i8, i8* %40, i64 %idxprom53
  store i8 %conv52, i8* %arrayidx54, align 1
  %42 = load i8*, i8** %tmpintramode.addr, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom55 = sext i32 %43 to i64
  %arrayidx56 = getelementptr inbounds i8, i8* %42, i64 %idxprom55
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %44 to i32
  %45 = load i32, i32* %modetmp, align 4
  %cmp58 = icmp sge i32 %conv57, %45
  br i1 %cmp58, label %if.then60, label %if.end68, !prof !36

if.then60:                                        ; preds = %if.else
  %46 = load i8*, i8** %tmpintramode.addr, align 8
  %47 = load i32, i32* %k, align 4
  %idxprom61 = sext i32 %47 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %46, i64 %idxprom61
  %48 = load i8, i8* %arrayidx62, align 1
  %conv63 = sext i8 %48 to i32
  %add64 = add nsw i32 %conv63, 1
  %conv65 = trunc i32 %add64 to i8
  %49 = load i8*, i8** %tmpintramode.addr, align 8
  %50 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %50 to i64
  %arrayidx67 = getelementptr inbounds i8, i8* %49, i64 %idxprom66
  store i8 %conv65, i8* %arrayidx67, align 1
  br label %if.end68

if.end68:                                         ; preds = %if.then60, %if.else
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then47
  %51 = load i8*, i8** %tmpintramode.addr, align 8
  %52 = load i32, i32* %k, align 4
  %idxprom70 = sext i32 %52 to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %51, i64 %idxprom70
  %53 = load i8, i8* %arrayidx71, align 1
  %54 = load [36 x i8]*, [36 x i8]** %pred_mode.addr, align 8
  %55 = load i32, i32* %xoff, align 4
  %idxprom72 = sext i32 %55 to i64
  %arrayidx73 = getelementptr inbounds [36 x i8], [36 x i8]* %54, i64 %idxprom72
  %56 = load i32, i32* %yoff, align 4
  %idxprom74 = sext i32 %56 to i64
  %arrayidx75 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx73, i64 0, i64 %idxprom74
  store i8 %53, i8* %arrayidx75, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end69
  %57 = load i32, i32* %k, align 4
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dso_local zeroext i8 @u_1(%struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @u_n(i32, %struct.NALU_t*, i8*, i64*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @predict_intra4x4_luma_NonField([4 x i8]* %predL, [144 x i8]* %Sluma, i8 zeroext %predmode, i8 zeroext %avaiMode, i32 %startx, i32 %starty, i32 %blk) #0 !prof !37 {
entry:
  %predL.addr = alloca [4 x i8]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %predmode.addr = alloca i8, align 1
  %avaiMode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %P_X = alloca i8, align 1
  %P_A = alloca i8, align 1
  %P_B = alloca i8, align 1
  %P_C = alloca i8, align 1
  %P_D = alloca i8, align 1
  %P_E = alloca i8, align 1
  %P_F = alloca i8, align 1
  %P_G = alloca i8, align 1
  %P_H = alloca i8, align 1
  %P_I = alloca i8, align 1
  %P_J = alloca i8, align 1
  %P_K = alloca i8, align 1
  %P_L = alloca i8, align 1
  %s0 = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %predL, [4 x i8]** %predL.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i8 %predmode, i8* %predmode.addr, align 1
  store i8 %avaiMode, i8* %avaiMode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  %0 = load i8, i8* %avaiMode.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !38

if.then:                                          ; preds = %entry
  %1 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %2 = load i32, i32* %startx.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %starty.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom1 = sext i32 %sub to i64
  %arrayidx2 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %4 = load i8, i8* %arrayidx2, align 1
  store i8 %4, i8* %P_A, align 1
  %5 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %6 = load i32, i32* %startx.addr, align 4
  %add = add nsw i32 %6, 1
  %idxprom3 = sext i32 %add to i64
  %arrayidx4 = getelementptr inbounds [144 x i8], [144 x i8]* %5, i64 %idxprom3
  %7 = load i32, i32* %starty.addr, align 4
  %sub5 = sub nsw i32 %7, 1
  %idxprom6 = sext i32 %sub5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx4, i64 0, i64 %idxprom6
  %8 = load i8, i8* %arrayidx7, align 1
  store i8 %8, i8* %P_B, align 1
  %9 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %10 = load i32, i32* %startx.addr, align 4
  %add8 = add nsw i32 %10, 2
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds [144 x i8], [144 x i8]* %9, i64 %idxprom9
  %11 = load i32, i32* %starty.addr, align 4
  %sub11 = sub nsw i32 %11, 1
  %idxprom12 = sext i32 %sub11 to i64
  %arrayidx13 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx10, i64 0, i64 %idxprom12
  %12 = load i8, i8* %arrayidx13, align 1
  store i8 %12, i8* %P_C, align 1
  %13 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %14 = load i32, i32* %startx.addr, align 4
  %add14 = add nsw i32 %14, 3
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [144 x i8], [144 x i8]* %13, i64 %idxprom15
  %15 = load i32, i32* %starty.addr, align 4
  %sub17 = sub nsw i32 %15, 1
  %idxprom18 = sext i32 %sub17 to i64
  %arrayidx19 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx16, i64 0, i64 %idxprom18
  %16 = load i8, i8* %arrayidx19, align 1
  store i8 %16, i8* %P_D, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -128, i8* %P_D, align 1
  store i8 -128, i8* %P_C, align 1
  store i8 -128, i8* %P_B, align 1
  store i8 -128, i8* %P_A, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load i32, i32* %blk.addr, align 4
  %cmp = icmp eq i32 %17, 3
  br i1 %cmp, label %if.then43, label %lor.lhs.false, !prof !39

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i32, i32* %blk.addr, align 4
  %cmp21 = icmp eq i32 %18, 11
  br i1 %cmp21, label %if.then43, label %lor.lhs.false23, !prof !40

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %19 = load i32, i32* %blk.addr, align 4
  %cmp24 = icmp eq i32 %19, 13
  br i1 %cmp24, label %if.then43, label %lor.lhs.false26, !prof !41

lor.lhs.false26:                                  ; preds = %lor.lhs.false23
  %20 = load i32, i32* %blk.addr, align 4
  %cmp27 = icmp eq i32 %20, 7
  br i1 %cmp27, label %if.then43, label %lor.lhs.false29, !prof !42

lor.lhs.false29:                                  ; preds = %lor.lhs.false26
  %21 = load i32, i32* %blk.addr, align 4
  %cmp30 = icmp eq i32 %21, 15
  br i1 %cmp30, label %if.then43, label %lor.lhs.false32, !prof !43

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %22 = load i8, i8* %avaiMode.addr, align 1
  %conv33 = zext i8 %22 to i32
  %and34 = and i32 %conv33, 1
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %lor.lhs.false36, label %if.then43, !prof !44

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %23 = load i32, i32* %startx.addr, align 4
  %add37 = add nsw i32 %23, 4
  %cmp38 = icmp sge i32 %add37, 176
  br i1 %cmp38, label %if.then43, label %lor.lhs.false40, !prof !45

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %24 = load i32, i32* %starty.addr, align 4
  %cmp41 = icmp eq i32 %24, 0
  br i1 %cmp41, label %if.then43, label %if.else44, !prof !46

if.then43:                                        ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %lor.lhs.false29, %lor.lhs.false26, %lor.lhs.false23, %lor.lhs.false, %if.end
  %25 = load i8, i8* %P_D, align 1
  store i8 %25, i8* %P_H, align 1
  store i8 %25, i8* %P_G, align 1
  store i8 %25, i8* %P_F, align 1
  store i8 %25, i8* %P_E, align 1
  br label %if.end69

if.else44:                                        ; preds = %lor.lhs.false40
  %26 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %27 = load i32, i32* %startx.addr, align 4
  %add45 = add nsw i32 %27, 4
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds [144 x i8], [144 x i8]* %26, i64 %idxprom46
  %28 = load i32, i32* %starty.addr, align 4
  %sub48 = sub nsw i32 %28, 1
  %idxprom49 = sext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx47, i64 0, i64 %idxprom49
  %29 = load i8, i8* %arrayidx50, align 1
  store i8 %29, i8* %P_E, align 1
  %30 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %31 = load i32, i32* %startx.addr, align 4
  %add51 = add nsw i32 %31, 5
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i8], [144 x i8]* %30, i64 %idxprom52
  %32 = load i32, i32* %starty.addr, align 4
  %sub54 = sub nsw i32 %32, 1
  %idxprom55 = sext i32 %sub54 to i64
  %arrayidx56 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx53, i64 0, i64 %idxprom55
  %33 = load i8, i8* %arrayidx56, align 1
  store i8 %33, i8* %P_F, align 1
  %34 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %35 = load i32, i32* %startx.addr, align 4
  %add57 = add nsw i32 %35, 6
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds [144 x i8], [144 x i8]* %34, i64 %idxprom58
  %36 = load i32, i32* %starty.addr, align 4
  %sub60 = sub nsw i32 %36, 1
  %idxprom61 = sext i32 %sub60 to i64
  %arrayidx62 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx59, i64 0, i64 %idxprom61
  %37 = load i8, i8* %arrayidx62, align 1
  store i8 %37, i8* %P_G, align 1
  %38 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %39 = load i32, i32* %startx.addr, align 4
  %add63 = add nsw i32 %39, 7
  %idxprom64 = sext i32 %add63 to i64
  %arrayidx65 = getelementptr inbounds [144 x i8], [144 x i8]* %38, i64 %idxprom64
  %40 = load i32, i32* %starty.addr, align 4
  %sub66 = sub nsw i32 %40, 1
  %idxprom67 = sext i32 %sub66 to i64
  %arrayidx68 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx65, i64 0, i64 %idxprom67
  %41 = load i8, i8* %arrayidx68, align 1
  store i8 %41, i8* %P_H, align 1
  br label %if.end69

if.end69:                                         ; preds = %if.else44, %if.then43
  %42 = load i8, i8* %avaiMode.addr, align 1
  %conv70 = zext i8 %42 to i32
  %and71 = and i32 %conv70, 2
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.else97, !prof !31

if.then73:                                        ; preds = %if.end69
  %43 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %44 = load i32, i32* %startx.addr, align 4
  %sub74 = sub nsw i32 %44, 1
  %idxprom75 = sext i32 %sub74 to i64
  %arrayidx76 = getelementptr inbounds [144 x i8], [144 x i8]* %43, i64 %idxprom75
  %45 = load i32, i32* %starty.addr, align 4
  %idxprom77 = sext i32 %45 to i64
  %arrayidx78 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx76, i64 0, i64 %idxprom77
  %46 = load i8, i8* %arrayidx78, align 1
  store i8 %46, i8* %P_I, align 1
  %47 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %48 = load i32, i32* %startx.addr, align 4
  %sub79 = sub nsw i32 %48, 1
  %idxprom80 = sext i32 %sub79 to i64
  %arrayidx81 = getelementptr inbounds [144 x i8], [144 x i8]* %47, i64 %idxprom80
  %49 = load i32, i32* %starty.addr, align 4
  %add82 = add nsw i32 %49, 1
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx81, i64 0, i64 %idxprom83
  %50 = load i8, i8* %arrayidx84, align 1
  store i8 %50, i8* %P_J, align 1
  %51 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %52 = load i32, i32* %startx.addr, align 4
  %sub85 = sub nsw i32 %52, 1
  %idxprom86 = sext i32 %sub85 to i64
  %arrayidx87 = getelementptr inbounds [144 x i8], [144 x i8]* %51, i64 %idxprom86
  %53 = load i32, i32* %starty.addr, align 4
  %add88 = add nsw i32 %53, 2
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx87, i64 0, i64 %idxprom89
  %54 = load i8, i8* %arrayidx90, align 1
  store i8 %54, i8* %P_K, align 1
  %55 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %56 = load i32, i32* %startx.addr, align 4
  %sub91 = sub nsw i32 %56, 1
  %idxprom92 = sext i32 %sub91 to i64
  %arrayidx93 = getelementptr inbounds [144 x i8], [144 x i8]* %55, i64 %idxprom92
  %57 = load i32, i32* %starty.addr, align 4
  %add94 = add nsw i32 %57, 3
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx93, i64 0, i64 %idxprom95
  %58 = load i8, i8* %arrayidx96, align 1
  store i8 %58, i8* %P_L, align 1
  br label %if.end98

if.else97:                                        ; preds = %if.end69
  store i8 -128, i8* %P_L, align 1
  store i8 -128, i8* %P_K, align 1
  store i8 -128, i8* %P_J, align 1
  store i8 -128, i8* %P_I, align 1
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.then73
  %59 = load i8, i8* %avaiMode.addr, align 1
  %conv99 = zext i8 %59 to i32
  %cmp100 = icmp eq i32 %conv99, 3
  br i1 %cmp100, label %if.then102, label %if.else109, !prof !47

if.then102:                                       ; preds = %if.end98
  %60 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %61 = load i32, i32* %startx.addr, align 4
  %sub103 = sub nsw i32 %61, 1
  %idxprom104 = sext i32 %sub103 to i64
  %arrayidx105 = getelementptr inbounds [144 x i8], [144 x i8]* %60, i64 %idxprom104
  %62 = load i32, i32* %starty.addr, align 4
  %sub106 = sub nsw i32 %62, 1
  %idxprom107 = sext i32 %sub106 to i64
  %arrayidx108 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx105, i64 0, i64 %idxprom107
  %63 = load i8, i8* %arrayidx108, align 1
  store i8 %63, i8* %P_X, align 1
  br label %if.end110

if.else109:                                       ; preds = %if.end98
  store i8 -128, i8* %P_X, align 1
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %if.then102
  %64 = load i8, i8* %predmode.addr, align 1
  %conv111 = zext i8 %64 to i32
  switch i32 %conv111, label %sw.default802 [
    i32 2, label %sw.bb
    i32 0, label %sw.bb166
    i32 1, label %sw.bb186
    i32 4, label %sw.bb206
    i32 3, label %sw.bb300
    i32 5, label %sw.bb394
    i32 7, label %sw.bb505
    i32 8, label %sw.bb613
    i32 6, label %sw.bb691
  ], !prof !48

sw.bb:                                            ; preds = %if.end110
  store i8 0, i8* %s0, align 1
  %65 = load i8, i8* %avaiMode.addr, align 1
  %conv112 = zext i8 %65 to i32
  switch i32 %conv112, label %sw.default [
    i32 3, label %sw.bb113
    i32 2, label %sw.bb131
    i32 1, label %sw.bb142
  ], !prof !49

sw.bb113:                                         ; preds = %sw.bb
  %66 = load i8, i8* %P_A, align 1
  %conv114 = zext i8 %66 to i32
  %67 = load i8, i8* %P_B, align 1
  %conv115 = zext i8 %67 to i32
  %add116 = add nsw i32 %conv114, %conv115
  %68 = load i8, i8* %P_C, align 1
  %conv117 = zext i8 %68 to i32
  %add118 = add nsw i32 %add116, %conv117
  %69 = load i8, i8* %P_D, align 1
  %conv119 = zext i8 %69 to i32
  %add120 = add nsw i32 %add118, %conv119
  %70 = load i8, i8* %P_I, align 1
  %conv121 = zext i8 %70 to i32
  %add122 = add nsw i32 %add120, %conv121
  %71 = load i8, i8* %P_J, align 1
  %conv123 = zext i8 %71 to i32
  %add124 = add nsw i32 %add122, %conv123
  %72 = load i8, i8* %P_K, align 1
  %conv125 = zext i8 %72 to i32
  %add126 = add nsw i32 %add124, %conv125
  %73 = load i8, i8* %P_L, align 1
  %conv127 = zext i8 %73 to i32
  %add128 = add nsw i32 %add126, %conv127
  %add129 = add nsw i32 %add128, 4
  %shr = ashr i32 %add129, 3
  %conv130 = trunc i32 %shr to i8
  store i8 %conv130, i8* %s0, align 1
  br label %sw.epilog

sw.bb131:                                         ; preds = %sw.bb
  %74 = load i8, i8* %P_I, align 1
  %conv132 = zext i8 %74 to i32
  %75 = load i8, i8* %P_J, align 1
  %conv133 = zext i8 %75 to i32
  %add134 = add nsw i32 %conv132, %conv133
  %76 = load i8, i8* %P_K, align 1
  %conv135 = zext i8 %76 to i32
  %add136 = add nsw i32 %add134, %conv135
  %77 = load i8, i8* %P_L, align 1
  %conv137 = zext i8 %77 to i32
  %add138 = add nsw i32 %add136, %conv137
  %add139 = add nsw i32 %add138, 2
  %shr140 = ashr i32 %add139, 2
  %conv141 = trunc i32 %shr140 to i8
  store i8 %conv141, i8* %s0, align 1
  br label %sw.epilog

sw.bb142:                                         ; preds = %sw.bb
  %78 = load i8, i8* %P_A, align 1
  %conv143 = zext i8 %78 to i32
  %79 = load i8, i8* %P_B, align 1
  %conv144 = zext i8 %79 to i32
  %add145 = add nsw i32 %conv143, %conv144
  %80 = load i8, i8* %P_C, align 1
  %conv146 = zext i8 %80 to i32
  %add147 = add nsw i32 %add145, %conv146
  %81 = load i8, i8* %P_D, align 1
  %conv148 = zext i8 %81 to i32
  %add149 = add nsw i32 %add147, %conv148
  %add150 = add nsw i32 %add149, 2
  %shr151 = ashr i32 %add150, 2
  %conv152 = trunc i32 %shr151 to i8
  store i8 %conv152, i8* %s0, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb
  store i8 -128, i8* %s0, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb142, %sw.bb131, %sw.bb113
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc163, %sw.epilog
  %82 = load i32, i32* %j, align 4
  %cmp153 = icmp slt i32 %82, 4
  br i1 %cmp153, label %for.body, label %for.end165, !prof !50

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc, %for.body
  %83 = load i32, i32* %i, align 4
  %cmp156 = icmp slt i32 %83, 4
  br i1 %cmp156, label %for.body158, label %for.end, !prof !51

for.body158:                                      ; preds = %for.cond155
  %84 = load i8, i8* %s0, align 1
  %85 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %86 = load i32, i32* %i, align 4
  %idxprom159 = sext i32 %86 to i64
  %arrayidx160 = getelementptr inbounds [4 x i8], [4 x i8]* %85, i64 %idxprom159
  %87 = load i32, i32* %j, align 4
  %idxprom161 = sext i32 %87 to i64
  %arrayidx162 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx160, i64 0, i64 %idxprom161
  store i8 %84, i8* %arrayidx162, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body158
  %88 = load i32, i32* %i, align 4
  %inc = add nsw i32 %88, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond155

for.end:                                          ; preds = %for.cond155
  br label %for.inc163

for.inc163:                                       ; preds = %for.end
  %89 = load i32, i32* %j, align 4
  %inc164 = add nsw i32 %89, 1
  store i32 %inc164, i32* %j, align 4
  br label %for.cond

for.end165:                                       ; preds = %for.cond
  br label %sw.epilog804

sw.bb166:                                         ; preds = %if.end110
  store i32 0, i32* %i, align 4
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc183, %sw.bb166
  %90 = load i32, i32* %i, align 4
  %cmp168 = icmp slt i32 %90, 4
  br i1 %cmp168, label %for.body170, label %for.end185, !prof !52

for.body170:                                      ; preds = %for.cond167
  %91 = load i8, i8* %P_A, align 1
  %92 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx171 = getelementptr inbounds [4 x i8], [4 x i8]* %92, i64 0
  %93 = load i32, i32* %i, align 4
  %idxprom172 = sext i32 %93 to i64
  %arrayidx173 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx171, i64 0, i64 %idxprom172
  store i8 %91, i8* %arrayidx173, align 1
  %94 = load i8, i8* %P_B, align 1
  %95 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx174 = getelementptr inbounds [4 x i8], [4 x i8]* %95, i64 1
  %96 = load i32, i32* %i, align 4
  %idxprom175 = sext i32 %96 to i64
  %arrayidx176 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx174, i64 0, i64 %idxprom175
  store i8 %94, i8* %arrayidx176, align 1
  %97 = load i8, i8* %P_C, align 1
  %98 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx177 = getelementptr inbounds [4 x i8], [4 x i8]* %98, i64 2
  %99 = load i32, i32* %i, align 4
  %idxprom178 = sext i32 %99 to i64
  %arrayidx179 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx177, i64 0, i64 %idxprom178
  store i8 %97, i8* %arrayidx179, align 1
  %100 = load i8, i8* %P_D, align 1
  %101 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx180 = getelementptr inbounds [4 x i8], [4 x i8]* %101, i64 3
  %102 = load i32, i32* %i, align 4
  %idxprom181 = sext i32 %102 to i64
  %arrayidx182 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx180, i64 0, i64 %idxprom181
  store i8 %100, i8* %arrayidx182, align 1
  br label %for.inc183

for.inc183:                                       ; preds = %for.body170
  %103 = load i32, i32* %i, align 4
  %inc184 = add nsw i32 %103, 1
  store i32 %inc184, i32* %i, align 4
  br label %for.cond167

for.end185:                                       ; preds = %for.cond167
  br label %sw.epilog804

sw.bb186:                                         ; preds = %if.end110
  store i32 0, i32* %i, align 4
  br label %for.cond187

for.cond187:                                      ; preds = %for.inc203, %sw.bb186
  %104 = load i32, i32* %i, align 4
  %cmp188 = icmp slt i32 %104, 4
  br i1 %cmp188, label %for.body190, label %for.end205, !prof !53

for.body190:                                      ; preds = %for.cond187
  %105 = load i8, i8* %P_I, align 1
  %106 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %107 = load i32, i32* %i, align 4
  %idxprom191 = sext i32 %107 to i64
  %arrayidx192 = getelementptr inbounds [4 x i8], [4 x i8]* %106, i64 %idxprom191
  %arrayidx193 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx192, i64 0, i64 0
  store i8 %105, i8* %arrayidx193, align 1
  %108 = load i8, i8* %P_J, align 1
  %109 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %110 = load i32, i32* %i, align 4
  %idxprom194 = sext i32 %110 to i64
  %arrayidx195 = getelementptr inbounds [4 x i8], [4 x i8]* %109, i64 %idxprom194
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx195, i64 0, i64 1
  store i8 %108, i8* %arrayidx196, align 1
  %111 = load i8, i8* %P_K, align 1
  %112 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %113 = load i32, i32* %i, align 4
  %idxprom197 = sext i32 %113 to i64
  %arrayidx198 = getelementptr inbounds [4 x i8], [4 x i8]* %112, i64 %idxprom197
  %arrayidx199 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx198, i64 0, i64 2
  store i8 %111, i8* %arrayidx199, align 1
  %114 = load i8, i8* %P_L, align 1
  %115 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %116 = load i32, i32* %i, align 4
  %idxprom200 = sext i32 %116 to i64
  %arrayidx201 = getelementptr inbounds [4 x i8], [4 x i8]* %115, i64 %idxprom200
  %arrayidx202 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx201, i64 0, i64 3
  store i8 %114, i8* %arrayidx202, align 1
  br label %for.inc203

for.inc203:                                       ; preds = %for.body190
  %117 = load i32, i32* %i, align 4
  %inc204 = add nsw i32 %117, 1
  store i32 %inc204, i32* %i, align 4
  br label %for.cond187

for.end205:                                       ; preds = %for.cond187
  br label %sw.epilog804

sw.bb206:                                         ; preds = %if.end110
  %118 = load i8, i8* %P_L, align 1
  %conv207 = zext i8 %118 to i32
  %119 = load i8, i8* %P_K, align 1
  %conv208 = zext i8 %119 to i32
  %mul = mul nsw i32 2, %conv208
  %add209 = add nsw i32 %conv207, %mul
  %120 = load i8, i8* %P_J, align 1
  %conv210 = zext i8 %120 to i32
  %add211 = add nsw i32 %add209, %conv210
  %add212 = add nsw i32 %add211, 2
  %div = sdiv i32 %add212, 4
  %conv213 = trunc i32 %div to i8
  %121 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx214 = getelementptr inbounds [4 x i8], [4 x i8]* %121, i64 0
  %arrayidx215 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx214, i64 0, i64 3
  store i8 %conv213, i8* %arrayidx215, align 1
  %122 = load i8, i8* %P_K, align 1
  %conv216 = zext i8 %122 to i32
  %123 = load i8, i8* %P_J, align 1
  %conv217 = zext i8 %123 to i32
  %mul218 = mul nsw i32 2, %conv217
  %add219 = add nsw i32 %conv216, %mul218
  %124 = load i8, i8* %P_I, align 1
  %conv220 = zext i8 %124 to i32
  %add221 = add nsw i32 %add219, %conv220
  %add222 = add nsw i32 %add221, 2
  %div223 = sdiv i32 %add222, 4
  %conv224 = trunc i32 %div223 to i8
  %125 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx225 = getelementptr inbounds [4 x i8], [4 x i8]* %125, i64 1
  %arrayidx226 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx225, i64 0, i64 3
  store i8 %conv224, i8* %arrayidx226, align 1
  %126 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx227 = getelementptr inbounds [4 x i8], [4 x i8]* %126, i64 0
  %arrayidx228 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx227, i64 0, i64 2
  store i8 %conv224, i8* %arrayidx228, align 1
  %127 = load i8, i8* %P_J, align 1
  %conv229 = zext i8 %127 to i32
  %128 = load i8, i8* %P_I, align 1
  %conv230 = zext i8 %128 to i32
  %mul231 = mul nsw i32 2, %conv230
  %add232 = add nsw i32 %conv229, %mul231
  %129 = load i8, i8* %P_X, align 1
  %conv233 = zext i8 %129 to i32
  %add234 = add nsw i32 %add232, %conv233
  %add235 = add nsw i32 %add234, 2
  %div236 = sdiv i32 %add235, 4
  %conv237 = trunc i32 %div236 to i8
  %130 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx238 = getelementptr inbounds [4 x i8], [4 x i8]* %130, i64 2
  %arrayidx239 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx238, i64 0, i64 3
  store i8 %conv237, i8* %arrayidx239, align 1
  %131 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx240 = getelementptr inbounds [4 x i8], [4 x i8]* %131, i64 1
  %arrayidx241 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx240, i64 0, i64 2
  store i8 %conv237, i8* %arrayidx241, align 1
  %132 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx242 = getelementptr inbounds [4 x i8], [4 x i8]* %132, i64 0
  %arrayidx243 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx242, i64 0, i64 1
  store i8 %conv237, i8* %arrayidx243, align 1
  %133 = load i8, i8* %P_I, align 1
  %conv244 = zext i8 %133 to i32
  %134 = load i8, i8* %P_X, align 1
  %conv245 = zext i8 %134 to i32
  %mul246 = mul nsw i32 2, %conv245
  %add247 = add nsw i32 %conv244, %mul246
  %135 = load i8, i8* %P_A, align 1
  %conv248 = zext i8 %135 to i32
  %add249 = add nsw i32 %add247, %conv248
  %add250 = add nsw i32 %add249, 2
  %div251 = sdiv i32 %add250, 4
  %conv252 = trunc i32 %div251 to i8
  %136 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx253 = getelementptr inbounds [4 x i8], [4 x i8]* %136, i64 3
  %arrayidx254 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx253, i64 0, i64 3
  store i8 %conv252, i8* %arrayidx254, align 1
  %137 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx255 = getelementptr inbounds [4 x i8], [4 x i8]* %137, i64 2
  %arrayidx256 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx255, i64 0, i64 2
  store i8 %conv252, i8* %arrayidx256, align 1
  %138 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx257 = getelementptr inbounds [4 x i8], [4 x i8]* %138, i64 1
  %arrayidx258 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx257, i64 0, i64 1
  store i8 %conv252, i8* %arrayidx258, align 1
  %139 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx259 = getelementptr inbounds [4 x i8], [4 x i8]* %139, i64 0
  %arrayidx260 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx259, i64 0, i64 0
  store i8 %conv252, i8* %arrayidx260, align 1
  %140 = load i8, i8* %P_X, align 1
  %conv261 = zext i8 %140 to i32
  %141 = load i8, i8* %P_A, align 1
  %conv262 = zext i8 %141 to i32
  %mul263 = mul nsw i32 2, %conv262
  %add264 = add nsw i32 %conv261, %mul263
  %142 = load i8, i8* %P_B, align 1
  %conv265 = zext i8 %142 to i32
  %add266 = add nsw i32 %add264, %conv265
  %add267 = add nsw i32 %add266, 2
  %div268 = sdiv i32 %add267, 4
  %conv269 = trunc i32 %div268 to i8
  %143 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx270 = getelementptr inbounds [4 x i8], [4 x i8]* %143, i64 3
  %arrayidx271 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx270, i64 0, i64 2
  store i8 %conv269, i8* %arrayidx271, align 1
  %144 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx272 = getelementptr inbounds [4 x i8], [4 x i8]* %144, i64 2
  %arrayidx273 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx272, i64 0, i64 1
  store i8 %conv269, i8* %arrayidx273, align 1
  %145 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx274 = getelementptr inbounds [4 x i8], [4 x i8]* %145, i64 1
  %arrayidx275 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx274, i64 0, i64 0
  store i8 %conv269, i8* %arrayidx275, align 1
  %146 = load i8, i8* %P_A, align 1
  %conv276 = zext i8 %146 to i32
  %147 = load i8, i8* %P_B, align 1
  %conv277 = zext i8 %147 to i32
  %mul278 = mul nsw i32 2, %conv277
  %add279 = add nsw i32 %conv276, %mul278
  %148 = load i8, i8* %P_C, align 1
  %conv280 = zext i8 %148 to i32
  %add281 = add nsw i32 %add279, %conv280
  %add282 = add nsw i32 %add281, 2
  %div283 = sdiv i32 %add282, 4
  %conv284 = trunc i32 %div283 to i8
  %149 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx285 = getelementptr inbounds [4 x i8], [4 x i8]* %149, i64 3
  %arrayidx286 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx285, i64 0, i64 1
  store i8 %conv284, i8* %arrayidx286, align 1
  %150 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx287 = getelementptr inbounds [4 x i8], [4 x i8]* %150, i64 2
  %arrayidx288 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx287, i64 0, i64 0
  store i8 %conv284, i8* %arrayidx288, align 1
  %151 = load i8, i8* %P_B, align 1
  %conv289 = zext i8 %151 to i32
  %152 = load i8, i8* %P_C, align 1
  %conv290 = zext i8 %152 to i32
  %mul291 = mul nsw i32 2, %conv290
  %add292 = add nsw i32 %conv289, %mul291
  %153 = load i8, i8* %P_D, align 1
  %conv293 = zext i8 %153 to i32
  %add294 = add nsw i32 %add292, %conv293
  %add295 = add nsw i32 %add294, 2
  %div296 = sdiv i32 %add295, 4
  %conv297 = trunc i32 %div296 to i8
  %154 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx298 = getelementptr inbounds [4 x i8], [4 x i8]* %154, i64 3
  %arrayidx299 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx298, i64 0, i64 0
  store i8 %conv297, i8* %arrayidx299, align 1
  br label %sw.epilog804

sw.bb300:                                         ; preds = %if.end110
  %155 = load i8, i8* %P_A, align 1
  %conv301 = zext i8 %155 to i32
  %156 = load i8, i8* %P_C, align 1
  %conv302 = zext i8 %156 to i32
  %add303 = add nsw i32 %conv301, %conv302
  %157 = load i8, i8* %P_B, align 1
  %conv304 = zext i8 %157 to i32
  %mul305 = mul nsw i32 2, %conv304
  %add306 = add nsw i32 %add303, %mul305
  %add307 = add nsw i32 %add306, 2
  %div308 = sdiv i32 %add307, 4
  %conv309 = trunc i32 %div308 to i8
  %158 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx310 = getelementptr inbounds [4 x i8], [4 x i8]* %158, i64 0
  %arrayidx311 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx310, i64 0, i64 0
  store i8 %conv309, i8* %arrayidx311, align 1
  %159 = load i8, i8* %P_B, align 1
  %conv312 = zext i8 %159 to i32
  %160 = load i8, i8* %P_D, align 1
  %conv313 = zext i8 %160 to i32
  %add314 = add nsw i32 %conv312, %conv313
  %161 = load i8, i8* %P_C, align 1
  %conv315 = zext i8 %161 to i32
  %mul316 = mul nsw i32 2, %conv315
  %add317 = add nsw i32 %add314, %mul316
  %add318 = add nsw i32 %add317, 2
  %div319 = sdiv i32 %add318, 4
  %conv320 = trunc i32 %div319 to i8
  %162 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx321 = getelementptr inbounds [4 x i8], [4 x i8]* %162, i64 0
  %arrayidx322 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx321, i64 0, i64 1
  store i8 %conv320, i8* %arrayidx322, align 1
  %163 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx323 = getelementptr inbounds [4 x i8], [4 x i8]* %163, i64 1
  %arrayidx324 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx323, i64 0, i64 0
  store i8 %conv320, i8* %arrayidx324, align 1
  %164 = load i8, i8* %P_C, align 1
  %conv325 = zext i8 %164 to i32
  %165 = load i8, i8* %P_E, align 1
  %conv326 = zext i8 %165 to i32
  %add327 = add nsw i32 %conv325, %conv326
  %166 = load i8, i8* %P_D, align 1
  %conv328 = zext i8 %166 to i32
  %mul329 = mul nsw i32 2, %conv328
  %add330 = add nsw i32 %add327, %mul329
  %add331 = add nsw i32 %add330, 2
  %div332 = sdiv i32 %add331, 4
  %conv333 = trunc i32 %div332 to i8
  %167 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx334 = getelementptr inbounds [4 x i8], [4 x i8]* %167, i64 0
  %arrayidx335 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx334, i64 0, i64 2
  store i8 %conv333, i8* %arrayidx335, align 1
  %168 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx336 = getelementptr inbounds [4 x i8], [4 x i8]* %168, i64 1
  %arrayidx337 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx336, i64 0, i64 1
  store i8 %conv333, i8* %arrayidx337, align 1
  %169 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx338 = getelementptr inbounds [4 x i8], [4 x i8]* %169, i64 2
  %arrayidx339 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx338, i64 0, i64 0
  store i8 %conv333, i8* %arrayidx339, align 1
  %170 = load i8, i8* %P_D, align 1
  %conv340 = zext i8 %170 to i32
  %171 = load i8, i8* %P_F, align 1
  %conv341 = zext i8 %171 to i32
  %add342 = add nsw i32 %conv340, %conv341
  %172 = load i8, i8* %P_E, align 1
  %conv343 = zext i8 %172 to i32
  %mul344 = mul nsw i32 2, %conv343
  %add345 = add nsw i32 %add342, %mul344
  %add346 = add nsw i32 %add345, 2
  %div347 = sdiv i32 %add346, 4
  %conv348 = trunc i32 %div347 to i8
  %173 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx349 = getelementptr inbounds [4 x i8], [4 x i8]* %173, i64 0
  %arrayidx350 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx349, i64 0, i64 3
  store i8 %conv348, i8* %arrayidx350, align 1
  %174 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx351 = getelementptr inbounds [4 x i8], [4 x i8]* %174, i64 1
  %arrayidx352 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx351, i64 0, i64 2
  store i8 %conv348, i8* %arrayidx352, align 1
  %175 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx353 = getelementptr inbounds [4 x i8], [4 x i8]* %175, i64 2
  %arrayidx354 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx353, i64 0, i64 1
  store i8 %conv348, i8* %arrayidx354, align 1
  %176 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx355 = getelementptr inbounds [4 x i8], [4 x i8]* %176, i64 3
  %arrayidx356 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx355, i64 0, i64 0
  store i8 %conv348, i8* %arrayidx356, align 1
  %177 = load i8, i8* %P_E, align 1
  %conv357 = zext i8 %177 to i32
  %178 = load i8, i8* %P_G, align 1
  %conv358 = zext i8 %178 to i32
  %add359 = add nsw i32 %conv357, %conv358
  %179 = load i8, i8* %P_F, align 1
  %conv360 = zext i8 %179 to i32
  %mul361 = mul nsw i32 2, %conv360
  %add362 = add nsw i32 %add359, %mul361
  %add363 = add nsw i32 %add362, 2
  %div364 = sdiv i32 %add363, 4
  %conv365 = trunc i32 %div364 to i8
  %180 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx366 = getelementptr inbounds [4 x i8], [4 x i8]* %180, i64 1
  %arrayidx367 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx366, i64 0, i64 3
  store i8 %conv365, i8* %arrayidx367, align 1
  %181 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx368 = getelementptr inbounds [4 x i8], [4 x i8]* %181, i64 2
  %arrayidx369 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx368, i64 0, i64 2
  store i8 %conv365, i8* %arrayidx369, align 1
  %182 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx370 = getelementptr inbounds [4 x i8], [4 x i8]* %182, i64 3
  %arrayidx371 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 1
  store i8 %conv365, i8* %arrayidx371, align 1
  %183 = load i8, i8* %P_F, align 1
  %conv372 = zext i8 %183 to i32
  %184 = load i8, i8* %P_H, align 1
  %conv373 = zext i8 %184 to i32
  %add374 = add nsw i32 %conv372, %conv373
  %185 = load i8, i8* %P_G, align 1
  %conv375 = zext i8 %185 to i32
  %mul376 = mul nsw i32 2, %conv375
  %add377 = add nsw i32 %add374, %mul376
  %add378 = add nsw i32 %add377, 2
  %div379 = sdiv i32 %add378, 4
  %conv380 = trunc i32 %div379 to i8
  %186 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx381 = getelementptr inbounds [4 x i8], [4 x i8]* %186, i64 2
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx381, i64 0, i64 3
  store i8 %conv380, i8* %arrayidx382, align 1
  %187 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx383 = getelementptr inbounds [4 x i8], [4 x i8]* %187, i64 3
  %arrayidx384 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx383, i64 0, i64 2
  store i8 %conv380, i8* %arrayidx384, align 1
  %188 = load i8, i8* %P_G, align 1
  %conv385 = zext i8 %188 to i32
  %189 = load i8, i8* %P_H, align 1
  %conv386 = zext i8 %189 to i32
  %mul387 = mul nsw i32 3, %conv386
  %add388 = add nsw i32 %conv385, %mul387
  %add389 = add nsw i32 %add388, 2
  %div390 = sdiv i32 %add389, 4
  %conv391 = trunc i32 %div390 to i8
  %190 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx392 = getelementptr inbounds [4 x i8], [4 x i8]* %190, i64 3
  %arrayidx393 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx392, i64 0, i64 3
  store i8 %conv391, i8* %arrayidx393, align 1
  br label %sw.epilog804

sw.bb394:                                         ; preds = %if.end110
  %191 = load i8, i8* %P_X, align 1
  %conv395 = zext i8 %191 to i32
  %192 = load i8, i8* %P_A, align 1
  %conv396 = zext i8 %192 to i32
  %add397 = add nsw i32 %conv395, %conv396
  %add398 = add nsw i32 %add397, 1
  %div399 = sdiv i32 %add398, 2
  %conv400 = trunc i32 %div399 to i8
  %193 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx401 = getelementptr inbounds [4 x i8], [4 x i8]* %193, i64 1
  %arrayidx402 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx401, i64 0, i64 2
  store i8 %conv400, i8* %arrayidx402, align 1
  %194 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx403 = getelementptr inbounds [4 x i8], [4 x i8]* %194, i64 0
  %arrayidx404 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx403, i64 0, i64 0
  store i8 %conv400, i8* %arrayidx404, align 1
  %195 = load i8, i8* %P_A, align 1
  %conv405 = zext i8 %195 to i32
  %196 = load i8, i8* %P_B, align 1
  %conv406 = zext i8 %196 to i32
  %add407 = add nsw i32 %conv405, %conv406
  %add408 = add nsw i32 %add407, 1
  %div409 = sdiv i32 %add408, 2
  %conv410 = trunc i32 %div409 to i8
  %197 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx411 = getelementptr inbounds [4 x i8], [4 x i8]* %197, i64 2
  %arrayidx412 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx411, i64 0, i64 2
  store i8 %conv410, i8* %arrayidx412, align 1
  %198 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx413 = getelementptr inbounds [4 x i8], [4 x i8]* %198, i64 1
  %arrayidx414 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx413, i64 0, i64 0
  store i8 %conv410, i8* %arrayidx414, align 1
  %199 = load i8, i8* %P_B, align 1
  %conv415 = zext i8 %199 to i32
  %200 = load i8, i8* %P_C, align 1
  %conv416 = zext i8 %200 to i32
  %add417 = add nsw i32 %conv415, %conv416
  %add418 = add nsw i32 %add417, 1
  %div419 = sdiv i32 %add418, 2
  %conv420 = trunc i32 %div419 to i8
  %201 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx421 = getelementptr inbounds [4 x i8], [4 x i8]* %201, i64 3
  %arrayidx422 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx421, i64 0, i64 2
  store i8 %conv420, i8* %arrayidx422, align 1
  %202 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx423 = getelementptr inbounds [4 x i8], [4 x i8]* %202, i64 2
  %arrayidx424 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx423, i64 0, i64 0
  store i8 %conv420, i8* %arrayidx424, align 1
  %203 = load i8, i8* %P_C, align 1
  %conv425 = zext i8 %203 to i32
  %204 = load i8, i8* %P_D, align 1
  %conv426 = zext i8 %204 to i32
  %add427 = add nsw i32 %conv425, %conv426
  %add428 = add nsw i32 %add427, 1
  %div429 = sdiv i32 %add428, 2
  %conv430 = trunc i32 %div429 to i8
  %205 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx431 = getelementptr inbounds [4 x i8], [4 x i8]* %205, i64 3
  %arrayidx432 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx431, i64 0, i64 0
  store i8 %conv430, i8* %arrayidx432, align 1
  %206 = load i8, i8* %P_I, align 1
  %conv433 = zext i8 %206 to i32
  %207 = load i8, i8* %P_X, align 1
  %conv434 = zext i8 %207 to i32
  %mul435 = mul nsw i32 2, %conv434
  %add436 = add nsw i32 %conv433, %mul435
  %208 = load i8, i8* %P_A, align 1
  %conv437 = zext i8 %208 to i32
  %add438 = add nsw i32 %add436, %conv437
  %add439 = add nsw i32 %add438, 2
  %div440 = sdiv i32 %add439, 4
  %conv441 = trunc i32 %div440 to i8
  %209 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx442 = getelementptr inbounds [4 x i8], [4 x i8]* %209, i64 1
  %arrayidx443 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx442, i64 0, i64 3
  store i8 %conv441, i8* %arrayidx443, align 1
  %210 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx444 = getelementptr inbounds [4 x i8], [4 x i8]* %210, i64 0
  %arrayidx445 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx444, i64 0, i64 1
  store i8 %conv441, i8* %arrayidx445, align 1
  %211 = load i8, i8* %P_X, align 1
  %conv446 = zext i8 %211 to i32
  %212 = load i8, i8* %P_A, align 1
  %conv447 = zext i8 %212 to i32
  %mul448 = mul nsw i32 2, %conv447
  %add449 = add nsw i32 %conv446, %mul448
  %213 = load i8, i8* %P_B, align 1
  %conv450 = zext i8 %213 to i32
  %add451 = add nsw i32 %add449, %conv450
  %add452 = add nsw i32 %add451, 2
  %div453 = sdiv i32 %add452, 4
  %conv454 = trunc i32 %div453 to i8
  %214 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx455 = getelementptr inbounds [4 x i8], [4 x i8]* %214, i64 2
  %arrayidx456 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx455, i64 0, i64 3
  store i8 %conv454, i8* %arrayidx456, align 1
  %215 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx457 = getelementptr inbounds [4 x i8], [4 x i8]* %215, i64 1
  %arrayidx458 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx457, i64 0, i64 1
  store i8 %conv454, i8* %arrayidx458, align 1
  %216 = load i8, i8* %P_A, align 1
  %conv459 = zext i8 %216 to i32
  %217 = load i8, i8* %P_B, align 1
  %conv460 = zext i8 %217 to i32
  %mul461 = mul nsw i32 2, %conv460
  %add462 = add nsw i32 %conv459, %mul461
  %218 = load i8, i8* %P_C, align 1
  %conv463 = zext i8 %218 to i32
  %add464 = add nsw i32 %add462, %conv463
  %add465 = add nsw i32 %add464, 2
  %div466 = sdiv i32 %add465, 4
  %conv467 = trunc i32 %div466 to i8
  %219 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx468 = getelementptr inbounds [4 x i8], [4 x i8]* %219, i64 3
  %arrayidx469 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx468, i64 0, i64 3
  store i8 %conv467, i8* %arrayidx469, align 1
  %220 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx470 = getelementptr inbounds [4 x i8], [4 x i8]* %220, i64 2
  %arrayidx471 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx470, i64 0, i64 1
  store i8 %conv467, i8* %arrayidx471, align 1
  %221 = load i8, i8* %P_B, align 1
  %conv472 = zext i8 %221 to i32
  %222 = load i8, i8* %P_C, align 1
  %conv473 = zext i8 %222 to i32
  %mul474 = mul nsw i32 2, %conv473
  %add475 = add nsw i32 %conv472, %mul474
  %223 = load i8, i8* %P_D, align 1
  %conv476 = zext i8 %223 to i32
  %add477 = add nsw i32 %add475, %conv476
  %add478 = add nsw i32 %add477, 2
  %div479 = sdiv i32 %add478, 4
  %conv480 = trunc i32 %div479 to i8
  %224 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx481 = getelementptr inbounds [4 x i8], [4 x i8]* %224, i64 3
  %arrayidx482 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx481, i64 0, i64 1
  store i8 %conv480, i8* %arrayidx482, align 1
  %225 = load i8, i8* %P_X, align 1
  %conv483 = zext i8 %225 to i32
  %226 = load i8, i8* %P_I, align 1
  %conv484 = zext i8 %226 to i32
  %mul485 = mul nsw i32 2, %conv484
  %add486 = add nsw i32 %conv483, %mul485
  %227 = load i8, i8* %P_J, align 1
  %conv487 = zext i8 %227 to i32
  %add488 = add nsw i32 %add486, %conv487
  %add489 = add nsw i32 %add488, 2
  %div490 = sdiv i32 %add489, 4
  %conv491 = trunc i32 %div490 to i8
  %228 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx492 = getelementptr inbounds [4 x i8], [4 x i8]* %228, i64 0
  %arrayidx493 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx492, i64 0, i64 2
  store i8 %conv491, i8* %arrayidx493, align 1
  %229 = load i8, i8* %P_I, align 1
  %conv494 = zext i8 %229 to i32
  %230 = load i8, i8* %P_J, align 1
  %conv495 = zext i8 %230 to i32
  %mul496 = mul nsw i32 2, %conv495
  %add497 = add nsw i32 %conv494, %mul496
  %231 = load i8, i8* %P_K, align 1
  %conv498 = zext i8 %231 to i32
  %add499 = add nsw i32 %add497, %conv498
  %add500 = add nsw i32 %add499, 2
  %div501 = sdiv i32 %add500, 4
  %conv502 = trunc i32 %div501 to i8
  %232 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx503 = getelementptr inbounds [4 x i8], [4 x i8]* %232, i64 0
  %arrayidx504 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx503, i64 0, i64 3
  store i8 %conv502, i8* %arrayidx504, align 1
  br label %sw.epilog804

sw.bb505:                                         ; preds = %if.end110
  %233 = load i8, i8* %P_A, align 1
  %conv506 = zext i8 %233 to i32
  %234 = load i8, i8* %P_B, align 1
  %conv507 = zext i8 %234 to i32
  %add508 = add nsw i32 %conv506, %conv507
  %add509 = add nsw i32 %add508, 1
  %div510 = sdiv i32 %add509, 2
  %conv511 = trunc i32 %div510 to i8
  %235 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx512 = getelementptr inbounds [4 x i8], [4 x i8]* %235, i64 0
  %arrayidx513 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx512, i64 0, i64 0
  store i8 %conv511, i8* %arrayidx513, align 1
  %236 = load i8, i8* %P_B, align 1
  %conv514 = zext i8 %236 to i32
  %237 = load i8, i8* %P_C, align 1
  %conv515 = zext i8 %237 to i32
  %add516 = add nsw i32 %conv514, %conv515
  %add517 = add nsw i32 %add516, 1
  %div518 = sdiv i32 %add517, 2
  %conv519 = trunc i32 %div518 to i8
  %238 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx520 = getelementptr inbounds [4 x i8], [4 x i8]* %238, i64 0
  %arrayidx521 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx520, i64 0, i64 2
  store i8 %conv519, i8* %arrayidx521, align 1
  %239 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx522 = getelementptr inbounds [4 x i8], [4 x i8]* %239, i64 1
  %arrayidx523 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx522, i64 0, i64 0
  store i8 %conv519, i8* %arrayidx523, align 1
  %240 = load i8, i8* %P_C, align 1
  %conv524 = zext i8 %240 to i32
  %241 = load i8, i8* %P_D, align 1
  %conv525 = zext i8 %241 to i32
  %add526 = add nsw i32 %conv524, %conv525
  %add527 = add nsw i32 %add526, 1
  %div528 = sdiv i32 %add527, 2
  %conv529 = trunc i32 %div528 to i8
  %242 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx530 = getelementptr inbounds [4 x i8], [4 x i8]* %242, i64 1
  %arrayidx531 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx530, i64 0, i64 2
  store i8 %conv529, i8* %arrayidx531, align 1
  %243 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx532 = getelementptr inbounds [4 x i8], [4 x i8]* %243, i64 2
  %arrayidx533 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx532, i64 0, i64 0
  store i8 %conv529, i8* %arrayidx533, align 1
  %244 = load i8, i8* %P_D, align 1
  %conv534 = zext i8 %244 to i32
  %245 = load i8, i8* %P_E, align 1
  %conv535 = zext i8 %245 to i32
  %add536 = add nsw i32 %conv534, %conv535
  %add537 = add nsw i32 %add536, 1
  %div538 = sdiv i32 %add537, 2
  %conv539 = trunc i32 %div538 to i8
  %246 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx540 = getelementptr inbounds [4 x i8], [4 x i8]* %246, i64 2
  %arrayidx541 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx540, i64 0, i64 2
  store i8 %conv539, i8* %arrayidx541, align 1
  %247 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx542 = getelementptr inbounds [4 x i8], [4 x i8]* %247, i64 3
  %arrayidx543 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx542, i64 0, i64 0
  store i8 %conv539, i8* %arrayidx543, align 1
  %248 = load i8, i8* %P_E, align 1
  %conv544 = zext i8 %248 to i32
  %249 = load i8, i8* %P_F, align 1
  %conv545 = zext i8 %249 to i32
  %add546 = add nsw i32 %conv544, %conv545
  %add547 = add nsw i32 %add546, 1
  %div548 = sdiv i32 %add547, 2
  %conv549 = trunc i32 %div548 to i8
  %250 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx550 = getelementptr inbounds [4 x i8], [4 x i8]* %250, i64 3
  %arrayidx551 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx550, i64 0, i64 2
  store i8 %conv549, i8* %arrayidx551, align 1
  %251 = load i8, i8* %P_A, align 1
  %conv552 = zext i8 %251 to i32
  %252 = load i8, i8* %P_B, align 1
  %conv553 = zext i8 %252 to i32
  %mul554 = mul nsw i32 2, %conv553
  %add555 = add nsw i32 %conv552, %mul554
  %253 = load i8, i8* %P_C, align 1
  %conv556 = zext i8 %253 to i32
  %add557 = add nsw i32 %add555, %conv556
  %add558 = add nsw i32 %add557, 2
  %div559 = sdiv i32 %add558, 4
  %conv560 = trunc i32 %div559 to i8
  %254 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx561 = getelementptr inbounds [4 x i8], [4 x i8]* %254, i64 0
  %arrayidx562 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx561, i64 0, i64 1
  store i8 %conv560, i8* %arrayidx562, align 1
  %255 = load i8, i8* %P_B, align 1
  %conv563 = zext i8 %255 to i32
  %256 = load i8, i8* %P_C, align 1
  %conv564 = zext i8 %256 to i32
  %mul565 = mul nsw i32 2, %conv564
  %add566 = add nsw i32 %conv563, %mul565
  %257 = load i8, i8* %P_D, align 1
  %conv567 = zext i8 %257 to i32
  %add568 = add nsw i32 %add566, %conv567
  %add569 = add nsw i32 %add568, 2
  %div570 = sdiv i32 %add569, 4
  %conv571 = trunc i32 %div570 to i8
  %258 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx572 = getelementptr inbounds [4 x i8], [4 x i8]* %258, i64 0
  %arrayidx573 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx572, i64 0, i64 3
  store i8 %conv571, i8* %arrayidx573, align 1
  %259 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx574 = getelementptr inbounds [4 x i8], [4 x i8]* %259, i64 1
  %arrayidx575 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx574, i64 0, i64 1
  store i8 %conv571, i8* %arrayidx575, align 1
  %260 = load i8, i8* %P_C, align 1
  %conv576 = zext i8 %260 to i32
  %261 = load i8, i8* %P_D, align 1
  %conv577 = zext i8 %261 to i32
  %mul578 = mul nsw i32 2, %conv577
  %add579 = add nsw i32 %conv576, %mul578
  %262 = load i8, i8* %P_E, align 1
  %conv580 = zext i8 %262 to i32
  %add581 = add nsw i32 %add579, %conv580
  %add582 = add nsw i32 %add581, 2
  %div583 = sdiv i32 %add582, 4
  %conv584 = trunc i32 %div583 to i8
  %263 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx585 = getelementptr inbounds [4 x i8], [4 x i8]* %263, i64 1
  %arrayidx586 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx585, i64 0, i64 3
  store i8 %conv584, i8* %arrayidx586, align 1
  %264 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx587 = getelementptr inbounds [4 x i8], [4 x i8]* %264, i64 2
  %arrayidx588 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx587, i64 0, i64 1
  store i8 %conv584, i8* %arrayidx588, align 1
  %265 = load i8, i8* %P_D, align 1
  %conv589 = zext i8 %265 to i32
  %266 = load i8, i8* %P_E, align 1
  %conv590 = zext i8 %266 to i32
  %mul591 = mul nsw i32 2, %conv590
  %add592 = add nsw i32 %conv589, %mul591
  %267 = load i8, i8* %P_F, align 1
  %conv593 = zext i8 %267 to i32
  %add594 = add nsw i32 %add592, %conv593
  %add595 = add nsw i32 %add594, 2
  %div596 = sdiv i32 %add595, 4
  %conv597 = trunc i32 %div596 to i8
  %268 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx598 = getelementptr inbounds [4 x i8], [4 x i8]* %268, i64 2
  %arrayidx599 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx598, i64 0, i64 3
  store i8 %conv597, i8* %arrayidx599, align 1
  %269 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx600 = getelementptr inbounds [4 x i8], [4 x i8]* %269, i64 3
  %arrayidx601 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx600, i64 0, i64 1
  store i8 %conv597, i8* %arrayidx601, align 1
  %270 = load i8, i8* %P_E, align 1
  %conv602 = zext i8 %270 to i32
  %271 = load i8, i8* %P_F, align 1
  %conv603 = zext i8 %271 to i32
  %mul604 = mul nsw i32 2, %conv603
  %add605 = add nsw i32 %conv602, %mul604
  %272 = load i8, i8* %P_G, align 1
  %conv606 = zext i8 %272 to i32
  %add607 = add nsw i32 %add605, %conv606
  %add608 = add nsw i32 %add607, 2
  %div609 = sdiv i32 %add608, 4
  %conv610 = trunc i32 %div609 to i8
  %273 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx611 = getelementptr inbounds [4 x i8], [4 x i8]* %273, i64 3
  %arrayidx612 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx611, i64 0, i64 3
  store i8 %conv610, i8* %arrayidx612, align 1
  br label %sw.epilog804

sw.bb613:                                         ; preds = %if.end110
  %274 = load i8, i8* %P_I, align 1
  %conv614 = zext i8 %274 to i32
  %275 = load i8, i8* %P_J, align 1
  %conv615 = zext i8 %275 to i32
  %add616 = add nsw i32 %conv614, %conv615
  %add617 = add nsw i32 %add616, 1
  %div618 = sdiv i32 %add617, 2
  %conv619 = trunc i32 %div618 to i8
  %276 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx620 = getelementptr inbounds [4 x i8], [4 x i8]* %276, i64 0
  %arrayidx621 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx620, i64 0, i64 0
  store i8 %conv619, i8* %arrayidx621, align 1
  %277 = load i8, i8* %P_I, align 1
  %conv622 = zext i8 %277 to i32
  %278 = load i8, i8* %P_J, align 1
  %conv623 = zext i8 %278 to i32
  %mul624 = mul nsw i32 2, %conv623
  %add625 = add nsw i32 %conv622, %mul624
  %279 = load i8, i8* %P_K, align 1
  %conv626 = zext i8 %279 to i32
  %add627 = add nsw i32 %add625, %conv626
  %add628 = add nsw i32 %add627, 2
  %div629 = sdiv i32 %add628, 4
  %conv630 = trunc i32 %div629 to i8
  %280 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx631 = getelementptr inbounds [4 x i8], [4 x i8]* %280, i64 1
  %arrayidx632 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx631, i64 0, i64 0
  store i8 %conv630, i8* %arrayidx632, align 1
  %281 = load i8, i8* %P_J, align 1
  %conv633 = zext i8 %281 to i32
  %282 = load i8, i8* %P_K, align 1
  %conv634 = zext i8 %282 to i32
  %add635 = add nsw i32 %conv633, %conv634
  %add636 = add nsw i32 %add635, 1
  %div637 = sdiv i32 %add636, 2
  %conv638 = trunc i32 %div637 to i8
  %283 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx639 = getelementptr inbounds [4 x i8], [4 x i8]* %283, i64 0
  %arrayidx640 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx639, i64 0, i64 1
  store i8 %conv638, i8* %arrayidx640, align 1
  %284 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx641 = getelementptr inbounds [4 x i8], [4 x i8]* %284, i64 2
  %arrayidx642 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx641, i64 0, i64 0
  store i8 %conv638, i8* %arrayidx642, align 1
  %285 = load i8, i8* %P_J, align 1
  %conv643 = zext i8 %285 to i32
  %286 = load i8, i8* %P_K, align 1
  %conv644 = zext i8 %286 to i32
  %mul645 = mul nsw i32 2, %conv644
  %add646 = add nsw i32 %conv643, %mul645
  %287 = load i8, i8* %P_L, align 1
  %conv647 = zext i8 %287 to i32
  %add648 = add nsw i32 %add646, %conv647
  %add649 = add nsw i32 %add648, 2
  %div650 = sdiv i32 %add649, 4
  %conv651 = trunc i32 %div650 to i8
  %288 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx652 = getelementptr inbounds [4 x i8], [4 x i8]* %288, i64 1
  %arrayidx653 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx652, i64 0, i64 1
  store i8 %conv651, i8* %arrayidx653, align 1
  %289 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx654 = getelementptr inbounds [4 x i8], [4 x i8]* %289, i64 3
  %arrayidx655 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx654, i64 0, i64 0
  store i8 %conv651, i8* %arrayidx655, align 1
  %290 = load i8, i8* %P_K, align 1
  %conv656 = zext i8 %290 to i32
  %291 = load i8, i8* %P_L, align 1
  %conv657 = zext i8 %291 to i32
  %add658 = add nsw i32 %conv656, %conv657
  %add659 = add nsw i32 %add658, 1
  %div660 = sdiv i32 %add659, 2
  %conv661 = trunc i32 %div660 to i8
  %292 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx662 = getelementptr inbounds [4 x i8], [4 x i8]* %292, i64 0
  %arrayidx663 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx662, i64 0, i64 2
  store i8 %conv661, i8* %arrayidx663, align 1
  %293 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx664 = getelementptr inbounds [4 x i8], [4 x i8]* %293, i64 2
  %arrayidx665 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx664, i64 0, i64 1
  store i8 %conv661, i8* %arrayidx665, align 1
  %294 = load i8, i8* %P_K, align 1
  %conv666 = zext i8 %294 to i32
  %295 = load i8, i8* %P_L, align 1
  %conv667 = zext i8 %295 to i32
  %mul668 = mul nsw i32 2, %conv667
  %add669 = add nsw i32 %conv666, %mul668
  %296 = load i8, i8* %P_L, align 1
  %conv670 = zext i8 %296 to i32
  %add671 = add nsw i32 %add669, %conv670
  %add672 = add nsw i32 %add671, 2
  %div673 = sdiv i32 %add672, 4
  %conv674 = trunc i32 %div673 to i8
  %297 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx675 = getelementptr inbounds [4 x i8], [4 x i8]* %297, i64 1
  %arrayidx676 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx675, i64 0, i64 2
  store i8 %conv674, i8* %arrayidx676, align 1
  %298 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx677 = getelementptr inbounds [4 x i8], [4 x i8]* %298, i64 3
  %arrayidx678 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx677, i64 0, i64 1
  store i8 %conv674, i8* %arrayidx678, align 1
  %299 = load i8, i8* %P_L, align 1
  %300 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx679 = getelementptr inbounds [4 x i8], [4 x i8]* %300, i64 3
  %arrayidx680 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx679, i64 0, i64 3
  store i8 %299, i8* %arrayidx680, align 1
  %301 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx681 = getelementptr inbounds [4 x i8], [4 x i8]* %301, i64 2
  %arrayidx682 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx681, i64 0, i64 3
  store i8 %299, i8* %arrayidx682, align 1
  %302 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx683 = getelementptr inbounds [4 x i8], [4 x i8]* %302, i64 2
  %arrayidx684 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx683, i64 0, i64 2
  store i8 %299, i8* %arrayidx684, align 1
  %303 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx685 = getelementptr inbounds [4 x i8], [4 x i8]* %303, i64 0
  %arrayidx686 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx685, i64 0, i64 3
  store i8 %299, i8* %arrayidx686, align 1
  %304 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx687 = getelementptr inbounds [4 x i8], [4 x i8]* %304, i64 1
  %arrayidx688 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx687, i64 0, i64 3
  store i8 %299, i8* %arrayidx688, align 1
  %305 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx689 = getelementptr inbounds [4 x i8], [4 x i8]* %305, i64 3
  %arrayidx690 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx689, i64 0, i64 2
  store i8 %299, i8* %arrayidx690, align 1
  br label %sw.epilog804

sw.bb691:                                         ; preds = %if.end110
  %306 = load i8, i8* %P_X, align 1
  %conv692 = zext i8 %306 to i32
  %307 = load i8, i8* %P_I, align 1
  %conv693 = zext i8 %307 to i32
  %add694 = add nsw i32 %conv692, %conv693
  %add695 = add nsw i32 %add694, 1
  %div696 = sdiv i32 %add695, 2
  %conv697 = trunc i32 %div696 to i8
  %308 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx698 = getelementptr inbounds [4 x i8], [4 x i8]* %308, i64 2
  %arrayidx699 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx698, i64 0, i64 1
  store i8 %conv697, i8* %arrayidx699, align 1
  %309 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx700 = getelementptr inbounds [4 x i8], [4 x i8]* %309, i64 0
  %arrayidx701 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx700, i64 0, i64 0
  store i8 %conv697, i8* %arrayidx701, align 1
  %310 = load i8, i8* %P_I, align 1
  %conv702 = zext i8 %310 to i32
  %311 = load i8, i8* %P_X, align 1
  %conv703 = zext i8 %311 to i32
  %mul704 = mul nsw i32 2, %conv703
  %add705 = add nsw i32 %conv702, %mul704
  %312 = load i8, i8* %P_A, align 1
  %conv706 = zext i8 %312 to i32
  %add707 = add nsw i32 %add705, %conv706
  %add708 = add nsw i32 %add707, 2
  %div709 = sdiv i32 %add708, 4
  %conv710 = trunc i32 %div709 to i8
  %313 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx711 = getelementptr inbounds [4 x i8], [4 x i8]* %313, i64 3
  %arrayidx712 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx711, i64 0, i64 1
  store i8 %conv710, i8* %arrayidx712, align 1
  %314 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx713 = getelementptr inbounds [4 x i8], [4 x i8]* %314, i64 1
  %arrayidx714 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx713, i64 0, i64 0
  store i8 %conv710, i8* %arrayidx714, align 1
  %315 = load i8, i8* %P_X, align 1
  %conv715 = zext i8 %315 to i32
  %316 = load i8, i8* %P_A, align 1
  %conv716 = zext i8 %316 to i32
  %mul717 = mul nsw i32 2, %conv716
  %add718 = add nsw i32 %conv715, %mul717
  %317 = load i8, i8* %P_B, align 1
  %conv719 = zext i8 %317 to i32
  %add720 = add nsw i32 %add718, %conv719
  %add721 = add nsw i32 %add720, 2
  %div722 = sdiv i32 %add721, 4
  %conv723 = trunc i32 %div722 to i8
  %318 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx724 = getelementptr inbounds [4 x i8], [4 x i8]* %318, i64 2
  %arrayidx725 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx724, i64 0, i64 0
  store i8 %conv723, i8* %arrayidx725, align 1
  %319 = load i8, i8* %P_A, align 1
  %conv726 = zext i8 %319 to i32
  %320 = load i8, i8* %P_B, align 1
  %conv727 = zext i8 %320 to i32
  %mul728 = mul nsw i32 2, %conv727
  %add729 = add nsw i32 %conv726, %mul728
  %321 = load i8, i8* %P_C, align 1
  %conv730 = zext i8 %321 to i32
  %add731 = add nsw i32 %add729, %conv730
  %add732 = add nsw i32 %add731, 2
  %div733 = sdiv i32 %add732, 4
  %conv734 = trunc i32 %div733 to i8
  %322 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx735 = getelementptr inbounds [4 x i8], [4 x i8]* %322, i64 3
  %arrayidx736 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx735, i64 0, i64 0
  store i8 %conv734, i8* %arrayidx736, align 1
  %323 = load i8, i8* %P_I, align 1
  %conv737 = zext i8 %323 to i32
  %324 = load i8, i8* %P_J, align 1
  %conv738 = zext i8 %324 to i32
  %add739 = add nsw i32 %conv737, %conv738
  %add740 = add nsw i32 %add739, 1
  %div741 = sdiv i32 %add740, 2
  %conv742 = trunc i32 %div741 to i8
  %325 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx743 = getelementptr inbounds [4 x i8], [4 x i8]* %325, i64 2
  %arrayidx744 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx743, i64 0, i64 2
  store i8 %conv742, i8* %arrayidx744, align 1
  %326 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx745 = getelementptr inbounds [4 x i8], [4 x i8]* %326, i64 0
  %arrayidx746 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx745, i64 0, i64 1
  store i8 %conv742, i8* %arrayidx746, align 1
  %327 = load i8, i8* %P_X, align 1
  %conv747 = zext i8 %327 to i32
  %328 = load i8, i8* %P_I, align 1
  %conv748 = zext i8 %328 to i32
  %mul749 = mul nsw i32 2, %conv748
  %add750 = add nsw i32 %conv747, %mul749
  %329 = load i8, i8* %P_J, align 1
  %conv751 = zext i8 %329 to i32
  %add752 = add nsw i32 %add750, %conv751
  %add753 = add nsw i32 %add752, 2
  %div754 = sdiv i32 %add753, 4
  %conv755 = trunc i32 %div754 to i8
  %330 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx756 = getelementptr inbounds [4 x i8], [4 x i8]* %330, i64 3
  %arrayidx757 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx756, i64 0, i64 2
  store i8 %conv755, i8* %arrayidx757, align 1
  %331 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx758 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 1
  %arrayidx759 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx758, i64 0, i64 1
  store i8 %conv755, i8* %arrayidx759, align 1
  %332 = load i8, i8* %P_J, align 1
  %conv760 = zext i8 %332 to i32
  %333 = load i8, i8* %P_K, align 1
  %conv761 = zext i8 %333 to i32
  %add762 = add nsw i32 %conv760, %conv761
  %add763 = add nsw i32 %add762, 1
  %div764 = sdiv i32 %add763, 2
  %conv765 = trunc i32 %div764 to i8
  %334 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx766 = getelementptr inbounds [4 x i8], [4 x i8]* %334, i64 2
  %arrayidx767 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx766, i64 0, i64 3
  store i8 %conv765, i8* %arrayidx767, align 1
  %335 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx768 = getelementptr inbounds [4 x i8], [4 x i8]* %335, i64 0
  %arrayidx769 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx768, i64 0, i64 2
  store i8 %conv765, i8* %arrayidx769, align 1
  %336 = load i8, i8* %P_I, align 1
  %conv770 = zext i8 %336 to i32
  %337 = load i8, i8* %P_J, align 1
  %conv771 = zext i8 %337 to i32
  %mul772 = mul nsw i32 2, %conv771
  %add773 = add nsw i32 %conv770, %mul772
  %338 = load i8, i8* %P_K, align 1
  %conv774 = zext i8 %338 to i32
  %add775 = add nsw i32 %add773, %conv774
  %add776 = add nsw i32 %add775, 2
  %div777 = sdiv i32 %add776, 4
  %conv778 = trunc i32 %div777 to i8
  %339 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx779 = getelementptr inbounds [4 x i8], [4 x i8]* %339, i64 3
  %arrayidx780 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx779, i64 0, i64 3
  store i8 %conv778, i8* %arrayidx780, align 1
  %340 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx781 = getelementptr inbounds [4 x i8], [4 x i8]* %340, i64 1
  %arrayidx782 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx781, i64 0, i64 2
  store i8 %conv778, i8* %arrayidx782, align 1
  %341 = load i8, i8* %P_K, align 1
  %conv783 = zext i8 %341 to i32
  %342 = load i8, i8* %P_L, align 1
  %conv784 = zext i8 %342 to i32
  %add785 = add nsw i32 %conv783, %conv784
  %add786 = add nsw i32 %add785, 1
  %div787 = sdiv i32 %add786, 2
  %conv788 = trunc i32 %div787 to i8
  %343 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx789 = getelementptr inbounds [4 x i8], [4 x i8]* %343, i64 0
  %arrayidx790 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx789, i64 0, i64 3
  store i8 %conv788, i8* %arrayidx790, align 1
  %344 = load i8, i8* %P_J, align 1
  %conv791 = zext i8 %344 to i32
  %345 = load i8, i8* %P_K, align 1
  %conv792 = zext i8 %345 to i32
  %mul793 = mul nsw i32 2, %conv792
  %add794 = add nsw i32 %conv791, %mul793
  %346 = load i8, i8* %P_L, align 1
  %conv795 = zext i8 %346 to i32
  %add796 = add nsw i32 %add794, %conv795
  %add797 = add nsw i32 %add796, 2
  %div798 = sdiv i32 %add797, 4
  %conv799 = trunc i32 %div798 to i8
  %347 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arrayidx800 = getelementptr inbounds [4 x i8], [4 x i8]* %347, i64 1
  %arrayidx801 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx800, i64 0, i64 3
  store i8 %conv799, i8* %arrayidx801, align 1
  br label %sw.epilog804

sw.default802:                                    ; preds = %if.end110
  %348 = load i8, i8* %predmode.addr, align 1
  %conv803 = zext i8 %348 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i32 0, i32 0), i32 %conv803)
  br label %sw.epilog804

sw.epilog804:                                     ; preds = %sw.default802, %sw.bb691, %sw.bb613, %sw.bb505, %sw.bb394, %sw.bb300, %sw.bb206, %for.end205, %for.end185, %for.end165
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @predict_intra16x16_luma_NonField([4 x [4 x i8]]* %predL, [144 x i8]* %Sluma, i8 zeroext %predmode, i8 zeroext %avaiMode, i32 %startx, i32 %starty) #0 !prof !54 {
entry:
  %predL.addr = alloca [4 x [4 x i8]]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %predmode.addr = alloca i8, align 1
  %avaiMode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %v = alloca [16 x i8], align 16
  %h = alloca [16 x i8], align 16
  %X = alloca i8, align 1
  %sumx = alloca i32, align 4
  %sumy = alloca i32, align 4
  %temp = alloca i32, align 4
  %H = alloca i32, align 4
  %V = alloca i32, align 4
  %a = alloca i32, align 4
  %tmp = alloca i32, align 4
  store [4 x [4 x i8]]* %predL, [4 x [4 x i8]]** %predL.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i8 %predmode, i8* %predmode.addr, align 1
  store i8 %avaiMode, i8* %avaiMode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  %0 = load i8, i8* %avaiMode.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !55

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %for.body, label %for.end, !prof !56

for.body:                                         ; preds = %for.cond
  %2 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %3 = load i32, i32* %startx.addr, align 4
  %sub = sub i32 %3, 1
  %idxprom = zext i32 %sub to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %starty.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add = add i32 %4, %5
  %idxprom2 = zext i32 %add to i64
  %arrayidx3 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %6 = load i8, i8* %arrayidx3, align 1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom4
  store i8 %6, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %if.else
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %9, 16
  br i1 %cmp7, label %for.body9, label %for.end14, !prof !57

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom10
  store i8 -128, i8* %arrayidx11, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  br label %if.end

if.end:                                           ; preds = %for.end14, %for.end
  %12 = load i8, i8* %avaiMode.addr, align 1
  %conv15 = zext i8 %12 to i32
  %rem = srem i32 %conv15, 2
  %tobool16 = icmp ne i32 %rem, 0
  br i1 %tobool16, label %if.then17, label %if.else33, !prof !58

if.then17:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc30, %if.then17
  %13 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %13, 16
  br i1 %cmp19, label %for.body21, label %for.end32, !prof !59

for.body21:                                       ; preds = %for.cond18
  %14 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %15 = load i32, i32* %startx.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add22 = add i32 %15, %16
  %idxprom23 = zext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [144 x i8], [144 x i8]* %14, i64 %idxprom23
  %17 = load i32, i32* %starty.addr, align 4
  %sub25 = sub i32 %17, 1
  %idxprom26 = zext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx24, i64 0, i64 %idxprom26
  %18 = load i8, i8* %arrayidx27, align 1
  %19 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %19 to i64
  %arrayidx29 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom28
  store i8 %18, i8* %arrayidx29, align 1
  br label %for.inc30

for.inc30:                                        ; preds = %for.body21
  %20 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %20, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond18

for.end32:                                        ; preds = %for.cond18
  br label %if.end43

if.else33:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc40, %if.else33
  %21 = load i32, i32* %i, align 4
  %cmp35 = icmp slt i32 %21, 16
  br i1 %cmp35, label %for.body37, label %for.end42, !prof !60

for.body37:                                       ; preds = %for.cond34
  %22 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %arrayidx39 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom38
  store i8 -128, i8* %arrayidx39, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %for.body37
  %23 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %23, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond34

for.end42:                                        ; preds = %for.cond34
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end32
  %24 = load i8, i8* %avaiMode.addr, align 1
  %conv44 = zext i8 %24 to i32
  %cmp45 = icmp eq i32 %conv44, 3
  br i1 %cmp45, label %if.then47, label %if.else54, !prof !61

if.then47:                                        ; preds = %if.end43
  %25 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %26 = load i32, i32* %startx.addr, align 4
  %sub48 = sub i32 %26, 1
  %idxprom49 = zext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [144 x i8], [144 x i8]* %25, i64 %idxprom49
  %27 = load i32, i32* %starty.addr, align 4
  %sub51 = sub i32 %27, 1
  %idxprom52 = zext i32 %sub51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx50, i64 0, i64 %idxprom52
  %28 = load i8, i8* %arrayidx53, align 1
  store i8 %28, i8* %X, align 1
  br label %if.end55

if.else54:                                        ; preds = %if.end43
  store i8 -128, i8* %X, align 1
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then47
  %29 = load i8, i8* %predmode.addr, align 1
  %conv56 = zext i8 %29 to i32
  switch i32 %conv56, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb94
    i32 2, label %sw.bb134
  ], !prof !62

sw.bb:                                            ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc91, %sw.bb
  %30 = load i32, i32* %k, align 4
  %cmp58 = icmp slt i32 %30, 16
  br i1 %cmp58, label %for.body60, label %for.end93, !prof !63

for.body60:                                       ; preds = %for.cond57
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc88, %for.body60
  %31 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %31, 4
  br i1 %cmp62, label %for.body64, label %for.end90, !prof !64

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc85, %for.body64
  %32 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %32, 4
  br i1 %cmp66, label %for.body68, label %for.end87, !prof !65

for.body68:                                       ; preds = %for.cond65
  %33 = load i32, i32* %k, align 4
  %and = and i32 %33, 4
  %cmp69 = icmp ne i32 %and, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul = mul nsw i32 %conv70, 2
  %34 = load i32, i32* %k, align 4
  %and71 = and i32 %34, 1
  %cmp72 = icmp ne i32 %and71, 0
  %conv73 = zext i1 %cmp72 to i32
  %add74 = add nsw i32 %mul, %conv73
  %mul75 = mul nsw i32 %add74, 4
  %35 = load i32, i32* %i, align 4
  %add76 = add nsw i32 %mul75, %35
  store i32 %add76, i32* %x, align 4
  %36 = load i32, i32* %x, align 4
  %idxprom77 = sext i32 %36 to i64
  %arrayidx78 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom77
  %37 = load i8, i8* %arrayidx78, align 1
  %38 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %39 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %39 to i64
  %arrayidx80 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %38, i64 %idxprom79
  %40 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %40 to i64
  %arrayidx82 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx80, i64 0, i64 %idxprom81
  %41 = load i32, i32* %j, align 4
  %idxprom83 = sext i32 %41 to i64
  %arrayidx84 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx82, i64 0, i64 %idxprom83
  store i8 %37, i8* %arrayidx84, align 1
  br label %for.inc85

for.inc85:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc86 = add nsw i32 %42, 1
  store i32 %inc86, i32* %j, align 4
  br label %for.cond65

for.end87:                                        ; preds = %for.cond65
  br label %for.inc88

for.inc88:                                        ; preds = %for.end87
  %43 = load i32, i32* %i, align 4
  %inc89 = add nsw i32 %43, 1
  store i32 %inc89, i32* %i, align 4
  br label %for.cond61

for.end90:                                        ; preds = %for.cond61
  br label %for.inc91

for.inc91:                                        ; preds = %for.end90
  %44 = load i32, i32* %k, align 4
  %inc92 = add nsw i32 %44, 1
  store i32 %inc92, i32* %k, align 4
  br label %for.cond57

for.end93:                                        ; preds = %for.cond57
  br label %sw.epilog402

sw.bb94:                                          ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond95

for.cond95:                                       ; preds = %for.inc131, %sw.bb94
  %45 = load i32, i32* %k, align 4
  %cmp96 = icmp slt i32 %45, 16
  br i1 %cmp96, label %for.body98, label %for.end133, !prof !57

for.body98:                                       ; preds = %for.cond95
  store i32 0, i32* %i, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc128, %for.body98
  %46 = load i32, i32* %i, align 4
  %cmp100 = icmp slt i32 %46, 4
  br i1 %cmp100, label %for.body102, label %for.end130, !prof !66

for.body102:                                      ; preds = %for.cond99
  store i32 0, i32* %j, align 4
  br label %for.cond103

for.cond103:                                      ; preds = %for.inc125, %for.body102
  %47 = load i32, i32* %j, align 4
  %cmp104 = icmp slt i32 %47, 4
  br i1 %cmp104, label %for.body106, label %for.end127, !prof !67

for.body106:                                      ; preds = %for.cond103
  %48 = load i32, i32* %k, align 4
  %and107 = and i32 %48, 8
  %cmp108 = icmp ne i32 %and107, 0
  %conv109 = zext i1 %cmp108 to i32
  %mul110 = mul nsw i32 %conv109, 2
  %49 = load i32, i32* %k, align 4
  %and111 = and i32 %49, 2
  %cmp112 = icmp ne i32 %and111, 0
  %conv113 = zext i1 %cmp112 to i32
  %add114 = add nsw i32 %mul110, %conv113
  %mul115 = mul nsw i32 %add114, 4
  %50 = load i32, i32* %j, align 4
  %add116 = add nsw i32 %mul115, %50
  store i32 %add116, i32* %y, align 4
  %51 = load i32, i32* %y, align 4
  %idxprom117 = sext i32 %51 to i64
  %arrayidx118 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom117
  %52 = load i8, i8* %arrayidx118, align 1
  %53 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %54 = load i32, i32* %k, align 4
  %idxprom119 = sext i32 %54 to i64
  %arrayidx120 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %53, i64 %idxprom119
  %55 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %55 to i64
  %arrayidx122 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx120, i64 0, i64 %idxprom121
  %56 = load i32, i32* %j, align 4
  %idxprom123 = sext i32 %56 to i64
  %arrayidx124 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx122, i64 0, i64 %idxprom123
  store i8 %52, i8* %arrayidx124, align 1
  br label %for.inc125

for.inc125:                                       ; preds = %for.body106
  %57 = load i32, i32* %j, align 4
  %inc126 = add nsw i32 %57, 1
  store i32 %inc126, i32* %j, align 4
  br label %for.cond103

for.end127:                                       ; preds = %for.cond103
  br label %for.inc128

for.inc128:                                       ; preds = %for.end127
  %58 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %58, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond99

for.end130:                                       ; preds = %for.cond99
  br label %for.inc131

for.inc131:                                       ; preds = %for.end130
  %59 = load i32, i32* %k, align 4
  %inc132 = add nsw i32 %59, 1
  store i32 %inc132, i32* %k, align 4
  br label %for.cond95

for.end133:                                       ; preds = %for.cond95
  br label %sw.epilog402

sw.bb134:                                         ; preds = %if.end55
  store i32 0, i32* %sumx, align 4
  store i32 0, i32* %sumy, align 4
  %60 = load i8, i8* %avaiMode.addr, align 1
  %conv135 = zext i8 %60 to i32
  %rem136 = srem i32 %conv135, 2
  %tobool137 = icmp ne i32 %rem136, 0
  br i1 %tobool137, label %if.then138, label %if.end150, !prof !68

if.then138:                                       ; preds = %sw.bb134
  store i32 0, i32* %x, align 4
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc147, %if.then138
  %61 = load i32, i32* %x, align 4
  %cmp140 = icmp slt i32 %61, 16
  br i1 %cmp140, label %for.body142, label %for.end149, !prof !69

for.body142:                                      ; preds = %for.cond139
  %62 = load i32, i32* %sumx, align 4
  %63 = load i32, i32* %x, align 4
  %idxprom143 = sext i32 %63 to i64
  %arrayidx144 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 %idxprom143
  %64 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %64 to i32
  %add146 = add nsw i32 %62, %conv145
  store i32 %add146, i32* %sumx, align 4
  br label %for.inc147

for.inc147:                                       ; preds = %for.body142
  %65 = load i32, i32* %x, align 4
  %inc148 = add nsw i32 %65, 1
  store i32 %inc148, i32* %x, align 4
  br label %for.cond139

for.end149:                                       ; preds = %for.cond139
  br label %if.end150

if.end150:                                        ; preds = %for.end149, %sw.bb134
  %66 = load i8, i8* %avaiMode.addr, align 1
  %conv151 = zext i8 %66 to i32
  %div152 = sdiv i32 %conv151, 2
  %tobool153 = icmp ne i32 %div152, 0
  br i1 %tobool153, label %if.then154, label %if.end166, !prof !70

if.then154:                                       ; preds = %if.end150
  store i32 0, i32* %y, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc163, %if.then154
  %67 = load i32, i32* %y, align 4
  %cmp156 = icmp slt i32 %67, 16
  br i1 %cmp156, label %for.body158, label %for.end165, !prof !71

for.body158:                                      ; preds = %for.cond155
  %68 = load i32, i32* %sumy, align 4
  %69 = load i32, i32* %y, align 4
  %idxprom159 = sext i32 %69 to i64
  %arrayidx160 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 %idxprom159
  %70 = load i8, i8* %arrayidx160, align 1
  %conv161 = zext i8 %70 to i32
  %add162 = add nsw i32 %68, %conv161
  store i32 %add162, i32* %sumy, align 4
  br label %for.inc163

for.inc163:                                       ; preds = %for.body158
  %71 = load i32, i32* %y, align 4
  %inc164 = add nsw i32 %71, 1
  store i32 %inc164, i32* %y, align 4
  br label %for.cond155

for.end165:                                       ; preds = %for.cond155
  br label %if.end166

if.end166:                                        ; preds = %for.end165, %if.end150
  store i32 0, i32* %temp, align 4
  %72 = load i8, i8* %avaiMode.addr, align 1
  %conv167 = zext i8 %72 to i32
  switch i32 %conv167, label %sw.epilog [
    i32 3, label %sw.bb168
    i32 2, label %sw.bb171
    i32 1, label %sw.bb174
    i32 0, label %sw.bb177
  ], !prof !72

sw.bb168:                                         ; preds = %if.end166
  %73 = load i32, i32* %sumx, align 4
  %74 = load i32, i32* %sumy, align 4
  %add169 = add nsw i32 %73, %74
  %add170 = add nsw i32 %add169, 16
  %shr = ashr i32 %add170, 5
  store i32 %shr, i32* %temp, align 4
  br label %sw.epilog

sw.bb171:                                         ; preds = %if.end166
  %75 = load i32, i32* %sumy, align 4
  %add172 = add nsw i32 %75, 8
  %shr173 = ashr i32 %add172, 4
  store i32 %shr173, i32* %temp, align 4
  br label %sw.epilog

sw.bb174:                                         ; preds = %if.end166
  %76 = load i32, i32* %sumx, align 4
  %add175 = add nsw i32 %76, 8
  %shr176 = ashr i32 %add175, 4
  store i32 %shr176, i32* %temp, align 4
  br label %sw.epilog

sw.bb177:                                         ; preds = %if.end166
  store i32 128, i32* %temp, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb177, %if.end166, %sw.bb174, %sw.bb171, %sw.bb168
  store i32 0, i32* %k, align 4
  br label %for.cond178

for.cond178:                                      ; preds = %for.inc203, %sw.epilog
  %77 = load i32, i32* %k, align 4
  %cmp179 = icmp slt i32 %77, 16
  br i1 %cmp179, label %for.body181, label %for.end205, !prof !69

for.body181:                                      ; preds = %for.cond178
  store i32 0, i32* %i, align 4
  br label %for.cond182

for.cond182:                                      ; preds = %for.inc200, %for.body181
  %78 = load i32, i32* %i, align 4
  %cmp183 = icmp slt i32 %78, 4
  br i1 %cmp183, label %for.body185, label %for.end202, !prof !73

for.body185:                                      ; preds = %for.cond182
  store i32 0, i32* %j, align 4
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc197, %for.body185
  %79 = load i32, i32* %j, align 4
  %cmp187 = icmp slt i32 %79, 4
  br i1 %cmp187, label %for.body189, label %for.end199, !prof !74

for.body189:                                      ; preds = %for.cond186
  %80 = load i32, i32* %temp, align 4
  %conv190 = trunc i32 %80 to i8
  %81 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %82 = load i32, i32* %k, align 4
  %idxprom191 = sext i32 %82 to i64
  %arrayidx192 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %81, i64 %idxprom191
  %83 = load i32, i32* %i, align 4
  %idxprom193 = sext i32 %83 to i64
  %arrayidx194 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx192, i64 0, i64 %idxprom193
  %84 = load i32, i32* %j, align 4
  %idxprom195 = sext i32 %84 to i64
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx194, i64 0, i64 %idxprom195
  store i8 %conv190, i8* %arrayidx196, align 1
  br label %for.inc197

for.inc197:                                       ; preds = %for.body189
  %85 = load i32, i32* %j, align 4
  %inc198 = add nsw i32 %85, 1
  store i32 %inc198, i32* %j, align 4
  br label %for.cond186

for.end199:                                       ; preds = %for.cond186
  br label %for.inc200

for.inc200:                                       ; preds = %for.end199
  %86 = load i32, i32* %i, align 4
  %inc201 = add nsw i32 %86, 1
  store i32 %inc201, i32* %i, align 4
  br label %for.cond182

for.end202:                                       ; preds = %for.cond182
  br label %for.inc203

for.inc203:                                       ; preds = %for.end202
  %87 = load i32, i32* %k, align 4
  %inc204 = add nsw i32 %87, 1
  store i32 %inc204, i32* %k, align 4
  br label %for.cond178

for.end205:                                       ; preds = %for.cond178
  br label %sw.epilog402

sw.default:                                       ; preds = %if.end55
  %arrayidx206 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 8
  %88 = load i8, i8* %arrayidx206, align 8
  %conv207 = zext i8 %88 to i32
  %arrayidx208 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 6
  %89 = load i8, i8* %arrayidx208, align 2
  %conv209 = zext i8 %89 to i32
  %sub210 = sub nsw i32 %conv207, %conv209
  %arrayidx211 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 9
  %90 = load i8, i8* %arrayidx211, align 1
  %conv212 = zext i8 %90 to i32
  %arrayidx213 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 5
  %91 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %91 to i32
  %sub215 = sub nsw i32 %conv212, %conv214
  %mul216 = mul nsw i32 2, %sub215
  %add217 = add nsw i32 %sub210, %mul216
  %arrayidx218 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 10
  %92 = load i8, i8* %arrayidx218, align 2
  %conv219 = zext i8 %92 to i32
  %arrayidx220 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 4
  %93 = load i8, i8* %arrayidx220, align 4
  %conv221 = zext i8 %93 to i32
  %sub222 = sub nsw i32 %conv219, %conv221
  %mul223 = mul nsw i32 3, %sub222
  %add224 = add nsw i32 %add217, %mul223
  %arrayidx225 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 11
  %94 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %94 to i32
  %arrayidx227 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 3
  %95 = load i8, i8* %arrayidx227, align 1
  %conv228 = zext i8 %95 to i32
  %sub229 = sub nsw i32 %conv226, %conv228
  %mul230 = mul nsw i32 4, %sub229
  %add231 = add nsw i32 %add224, %mul230
  %arrayidx232 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 12
  %96 = load i8, i8* %arrayidx232, align 4
  %conv233 = zext i8 %96 to i32
  %arrayidx234 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 2
  %97 = load i8, i8* %arrayidx234, align 2
  %conv235 = zext i8 %97 to i32
  %sub236 = sub nsw i32 %conv233, %conv235
  %mul237 = mul nsw i32 5, %sub236
  %add238 = add nsw i32 %add231, %mul237
  %arrayidx239 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 13
  %98 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %98 to i32
  %arrayidx241 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 1
  %99 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %99 to i32
  %sub243 = sub nsw i32 %conv240, %conv242
  %mul244 = mul nsw i32 6, %sub243
  %add245 = add nsw i32 %add238, %mul244
  %arrayidx246 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 14
  %100 = load i8, i8* %arrayidx246, align 2
  %conv247 = zext i8 %100 to i32
  %arrayidx248 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 0
  %101 = load i8, i8* %arrayidx248, align 16
  %conv249 = zext i8 %101 to i32
  %sub250 = sub nsw i32 %conv247, %conv249
  %mul251 = mul nsw i32 7, %sub250
  %add252 = add nsw i32 %add245, %mul251
  %arrayidx253 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 15
  %102 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %102 to i32
  %103 = load i8, i8* %X, align 1
  %conv255 = zext i8 %103 to i32
  %sub256 = sub nsw i32 %conv254, %conv255
  %mul257 = mul nsw i32 8, %sub256
  %add258 = add nsw i32 %add252, %mul257
  store i32 %add258, i32* %H, align 4
  %arrayidx259 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 8
  %104 = load i8, i8* %arrayidx259, align 8
  %conv260 = zext i8 %104 to i32
  %arrayidx261 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 6
  %105 = load i8, i8* %arrayidx261, align 2
  %conv262 = zext i8 %105 to i32
  %sub263 = sub nsw i32 %conv260, %conv262
  %arrayidx264 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 9
  %106 = load i8, i8* %arrayidx264, align 1
  %conv265 = zext i8 %106 to i32
  %arrayidx266 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 5
  %107 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %107 to i32
  %sub268 = sub nsw i32 %conv265, %conv267
  %mul269 = mul nsw i32 2, %sub268
  %add270 = add nsw i32 %sub263, %mul269
  %arrayidx271 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 10
  %108 = load i8, i8* %arrayidx271, align 2
  %conv272 = zext i8 %108 to i32
  %arrayidx273 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 4
  %109 = load i8, i8* %arrayidx273, align 4
  %conv274 = zext i8 %109 to i32
  %sub275 = sub nsw i32 %conv272, %conv274
  %mul276 = mul nsw i32 3, %sub275
  %add277 = add nsw i32 %add270, %mul276
  %arrayidx278 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 11
  %110 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %110 to i32
  %arrayidx280 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 3
  %111 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %111 to i32
  %sub282 = sub nsw i32 %conv279, %conv281
  %mul283 = mul nsw i32 4, %sub282
  %add284 = add nsw i32 %add277, %mul283
  %arrayidx285 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 12
  %112 = load i8, i8* %arrayidx285, align 4
  %conv286 = zext i8 %112 to i32
  %arrayidx287 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 2
  %113 = load i8, i8* %arrayidx287, align 2
  %conv288 = zext i8 %113 to i32
  %sub289 = sub nsw i32 %conv286, %conv288
  %mul290 = mul nsw i32 5, %sub289
  %add291 = add nsw i32 %add284, %mul290
  %arrayidx292 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 13
  %114 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %114 to i32
  %arrayidx294 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 1
  %115 = load i8, i8* %arrayidx294, align 1
  %conv295 = zext i8 %115 to i32
  %sub296 = sub nsw i32 %conv293, %conv295
  %mul297 = mul nsw i32 6, %sub296
  %add298 = add nsw i32 %add291, %mul297
  %arrayidx299 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 14
  %116 = load i8, i8* %arrayidx299, align 2
  %conv300 = zext i8 %116 to i32
  %arrayidx301 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 0
  %117 = load i8, i8* %arrayidx301, align 16
  %conv302 = zext i8 %117 to i32
  %sub303 = sub nsw i32 %conv300, %conv302
  %mul304 = mul nsw i32 7, %sub303
  %add305 = add nsw i32 %add298, %mul304
  %arrayidx306 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 15
  %118 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %118 to i32
  %119 = load i8, i8* %X, align 1
  %conv308 = zext i8 %119 to i32
  %sub309 = sub nsw i32 %conv307, %conv308
  %mul310 = mul nsw i32 8, %sub309
  %add311 = add nsw i32 %add305, %mul310
  store i32 %add311, i32* %V, align 4
  %120 = load i32, i32* %H, align 4
  %mul312 = mul nsw i32 5, %120
  %add313 = add nsw i32 %mul312, 32
  %shr314 = ashr i32 %add313, 6
  store i32 %shr314, i32* %H, align 4
  %121 = load i32, i32* %V, align 4
  %mul315 = mul nsw i32 5, %121
  %add316 = add nsw i32 %mul315, 32
  %shr317 = ashr i32 %add316, 6
  store i32 %shr317, i32* %V, align 4
  %arrayidx318 = getelementptr inbounds [16 x i8], [16 x i8]* %v, i64 0, i64 15
  %122 = load i8, i8* %arrayidx318, align 1
  %conv319 = zext i8 %122 to i32
  %arrayidx320 = getelementptr inbounds [16 x i8], [16 x i8]* %h, i64 0, i64 15
  %123 = load i8, i8* %arrayidx320, align 1
  %conv321 = zext i8 %123 to i32
  %add322 = add nsw i32 %conv319, %conv321
  %mul323 = mul nsw i32 16, %add322
  store i32 %mul323, i32* %a, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond324

for.cond324:                                      ; preds = %for.inc399, %sw.default
  %124 = load i32, i32* %k, align 4
  %cmp325 = icmp slt i32 %124, 16
  br i1 %cmp325, label %for.body327, label %for.end401, !prof !75

for.body327:                                      ; preds = %for.cond324
  store i32 0, i32* %i, align 4
  br label %for.cond328

for.cond328:                                      ; preds = %for.inc396, %for.body327
  %125 = load i32, i32* %i, align 4
  %cmp329 = icmp slt i32 %125, 4
  br i1 %cmp329, label %for.body331, label %for.end398, !prof !76

for.body331:                                      ; preds = %for.cond328
  store i32 0, i32* %j, align 4
  br label %for.cond332

for.cond332:                                      ; preds = %for.inc393, %for.body331
  %126 = load i32, i32* %j, align 4
  %cmp333 = icmp slt i32 %126, 4
  br i1 %cmp333, label %for.body335, label %for.end395, !prof !77

for.body335:                                      ; preds = %for.cond332
  %127 = load i32, i32* %k, align 4
  %and336 = and i32 %127, 4
  %cmp337 = icmp ne i32 %and336, 0
  %conv338 = zext i1 %cmp337 to i32
  %mul339 = mul nsw i32 %conv338, 2
  %128 = load i32, i32* %k, align 4
  %and340 = and i32 %128, 1
  %cmp341 = icmp ne i32 %and340, 0
  %conv342 = zext i1 %cmp341 to i32
  %add343 = add nsw i32 %mul339, %conv342
  %mul344 = mul nsw i32 %add343, 4
  %129 = load i32, i32* %i, align 4
  %add345 = add nsw i32 %mul344, %129
  store i32 %add345, i32* %x, align 4
  %130 = load i32, i32* %k, align 4
  %and346 = and i32 %130, 8
  %cmp347 = icmp ne i32 %and346, 0
  %conv348 = zext i1 %cmp347 to i32
  %mul349 = mul nsw i32 %conv348, 2
  %131 = load i32, i32* %k, align 4
  %and350 = and i32 %131, 2
  %cmp351 = icmp ne i32 %and350, 0
  %conv352 = zext i1 %cmp351 to i32
  %add353 = add nsw i32 %mul349, %conv352
  %mul354 = mul nsw i32 %add353, 4
  %132 = load i32, i32* %j, align 4
  %add355 = add nsw i32 %mul354, %132
  store i32 %add355, i32* %y, align 4
  %133 = load i32, i32* %a, align 4
  %134 = load i32, i32* %H, align 4
  %135 = load i32, i32* %x, align 4
  %sub356 = sub nsw i32 %135, 7
  %mul357 = mul nsw i32 %134, %sub356
  %add358 = add nsw i32 %133, %mul357
  %136 = load i32, i32* %V, align 4
  %137 = load i32, i32* %y, align 4
  %sub359 = sub nsw i32 %137, 7
  %mul360 = mul nsw i32 %136, %sub359
  %add361 = add nsw i32 %add358, %mul360
  %add362 = add nsw i32 %add361, 16
  %shr363 = ashr i32 %add362, 5
  store i32 %shr363, i32* %tmp, align 4
  %138 = load i32, i32* %tmp, align 4
  %cmp364 = icmp slt i32 %138, 0
  br i1 %cmp364, label %if.then366, label %if.else373, !prof !78

if.then366:                                       ; preds = %for.body335
  %139 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %140 = load i32, i32* %k, align 4
  %idxprom367 = sext i32 %140 to i64
  %arrayidx368 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %139, i64 %idxprom367
  %141 = load i32, i32* %i, align 4
  %idxprom369 = sext i32 %141 to i64
  %arrayidx370 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx368, i64 0, i64 %idxprom369
  %142 = load i32, i32* %j, align 4
  %idxprom371 = sext i32 %142 to i64
  %arrayidx372 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 %idxprom371
  store i8 0, i8* %arrayidx372, align 1
  br label %if.end392

if.else373:                                       ; preds = %for.body335
  %143 = load i32, i32* %tmp, align 4
  %cmp374 = icmp sgt i32 %143, 255
  br i1 %cmp374, label %if.then376, label %if.else383, !prof !78

if.then376:                                       ; preds = %if.else373
  %144 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %145 = load i32, i32* %k, align 4
  %idxprom377 = sext i32 %145 to i64
  %arrayidx378 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %144, i64 %idxprom377
  %146 = load i32, i32* %i, align 4
  %idxprom379 = sext i32 %146 to i64
  %arrayidx380 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx378, i64 0, i64 %idxprom379
  %147 = load i32, i32* %j, align 4
  %idxprom381 = sext i32 %147 to i64
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx380, i64 0, i64 %idxprom381
  store i8 -1, i8* %arrayidx382, align 1
  br label %if.end391

if.else383:                                       ; preds = %if.else373
  %148 = load i32, i32* %tmp, align 4
  %conv384 = trunc i32 %148 to i8
  %149 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predL.addr, align 8
  %150 = load i32, i32* %k, align 4
  %idxprom385 = sext i32 %150 to i64
  %arrayidx386 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %149, i64 %idxprom385
  %151 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %151 to i64
  %arrayidx388 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx386, i64 0, i64 %idxprom387
  %152 = load i32, i32* %j, align 4
  %idxprom389 = sext i32 %152 to i64
  %arrayidx390 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx388, i64 0, i64 %idxprom389
  store i8 %conv384, i8* %arrayidx390, align 1
  br label %if.end391

if.end391:                                        ; preds = %if.else383, %if.then376
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.then366
  br label %for.inc393

for.inc393:                                       ; preds = %if.end392
  %153 = load i32, i32* %j, align 4
  %inc394 = add nsw i32 %153, 1
  store i32 %inc394, i32* %j, align 4
  br label %for.cond332

for.end395:                                       ; preds = %for.cond332
  br label %for.inc396

for.inc396:                                       ; preds = %for.end395
  %154 = load i32, i32* %i, align 4
  %inc397 = add nsw i32 %154, 1
  store i32 %inc397, i32* %i, align 4
  br label %for.cond328

for.end398:                                       ; preds = %for.cond328
  br label %for.inc399

for.inc399:                                       ; preds = %for.end398
  %155 = load i32, i32* %k, align 4
  %inc400 = add nsw i32 %155, 1
  store i32 %inc400, i32* %k, align 4
  br label %for.cond324

for.end401:                                       ; preds = %for.cond324
  br label %sw.epilog402

sw.epilog402:                                     ; preds = %for.end401, %for.end205, %for.end133, %for.end93
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @prediction_Chroma([4 x [4 x i8]]* %predC, [72 x i8]* %SChroma, i8 zeroext %avaimode, i32 %startx, i32 %starty, i8 zeroext %pred_mod) #0 !prof !79 {
entry:
  %predC.addr = alloca [4 x [4 x i8]]*, align 8
  %SChroma.addr = alloca [72 x i8]*, align 8
  %avaimode.addr = alloca i8, align 1
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %pred_mod.addr = alloca i8, align 1
  %v = alloca [8 x i8], align 1
  %h = alloca [8 x i8], align 1
  %x = alloca i8, align 1
  %y = alloca i8, align 1
  %X = alloca i8, align 1
  %H = alloca i32, align 4
  %V = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %a = alloca i32, align 4
  %temp = alloca i32, align 4
  %js1 = alloca i32, align 4
  %js2 = alloca i32, align 4
  %js3 = alloca i32, align 4
  %js0 = alloca i32, align 4
  %temp103 = alloca [2 x [2 x i32]], align 16
  %i165 = alloca i32, align 4
  %j166 = alloca i32, align 4
  store [4 x [4 x i8]]* %predC, [4 x [4 x i8]]** %predC.addr, align 8
  store [72 x i8]* %SChroma, [72 x i8]** %SChroma.addr, align 8
  store i8 %avaimode, i8* %avaimode.addr, align 1
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %pred_mod, i8* %pred_mod.addr, align 1
  %0 = load i8, i8* %avaimode.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !80

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end, !prof !81

for.body:                                         ; preds = %for.cond
  %2 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %3 = load i32, i32* %startx.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [72 x i8], [72 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %starty.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, %5
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %6 = load i8, i8* %arrayidx3, align 1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom4
  store i8 %6, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc12, %if.else
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %9, 8
  br i1 %cmp7, label %for.body9, label %for.end14, !prof !82

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom10
  store i8 -128, i8* %arrayidx11, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond6

for.end14:                                        ; preds = %for.cond6
  br label %if.end

if.end:                                           ; preds = %for.end14, %for.end
  %12 = load i8, i8* %avaimode.addr, align 1
  %conv15 = zext i8 %12 to i32
  %rem = srem i32 %conv15, 2
  %tobool16 = icmp ne i32 %rem, 0
  br i1 %tobool16, label %if.then17, label %if.else33, !prof !83

if.then17:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc30, %if.then17
  %13 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %13, 8
  br i1 %cmp19, label %for.body21, label %for.end32, !prof !84

for.body21:                                       ; preds = %for.cond18
  %14 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %15 = load i32, i32* %startx.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %15, %16
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [72 x i8], [72 x i8]* %14, i64 %idxprom23
  %17 = load i32, i32* %starty.addr, align 4
  %sub25 = sub nsw i32 %17, 1
  %idxprom26 = sext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx24, i64 0, i64 %idxprom26
  %18 = load i8, i8* %arrayidx27, align 1
  %19 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %19 to i64
  %arrayidx29 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom28
  store i8 %18, i8* %arrayidx29, align 1
  br label %for.inc30

for.inc30:                                        ; preds = %for.body21
  %20 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %20, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond18

for.end32:                                        ; preds = %for.cond18
  br label %if.end43

if.else33:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc40, %if.else33
  %21 = load i32, i32* %i, align 4
  %cmp35 = icmp slt i32 %21, 8
  br i1 %cmp35, label %for.body37, label %for.end42, !prof !83

for.body37:                                       ; preds = %for.cond34
  %22 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %22 to i64
  %arrayidx39 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom38
  store i8 -128, i8* %arrayidx39, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %for.body37
  %23 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %23, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond34

for.end42:                                        ; preds = %for.cond34
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end32
  %24 = load i8, i8* %avaimode.addr, align 1
  %conv44 = zext i8 %24 to i32
  %cmp45 = icmp eq i32 %conv44, 3
  br i1 %cmp45, label %if.then47, label %if.else54, !prof !85

if.then47:                                        ; preds = %if.end43
  %25 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %26 = load i32, i32* %startx.addr, align 4
  %sub48 = sub nsw i32 %26, 1
  %idxprom49 = sext i32 %sub48 to i64
  %arrayidx50 = getelementptr inbounds [72 x i8], [72 x i8]* %25, i64 %idxprom49
  %27 = load i32, i32* %starty.addr, align 4
  %sub51 = sub nsw i32 %27, 1
  %idxprom52 = sext i32 %sub51 to i64
  %arrayidx53 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx50, i64 0, i64 %idxprom52
  %28 = load i8, i8* %arrayidx53, align 1
  store i8 %28, i8* %X, align 1
  br label %if.end55

if.else54:                                        ; preds = %if.end43
  store i8 -128, i8* %X, align 1
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then47
  %29 = load i8, i8* %pred_mod.addr, align 1
  %conv56 = zext i8 %29 to i32
  switch i32 %conv56, label %sw.default275 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb209
    i32 2, label %sw.bb242
  ], !prof !86

sw.bb:                                            ; preds = %if.end55
  store i32 0, i32* %js0, align 4
  store i32 0, i32* %js1, align 4
  store i32 0, i32* %js2, align 4
  store i32 0, i32* %js3, align 4
  %30 = load i8, i8* %avaimode.addr, align 1
  %conv57 = zext i8 %30 to i32
  %rem58 = srem i32 %conv57, 2
  %tobool59 = icmp ne i32 %rem58, 0
  br i1 %tobool59, label %if.then60, label %if.end79, !prof !87

if.then60:                                        ; preds = %sw.bb
  store i8 0, i8* %x, align 1
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc76, %if.then60
  %31 = load i8, i8* %x, align 1
  %conv62 = zext i8 %31 to i32
  %cmp63 = icmp slt i32 %conv62, 4
  br i1 %cmp63, label %for.body65, label %for.end78, !prof !88

for.body65:                                       ; preds = %for.cond61
  %32 = load i8, i8* %x, align 1
  %idxprom66 = zext i8 %32 to i64
  %arrayidx67 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom66
  %33 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %33 to i32
  %34 = load i32, i32* %js0, align 4
  %add69 = add nsw i32 %34, %conv68
  store i32 %add69, i32* %js0, align 4
  %35 = load i8, i8* %x, align 1
  %conv70 = zext i8 %35 to i32
  %add71 = add nsw i32 %conv70, 4
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom72
  %36 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %36 to i32
  %37 = load i32, i32* %js1, align 4
  %add75 = add nsw i32 %37, %conv74
  store i32 %add75, i32* %js1, align 4
  br label %for.inc76

for.inc76:                                        ; preds = %for.body65
  %38 = load i8, i8* %x, align 1
  %inc77 = add i8 %38, 1
  store i8 %inc77, i8* %x, align 1
  br label %for.cond61

for.end78:                                        ; preds = %for.cond61
  br label %if.end79

if.end79:                                         ; preds = %for.end78, %sw.bb
  %39 = load i8, i8* %avaimode.addr, align 1
  %conv80 = zext i8 %39 to i32
  %div81 = sdiv i32 %conv80, 2
  %tobool82 = icmp ne i32 %div81, 0
  br i1 %tobool82, label %if.then83, label %if.end102, !prof !89

if.then83:                                        ; preds = %if.end79
  store i8 0, i8* %y, align 1
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc99, %if.then83
  %40 = load i8, i8* %y, align 1
  %conv85 = zext i8 %40 to i32
  %cmp86 = icmp slt i32 %conv85, 4
  br i1 %cmp86, label %for.body88, label %for.end101, !prof !90

for.body88:                                       ; preds = %for.cond84
  %41 = load i8, i8* %y, align 1
  %idxprom89 = zext i8 %41 to i64
  %arrayidx90 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom89
  %42 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %42 to i32
  %43 = load i32, i32* %js2, align 4
  %add92 = add nsw i32 %43, %conv91
  store i32 %add92, i32* %js2, align 4
  %44 = load i8, i8* %y, align 1
  %conv93 = zext i8 %44 to i32
  %add94 = add nsw i32 %conv93, 4
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom95
  %45 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %45 to i32
  %46 = load i32, i32* %js3, align 4
  %add98 = add nsw i32 %46, %conv97
  store i32 %add98, i32* %js3, align 4
  br label %for.inc99

for.inc99:                                        ; preds = %for.body88
  %47 = load i8, i8* %y, align 1
  %inc100 = add i8 %47, 1
  store i8 %inc100, i8* %y, align 1
  br label %for.cond84

for.end101:                                       ; preds = %for.cond84
  br label %if.end102

if.end102:                                        ; preds = %for.end101, %if.end79
  %48 = load i8, i8* %avaimode.addr, align 1
  %conv104 = zext i8 %48 to i32
  switch i32 %conv104, label %sw.default [
    i32 0, label %sw.bb105
    i32 1, label %sw.bb114
    i32 2, label %sw.bb130
  ], !prof !91

sw.bb105:                                         ; preds = %if.end102
  %arrayidx106 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx107 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx106, i64 0, i64 0
  store i32 128, i32* %arrayidx107, align 16
  %arrayidx108 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx109 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx108, i64 0, i64 1
  store i32 128, i32* %arrayidx109, align 4
  %arrayidx110 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx110, i64 0, i64 0
  store i32 128, i32* %arrayidx111, align 8
  %arrayidx112 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx113 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx112, i64 0, i64 1
  store i32 128, i32* %arrayidx113, align 4
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.end102
  %49 = load i32, i32* %js0, align 4
  %add115 = add nsw i32 %49, 2
  %shr = ashr i32 %add115, 2
  %arrayidx116 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx117 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx116, i64 0, i64 0
  store i32 %shr, i32* %arrayidx117, align 16
  %50 = load i32, i32* %js1, align 4
  %add118 = add nsw i32 %50, 2
  %shr119 = ashr i32 %add118, 2
  %arrayidx120 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx120, i64 0, i64 1
  store i32 %shr119, i32* %arrayidx121, align 4
  %51 = load i32, i32* %js0, align 4
  %add122 = add nsw i32 %51, 2
  %shr123 = ashr i32 %add122, 2
  %arrayidx124 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx125 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx124, i64 0, i64 0
  store i32 %shr123, i32* %arrayidx125, align 8
  %52 = load i32, i32* %js1, align 4
  %add126 = add nsw i32 %52, 2
  %shr127 = ashr i32 %add126, 2
  %arrayidx128 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx129 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx128, i64 0, i64 1
  store i32 %shr127, i32* %arrayidx129, align 4
  br label %sw.epilog

sw.bb130:                                         ; preds = %if.end102
  %53 = load i32, i32* %js2, align 4
  %add131 = add nsw i32 %53, 2
  %shr132 = ashr i32 %add131, 2
  %arrayidx133 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx134 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx133, i64 0, i64 0
  store i32 %shr132, i32* %arrayidx134, align 16
  %54 = load i32, i32* %js2, align 4
  %add135 = add nsw i32 %54, 2
  %shr136 = ashr i32 %add135, 2
  %arrayidx137 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i64 0, i64 1
  store i32 %shr136, i32* %arrayidx138, align 4
  %55 = load i32, i32* %js3, align 4
  %add139 = add nsw i32 %55, 2
  %shr140 = ashr i32 %add139, 2
  %arrayidx141 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx142 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx141, i64 0, i64 0
  store i32 %shr140, i32* %arrayidx142, align 8
  %56 = load i32, i32* %js3, align 4
  %add143 = add nsw i32 %56, 2
  %shr144 = ashr i32 %add143, 2
  %arrayidx145 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx146 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx145, i64 0, i64 1
  store i32 %shr144, i32* %arrayidx146, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end102
  %57 = load i32, i32* %js2, align 4
  %58 = load i32, i32* %js0, align 4
  %add147 = add nsw i32 %57, %58
  %add148 = add nsw i32 %add147, 4
  %shr149 = ashr i32 %add148, 3
  %arrayidx150 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx151 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx150, i64 0, i64 0
  store i32 %shr149, i32* %arrayidx151, align 16
  %59 = load i32, i32* %js1, align 4
  %add152 = add nsw i32 %59, 2
  %shr153 = ashr i32 %add152, 2
  %arrayidx154 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 0
  %arrayidx155 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx154, i64 0, i64 1
  store i32 %shr153, i32* %arrayidx155, align 4
  %60 = load i32, i32* %js3, align 4
  %add156 = add nsw i32 %60, 2
  %shr157 = ashr i32 %add156, 2
  %arrayidx158 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx159 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx158, i64 0, i64 0
  store i32 %shr157, i32* %arrayidx159, align 8
  %61 = load i32, i32* %js1, align 4
  %62 = load i32, i32* %js3, align 4
  %add160 = add nsw i32 %61, %62
  %add161 = add nsw i32 %add160, 4
  %shr162 = ashr i32 %add161, 3
  %arrayidx163 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 1
  %arrayidx164 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx163, i64 0, i64 1
  store i32 %shr162, i32* %arrayidx164, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb130, %sw.bb114, %sw.bb105
  store i32 0, i32* %i165, align 4
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc206, %sw.epilog
  %63 = load i32, i32* %i165, align 4
  %cmp168 = icmp slt i32 %63, 2
  br i1 %cmp168, label %for.body170, label %for.end208, !prof !92

for.body170:                                      ; preds = %for.cond167
  store i32 0, i32* %j166, align 4
  br label %for.cond171

for.cond171:                                      ; preds = %for.inc203, %for.body170
  %64 = load i32, i32* %j166, align 4
  %cmp172 = icmp slt i32 %64, 2
  br i1 %cmp172, label %for.body174, label %for.end205, !prof !93

for.body174:                                      ; preds = %for.cond171
  store i8 0, i8* %x, align 1
  br label %for.cond175

for.cond175:                                      ; preds = %for.inc200, %for.body174
  %65 = load i8, i8* %x, align 1
  %conv176 = zext i8 %65 to i32
  %cmp177 = icmp slt i32 %conv176, 4
  br i1 %cmp177, label %for.body179, label %for.end202, !prof !94

for.body179:                                      ; preds = %for.cond175
  store i8 0, i8* %y, align 1
  br label %for.cond180

for.cond180:                                      ; preds = %for.inc197, %for.body179
  %66 = load i8, i8* %y, align 1
  %conv181 = zext i8 %66 to i32
  %cmp182 = icmp slt i32 %conv181, 4
  br i1 %cmp182, label %for.body184, label %for.end199, !prof !95

for.body184:                                      ; preds = %for.cond180
  %67 = load i32, i32* %i165, align 4
  %idxprom185 = sext i32 %67 to i64
  %arrayidx186 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %temp103, i64 0, i64 %idxprom185
  %68 = load i32, i32* %j166, align 4
  %idxprom187 = sext i32 %68 to i64
  %arrayidx188 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx186, i64 0, i64 %idxprom187
  %69 = load i32, i32* %arrayidx188, align 4
  %conv189 = trunc i32 %69 to i8
  %70 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %71 = load i32, i32* %j166, align 4
  %72 = load i32, i32* %i165, align 4
  %mul = mul nsw i32 %72, 2
  %add190 = add nsw i32 %71, %mul
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %70, i64 %idxprom191
  %73 = load i8, i8* %x, align 1
  %idxprom193 = zext i8 %73 to i64
  %arrayidx194 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx192, i64 0, i64 %idxprom193
  %74 = load i8, i8* %y, align 1
  %idxprom195 = zext i8 %74 to i64
  %arrayidx196 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx194, i64 0, i64 %idxprom195
  store i8 %conv189, i8* %arrayidx196, align 1
  br label %for.inc197

for.inc197:                                       ; preds = %for.body184
  %75 = load i8, i8* %y, align 1
  %inc198 = add i8 %75, 1
  store i8 %inc198, i8* %y, align 1
  br label %for.cond180

for.end199:                                       ; preds = %for.cond180
  br label %for.inc200

for.inc200:                                       ; preds = %for.end199
  %76 = load i8, i8* %x, align 1
  %inc201 = add i8 %76, 1
  store i8 %inc201, i8* %x, align 1
  br label %for.cond175

for.end202:                                       ; preds = %for.cond175
  br label %for.inc203

for.inc203:                                       ; preds = %for.end202
  %77 = load i32, i32* %j166, align 4
  %inc204 = add nsw i32 %77, 1
  store i32 %inc204, i32* %j166, align 4
  br label %for.cond171

for.end205:                                       ; preds = %for.cond171
  br label %for.inc206

for.inc206:                                       ; preds = %for.end205
  %78 = load i32, i32* %i165, align 4
  %inc207 = add nsw i32 %78, 1
  store i32 %inc207, i32* %i165, align 4
  br label %for.cond167

for.end208:                                       ; preds = %for.cond167
  br label %sw.epilog402

sw.bb209:                                         ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond210

for.cond210:                                      ; preds = %for.inc239, %sw.bb209
  %79 = load i32, i32* %k, align 4
  %cmp211 = icmp slt i32 %79, 4
  br i1 %cmp211, label %for.body213, label %for.end241, !prof !96

for.body213:                                      ; preds = %for.cond210
  store i32 0, i32* %i, align 4
  br label %for.cond214

for.cond214:                                      ; preds = %for.inc236, %for.body213
  %80 = load i32, i32* %i, align 4
  %cmp215 = icmp slt i32 %80, 4
  br i1 %cmp215, label %for.body217, label %for.end238, !prof !97

for.body217:                                      ; preds = %for.cond214
  store i32 0, i32* %j, align 4
  br label %for.cond218

for.cond218:                                      ; preds = %for.inc233, %for.body217
  %81 = load i32, i32* %j, align 4
  %cmp219 = icmp slt i32 %81, 4
  br i1 %cmp219, label %for.body221, label %for.end235, !prof !98

for.body221:                                      ; preds = %for.cond218
  %82 = load i32, i32* %k, align 4
  %div222 = sdiv i32 %82, 2
  %mul223 = mul nsw i32 %div222, 4
  %83 = load i32, i32* %j, align 4
  %add224 = add nsw i32 %mul223, %83
  %idxprom225 = sext i32 %add224 to i64
  %arrayidx226 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 %idxprom225
  %84 = load i8, i8* %arrayidx226, align 1
  %85 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %86 = load i32, i32* %k, align 4
  %idxprom227 = sext i32 %86 to i64
  %arrayidx228 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %85, i64 %idxprom227
  %87 = load i32, i32* %i, align 4
  %idxprom229 = sext i32 %87 to i64
  %arrayidx230 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx228, i64 0, i64 %idxprom229
  %88 = load i32, i32* %j, align 4
  %idxprom231 = sext i32 %88 to i64
  %arrayidx232 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx230, i64 0, i64 %idxprom231
  store i8 %84, i8* %arrayidx232, align 1
  br label %for.inc233

for.inc233:                                       ; preds = %for.body221
  %89 = load i32, i32* %j, align 4
  %inc234 = add nsw i32 %89, 1
  store i32 %inc234, i32* %j, align 4
  br label %for.cond218

for.end235:                                       ; preds = %for.cond218
  br label %for.inc236

for.inc236:                                       ; preds = %for.end235
  %90 = load i32, i32* %i, align 4
  %inc237 = add nsw i32 %90, 1
  store i32 %inc237, i32* %i, align 4
  br label %for.cond214

for.end238:                                       ; preds = %for.cond214
  br label %for.inc239

for.inc239:                                       ; preds = %for.end238
  %91 = load i32, i32* %k, align 4
  %inc240 = add nsw i32 %91, 1
  store i32 %inc240, i32* %k, align 4
  br label %for.cond210

for.end241:                                       ; preds = %for.cond210
  br label %sw.epilog402

sw.bb242:                                         ; preds = %if.end55
  store i32 0, i32* %k, align 4
  br label %for.cond243

for.cond243:                                      ; preds = %for.inc272, %sw.bb242
  %92 = load i32, i32* %k, align 4
  %cmp244 = icmp slt i32 %92, 4
  br i1 %cmp244, label %for.body246, label %for.end274, !prof !99

for.body246:                                      ; preds = %for.cond243
  store i32 0, i32* %i, align 4
  br label %for.cond247

for.cond247:                                      ; preds = %for.inc269, %for.body246
  %93 = load i32, i32* %i, align 4
  %cmp248 = icmp slt i32 %93, 4
  br i1 %cmp248, label %for.body250, label %for.end271, !prof !100

for.body250:                                      ; preds = %for.cond247
  store i32 0, i32* %j, align 4
  br label %for.cond251

for.cond251:                                      ; preds = %for.inc266, %for.body250
  %94 = load i32, i32* %j, align 4
  %cmp252 = icmp slt i32 %94, 4
  br i1 %cmp252, label %for.body254, label %for.end268, !prof !101

for.body254:                                      ; preds = %for.cond251
  %95 = load i32, i32* %k, align 4
  %rem255 = srem i32 %95, 2
  %mul256 = mul nsw i32 %rem255, 4
  %96 = load i32, i32* %i, align 4
  %add257 = add nsw i32 %mul256, %96
  %idxprom258 = sext i32 %add257 to i64
  %arrayidx259 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 %idxprom258
  %97 = load i8, i8* %arrayidx259, align 1
  %98 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %99 = load i32, i32* %k, align 4
  %idxprom260 = sext i32 %99 to i64
  %arrayidx261 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %98, i64 %idxprom260
  %100 = load i32, i32* %i, align 4
  %idxprom262 = sext i32 %100 to i64
  %arrayidx263 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx261, i64 0, i64 %idxprom262
  %101 = load i32, i32* %j, align 4
  %idxprom264 = sext i32 %101 to i64
  %arrayidx265 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx263, i64 0, i64 %idxprom264
  store i8 %97, i8* %arrayidx265, align 1
  br label %for.inc266

for.inc266:                                       ; preds = %for.body254
  %102 = load i32, i32* %j, align 4
  %inc267 = add nsw i32 %102, 1
  store i32 %inc267, i32* %j, align 4
  br label %for.cond251

for.end268:                                       ; preds = %for.cond251
  br label %for.inc269

for.inc269:                                       ; preds = %for.end268
  %103 = load i32, i32* %i, align 4
  %inc270 = add nsw i32 %103, 1
  store i32 %inc270, i32* %i, align 4
  br label %for.cond247

for.end271:                                       ; preds = %for.cond247
  br label %for.inc272

for.inc272:                                       ; preds = %for.end271
  %104 = load i32, i32* %k, align 4
  %inc273 = add nsw i32 %104, 1
  store i32 %inc273, i32* %k, align 4
  br label %for.cond243

for.end274:                                       ; preds = %for.cond243
  br label %sw.epilog402

sw.default275:                                    ; preds = %if.end55
  %arrayidx276 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 4
  %105 = load i8, i8* %arrayidx276, align 1
  %conv277 = zext i8 %105 to i32
  %arrayidx278 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 2
  %106 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %106 to i32
  %sub280 = sub nsw i32 %conv277, %conv279
  %arrayidx281 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 5
  %107 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %107 to i32
  %arrayidx283 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 1
  %108 = load i8, i8* %arrayidx283, align 1
  %conv284 = zext i8 %108 to i32
  %sub285 = sub nsw i32 %conv282, %conv284
  %mul286 = mul nsw i32 2, %sub285
  %add287 = add nsw i32 %sub280, %mul286
  %arrayidx288 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 6
  %109 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %109 to i32
  %arrayidx290 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 0
  %110 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %110 to i32
  %sub292 = sub nsw i32 %conv289, %conv291
  %mul293 = mul nsw i32 3, %sub292
  %add294 = add nsw i32 %add287, %mul293
  %arrayidx295 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 7
  %111 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %111 to i32
  %112 = load i8, i8* %X, align 1
  %conv297 = zext i8 %112 to i32
  %sub298 = sub nsw i32 %conv296, %conv297
  %mul299 = mul nsw i32 4, %sub298
  %add300 = add nsw i32 %add294, %mul299
  store i32 %add300, i32* %H, align 4
  %arrayidx301 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 4
  %113 = load i8, i8* %arrayidx301, align 1
  %conv302 = zext i8 %113 to i32
  %arrayidx303 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 2
  %114 = load i8, i8* %arrayidx303, align 1
  %conv304 = zext i8 %114 to i32
  %sub305 = sub nsw i32 %conv302, %conv304
  %arrayidx306 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 5
  %115 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %115 to i32
  %arrayidx308 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 1
  %116 = load i8, i8* %arrayidx308, align 1
  %conv309 = zext i8 %116 to i32
  %sub310 = sub nsw i32 %conv307, %conv309
  %mul311 = mul nsw i32 2, %sub310
  %add312 = add nsw i32 %sub305, %mul311
  %arrayidx313 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 6
  %117 = load i8, i8* %arrayidx313, align 1
  %conv314 = zext i8 %117 to i32
  %arrayidx315 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 0
  %118 = load i8, i8* %arrayidx315, align 1
  %conv316 = zext i8 %118 to i32
  %sub317 = sub nsw i32 %conv314, %conv316
  %mul318 = mul nsw i32 3, %sub317
  %add319 = add nsw i32 %add312, %mul318
  %arrayidx320 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 7
  %119 = load i8, i8* %arrayidx320, align 1
  %conv321 = zext i8 %119 to i32
  %120 = load i8, i8* %X, align 1
  %conv322 = zext i8 %120 to i32
  %sub323 = sub nsw i32 %conv321, %conv322
  %mul324 = mul nsw i32 4, %sub323
  %add325 = add nsw i32 %add319, %mul324
  store i32 %add325, i32* %V, align 4
  %121 = load i32, i32* %H, align 4
  %mul326 = mul nsw i32 17, %121
  %add327 = add nsw i32 %mul326, 16
  %shr328 = ashr i32 %add327, 5
  store i32 %shr328, i32* %H, align 4
  %122 = load i32, i32* %V, align 4
  %mul329 = mul nsw i32 17, %122
  %add330 = add nsw i32 %mul329, 16
  %shr331 = ashr i32 %add330, 5
  store i32 %shr331, i32* %V, align 4
  %arrayidx332 = getelementptr inbounds [8 x i8], [8 x i8]* %v, i64 0, i64 7
  %123 = load i8, i8* %arrayidx332, align 1
  %conv333 = zext i8 %123 to i32
  %arrayidx334 = getelementptr inbounds [8 x i8], [8 x i8]* %h, i64 0, i64 7
  %124 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %124 to i32
  %add336 = add nsw i32 %conv333, %conv335
  %mul337 = mul nsw i32 16, %add336
  store i32 %mul337, i32* %a, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond338

for.cond338:                                      ; preds = %for.inc399, %sw.default275
  %125 = load i32, i32* %k, align 4
  %cmp339 = icmp slt i32 %125, 4
  br i1 %cmp339, label %for.body341, label %for.end401, !prof !102

for.body341:                                      ; preds = %for.cond338
  store i32 0, i32* %i, align 4
  br label %for.cond342

for.cond342:                                      ; preds = %for.inc396, %for.body341
  %126 = load i32, i32* %i, align 4
  %cmp343 = icmp slt i32 %126, 4
  br i1 %cmp343, label %for.body345, label %for.end398, !prof !103

for.body345:                                      ; preds = %for.cond342
  store i32 0, i32* %j, align 4
  br label %for.cond346

for.cond346:                                      ; preds = %for.inc393, %for.body345
  %127 = load i32, i32* %j, align 4
  %cmp347 = icmp slt i32 %127, 4
  br i1 %cmp347, label %for.body349, label %for.end395, !prof !104

for.body349:                                      ; preds = %for.cond346
  %128 = load i32, i32* %a, align 4
  %129 = load i32, i32* %H, align 4
  %130 = load i32, i32* %k, align 4
  %rem350 = srem i32 %130, 2
  %mul351 = mul nsw i32 %rem350, 4
  %131 = load i32, i32* %i, align 4
  %add352 = add nsw i32 %mul351, %131
  %sub353 = sub nsw i32 %add352, 3
  %mul354 = mul nsw i32 %129, %sub353
  %add355 = add nsw i32 %128, %mul354
  %132 = load i32, i32* %V, align 4
  %133 = load i32, i32* %k, align 4
  %div356 = sdiv i32 %133, 2
  %mul357 = mul nsw i32 %div356, 4
  %134 = load i32, i32* %j, align 4
  %add358 = add nsw i32 %mul357, %134
  %sub359 = sub nsw i32 %add358, 3
  %mul360 = mul nsw i32 %132, %sub359
  %add361 = add nsw i32 %add355, %mul360
  %add362 = add nsw i32 %add361, 16
  %shr363 = ashr i32 %add362, 5
  store i32 %shr363, i32* %temp, align 4
  %135 = load i32, i32* %temp, align 4
  %cmp364 = icmp slt i32 %135, 0
  br i1 %cmp364, label %if.then366, label %if.else373, !prof !105

if.then366:                                       ; preds = %for.body349
  %136 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %137 = load i32, i32* %k, align 4
  %idxprom367 = sext i32 %137 to i64
  %arrayidx368 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %136, i64 %idxprom367
  %138 = load i32, i32* %i, align 4
  %idxprom369 = sext i32 %138 to i64
  %arrayidx370 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx368, i64 0, i64 %idxprom369
  %139 = load i32, i32* %j, align 4
  %idxprom371 = sext i32 %139 to i64
  %arrayidx372 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx370, i64 0, i64 %idxprom371
  store i8 0, i8* %arrayidx372, align 1
  br label %if.end392

if.else373:                                       ; preds = %for.body349
  %140 = load i32, i32* %temp, align 4
  %cmp374 = icmp sgt i32 %140, 255
  br i1 %cmp374, label %if.then376, label %if.else383, !prof !105

if.then376:                                       ; preds = %if.else373
  %141 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %142 = load i32, i32* %k, align 4
  %idxprom377 = sext i32 %142 to i64
  %arrayidx378 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %141, i64 %idxprom377
  %143 = load i32, i32* %i, align 4
  %idxprom379 = sext i32 %143 to i64
  %arrayidx380 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx378, i64 0, i64 %idxprom379
  %144 = load i32, i32* %j, align 4
  %idxprom381 = sext i32 %144 to i64
  %arrayidx382 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx380, i64 0, i64 %idxprom381
  store i8 -1, i8* %arrayidx382, align 1
  br label %if.end391

if.else383:                                       ; preds = %if.else373
  %145 = load i32, i32* %temp, align 4
  %conv384 = trunc i32 %145 to i8
  %146 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC.addr, align 8
  %147 = load i32, i32* %k, align 4
  %idxprom385 = sext i32 %147 to i64
  %arrayidx386 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %146, i64 %idxprom385
  %148 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %148 to i64
  %arrayidx388 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx386, i64 0, i64 %idxprom387
  %149 = load i32, i32* %j, align 4
  %idxprom389 = sext i32 %149 to i64
  %arrayidx390 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx388, i64 0, i64 %idxprom389
  store i8 %conv384, i8* %arrayidx390, align 1
  br label %if.end391

if.end391:                                        ; preds = %if.else383, %if.then376
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.then366
  br label %for.inc393

for.inc393:                                       ; preds = %if.end392
  %150 = load i32, i32* %j, align 4
  %inc394 = add nsw i32 %150, 1
  store i32 %inc394, i32* %j, align 4
  br label %for.cond346

for.end395:                                       ; preds = %for.cond346
  br label %for.inc396

for.inc396:                                       ; preds = %for.end395
  %151 = load i32, i32* %i, align 4
  %inc397 = add nsw i32 %151, 1
  store i32 %inc397, i32* %i, align 4
  br label %for.cond342

for.end398:                                       ; preds = %for.cond342
  br label %for.inc399

for.inc399:                                       ; preds = %for.end398
  %152 = load i32, i32* %k, align 4
  %inc400 = add nsw i32 %152, 1
  store i32 %inc400, i32* %k, align 4
  br label %for.cond338

for.end401:                                       ; preds = %for.cond338
  br label %sw.epilog402

sw.epilog402:                                     ; preds = %for.end401, %for.end274, %for.end241, %for.end208
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 162}
!30 = !{!"branch_weights", i32 2593, i32 163}
!31 = !{!"branch_weights", i32 2545, i32 49}
!32 = !{!"branch_weights", i32 2545, i32 1}
!33 = !{!"branch_weights", i32 2475, i32 71}
!34 = !{!"branch_weights", i32 787, i32 1807}
!35 = !{!"branch_weights", i32 1637, i32 957}
!36 = !{!"branch_weights", i32 740, i32 218}
!37 = !{!"function_entry_count", i64 2592}
!38 = !{!"branch_weights", i32 2521, i32 73}
!39 = !{!"branch_weights", i32 163, i32 2431}
!40 = !{!"branch_weights", i32 163, i32 2269}
!41 = !{!"branch_weights", i32 163, i32 2107}
!42 = !{!"branch_weights", i32 163, i32 1945}
!43 = !{!"branch_weights", i32 163, i32 1783}
!44 = !{!"branch_weights", i32 1711, i32 73}
!45 = !{!"branch_weights", i32 9, i32 1703}
!46 = !{!"branch_weights", i32 1, i32 1703}
!47 = !{!"branch_weights", i32 2475, i32 119}
!48 = !{!"branch_weights", i32 1, i32 363, i32 810, i32 619, i32 130, i32 103, i32 170, i32 160, i32 127, i32 119}
!49 = !{!"branch_weights", i32 3, i32 271, i32 49, i32 43}
!50 = !{!"branch_weights", i32 1449, i32 363}
!51 = !{!"branch_weights", i32 5793, i32 1449}
!52 = !{!"branch_weights", i32 3237, i32 810}
!53 = !{!"branch_weights", i32 2473, i32 619}
!54 = !{!"function_entry_count", i64 36}
!55 = !{!"branch_weights", i32 31, i32 7}
!56 = !{!"branch_weights", i32 481, i32 31}
!57 = !{!"branch_weights", i32 97, i32 7}
!58 = !{!"branch_weights", i32 33, i32 5}
!59 = !{!"branch_weights", i32 513, i32 33}
!60 = !{!"branch_weights", i32 65, i32 5}
!61 = !{!"branch_weights", i32 27, i32 11}
!62 = !{!"branch_weights", i32 3, i32 22, i32 7, i32 8}
!63 = !{!"branch_weights", i32 337, i32 22}
!64 = !{!"branch_weights", i32 1345, i32 337}
!65 = !{!"branch_weights", i32 5377, i32 1345}
!66 = !{!"branch_weights", i32 385, i32 97}
!67 = !{!"branch_weights", i32 1537, i32 385}
!68 = !{!"branch_weights", i32 8, i32 1}
!69 = !{!"branch_weights", i32 113, i32 8}
!70 = !{!"branch_weights", i32 6, i32 3}
!71 = !{!"branch_weights", i32 81, i32 6}
!72 = !{!"branch_weights", i32 1, i32 6, i32 1, i32 3, i32 1}
!73 = !{!"branch_weights", i32 449, i32 113}
!74 = !{!"branch_weights", i32 1793, i32 449}
!75 = !{!"branch_weights", i32 33, i32 3}
!76 = !{!"branch_weights", i32 129, i32 33}
!77 = !{!"branch_weights", i32 513, i32 129}
!78 = !{!"branch_weights", i32 1, i32 513}
!79 = !{!"function_entry_count", i64 396}
!80 = !{!"branch_weights", i32 361, i32 37}
!81 = !{!"branch_weights", i32 2881, i32 361}
!82 = !{!"branch_weights", i32 289, i32 37}
!83 = !{!"branch_weights", i32 353, i32 45}
!84 = !{!"branch_weights", i32 2817, i32 353}
!85 = !{!"branch_weights", i32 321, i32 77}
!86 = !{!"branch_weights", i32 41, i32 203, i32 75, i32 81}
!87 = !{!"branch_weights", i32 175, i32 29}
!88 = !{!"branch_weights", i32 697, i32 175}
!89 = !{!"branch_weights", i32 167, i32 37}
!90 = !{!"branch_weights", i32 665, i32 167}
!91 = !{!"branch_weights", i32 143, i32 5, i32 33, i32 25}
!92 = !{!"branch_weights", i32 405, i32 203}
!93 = !{!"branch_weights", i32 809, i32 405}
!94 = !{!"branch_weights", i32 3233, i32 809}
!95 = !{!"branch_weights", i32 12929, i32 3233}
!96 = !{!"branch_weights", i32 297, i32 75}
!97 = !{!"branch_weights", i32 1185, i32 297}
!98 = !{!"branch_weights", i32 4737, i32 1185}
!99 = !{!"branch_weights", i32 321, i32 81}
!100 = !{!"branch_weights", i32 1281, i32 321}
!101 = !{!"branch_weights", i32 5121, i32 1281}
!102 = !{!"branch_weights", i32 161, i32 41}
!103 = !{!"branch_weights", i32 641, i32 161}
!104 = !{!"branch_weights", i32 2561, i32 641}
!105 = !{!"branch_weights", i32 1, i32 2561}
