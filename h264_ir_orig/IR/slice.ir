; ModuleID = '../src/slice.c'
source_filename = "../src/slice.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }
%struct.StorablePicture = type { i32, i8, i8, i8, i8 }
%struct.ImageParameters = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i8, [3 x i32], [3 x i32], i32, i32, i32, i32 }
%struct.StorablePictureInfo = type { [22 x [18 x i8]], [22 x [18 x i8]], [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]] }
%struct.slice_header_rbsp_t = type { i32, i8, i8, i32, i8, i8, i32, i32, i32, [2 x i32], i32, i8, i8, i8, i8, i8, i8, [5 x i8], [5 x i32], [5 x i8], [5 x i32], %struct.pred_weight_table_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t, i8, i32, i8, i32, i32 }
%struct.pred_weight_table_rbsp_t = type { i32, i32, [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]], [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]] }
%struct.dec_ref_pic_marking_rbsp_t = type { i8, i8, i8, [10 x i8], [10 x i32] }

@__const.ProcessSlice.qPCtable = private unnamed_addr constant [22 x i32] [i32 29, i32 30, i32 31, i32 32, i32 32, i32 33, i32 34, i32 34, i32 35, i32 35, i32 36, i32 36, i32 37, i32 37, i32 37, i32 38, i32 38, i32 38, i32 39, i32 39, i32 39, i32 39], align 16
@__const.ProcessSlice.power2 = private unnamed_addr constant [6 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32], align 16
@__const.ProcessSlice.intratypecutoff = private unnamed_addr constant [3 x i32] [i32 5, i32 23, i32 0], align 4
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_luma([4 x i8]* %pred, [4 x i32]* %rMb, [144 x i8]* %Sluma, i32 %startx, i32 %starty, i8 zeroext %skip) #0 !prof !29 {
entry:
  %pred.addr = alloca [4 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %Sluma.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %skip.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %pred, [4 x i8]** %pred.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %skip, i8* %skip.addr, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end20, !prof !30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !31

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %skip.addr, align 1
  %conv = zext i8 %2 to i32
  %3 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom4
  %6 = load i32, i32* %arrayidx5, align 4
  %mul = mul nsw i32 %conv, %6
  %7 = load [4 x i8]*, [4 x i8]** %pred.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %idxprom6
  %9 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx7, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv10
  %call = call i32 @Clip1y(i32 %add)
  %conv11 = trunc i32 %call to i8
  %11 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %12 = load i32, i32* %startx.addr, align 4
  %13 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %12, %13
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds [144 x i8], [144 x i8]* %11, i64 %idxprom13
  %14 = load i32, i32* %starty.addr, align 4
  %15 = load i32, i32* %j, align 4
  %add15 = add nsw i32 %14, %15
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx14, i64 0, i64 %idxprom16
  store i8 %conv11, i8* %arrayidx17, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %17, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

declare dso_local i32 @Clip1y(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_Chroma([4 x i8]* %pred, [4 x i32]* %rMb, [72 x i8]* %SChroma, i32 %startx, i32 %starty, i8 zeroext %skip) #0 !prof !32 {
entry:
  %pred.addr = alloca [4 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %SChroma.addr = alloca [72 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %skip.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x i8]* %pred, [4 x i8]** %pred.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store [72 x i8]* %SChroma, [72 x i8]** %SChroma.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %skip, i8* %skip.addr, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end22, !prof !33

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !34

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %skip.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp eq i32 %conv, 0
  %conv5 = zext i1 %cmp4 to i32
  %3 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom6
  %6 = load i32, i32* %arrayidx7, align 4
  %mul = mul nsw i32 %conv5, %6
  %7 = load [4 x i8]*, [4 x i8]** %pred.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %8 to i64
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %idxprom8
  %9 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %9 to i64
  %arrayidx11 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i64 0, i64 %idxprom10
  %10 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv12
  %call = call i32 @Clip1y(i32 %add)
  %conv13 = trunc i32 %call to i8
  %11 = load [72 x i8]*, [72 x i8]** %SChroma.addr, align 8
  %12 = load i32, i32* %startx.addr, align 4
  %13 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %12, %13
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [72 x i8], [72 x i8]* %11, i64 %idxprom15
  %14 = load i32, i32* %starty.addr, align 4
  %15 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %14, %15
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx16, i64 0, i64 %idxprom18
  store i8 %conv13, i8* %arrayidx19, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %17, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_luma(i8 zeroext %x, i8 zeroext %y, i8 zeroext %k, i32 %mbaddrx, i32 %mbaddry, i8 zeroext %CodedPatternLuma, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %tmpImode, i32 %coeffDCL, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1, [9 x i8]* %Imode, [36 x i8]* %IntraPredMode, [36 x i8]* %NzLuma, %struct.ImageParameters* %img, [4 x i8]* %predL, i8 signext %qPm6, i8 signext %qPy, i8 signext %temp1l, i8 signext %temp2l, i8 signext %temp3l, i8 signext %refidx0, i8 signext %refidx1, i32* %mvd0, i32* %mvd1, i8 zeroext %intra4x4predmode) #0 !prof !35 {
entry:
  %x.addr = alloca i8, align 1
  %y.addr = alloca i8, align 1
  %k.addr = alloca i8, align 1
  %mbaddrx.addr = alloca i32, align 4
  %mbaddry.addr = alloca i32, align 4
  %CodedPatternLuma.addr = alloca i8, align 1
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tmpImode.addr = alloca i32, align 4
  %coeffDCL.addr = alloca i32, align 4
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %IntraPredMode.addr = alloca [36 x i8]*, align 8
  %NzLuma.addr = alloca [36 x i8]*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %predL.addr = alloca [4 x i8]*, align 8
  %qPm6.addr = alloca i8, align 1
  %qPy.addr = alloca i8, align 1
  %temp1l.addr = alloca i8, align 1
  %temp2l.addr = alloca i8, align 1
  %temp3l.addr = alloca i8, align 1
  %refidx0.addr = alloca i8, align 1
  %refidx1.addr = alloca i8, align 1
  %mvd0.addr = alloca i32*, align 8
  %mvd1.addr = alloca i32*, align 8
  %intra4x4predmode.addr = alloca i8, align 1
  %nC = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %coeffACL = alloca [4 x [4 x i32]], align 16
  %predL4x4 = alloca [4 x [4 x i8]], align 16
  %xint0 = alloca i32, align 4
  %yint0 = alloca i32, align 4
  %xfrac0 = alloca i32, align 4
  %yfrac0 = alloca i32, align 4
  %xint1 = alloca i32, align 4
  %yint1 = alloca i32, align 4
  %xfrac1 = alloca i32, align 4
  %yfrac1 = alloca i32, align 4
  %rMbL = alloca [4 x [4 x i32]], align 16
  %avaimode = alloca i8, align 1
  %tmpidx0 = alloca i32, align 4
  %tmpidx1 = alloca i32, align 4
  %inter_temp0 = alloca [9 x [9 x i8]], align 16
  %inter_temp1 = alloca [9 x [9 x i8]], align 16
  store i8 %x, i8* %x.addr, align 1
  store i8 %y, i8* %y.addr, align 1
  store i8 %k, i8* %k.addr, align 1
  store i32 %mbaddrx, i32* %mbaddrx.addr, align 4
  store i32 %mbaddry, i32* %mbaddry.addr, align 4
  store i8 %CodedPatternLuma, i8* %CodedPatternLuma.addr, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %tmpImode, i32* %tmpImode.addr, align 4
  store i32 %coeffDCL, i32* %coeffDCL.addr, align 4
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store [36 x i8]* %IntraPredMode, [36 x i8]** %IntraPredMode.addr, align 8
  store [36 x i8]* %NzLuma, [36 x i8]** %NzLuma.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store [4 x i8]* %predL, [4 x i8]** %predL.addr, align 8
  store i8 %qPm6, i8* %qPm6.addr, align 1
  store i8 %qPy, i8* %qPy.addr, align 1
  store i8 %temp1l, i8* %temp1l.addr, align 1
  store i8 %temp2l, i8* %temp2l.addr, align 1
  store i8 %temp3l, i8* %temp3l.addr, align 1
  store i8 %refidx0, i8* %refidx0.addr, align 1
  store i8 %refidx1, i8* %refidx1.addr, align 1
  store i32* %mvd0, i32** %mvd0.addr, align 8
  store i32* %mvd1, i32** %mvd1.addr, align 8
  store i8 %intra4x4predmode, i8* %intra4x4predmode.addr, align 1
  store i32 0, i32* %nC, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %0 = bitcast [4 x [4 x i32]]* %coeffACL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 64, i1 false)
  %1 = bitcast [4 x [4 x i8]]* %predL4x4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 16, i1 false)
  store i32 0, i32* %xint0, align 4
  store i32 0, i32* %yint0, align 4
  store i32 0, i32* %xfrac0, align 4
  store i32 0, i32* %yfrac0, align 4
  store i32 0, i32* %xint1, align 4
  store i32 0, i32* %yint1, align 4
  store i32 0, i32* %xfrac1, align 4
  store i32 0, i32* %yfrac1, align 4
  %2 = bitcast [4 x [4 x i32]]* %rMbL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 64, i1 false)
  store i8 0, i8* %avaimode, align 1
  store i32 0, i32* %tmpidx0, align 4
  store i32 0, i32* %tmpidx1, align 4
  %3 = bitcast [9 x [9 x i8]]* %inter_temp0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 81, i1 false)
  %4 = bitcast [9 x [9 x i8]]* %inter_temp1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 81, i1 false)
  %5 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv = zext i8 %5 to i32
  %6 = load i8, i8* %k.addr, align 1
  %conv1 = zext i8 %6 to i32
  %div = sdiv i32 %conv1, 4
  %shl = shl i32 1, %div
  %and = and i32 %conv, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !36

if.then:                                          ; preds = %entry
  %7 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %8 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %9 = load i32, i32* %mbaddrx.addr, align 4
  %mul = mul nsw i32 %9, 4
  %10 = load i8, i8* %x.addr, align 1
  %conv2 = zext i8 %10 to i32
  %add = add nsw i32 %mul, %conv2
  %11 = load i32, i32* %mbaddry.addr, align 4
  %mul3 = mul nsw i32 %11, 4
  %12 = load i8, i8* %y.addr, align 1
  %conv4 = zext i8 %12 to i32
  %add5 = add nsw i32 %mul3, %conv4
  %call = call zeroext i8 @nc_Luma([9 x i8]* %7, [36 x i8]* %8, i32 %add, i32 %add5)
  %conv6 = zext i8 %call to i32
  store i32 %conv6, i32* %nC, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i32 0, i32 0
  %13 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %14 = load i8*, i8** %nalu_buf.addr, align 8
  %15 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %16 = load i32, i32* %tmpImode.addr, align 4
  %cmp = icmp eq i32 %16, 1
  %conv7 = zext i1 %cmp to i32
  %17 = load i32, i32* %nC, align 4
  %call8 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay, %struct.NALU_t* %13, i8* %14, i64* %15, i32 %conv7, i32 15, i32 %17)
  %18 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %19 = load i32, i32* %mbaddrx.addr, align 4
  %mul9 = mul nsw i32 %19, 4
  %20 = load i8, i8* %x.addr, align 1
  %conv10 = zext i8 %20 to i32
  %add11 = add nsw i32 %mul9, %conv10
  %idxprom = sext i32 %add11 to i64
  %arrayidx = getelementptr inbounds [36 x i8], [36 x i8]* %18, i64 %idxprom
  %21 = load i32, i32* %mbaddry.addr, align 4
  %mul12 = mul nsw i32 %21, 4
  %22 = load i8, i8* %y.addr, align 1
  %conv13 = zext i8 %22 to i32
  %add14 = add nsw i32 %mul12, %conv13
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx, i64 0, i64 %idxprom15
  store i8 %call8, i8* %arrayidx16, align 1
  br label %if.end54

if.else:                                          ; preds = %entry
  %23 = load i32, i32* %tmpImode.addr, align 4
  %cmp17 = icmp eq i32 %23, 1
  br i1 %cmp17, label %if.then19, label %if.else43, !prof !37

if.then19:                                        ; preds = %if.else
  %24 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %25 = load i32, i32* %mbaddrx.addr, align 4
  %mul20 = mul nsw i32 %25, 4
  %26 = load i8, i8* %x.addr, align 1
  %conv21 = zext i8 %26 to i32
  %add22 = add nsw i32 %mul20, %conv21
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [36 x i8], [36 x i8]* %24, i64 %idxprom23
  %27 = load i32, i32* %mbaddry.addr, align 4
  %mul25 = mul nsw i32 %27, 4
  %28 = load i8, i8* %y.addr, align 1
  %conv26 = zext i8 %28 to i32
  %add27 = add nsw i32 %mul25, %conv26
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx24, i64 0, i64 %idxprom28
  store i8 0, i8* %arrayidx29, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %if.then19
  %29 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %29, 4
  br i1 %cmp30, label %for.body, label %for.end42, !prof !38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %for.body
  %30 = load i32, i32* %j, align 4
  %cmp33 = icmp slt i32 %30, 4
  br i1 %cmp33, label %for.body35, label %for.end, !prof !39

for.body35:                                       ; preds = %for.cond32
  %31 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %31 to i64
  %arrayidx37 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i64 0, i64 %idxprom36
  %32 = load i32, i32* %j, align 4
  %idxprom38 = sext i32 %32 to i64
  %arrayidx39 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx37, i64 0, i64 %idxprom38
  store i32 0, i32* %arrayidx39, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body35
  %33 = load i32, i32* %j, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond32

for.end:                                          ; preds = %for.cond32
  br label %for.inc40

for.inc40:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %34, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond

for.end42:                                        ; preds = %for.cond
  br label %if.end

if.else43:                                        ; preds = %if.else
  %35 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %36 = load i32, i32* %mbaddrx.addr, align 4
  %mul44 = mul nsw i32 %36, 4
  %37 = load i8, i8* %x.addr, align 1
  %conv45 = zext i8 %37 to i32
  %add46 = add nsw i32 %mul44, %conv45
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds [36 x i8], [36 x i8]* %35, i64 %idxprom47
  %38 = load i32, i32* %mbaddry.addr, align 4
  %mul49 = mul nsw i32 %38, 4
  %39 = load i8, i8* %y.addr, align 1
  %conv50 = zext i8 %39 to i32
  %add51 = add nsw i32 %mul49, %conv50
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx48, i64 0, i64 %idxprom52
  store i8 0, i8* %arrayidx53, align 1
  br label %if.end

if.end:                                           ; preds = %if.else43, %for.end42
  br label %if.end54

if.end54:                                         ; preds = %if.end, %if.then
  %40 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv55 = zext i8 %40 to i32
  %41 = load i8, i8* %k.addr, align 1
  %conv56 = zext i8 %41 to i32
  %div57 = sdiv i32 %conv56, 4
  %shl58 = shl i32 1, %div57
  %and59 = and i32 %conv55, %shl58
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.then63, label %lor.lhs.false, !prof !36

lor.lhs.false:                                    ; preds = %if.end54
  %42 = load i32, i32* %tmpImode.addr, align 4
  %cmp61 = icmp eq i32 %42, 1
  br i1 %cmp61, label %if.then63, label %if.end74, !prof !37

if.then63:                                        ; preds = %lor.lhs.false, %if.end54
  %43 = load i8, i8* %qPy.addr, align 1
  %conv64 = sext i8 %43 to i32
  %44 = load i8, i8* %qPm6.addr, align 1
  %conv65 = sext i8 %44 to i32
  %45 = load i8, i8* %temp1l.addr, align 1
  %conv66 = sext i8 %45 to i32
  %46 = load i8, i8* %temp2l.addr, align 1
  %conv67 = sext i8 %46 to i32
  %47 = load i8, i8* %temp3l.addr, align 1
  %conv68 = sext i8 %47 to i32
  %arraydecay69 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffACL, i32 0, i32 0
  %arraydecay70 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %48 = load i32, i32* %coeffDCL.addr, align 4
  %49 = load i32, i32* %tmpImode.addr, align 4
  %cmp71 = icmp eq i32 %49, 1
  %conv72 = zext i1 %cmp71 to i32
  %conv73 = trunc i32 %conv72 to i8
  call void @scale_residual4x4_and_trans_inverse(i32 %conv64, i32 %conv65, i32 %conv66, i32 %conv67, i32 %conv68, [4 x i32]* %arraydecay69, [4 x i32]* %arraydecay70, i32 %48, i8 zeroext %conv73)
  br label %if.end74

if.end74:                                         ; preds = %if.then63, %lor.lhs.false
  %50 = load i32, i32* %tmpImode.addr, align 4
  %cmp75 = icmp eq i32 %50, 0
  br i1 %cmp75, label %if.then77, label %if.else127, !prof !40

if.then77:                                        ; preds = %if.end74
  %51 = load i32, i32* %mbaddrx.addr, align 4
  %mul78 = mul nsw i32 %51, 4
  %52 = load i8, i8* %x.addr, align 1
  %conv79 = zext i8 %52 to i32
  %add80 = add nsw i32 %mul78, %conv79
  %cmp81 = icmp sgt i32 %add80, 0
  %conv82 = zext i1 %cmp81 to i32
  %mul83 = mul nsw i32 %conv82, 2
  %53 = load i32, i32* %mbaddry.addr, align 4
  %mul84 = mul nsw i32 %53, 4
  %54 = load i8, i8* %y.addr, align 1
  %conv85 = zext i8 %54 to i32
  %add86 = add nsw i32 %mul84, %conv85
  %cmp87 = icmp sgt i32 %add86, 0
  %conv88 = zext i1 %cmp87 to i32
  %add89 = add nsw i32 %mul83, %conv88
  %conv90 = trunc i32 %add89 to i8
  store i8 %conv90, i8* %avaimode, align 1
  %arraydecay91 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %predL4x4, i32 0, i32 0
  %55 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %56 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %56, i32 0, i32 9
  %57 = load i32, i32* %mem_idx, align 4
  %idxprom92 = sext i32 %57 to i64
  %arrayidx93 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %55, i64 %idxprom92
  %arraydecay94 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx93, i32 0, i32 0
  %58 = load i8, i8* %intra4x4predmode.addr, align 1
  %59 = load i8, i8* %avaimode, align 1
  %60 = load i32, i32* %mbaddrx.addr, align 4
  %mul95 = mul nsw i32 %60, 4
  %61 = load i8, i8* %x.addr, align 1
  %conv96 = zext i8 %61 to i32
  %add97 = add nsw i32 %mul95, %conv96
  %mul98 = mul nsw i32 %add97, 4
  %62 = load i32, i32* %mbaddry.addr, align 4
  %mul99 = mul nsw i32 %62, 4
  %63 = load i8, i8* %y.addr, align 1
  %conv100 = zext i8 %63 to i32
  %add101 = add nsw i32 %mul99, %conv100
  %mul102 = mul nsw i32 %add101, 4
  %64 = load i8, i8* %k.addr, align 1
  %conv103 = zext i8 %64 to i32
  call void @predict_intra4x4_luma_NonField([4 x i8]* %arraydecay91, [144 x i8]* %arraydecay94, i8 zeroext %58, i8 zeroext %59, i32 %mul98, i32 %mul102, i32 %conv103)
  %arraydecay104 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %predL4x4, i32 0, i32 0
  %arraydecay105 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %65 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %66 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx106 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %66, i32 0, i32 9
  %67 = load i32, i32* %mem_idx106, align 4
  %idxprom107 = sext i32 %67 to i64
  %arrayidx108 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %65, i64 %idxprom107
  %arraydecay109 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx108, i32 0, i32 0
  %68 = load i32, i32* %mbaddrx.addr, align 4
  %mul110 = mul nsw i32 %68, 4
  %69 = load i8, i8* %x.addr, align 1
  %conv111 = zext i8 %69 to i32
  %add112 = add nsw i32 %mul110, %conv111
  %mul113 = mul nsw i32 %add112, 4
  %70 = load i32, i32* %mbaddry.addr, align 4
  %mul114 = mul nsw i32 %70, 4
  %71 = load i8, i8* %y.addr, align 1
  %conv115 = zext i8 %71 to i32
  %add116 = add nsw i32 %mul114, %conv115
  %mul117 = mul nsw i32 %add116, 4
  %72 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv118 = zext i8 %72 to i32
  %73 = load i8, i8* %k.addr, align 1
  %conv119 = zext i8 %73 to i32
  %div120 = sdiv i32 %conv119, 4
  %shl121 = shl i32 1, %div120
  %and122 = and i32 %conv118, %shl121
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %lor.end, label %lor.rhs, !prof !41

lor.rhs:                                          ; preds = %if.then77
  %74 = load i32, i32* %tmpImode.addr, align 4
  %cmp124 = icmp eq i32 %74, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then77
  %75 = phi i1 [ true, %if.then77 ], [ %cmp124, %lor.rhs ]
  %lor.ext = zext i1 %75 to i32
  %conv126 = trunc i32 %lor.ext to i8
  call void @write_luma([4 x i8]* %arraydecay104, [4 x i32]* %arraydecay105, [144 x i8]* %arraydecay109, i32 %mul113, i32 %mul117, i8 zeroext %conv126)
  br label %if.end460

if.else127:                                       ; preds = %if.end74
  %76 = load i32, i32* %tmpImode.addr, align 4
  %cmp128 = icmp eq i32 %76, 1
  br i1 %cmp128, label %if.then130, label %if.else156, !prof !42

if.then130:                                       ; preds = %if.else127
  %77 = load [4 x i8]*, [4 x i8]** %predL.addr, align 8
  %arraydecay131 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %78 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %79 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx132 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %79, i32 0, i32 9
  %80 = load i32, i32* %mem_idx132, align 4
  %idxprom133 = sext i32 %80 to i64
  %arrayidx134 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %78, i64 %idxprom133
  %arraydecay135 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx134, i32 0, i32 0
  %81 = load i32, i32* %mbaddrx.addr, align 4
  %mul136 = mul nsw i32 %81, 4
  %82 = load i8, i8* %x.addr, align 1
  %conv137 = zext i8 %82 to i32
  %add138 = add nsw i32 %mul136, %conv137
  %mul139 = mul nsw i32 %add138, 4
  %83 = load i32, i32* %mbaddry.addr, align 4
  %mul140 = mul nsw i32 %83, 4
  %84 = load i8, i8* %y.addr, align 1
  %conv141 = zext i8 %84 to i32
  %add142 = add nsw i32 %mul140, %conv141
  %mul143 = mul nsw i32 %add142, 4
  %85 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv144 = zext i8 %85 to i32
  %86 = load i8, i8* %k.addr, align 1
  %conv145 = zext i8 %86 to i32
  %div146 = sdiv i32 %conv145, 4
  %shl147 = shl i32 1, %div146
  %and148 = and i32 %conv144, %shl147
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %lor.end153, label %lor.rhs150, !prof !43

lor.rhs150:                                       ; preds = %if.then130
  %87 = load i32, i32* %tmpImode.addr, align 4
  %cmp151 = icmp eq i32 %87, 1
  br label %lor.end153

lor.end153:                                       ; preds = %lor.rhs150, %if.then130
  %88 = phi i1 [ true, %if.then130 ], [ %cmp151, %lor.rhs150 ]
  %lor.ext154 = zext i1 %88 to i32
  %conv155 = trunc i32 %lor.ext154 to i8
  call void @write_luma([4 x i8]* %77, [4 x i32]* %arraydecay131, [144 x i8]* %arraydecay135, i32 %mul139, i32 %mul143, i8 zeroext %conv155)
  br label %if.end459

if.else156:                                       ; preds = %if.else127
  %89 = load i8, i8* %refidx0.addr, align 1
  %conv157 = sext i8 %89 to i32
  %cmp158 = icmp sge i32 %conv157, 0
  br i1 %cmp158, label %land.lhs.true, label %if.else188, !prof !44

land.lhs.true:                                    ; preds = %if.else156
  %90 = load i8, i8* %refidx1.addr, align 1
  %conv160 = sext i8 %90 to i32
  %cmp161 = icmp slt i32 %conv160, 0
  br i1 %cmp161, label %if.then163, label %if.else188, !prof !45

if.then163:                                       ; preds = %land.lhs.true
  %91 = load i32, i32* %mbaddrx.addr, align 4
  %mul164 = mul nsw i32 %91, 4
  %92 = load i8, i8* %x.addr, align 1
  %conv165 = zext i8 %92 to i32
  %add166 = add nsw i32 %mul164, %conv165
  %mul167 = mul nsw i32 %add166, 4
  %93 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx168 = getelementptr inbounds i32, i32* %93, i64 0
  %94 = load i32, i32* %arrayidx168, align 4
  %shr = ashr i32 %94, 2
  %add169 = add nsw i32 %mul167, %shr
  store i32 %add169, i32* %xint0, align 4
  %95 = load i32, i32* %mbaddry.addr, align 4
  %mul170 = mul nsw i32 %95, 4
  %96 = load i8, i8* %y.addr, align 1
  %conv171 = zext i8 %96 to i32
  %add172 = add nsw i32 %mul170, %conv171
  %mul173 = mul nsw i32 %add172, 4
  %97 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx174 = getelementptr inbounds i32, i32* %97, i64 1
  %98 = load i32, i32* %arrayidx174, align 4
  %shr175 = ashr i32 %98, 2
  %add176 = add nsw i32 %mul173, %shr175
  store i32 %add176, i32* %yint0, align 4
  %99 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx177 = getelementptr inbounds i32, i32* %99, i64 0
  %100 = load i32, i32* %arrayidx177, align 4
  %and178 = and i32 %100, 3
  store i32 %and178, i32* %xfrac0, align 4
  %101 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx179 = getelementptr inbounds i32, i32* %101, i64 1
  %102 = load i32, i32* %arrayidx179, align 4
  %and180 = and i32 %102, 3
  store i32 %and180, i32* %yfrac0, align 4
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 12
  %104 = load i8, i8* %refidx0.addr, align 1
  %conv181 = sext i8 %104 to i32
  %cmp182 = icmp sge i32 %conv181, 0
  %conv183 = zext i1 %cmp182 to i32
  %105 = load i8, i8* %refidx0.addr, align 1
  %conv184 = sext i8 %105 to i32
  %mul185 = mul nsw i32 %conv183, %conv184
  %idxprom186 = sext i32 %mul185 to i64
  %arrayidx187 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i64 0, i64 %idxprom186
  %106 = load i32, i32* %arrayidx187, align 4
  store i32 %106, i32* %tmpidx0, align 4
  br label %if.end285

if.else188:                                       ; preds = %land.lhs.true, %if.else156
  %107 = load i8, i8* %refidx1.addr, align 1
  %conv189 = sext i8 %107 to i32
  %cmp190 = icmp sge i32 %conv189, 0
  br i1 %cmp190, label %land.lhs.true192, label %if.else222, !prof !46

land.lhs.true192:                                 ; preds = %if.else188
  %108 = load i8, i8* %refidx0.addr, align 1
  %conv193 = sext i8 %108 to i32
  %cmp194 = icmp slt i32 %conv193, 0
  br i1 %cmp194, label %if.then196, label %if.else222, !prof !47

if.then196:                                       ; preds = %land.lhs.true192
  %109 = load i32, i32* %mbaddrx.addr, align 4
  %mul197 = mul nsw i32 %109, 4
  %110 = load i8, i8* %x.addr, align 1
  %conv198 = zext i8 %110 to i32
  %add199 = add nsw i32 %mul197, %conv198
  %mul200 = mul nsw i32 %add199, 4
  %111 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx201 = getelementptr inbounds i32, i32* %111, i64 0
  %112 = load i32, i32* %arrayidx201, align 4
  %shr202 = ashr i32 %112, 2
  %add203 = add nsw i32 %mul200, %shr202
  store i32 %add203, i32* %xint0, align 4
  %113 = load i32, i32* %mbaddry.addr, align 4
  %mul204 = mul nsw i32 %113, 4
  %114 = load i8, i8* %y.addr, align 1
  %conv205 = zext i8 %114 to i32
  %add206 = add nsw i32 %mul204, %conv205
  %mul207 = mul nsw i32 %add206, 4
  %115 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx208 = getelementptr inbounds i32, i32* %115, i64 1
  %116 = load i32, i32* %arrayidx208, align 4
  %shr209 = ashr i32 %116, 2
  %add210 = add nsw i32 %mul207, %shr209
  store i32 %add210, i32* %yint0, align 4
  %117 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx211 = getelementptr inbounds i32, i32* %117, i64 0
  %118 = load i32, i32* %arrayidx211, align 4
  %and212 = and i32 %118, 3
  store i32 %and212, i32* %xfrac0, align 4
  %119 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx213 = getelementptr inbounds i32, i32* %119, i64 1
  %120 = load i32, i32* %arrayidx213, align 4
  %and214 = and i32 %120, 3
  store i32 %and214, i32* %yfrac0, align 4
  %121 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %121, i32 0, i32 13
  %122 = load i8, i8* %refidx1.addr, align 1
  %conv215 = sext i8 %122 to i32
  %cmp216 = icmp sge i32 %conv215, 0
  %conv217 = zext i1 %cmp216 to i32
  %123 = load i8, i8* %refidx1.addr, align 1
  %conv218 = sext i8 %123 to i32
  %mul219 = mul nsw i32 %conv217, %conv218
  %idxprom220 = sext i32 %mul219 to i64
  %arrayidx221 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 %idxprom220
  %124 = load i32, i32* %arrayidx221, align 4
  store i32 %124, i32* %tmpidx0, align 4
  br label %if.end284

if.else222:                                       ; preds = %land.lhs.true192, %if.else188
  %125 = load i8, i8* %refidx1.addr, align 1
  %conv223 = sext i8 %125 to i32
  %cmp224 = icmp sge i32 %conv223, 0
  br i1 %cmp224, label %land.lhs.true226, label %if.end283, !prof !46

land.lhs.true226:                                 ; preds = %if.else222
  %126 = load i8, i8* %refidx0.addr, align 1
  %conv227 = sext i8 %126 to i32
  %cmp228 = icmp sge i32 %conv227, 0
  br i1 %cmp228, label %if.then230, label %if.end283, !prof !46

if.then230:                                       ; preds = %land.lhs.true226
  %127 = load i32, i32* %mbaddrx.addr, align 4
  %mul231 = mul nsw i32 %127, 4
  %128 = load i8, i8* %x.addr, align 1
  %conv232 = zext i8 %128 to i32
  %add233 = add nsw i32 %mul231, %conv232
  %mul234 = mul nsw i32 %add233, 4
  %129 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx235 = getelementptr inbounds i32, i32* %129, i64 0
  %130 = load i32, i32* %arrayidx235, align 4
  %shr236 = ashr i32 %130, 2
  %add237 = add nsw i32 %mul234, %shr236
  store i32 %add237, i32* %xint1, align 4
  %131 = load i32, i32* %mbaddry.addr, align 4
  %mul238 = mul nsw i32 %131, 4
  %132 = load i8, i8* %y.addr, align 1
  %conv239 = zext i8 %132 to i32
  %add240 = add nsw i32 %mul238, %conv239
  %mul241 = mul nsw i32 %add240, 4
  %133 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx242 = getelementptr inbounds i32, i32* %133, i64 1
  %134 = load i32, i32* %arrayidx242, align 4
  %shr243 = ashr i32 %134, 2
  %add244 = add nsw i32 %mul241, %shr243
  store i32 %add244, i32* %yint1, align 4
  %135 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx245 = getelementptr inbounds i32, i32* %135, i64 0
  %136 = load i32, i32* %arrayidx245, align 4
  %and246 = and i32 %136, 3
  store i32 %and246, i32* %xfrac1, align 4
  %137 = load i32*, i32** %mvd1.addr, align 8
  %arrayidx247 = getelementptr inbounds i32, i32* %137, i64 1
  %138 = load i32, i32* %arrayidx247, align 4
  %and248 = and i32 %138, 3
  store i32 %and248, i32* %yfrac1, align 4
  %139 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1249 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %139, i32 0, i32 13
  %140 = load i8, i8* %refidx1.addr, align 1
  %conv250 = sext i8 %140 to i32
  %cmp251 = icmp sge i32 %conv250, 0
  %conv252 = zext i1 %cmp251 to i32
  %141 = load i8, i8* %refidx1.addr, align 1
  %conv253 = sext i8 %141 to i32
  %mul254 = mul nsw i32 %conv252, %conv253
  %idxprom255 = sext i32 %mul254 to i64
  %arrayidx256 = getelementptr inbounds [3 x i32], [3 x i32]* %list1249, i64 0, i64 %idxprom255
  %142 = load i32, i32* %arrayidx256, align 4
  store i32 %142, i32* %tmpidx1, align 4
  %143 = load i32, i32* %mbaddrx.addr, align 4
  %mul257 = mul nsw i32 %143, 4
  %144 = load i8, i8* %x.addr, align 1
  %conv258 = zext i8 %144 to i32
  %add259 = add nsw i32 %mul257, %conv258
  %mul260 = mul nsw i32 %add259, 4
  %145 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx261 = getelementptr inbounds i32, i32* %145, i64 0
  %146 = load i32, i32* %arrayidx261, align 4
  %shr262 = ashr i32 %146, 2
  %add263 = add nsw i32 %mul260, %shr262
  store i32 %add263, i32* %xint0, align 4
  %147 = load i32, i32* %mbaddry.addr, align 4
  %mul264 = mul nsw i32 %147, 4
  %148 = load i8, i8* %y.addr, align 1
  %conv265 = zext i8 %148 to i32
  %add266 = add nsw i32 %mul264, %conv265
  %mul267 = mul nsw i32 %add266, 4
  %149 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx268 = getelementptr inbounds i32, i32* %149, i64 1
  %150 = load i32, i32* %arrayidx268, align 4
  %shr269 = ashr i32 %150, 2
  %add270 = add nsw i32 %mul267, %shr269
  store i32 %add270, i32* %yint0, align 4
  %151 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx271 = getelementptr inbounds i32, i32* %151, i64 0
  %152 = load i32, i32* %arrayidx271, align 4
  %and272 = and i32 %152, 3
  store i32 %and272, i32* %xfrac0, align 4
  %153 = load i32*, i32** %mvd0.addr, align 8
  %arrayidx273 = getelementptr inbounds i32, i32* %153, i64 1
  %154 = load i32, i32* %arrayidx273, align 4
  %and274 = and i32 %154, 3
  store i32 %and274, i32* %yfrac0, align 4
  %155 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0275 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %155, i32 0, i32 12
  %156 = load i8, i8* %refidx0.addr, align 1
  %conv276 = sext i8 %156 to i32
  %cmp277 = icmp sge i32 %conv276, 0
  %conv278 = zext i1 %cmp277 to i32
  %157 = load i8, i8* %refidx0.addr, align 1
  %conv279 = sext i8 %157 to i32
  %mul280 = mul nsw i32 %conv278, %conv279
  %idxprom281 = sext i32 %mul280 to i64
  %arrayidx282 = getelementptr inbounds [3 x i32], [3 x i32]* %list0275, i64 0, i64 %idxprom281
  %158 = load i32, i32* %arrayidx282, align 4
  store i32 %158, i32* %tmpidx0, align 4
  br label %if.end283

if.end283:                                        ; preds = %if.then230, %land.lhs.true226, %if.else222
  br label %if.end284

if.end284:                                        ; preds = %if.end283, %if.then196
  br label %if.end285

if.end285:                                        ; preds = %if.end284, %if.then163
  %159 = load i8, i8* %refidx0.addr, align 1
  %conv286 = sext i8 %159 to i32
  %cmp287 = icmp sge i32 %conv286, 0
  br i1 %cmp287, label %land.lhs.true289, label %if.else333, !prof !44

land.lhs.true289:                                 ; preds = %if.end285
  %160 = load i8, i8* %refidx1.addr, align 1
  %conv290 = sext i8 %160 to i32
  %cmp291 = icmp sge i32 %conv290, 0
  br i1 %cmp291, label %land.lhs.true293, label %if.else333, !prof !48

land.lhs.true293:                                 ; preds = %land.lhs.true289
  %161 = load i32, i32* %xfrac0, align 4
  %cmp294 = icmp eq i32 %161, 0
  br i1 %cmp294, label %land.lhs.true296, label %if.else333, !prof !46

land.lhs.true296:                                 ; preds = %land.lhs.true293
  %162 = load i32, i32* %yfrac0, align 4
  %cmp297 = icmp eq i32 %162, 0
  br i1 %cmp297, label %land.lhs.true299, label %if.else333, !prof !46

land.lhs.true299:                                 ; preds = %land.lhs.true296
  %163 = load i32, i32* %xfrac1, align 4
  %cmp300 = icmp eq i32 %163, 0
  br i1 %cmp300, label %land.lhs.true302, label %if.else333, !prof !46

land.lhs.true302:                                 ; preds = %land.lhs.true299
  %164 = load i32, i32* %yfrac1, align 4
  %cmp303 = icmp eq i32 %164, 0
  br i1 %cmp303, label %if.then305, label %if.else333, !prof !46

if.then305:                                       ; preds = %land.lhs.true302
  %165 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %166 = load i32, i32* %tmpidx0, align 4
  %idxprom306 = sext i32 %166 to i64
  %arrayidx307 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %165, i64 %idxprom306
  %arraydecay308 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx307, i32 0, i32 0
  %167 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %168 = load i32, i32* %tmpidx1, align 4
  %idxprom309 = sext i32 %168 to i64
  %arrayidx310 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %167, i64 %idxprom309
  %arraydecay311 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx310, i32 0, i32 0
  %169 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %170 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx312 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %170, i32 0, i32 9
  %171 = load i32, i32* %mem_idx312, align 4
  %idxprom313 = sext i32 %171 to i64
  %arrayidx314 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %169, i64 %idxprom313
  %arraydecay315 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx314, i32 0, i32 0
  %172 = load i32, i32* %mbaddrx.addr, align 4
  %mul316 = mul nsw i32 %172, 4
  %173 = load i8, i8* %x.addr, align 1
  %conv317 = zext i8 %173 to i32
  %add318 = add nsw i32 %mul316, %conv317
  %mul319 = mul nsw i32 %add318, 4
  %174 = load i32, i32* %mbaddry.addr, align 4
  %mul320 = mul nsw i32 %174, 4
  %175 = load i8, i8* %y.addr, align 1
  %conv321 = zext i8 %175 to i32
  %add322 = add nsw i32 %mul320, %conv321
  %mul323 = mul nsw i32 %add322, 4
  %176 = load i32, i32* %xint0, align 4
  %177 = load i32, i32* %yint0, align 4
  %178 = load i32, i32* %xint1, align 4
  %179 = load i32, i32* %yint1, align 4
  %arraydecay324 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %180 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv325 = zext i8 %180 to i32
  %181 = load i8, i8* %k.addr, align 1
  %conv326 = zext i8 %181 to i32
  %div327 = sdiv i32 %conv326, 4
  %shl328 = shl i32 1, %div327
  %and329 = and i32 %conv325, %shl328
  %cmp330 = icmp ne i32 %and329, 0
  %conv331 = zext i1 %cmp330 to i32
  %conv332 = trunc i32 %conv331 to i8
  call void @inter_luma_double_bizero_skip([144 x i8]* %arraydecay308, [144 x i8]* %arraydecay311, [144 x i8]* %arraydecay315, i32 %mul319, i32 %mul323, i32 %176, i32 %177, i32 %178, i32 %179, [4 x i32]* %arraydecay324, i8 zeroext %conv332)
  br label %if.end458

if.else333:                                       ; preds = %land.lhs.true302, %land.lhs.true299, %land.lhs.true296, %land.lhs.true293, %land.lhs.true289, %if.end285
  %182 = load i8, i8* %refidx0.addr, align 1
  %conv334 = sext i8 %182 to i32
  %cmp335 = icmp sge i32 %conv334, 0
  br i1 %cmp335, label %land.lhs.true337, label %if.else410, !prof !49

land.lhs.true337:                                 ; preds = %if.else333
  %183 = load i8, i8* %refidx1.addr, align 1
  %conv338 = sext i8 %183 to i32
  %cmp339 = icmp sge i32 %conv338, 0
  br i1 %cmp339, label %if.then341, label %if.else410, !prof !50

if.then341:                                       ; preds = %land.lhs.true337
  %184 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %185 = load i32, i32* %tmpidx0, align 4
  %idxprom342 = sext i32 %185 to i64
  %arrayidx343 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %184, i64 %idxprom342
  %arraydecay344 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx343, i32 0, i32 0
  %186 = load i32, i32* %xint0, align 4
  %187 = load i32, i32* %yint0, align 4
  %188 = load i32, i32* %xfrac0, align 4
  %conv345 = trunc i32 %188 to i8
  %189 = load i32, i32* %yfrac0, align 4
  %conv346 = trunc i32 %189 to i8
  %arraydecay347 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay344, i32 %186, i32 %187, i8 zeroext %conv345, i8 zeroext %conv346, [9 x i8]* %arraydecay347)
  %190 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %191 = load i32, i32* %tmpidx1, align 4
  %idxprom348 = sext i32 %191 to i64
  %arrayidx349 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %190, i64 %idxprom348
  %arraydecay350 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx349, i32 0, i32 0
  %192 = load i32, i32* %xint1, align 4
  %193 = load i32, i32* %yint1, align 4
  %194 = load i32, i32* %xfrac1, align 4
  %conv351 = trunc i32 %194 to i8
  %195 = load i32, i32* %yfrac1, align 4
  %conv352 = trunc i32 %195 to i8
  %arraydecay353 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp1, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay350, i32 %192, i32 %193, i8 zeroext %conv351, i8 zeroext %conv352, [9 x i8]* %arraydecay353)
  %196 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %197 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx354 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %197, i32 0, i32 9
  %198 = load i32, i32* %mem_idx354, align 4
  %idxprom355 = sext i32 %198 to i64
  %arrayidx356 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %196, i64 %idxprom355
  %arraydecay357 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx356, i32 0, i32 0
  %199 = load i32, i32* %mbaddrx.addr, align 4
  %mul358 = mul nsw i32 %199, 4
  %200 = load i8, i8* %x.addr, align 1
  %conv359 = zext i8 %200 to i32
  %add360 = add nsw i32 %mul358, %conv359
  %mul361 = mul nsw i32 %add360, 4
  %201 = load i32, i32* %mbaddry.addr, align 4
  %mul362 = mul nsw i32 %201, 4
  %202 = load i8, i8* %y.addr, align 1
  %conv363 = zext i8 %202 to i32
  %add364 = add nsw i32 %mul362, %conv363
  %mul365 = mul nsw i32 %add364, 4
  %203 = load i32, i32* %xfrac0, align 4
  %conv366 = trunc i32 %203 to i8
  %204 = load i32, i32* %yfrac0, align 4
  %conv367 = trunc i32 %204 to i8
  %205 = load i32, i32* %xfrac1, align 4
  %conv368 = trunc i32 %205 to i8
  %206 = load i32, i32* %yfrac1, align 4
  %conv369 = trunc i32 %206 to i8
  %207 = load i32, i32* %xfrac0, align 4
  %cmp370 = icmp eq i32 %207, 3
  br i1 %cmp370, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then341
  %208 = load i32, i32* %yfrac0, align 4
  %cmp372 = icmp ne i32 %208, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then341
  %209 = phi i1 [ false, %if.then341 ], [ %cmp372, %land.rhs ]
  %land.ext = zext i1 %209 to i32
  %conv374 = trunc i32 %land.ext to i8
  %210 = load i32, i32* %yfrac0, align 4
  %cmp375 = icmp eq i32 %210, 3
  br i1 %cmp375, label %land.rhs377, label %land.end380

land.rhs377:                                      ; preds = %land.end
  %211 = load i32, i32* %xfrac0, align 4
  %cmp378 = icmp ne i32 %211, 0
  br label %land.end380

land.end380:                                      ; preds = %land.rhs377, %land.end
  %212 = phi i1 [ false, %land.end ], [ %cmp378, %land.rhs377 ]
  %land.ext381 = zext i1 %212 to i32
  %conv382 = trunc i32 %land.ext381 to i8
  %213 = load i32, i32* %xfrac1, align 4
  %cmp383 = icmp eq i32 %213, 3
  br i1 %cmp383, label %land.rhs385, label %land.end388

land.rhs385:                                      ; preds = %land.end380
  %214 = load i32, i32* %yfrac1, align 4
  %cmp386 = icmp ne i32 %214, 0
  br label %land.end388

land.end388:                                      ; preds = %land.rhs385, %land.end380
  %215 = phi i1 [ false, %land.end380 ], [ %cmp386, %land.rhs385 ]
  %land.ext389 = zext i1 %215 to i32
  %conv390 = trunc i32 %land.ext389 to i8
  %216 = load i32, i32* %yfrac1, align 4
  %cmp391 = icmp eq i32 %216, 3
  br i1 %cmp391, label %land.rhs393, label %land.end396

land.rhs393:                                      ; preds = %land.end388
  %217 = load i32, i32* %xfrac1, align 4
  %cmp394 = icmp ne i32 %217, 0
  br label %land.end396

land.end396:                                      ; preds = %land.rhs393, %land.end388
  %218 = phi i1 [ false, %land.end388 ], [ %cmp394, %land.rhs393 ]
  %land.ext397 = zext i1 %218 to i32
  %conv398 = trunc i32 %land.ext397 to i8
  %arraydecay399 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  %arraydecay400 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp1, i32 0, i32 0
  %arraydecay401 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %219 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv402 = zext i8 %219 to i32
  %220 = load i8, i8* %k.addr, align 1
  %conv403 = zext i8 %220 to i32
  %div404 = sdiv i32 %conv403, 4
  %shl405 = shl i32 1, %div404
  %and406 = and i32 %conv402, %shl405
  %cmp407 = icmp ne i32 %and406, 0
  %conv408 = zext i1 %cmp407 to i32
  %conv409 = trunc i32 %conv408 to i8
  call void @inter_luma_double_skip([144 x i8]* %arraydecay357, i32 %mul361, i32 %mul365, i8 zeroext %conv366, i8 zeroext %conv367, i8 zeroext %conv368, i8 zeroext %conv369, i8 zeroext %conv374, i8 zeroext %conv382, i8 zeroext %conv390, i8 zeroext %conv398, [9 x i8]* %arraydecay399, [9 x i8]* %arraydecay400, [4 x i32]* %arraydecay401, i8 zeroext %conv409)
  br label %if.end457

if.else410:                                       ; preds = %land.lhs.true337, %if.else333
  %221 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %222 = load i32, i32* %tmpidx0, align 4
  %idxprom411 = sext i32 %222 to i64
  %arrayidx412 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %221, i64 %idxprom411
  %arraydecay413 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx412, i32 0, i32 0
  %223 = load i32, i32* %xint0, align 4
  %224 = load i32, i32* %yint0, align 4
  %225 = load i32, i32* %xfrac0, align 4
  %conv414 = trunc i32 %225 to i8
  %226 = load i32, i32* %yfrac0, align 4
  %conv415 = trunc i32 %226 to i8
  %arraydecay416 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  call void @copy_comp([144 x i8]* %arraydecay413, i32 %223, i32 %224, i8 zeroext %conv414, i8 zeroext %conv415, [9 x i8]* %arraydecay416)
  %227 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %228 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx417 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %228, i32 0, i32 9
  %229 = load i32, i32* %mem_idx417, align 4
  %idxprom418 = sext i32 %229 to i64
  %arrayidx419 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %227, i64 %idxprom418
  %arraydecay420 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx419, i32 0, i32 0
  %arraydecay421 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %rMbL, i32 0, i32 0
  %230 = load i32, i32* %mbaddrx.addr, align 4
  %mul422 = mul nsw i32 %230, 4
  %231 = load i8, i8* %x.addr, align 1
  %conv423 = zext i8 %231 to i32
  %add424 = add nsw i32 %mul422, %conv423
  %mul425 = mul nsw i32 %add424, 4
  %232 = load i32, i32* %mbaddry.addr, align 4
  %mul426 = mul nsw i32 %232, 4
  %233 = load i8, i8* %y.addr, align 1
  %conv427 = zext i8 %233 to i32
  %add428 = add nsw i32 %mul426, %conv427
  %mul429 = mul nsw i32 %add428, 4
  %234 = load i32, i32* %xfrac0, align 4
  %conv430 = trunc i32 %234 to i8
  %235 = load i32, i32* %yfrac0, align 4
  %conv431 = trunc i32 %235 to i8
  %236 = load i32, i32* %xfrac0, align 4
  %cmp432 = icmp eq i32 %236, 3
  br i1 %cmp432, label %land.rhs434, label %land.end437, !prof !51

land.rhs434:                                      ; preds = %if.else410
  %237 = load i32, i32* %yfrac0, align 4
  %cmp435 = icmp ne i32 %237, 0
  br label %land.end437

land.end437:                                      ; preds = %land.rhs434, %if.else410
  %238 = phi i1 [ false, %if.else410 ], [ %cmp435, %land.rhs434 ]
  %land.ext438 = zext i1 %238 to i32
  %conv439 = trunc i32 %land.ext438 to i8
  %239 = load i32, i32* %yfrac0, align 4
  %cmp440 = icmp eq i32 %239, 3
  br i1 %cmp440, label %land.rhs442, label %land.end445, !prof !52

land.rhs442:                                      ; preds = %land.end437
  %240 = load i32, i32* %xfrac0, align 4
  %cmp443 = icmp ne i32 %240, 0
  br label %land.end445

land.end445:                                      ; preds = %land.rhs442, %land.end437
  %241 = phi i1 [ false, %land.end437 ], [ %cmp443, %land.rhs442 ]
  %land.ext446 = zext i1 %241 to i32
  %conv447 = trunc i32 %land.ext446 to i8
  %arraydecay448 = getelementptr inbounds [9 x [9 x i8]], [9 x [9 x i8]]* %inter_temp0, i32 0, i32 0
  %242 = load i8, i8* %CodedPatternLuma.addr, align 1
  %conv449 = zext i8 %242 to i32
  %243 = load i8, i8* %k.addr, align 1
  %conv450 = zext i8 %243 to i32
  %div451 = sdiv i32 %conv450, 4
  %shl452 = shl i32 1, %div451
  %and453 = and i32 %conv449, %shl452
  %cmp454 = icmp ne i32 %and453, 0
  %conv455 = zext i1 %cmp454 to i32
  %conv456 = trunc i32 %conv455 to i8
  call void @inter_luma_single([144 x i8]* %arraydecay420, [4 x i32]* %arraydecay421, i32 %mul425, i32 %mul429, i8 zeroext %conv430, i8 zeroext %conv431, i8 zeroext %conv439, i8 zeroext %conv447, [9 x i8]* %arraydecay448, i8 zeroext %conv456)
  br label %if.end457

if.end457:                                        ; preds = %land.end445, %land.end396
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %if.then305
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %lor.end153
  br label %if.end460

if.end460:                                        ; preds = %if.end459, %lor.end
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

declare dso_local zeroext i8 @nc_Luma([9 x i8]*, [36 x i8]*, i32, i32) #1

declare dso_local zeroext i8 @residual_block_cavlc_16([4 x i32]*, %struct.NALU_t*, i8*, i64*, i32, i32, i32) #1

declare dso_local void @scale_residual4x4_and_trans_inverse(i32, i32, i32, i32, i32, [4 x i32]*, [4 x i32]*, i32, i8 zeroext) #1

declare dso_local void @predict_intra4x4_luma_NonField([4 x i8]*, [144 x i8]*, i8 zeroext, i8 zeroext, i32, i32, i32) #1

declare dso_local void @inter_luma_double_bizero_skip([144 x i8]*, [144 x i8]*, [144 x i8]*, i32, i32, i32, i32, i32, i32, [4 x i32]*, i8 zeroext) #1

declare dso_local void @copy_comp([144 x i8]*, i32, i32, i8 zeroext, i8 zeroext, [9 x i8]*) #1

declare dso_local void @inter_luma_double_skip([144 x i8]*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, [9 x i8]*, [9 x i8]*, [4 x i32]*, i8 zeroext) #1

declare dso_local void @inter_luma_single([144 x i8]*, [4 x i32]*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, [9 x i8]*, i8 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_chroma(i8 zeroext %CodedPatternChroma, [22 x [18 x i8]]* %NzChroma, [9 x i8]* %Imode, i32 %mbaddrx, i32 %mbaddry, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 signext %qPc, i8 signext %qPcm6, i8 signext %temp1c, i8 signext %temp2c, i8 signext %temp3c, [2 x i32]* %coeffDCC_0, [2 x i32]* %coeffDCC_1, [2 x i8]* %refidx0, [2 x i8]* %refidx1, [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]* %mvd1, %struct.ImageParameters* %img, i8 zeroext %tmpImode, [4 x [4 x i8]]* %predC_0, [4 x [4 x i8]]* %predC_1, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1) #0 !prof !53 {
entry:
  %CodedPatternChroma.addr = alloca i8, align 1
  %NzChroma.addr = alloca [22 x [18 x i8]]*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %mbaddrx.addr = alloca i32, align 4
  %mbaddry.addr = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %qPc.addr = alloca i8, align 1
  %qPcm6.addr = alloca i8, align 1
  %temp1c.addr = alloca i8, align 1
  %temp2c.addr = alloca i8, align 1
  %temp3c.addr = alloca i8, align 1
  %coeffDCC_0.addr = alloca [2 x i32]*, align 8
  %coeffDCC_1.addr = alloca [2 x i32]*, align 8
  %refidx0.addr = alloca [2 x i8]*, align 8
  %refidx1.addr = alloca [2 x i8]*, align 8
  %mvd0.addr = alloca [4 x [2 x i32]]*, align 8
  %mvd1.addr = alloca [4 x [2 x i32]]*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %tmpImode.addr = alloca i8, align 1
  %predC_0.addr = alloca [4 x [4 x i8]]*, align 8
  %predC_1.addr = alloca [4 x [4 x i8]]*, align 8
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %nC = alloca i32, align 4
  %coeffACC_0 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %coeffACC_1 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %rMbC_0 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %rMbC_1 = alloca [2 x [2 x [4 x [4 x i32]]]], align 16
  %mvdC0 = alloca [2 x [2 x [2 x i32]]], align 16
  %mvdC1 = alloca [2 x [2 x [2 x i32]]], align 16
  %tmpidx0 = alloca i32, align 4
  %tmpidx1 = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8 %CodedPatternChroma, i8* %CodedPatternChroma.addr, align 1
  store [22 x [18 x i8]]* %NzChroma, [22 x [18 x i8]]** %NzChroma.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store i32 %mbaddrx, i32* %mbaddrx.addr, align 4
  store i32 %mbaddry, i32* %mbaddry.addr, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %qPc, i8* %qPc.addr, align 1
  store i8 %qPcm6, i8* %qPcm6.addr, align 1
  store i8 %temp1c, i8* %temp1c.addr, align 1
  store i8 %temp2c, i8* %temp2c.addr, align 1
  store i8 %temp3c, i8* %temp3c.addr, align 1
  store [2 x i32]* %coeffDCC_0, [2 x i32]** %coeffDCC_0.addr, align 8
  store [2 x i32]* %coeffDCC_1, [2 x i32]** %coeffDCC_1.addr, align 8
  store [2 x i8]* %refidx0, [2 x i8]** %refidx0.addr, align 8
  store [2 x i8]* %refidx1, [2 x i8]** %refidx1.addr, align 8
  store [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]** %mvd0.addr, align 8
  store [4 x [2 x i32]]* %mvd1, [4 x [2 x i32]]** %mvd1.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  store i8 %tmpImode, i8* %tmpImode.addr, align 1
  store [4 x [4 x i8]]* %predC_0, [4 x [4 x i8]]** %predC_0.addr, align 8
  store [4 x [4 x i8]]* %predC_1, [4 x [4 x i8]]** %predC_1.addr, align 8
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store i32 0, i32* %nC, align 4
  %0 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 256, i1 false)
  %1 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %2 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 256, i1 false)
  %3 = bitcast [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 256, i1 false)
  %4 = bitcast [2 x [2 x [2 x i32]]]* %mvdC0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 32, i1 false)
  %5 = bitcast [2 x [2 x [2 x i32]]]* %mvdC1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 32, i1 false)
  store i32 0, i32* %tmpidx0, align 4
  store i32 0, i32* %tmpidx1, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc60, %entry
  %6 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, 2
  br i1 %cmp, label %for.body, label %for.end62, !prof !54

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc57, %for.body
  %7 = load i32, i32* %x, align 4
  %cmp2 = icmp slt i32 %7, 2
  br i1 %cmp2, label %for.body3, label %for.end59, !prof !55

for.body3:                                        ; preds = %for.cond1
  %8 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !56

if.then:                                          ; preds = %for.body3
  %9 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %10 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %10, i64 0
  %arraydecay = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx, i32 0, i32 0
  %11 = load i32, i32* %mbaddrx.addr, align 4
  %mul = mul nsw i32 %11, 2
  %12 = load i32, i32* %x, align 4
  %add = add nsw i32 %mul, %12
  %13 = load i32, i32* %mbaddry.addr, align 4
  %mul4 = mul nsw i32 %13, 2
  %14 = load i32, i32* %y, align 4
  %add5 = add nsw i32 %mul4, %14
  %call = call zeroext i8 @nc_Chroma([9 x i8]* %9, [18 x i8]* %arraydecay, i32 %add, i32 %add5)
  %conv6 = zext i8 %call to i32
  store i32 %conv6, i32* %nC, align 4
  %15 = load i32, i32* %x, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx7 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom
  %16 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %16 to i64
  %arrayidx9 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx7, i64 0, i64 %idxprom8
  %arraydecay10 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx9, i32 0, i32 0
  %17 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %18 = load i8*, i8** %nalu_buf.addr, align 8
  %19 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %20 = load i32, i32* %nC, align 4
  %call11 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay10, %struct.NALU_t* %17, i8* %18, i64* %19, i32 1, i32 15, i32 %20)
  %21 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx12 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %21, i64 0
  %22 = load i32, i32* %mbaddrx.addr, align 4
  %mul13 = mul nsw i32 %22, 2
  %23 = load i32, i32* %x, align 4
  %add14 = add nsw i32 %mul13, %23
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx12, i64 0, i64 %idxprom15
  %24 = load i32, i32* %mbaddry.addr, align 4
  %mul17 = mul nsw i32 %24, 2
  %25 = load i32, i32* %y, align 4
  %add18 = add nsw i32 %mul17, %25
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx16, i64 0, i64 %idxprom19
  store i8 %call11, i8* %arrayidx20, align 1
  br label %if.end

if.else:                                          ; preds = %for.body3
  %26 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx21 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %26, i64 0
  %27 = load i32, i32* %mbaddrx.addr, align 4
  %mul22 = mul nsw i32 %27, 2
  %28 = load i32, i32* %x, align 4
  %add23 = add nsw i32 %mul22, %28
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx21, i64 0, i64 %idxprom24
  %29 = load i32, i32* %mbaddry.addr, align 4
  %mul26 = mul nsw i32 %29, 2
  %30 = load i32, i32* %y, align 4
  %add27 = add nsw i32 %mul26, %30
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx25, i64 0, i64 %idxprom28
  store i8 0, i8* %arrayidx29, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc54, %if.else
  %31 = load i32, i32* %i, align 4
  %cmp31 = icmp slt i32 %31, 4
  br i1 %cmp31, label %for.body33, label %for.end56, !prof !57

for.body33:                                       ; preds = %for.cond30
  store i32 0, i32* %j, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc, %for.body33
  %32 = load i32, i32* %j, align 4
  %cmp35 = icmp slt i32 %32, 4
  br i1 %cmp35, label %for.body37, label %for.end, !prof !58

for.body37:                                       ; preds = %for.cond34
  %33 = load i32, i32* %x, align 4
  %idxprom38 = sext i32 %33 to i64
  %arrayidx39 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom38
  %34 = load i32, i32* %y, align 4
  %idxprom40 = sext i32 %34 to i64
  %arrayidx41 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx39, i64 0, i64 %idxprom40
  %35 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %35 to i64
  %arrayidx43 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx41, i64 0, i64 %idxprom42
  %36 = load i32, i32* %j, align 4
  %idxprom44 = sext i32 %36 to i64
  %arrayidx45 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx43, i64 0, i64 %idxprom44
  store i32 0, i32* %arrayidx45, align 4
  %37 = load i32, i32* %x, align 4
  %idxprom46 = sext i32 %37 to i64
  %arrayidx47 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom46
  %38 = load i32, i32* %y, align 4
  %idxprom48 = sext i32 %38 to i64
  %arrayidx49 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx47, i64 0, i64 %idxprom48
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx49, i64 0, i64 %idxprom50
  %40 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %40 to i64
  %arrayidx53 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx51, i64 0, i64 %idxprom52
  store i32 0, i32* %arrayidx53, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body37
  %41 = load i32, i32* %j, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond34

for.end:                                          ; preds = %for.cond34
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %42 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %42, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond30

for.end56:                                        ; preds = %for.cond30
  br label %if.end

if.end:                                           ; preds = %for.end56, %if.then
  br label %for.inc57

for.inc57:                                        ; preds = %if.end
  %43 = load i32, i32* %x, align 4
  %inc58 = add nsw i32 %43, 1
  store i32 %inc58, i32* %x, align 4
  br label %for.cond1

for.end59:                                        ; preds = %for.cond1
  br label %for.inc60

for.inc60:                                        ; preds = %for.end59
  %44 = load i32, i32* %y, align 4
  %inc61 = add nsw i32 %44, 1
  store i32 %inc61, i32* %y, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc142, %for.end62
  %45 = load i32, i32* %y, align 4
  %cmp64 = icmp slt i32 %45, 2
  br i1 %cmp64, label %for.body66, label %for.end144, !prof !54

for.body66:                                       ; preds = %for.cond63
  store i32 0, i32* %x, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc139, %for.body66
  %46 = load i32, i32* %x, align 4
  %cmp68 = icmp slt i32 %46, 2
  br i1 %cmp68, label %for.body70, label %for.end141, !prof !55

for.body70:                                       ; preds = %for.cond67
  %47 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv71 = zext i8 %47 to i32
  %and72 = and i32 %conv71, 2
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.else98, !prof !56

if.then74:                                        ; preds = %for.body70
  %48 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %49 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx75 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %49, i64 1
  %arraydecay76 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx75, i32 0, i32 0
  %50 = load i32, i32* %mbaddrx.addr, align 4
  %mul77 = mul nsw i32 %50, 2
  %51 = load i32, i32* %x, align 4
  %add78 = add nsw i32 %mul77, %51
  %52 = load i32, i32* %mbaddry.addr, align 4
  %mul79 = mul nsw i32 %52, 2
  %53 = load i32, i32* %y, align 4
  %add80 = add nsw i32 %mul79, %53
  %call81 = call zeroext i8 @nc_Chroma([9 x i8]* %48, [18 x i8]* %arraydecay76, i32 %add78, i32 %add80)
  %conv82 = zext i8 %call81 to i32
  store i32 %conv82, i32* %nC, align 4
  %54 = load i32, i32* %x, align 4
  %idxprom83 = sext i32 %54 to i64
  %arrayidx84 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom83
  %55 = load i32, i32* %y, align 4
  %idxprom85 = sext i32 %55 to i64
  %arrayidx86 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx84, i64 0, i64 %idxprom85
  %arraydecay87 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx86, i32 0, i32 0
  %56 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %57 = load i8*, i8** %nalu_buf.addr, align 8
  %58 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %59 = load i32, i32* %nC, align 4
  %call88 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay87, %struct.NALU_t* %56, i8* %57, i64* %58, i32 1, i32 15, i32 %59)
  %60 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx89 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %60, i64 1
  %61 = load i32, i32* %mbaddrx.addr, align 4
  %mul90 = mul nsw i32 %61, 2
  %62 = load i32, i32* %x, align 4
  %add91 = add nsw i32 %mul90, %62
  %idxprom92 = sext i32 %add91 to i64
  %arrayidx93 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx89, i64 0, i64 %idxprom92
  %63 = load i32, i32* %mbaddry.addr, align 4
  %mul94 = mul nsw i32 %63, 2
  %64 = load i32, i32* %y, align 4
  %add95 = add nsw i32 %mul94, %64
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx93, i64 0, i64 %idxprom96
  store i8 %call88, i8* %arrayidx97, align 1
  br label %if.end138

if.else98:                                        ; preds = %for.body70
  %65 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %arrayidx99 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %65, i64 1
  %66 = load i32, i32* %mbaddrx.addr, align 4
  %mul100 = mul nsw i32 %66, 2
  %67 = load i32, i32* %x, align 4
  %add101 = add nsw i32 %mul100, %67
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %arrayidx99, i64 0, i64 %idxprom102
  %68 = load i32, i32* %mbaddry.addr, align 4
  %mul104 = mul nsw i32 %68, 2
  %69 = load i32, i32* %y, align 4
  %add105 = add nsw i32 %mul104, %69
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx103, i64 0, i64 %idxprom106
  store i8 0, i8* %arrayidx107, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond108

for.cond108:                                      ; preds = %for.inc135, %if.else98
  %70 = load i32, i32* %i, align 4
  %cmp109 = icmp slt i32 %70, 4
  br i1 %cmp109, label %for.body111, label %for.end137, !prof !57

for.body111:                                      ; preds = %for.cond108
  store i32 0, i32* %j, align 4
  br label %for.cond112

for.cond112:                                      ; preds = %for.inc132, %for.body111
  %71 = load i32, i32* %j, align 4
  %cmp113 = icmp slt i32 %71, 4
  br i1 %cmp113, label %for.body115, label %for.end134, !prof !58

for.body115:                                      ; preds = %for.cond112
  %72 = load i32, i32* %x, align 4
  %idxprom116 = sext i32 %72 to i64
  %arrayidx117 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom116
  %73 = load i32, i32* %y, align 4
  %idxprom118 = sext i32 %73 to i64
  %arrayidx119 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx117, i64 0, i64 %idxprom118
  %74 = load i32, i32* %i, align 4
  %idxprom120 = sext i32 %74 to i64
  %arrayidx121 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx119, i64 0, i64 %idxprom120
  %75 = load i32, i32* %j, align 4
  %idxprom122 = sext i32 %75 to i64
  %arrayidx123 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx121, i64 0, i64 %idxprom122
  store i32 0, i32* %arrayidx123, align 4
  %76 = load i32, i32* %x, align 4
  %idxprom124 = sext i32 %76 to i64
  %arrayidx125 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom124
  %77 = load i32, i32* %y, align 4
  %idxprom126 = sext i32 %77 to i64
  %arrayidx127 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx125, i64 0, i64 %idxprom126
  %78 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %78 to i64
  %arrayidx129 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx127, i64 0, i64 %idxprom128
  %79 = load i32, i32* %j, align 4
  %idxprom130 = sext i32 %79 to i64
  %arrayidx131 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx129, i64 0, i64 %idxprom130
  store i32 0, i32* %arrayidx131, align 4
  br label %for.inc132

for.inc132:                                       ; preds = %for.body115
  %80 = load i32, i32* %j, align 4
  %inc133 = add nsw i32 %80, 1
  store i32 %inc133, i32* %j, align 4
  br label %for.cond112

for.end134:                                       ; preds = %for.cond112
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %81 = load i32, i32* %i, align 4
  %inc136 = add nsw i32 %81, 1
  store i32 %inc136, i32* %i, align 4
  br label %for.cond108

for.end137:                                       ; preds = %for.cond108
  br label %if.end138

if.end138:                                        ; preds = %for.end137, %if.then74
  br label %for.inc139

for.inc139:                                       ; preds = %if.end138
  %82 = load i32, i32* %x, align 4
  %inc140 = add nsw i32 %82, 1
  store i32 %inc140, i32* %x, align 4
  br label %for.cond67

for.end141:                                       ; preds = %for.cond67
  br label %for.inc142

for.inc142:                                       ; preds = %for.end141
  %83 = load i32, i32* %y, align 4
  %inc143 = add nsw i32 %83, 1
  store i32 %inc143, i32* %y, align 4
  br label %for.cond63

for.end144:                                       ; preds = %for.cond63
  store i32 0, i32* %y, align 4
  br label %for.cond145

for.cond145:                                      ; preds = %for.inc611, %for.end144
  %84 = load i32, i32* %y, align 4
  %cmp146 = icmp slt i32 %84, 2
  br i1 %cmp146, label %for.body148, label %for.end613, !prof !54

for.body148:                                      ; preds = %for.cond145
  store i32 0, i32* %x, align 4
  br label %for.cond149

for.cond149:                                      ; preds = %for.inc608, %for.body148
  %85 = load i32, i32* %x, align 4
  %cmp150 = icmp slt i32 %85, 2
  br i1 %cmp150, label %for.body152, label %for.end610, !prof !55

for.body152:                                      ; preds = %for.cond149
  %86 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv153 = zext i8 %86 to i32
  %and154 = and i32 %conv153, 3
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then156, label %if.end195, !prof !59

if.then156:                                       ; preds = %for.body152
  %87 = load i8, i8* %qPc.addr, align 1
  %conv157 = sext i8 %87 to i32
  %88 = load i8, i8* %qPcm6.addr, align 1
  %conv158 = sext i8 %88 to i32
  %89 = load i8, i8* %temp1c.addr, align 1
  %conv159 = sext i8 %89 to i32
  %90 = load i8, i8* %temp2c.addr, align 1
  %conv160 = sext i8 %90 to i32
  %91 = load i8, i8* %temp3c.addr, align 1
  %conv161 = sext i8 %91 to i32
  %92 = load i32, i32* %x, align 4
  %idxprom162 = sext i32 %92 to i64
  %arrayidx163 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_0, i64 0, i64 %idxprom162
  %93 = load i32, i32* %y, align 4
  %idxprom164 = sext i32 %93 to i64
  %arrayidx165 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx163, i64 0, i64 %idxprom164
  %arraydecay166 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx165, i32 0, i32 0
  %94 = load i32, i32* %x, align 4
  %idxprom167 = sext i32 %94 to i64
  %arrayidx168 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom167
  %95 = load i32, i32* %y, align 4
  %idxprom169 = sext i32 %95 to i64
  %arrayidx170 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx168, i64 0, i64 %idxprom169
  %arraydecay171 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx170, i32 0, i32 0
  %96 = load [2 x i32]*, [2 x i32]** %coeffDCC_0.addr, align 8
  %97 = load i32, i32* %x, align 4
  %idxprom172 = sext i32 %97 to i64
  %arrayidx173 = getelementptr inbounds [2 x i32], [2 x i32]* %96, i64 %idxprom172
  %98 = load i32, i32* %y, align 4
  %idxprom174 = sext i32 %98 to i64
  %arrayidx175 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx173, i64 0, i64 %idxprom174
  %99 = load i32, i32* %arrayidx175, align 4
  call void @scale_residual4x4_and_trans_inverse(i32 %conv157, i32 %conv158, i32 %conv159, i32 %conv160, i32 %conv161, [4 x i32]* %arraydecay166, [4 x i32]* %arraydecay171, i32 %99, i8 zeroext 1)
  %100 = load i8, i8* %qPc.addr, align 1
  %conv176 = sext i8 %100 to i32
  %101 = load i8, i8* %qPcm6.addr, align 1
  %conv177 = sext i8 %101 to i32
  %102 = load i8, i8* %temp1c.addr, align 1
  %conv178 = sext i8 %102 to i32
  %103 = load i8, i8* %temp2c.addr, align 1
  %conv179 = sext i8 %103 to i32
  %104 = load i8, i8* %temp3c.addr, align 1
  %conv180 = sext i8 %104 to i32
  %105 = load i32, i32* %x, align 4
  %idxprom181 = sext i32 %105 to i64
  %arrayidx182 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %coeffACC_1, i64 0, i64 %idxprom181
  %106 = load i32, i32* %y, align 4
  %idxprom183 = sext i32 %106 to i64
  %arrayidx184 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx182, i64 0, i64 %idxprom183
  %arraydecay185 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx184, i32 0, i32 0
  %107 = load i32, i32* %x, align 4
  %idxprom186 = sext i32 %107 to i64
  %arrayidx187 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom186
  %108 = load i32, i32* %y, align 4
  %idxprom188 = sext i32 %108 to i64
  %arrayidx189 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx187, i64 0, i64 %idxprom188
  %arraydecay190 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx189, i32 0, i32 0
  %109 = load [2 x i32]*, [2 x i32]** %coeffDCC_1.addr, align 8
  %110 = load i32, i32* %x, align 4
  %idxprom191 = sext i32 %110 to i64
  %arrayidx192 = getelementptr inbounds [2 x i32], [2 x i32]* %109, i64 %idxprom191
  %111 = load i32, i32* %y, align 4
  %idxprom193 = sext i32 %111 to i64
  %arrayidx194 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx192, i64 0, i64 %idxprom193
  %112 = load i32, i32* %arrayidx194, align 4
  call void @scale_residual4x4_and_trans_inverse(i32 %conv176, i32 %conv177, i32 %conv178, i32 %conv179, i32 %conv180, [4 x i32]* %arraydecay185, [4 x i32]* %arraydecay190, i32 %112, i8 zeroext 1)
  br label %if.end195

if.end195:                                        ; preds = %if.then156, %for.body152
  %113 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %114 = load i32, i32* %x, align 4
  %idxprom196 = sext i32 %114 to i64
  %arrayidx197 = getelementptr inbounds [2 x i8], [2 x i8]* %113, i64 %idxprom196
  %115 = load i32, i32* %y, align 4
  %idxprom198 = sext i32 %115 to i64
  %arrayidx199 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx197, i64 0, i64 %idxprom198
  %116 = load i8, i8* %arrayidx199, align 1
  %conv200 = sext i8 %116 to i32
  %cmp201 = icmp sge i32 %conv200, 0
  br i1 %cmp201, label %land.lhs.true, label %if.else295, !prof !60

land.lhs.true:                                    ; preds = %if.end195
  %117 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %118 = load i32, i32* %x, align 4
  %idxprom203 = sext i32 %118 to i64
  %arrayidx204 = getelementptr inbounds [2 x i8], [2 x i8]* %117, i64 %idxprom203
  %119 = load i32, i32* %y, align 4
  %idxprom205 = sext i32 %119 to i64
  %arrayidx206 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx204, i64 0, i64 %idxprom205
  %120 = load i8, i8* %arrayidx206, align 1
  %conv207 = sext i8 %120 to i32
  %cmp208 = icmp sge i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else295, !prof !61

if.then210:                                       ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond211

for.cond211:                                      ; preds = %for.inc278, %if.then210
  %121 = load i32, i32* %i, align 4
  %cmp212 = icmp slt i32 %121, 2
  br i1 %cmp212, label %for.body214, label %for.end280, !prof !62

for.body214:                                      ; preds = %for.cond211
  store i32 0, i32* %j, align 4
  br label %for.cond215

for.cond215:                                      ; preds = %for.inc275, %for.body214
  %122 = load i32, i32* %j, align 4
  %cmp216 = icmp slt i32 %122, 2
  br i1 %cmp216, label %for.body218, label %for.end277, !prof !63

for.body218:                                      ; preds = %for.cond215
  %123 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %124 = load i32, i32* %x, align 4
  %mul219 = mul nsw i32 %124, 2
  %125 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %mul219, %125
  %idxprom221 = sext i32 %add220 to i64
  %arrayidx222 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %123, i64 %idxprom221
  %126 = load i32, i32* %y, align 4
  %mul223 = mul nsw i32 %126, 2
  %127 = load i32, i32* %j, align 4
  %add224 = add nsw i32 %mul223, %127
  %idxprom225 = sext i32 %add224 to i64
  %arrayidx226 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx222, i64 0, i64 %idxprom225
  %arrayidx227 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx226, i64 0, i64 0
  %128 = load i32, i32* %arrayidx227, align 4
  %129 = load i32, i32* %i, align 4
  %idxprom228 = sext i32 %129 to i64
  %arrayidx229 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom228
  %130 = load i32, i32* %j, align 4
  %idxprom230 = sext i32 %130 to i64
  %arrayidx231 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx229, i64 0, i64 %idxprom230
  %arrayidx232 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx231, i64 0, i64 0
  store i32 %128, i32* %arrayidx232, align 8
  %131 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %132 = load i32, i32* %x, align 4
  %mul233 = mul nsw i32 %132, 2
  %133 = load i32, i32* %i, align 4
  %add234 = add nsw i32 %mul233, %133
  %idxprom235 = sext i32 %add234 to i64
  %arrayidx236 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %131, i64 %idxprom235
  %134 = load i32, i32* %y, align 4
  %mul237 = mul nsw i32 %134, 2
  %135 = load i32, i32* %j, align 4
  %add238 = add nsw i32 %mul237, %135
  %idxprom239 = sext i32 %add238 to i64
  %arrayidx240 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx236, i64 0, i64 %idxprom239
  %arrayidx241 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx240, i64 0, i64 0
  %136 = load i32, i32* %arrayidx241, align 4
  %137 = load i32, i32* %i, align 4
  %idxprom242 = sext i32 %137 to i64
  %arrayidx243 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i64 0, i64 %idxprom242
  %138 = load i32, i32* %j, align 4
  %idxprom244 = sext i32 %138 to i64
  %arrayidx245 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx243, i64 0, i64 %idxprom244
  %arrayidx246 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx245, i64 0, i64 0
  store i32 %136, i32* %arrayidx246, align 8
  %139 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %140 = load i32, i32* %x, align 4
  %mul247 = mul nsw i32 %140, 2
  %141 = load i32, i32* %i, align 4
  %add248 = add nsw i32 %mul247, %141
  %idxprom249 = sext i32 %add248 to i64
  %arrayidx250 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %139, i64 %idxprom249
  %142 = load i32, i32* %y, align 4
  %mul251 = mul nsw i32 %142, 2
  %143 = load i32, i32* %j, align 4
  %add252 = add nsw i32 %mul251, %143
  %idxprom253 = sext i32 %add252 to i64
  %arrayidx254 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx250, i64 0, i64 %idxprom253
  %arrayidx255 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx254, i64 0, i64 1
  %144 = load i32, i32* %arrayidx255, align 4
  %145 = load i32, i32* %i, align 4
  %idxprom256 = sext i32 %145 to i64
  %arrayidx257 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom256
  %146 = load i32, i32* %j, align 4
  %idxprom258 = sext i32 %146 to i64
  %arrayidx259 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx257, i64 0, i64 %idxprom258
  %arrayidx260 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx259, i64 0, i64 1
  store i32 %144, i32* %arrayidx260, align 4
  %147 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %148 = load i32, i32* %x, align 4
  %mul261 = mul nsw i32 %148, 2
  %149 = load i32, i32* %i, align 4
  %add262 = add nsw i32 %mul261, %149
  %idxprom263 = sext i32 %add262 to i64
  %arrayidx264 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %147, i64 %idxprom263
  %150 = load i32, i32* %y, align 4
  %mul265 = mul nsw i32 %150, 2
  %151 = load i32, i32* %j, align 4
  %add266 = add nsw i32 %mul265, %151
  %idxprom267 = sext i32 %add266 to i64
  %arrayidx268 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx264, i64 0, i64 %idxprom267
  %arrayidx269 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx268, i64 0, i64 1
  %152 = load i32, i32* %arrayidx269, align 4
  %153 = load i32, i32* %i, align 4
  %idxprom270 = sext i32 %153 to i64
  %arrayidx271 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i64 0, i64 %idxprom270
  %154 = load i32, i32* %j, align 4
  %idxprom272 = sext i32 %154 to i64
  %arrayidx273 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx271, i64 0, i64 %idxprom272
  %arrayidx274 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx273, i64 0, i64 1
  store i32 %152, i32* %arrayidx274, align 4
  br label %for.inc275

for.inc275:                                       ; preds = %for.body218
  %155 = load i32, i32* %j, align 4
  %inc276 = add nsw i32 %155, 1
  store i32 %inc276, i32* %j, align 4
  br label %for.cond215

for.end277:                                       ; preds = %for.cond215
  br label %for.inc278

for.inc278:                                       ; preds = %for.end277
  %156 = load i32, i32* %i, align 4
  %inc279 = add nsw i32 %156, 1
  store i32 %inc279, i32* %i, align 4
  br label %for.cond211

for.end280:                                       ; preds = %for.cond211
  %157 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %157, i32 0, i32 12
  %158 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %159 = load i32, i32* %x, align 4
  %idxprom281 = sext i32 %159 to i64
  %arrayidx282 = getelementptr inbounds [2 x i8], [2 x i8]* %158, i64 %idxprom281
  %160 = load i32, i32* %y, align 4
  %idxprom283 = sext i32 %160 to i64
  %arrayidx284 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx282, i64 0, i64 %idxprom283
  %161 = load i8, i8* %arrayidx284, align 1
  %conv285 = sext i8 %161 to i32
  %idxprom286 = zext i32 %conv285 to i64
  %arrayidx287 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i64 0, i64 %idxprom286
  %162 = load i32, i32* %arrayidx287, align 4
  store i32 %162, i32* %tmpidx0, align 4
  %163 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %163, i32 0, i32 13
  %164 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %165 = load i32, i32* %x, align 4
  %idxprom288 = sext i32 %165 to i64
  %arrayidx289 = getelementptr inbounds [2 x i8], [2 x i8]* %164, i64 %idxprom288
  %166 = load i32, i32* %y, align 4
  %idxprom290 = sext i32 %166 to i64
  %arrayidx291 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx289, i64 0, i64 %idxprom290
  %167 = load i8, i8* %arrayidx291, align 1
  %conv292 = sext i8 %167 to i32
  %idxprom293 = zext i32 %conv292 to i64
  %arrayidx294 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 %idxprom293
  %168 = load i32, i32* %arrayidx294, align 4
  store i32 %168, i32* %tmpidx1, align 4
  br label %if.end431

if.else295:                                       ; preds = %land.lhs.true, %if.end195
  %169 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %170 = load i32, i32* %x, align 4
  %idxprom296 = sext i32 %170 to i64
  %arrayidx297 = getelementptr inbounds [2 x i8], [2 x i8]* %169, i64 %idxprom296
  %171 = load i32, i32* %y, align 4
  %idxprom298 = sext i32 %171 to i64
  %arrayidx299 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx297, i64 0, i64 %idxprom298
  %172 = load i8, i8* %arrayidx299, align 1
  %conv300 = sext i8 %172 to i32
  %cmp301 = icmp sge i32 %conv300, 0
  br i1 %cmp301, label %land.lhs.true303, label %if.else362, !prof !64

land.lhs.true303:                                 ; preds = %if.else295
  %173 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %174 = load i32, i32* %x, align 4
  %idxprom304 = sext i32 %174 to i64
  %arrayidx305 = getelementptr inbounds [2 x i8], [2 x i8]* %173, i64 %idxprom304
  %175 = load i32, i32* %y, align 4
  %idxprom306 = sext i32 %175 to i64
  %arrayidx307 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx305, i64 0, i64 %idxprom306
  %176 = load i8, i8* %arrayidx307, align 1
  %conv308 = sext i8 %176 to i32
  %cmp309 = icmp slt i32 %conv308, 0
  br i1 %cmp309, label %if.then311, label %if.else362, !prof !64

if.then311:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %i, align 4
  br label %for.cond312

for.cond312:                                      ; preds = %for.inc351, %if.then311
  %177 = load i32, i32* %i, align 4
  %cmp313 = icmp slt i32 %177, 2
  br i1 %cmp313, label %for.body315, label %for.end353, !prof !65

for.body315:                                      ; preds = %for.cond312
  store i32 0, i32* %j, align 4
  br label %for.cond316

for.cond316:                                      ; preds = %for.inc348, %for.body315
  %178 = load i32, i32* %j, align 4
  %cmp317 = icmp slt i32 %178, 2
  br i1 %cmp317, label %for.body319, label %for.end350, !prof !66

for.body319:                                      ; preds = %for.cond316
  %179 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %180 = load i32, i32* %x, align 4
  %mul320 = mul nsw i32 %180, 2
  %181 = load i32, i32* %i, align 4
  %add321 = add nsw i32 %mul320, %181
  %idxprom322 = sext i32 %add321 to i64
  %arrayidx323 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %179, i64 %idxprom322
  %182 = load i32, i32* %y, align 4
  %mul324 = mul nsw i32 %182, 2
  %183 = load i32, i32* %j, align 4
  %add325 = add nsw i32 %mul324, %183
  %idxprom326 = sext i32 %add325 to i64
  %arrayidx327 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx323, i64 0, i64 %idxprom326
  %arrayidx328 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx327, i64 0, i64 0
  %184 = load i32, i32* %arrayidx328, align 4
  %185 = load i32, i32* %i, align 4
  %idxprom329 = sext i32 %185 to i64
  %arrayidx330 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom329
  %186 = load i32, i32* %j, align 4
  %idxprom331 = sext i32 %186 to i64
  %arrayidx332 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx330, i64 0, i64 %idxprom331
  %arrayidx333 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx332, i64 0, i64 0
  store i32 %184, i32* %arrayidx333, align 8
  %187 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %188 = load i32, i32* %x, align 4
  %mul334 = mul nsw i32 %188, 2
  %189 = load i32, i32* %i, align 4
  %add335 = add nsw i32 %mul334, %189
  %idxprom336 = sext i32 %add335 to i64
  %arrayidx337 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %187, i64 %idxprom336
  %190 = load i32, i32* %y, align 4
  %mul338 = mul nsw i32 %190, 2
  %191 = load i32, i32* %j, align 4
  %add339 = add nsw i32 %mul338, %191
  %idxprom340 = sext i32 %add339 to i64
  %arrayidx341 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx337, i64 0, i64 %idxprom340
  %arrayidx342 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx341, i64 0, i64 1
  %192 = load i32, i32* %arrayidx342, align 4
  %193 = load i32, i32* %i, align 4
  %idxprom343 = sext i32 %193 to i64
  %arrayidx344 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom343
  %194 = load i32, i32* %j, align 4
  %idxprom345 = sext i32 %194 to i64
  %arrayidx346 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx344, i64 0, i64 %idxprom345
  %arrayidx347 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx346, i64 0, i64 1
  store i32 %192, i32* %arrayidx347, align 4
  br label %for.inc348

for.inc348:                                       ; preds = %for.body319
  %195 = load i32, i32* %j, align 4
  %inc349 = add nsw i32 %195, 1
  store i32 %inc349, i32* %j, align 4
  br label %for.cond316

for.end350:                                       ; preds = %for.cond316
  br label %for.inc351

for.inc351:                                       ; preds = %for.end350
  %196 = load i32, i32* %i, align 4
  %inc352 = add nsw i32 %196, 1
  store i32 %inc352, i32* %i, align 4
  br label %for.cond312

for.end353:                                       ; preds = %for.cond312
  %197 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0354 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %197, i32 0, i32 12
  %198 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %199 = load i32, i32* %x, align 4
  %idxprom355 = sext i32 %199 to i64
  %arrayidx356 = getelementptr inbounds [2 x i8], [2 x i8]* %198, i64 %idxprom355
  %200 = load i32, i32* %y, align 4
  %idxprom357 = sext i32 %200 to i64
  %arrayidx358 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx356, i64 0, i64 %idxprom357
  %201 = load i8, i8* %arrayidx358, align 1
  %conv359 = sext i8 %201 to i32
  %idxprom360 = zext i32 %conv359 to i64
  %arrayidx361 = getelementptr inbounds [3 x i32], [3 x i32]* %list0354, i64 0, i64 %idxprom360
  %202 = load i32, i32* %arrayidx361, align 4
  store i32 %202, i32* %tmpidx0, align 4
  br label %if.end430

if.else362:                                       ; preds = %land.lhs.true303, %if.else295
  %203 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %204 = load i32, i32* %x, align 4
  %idxprom363 = sext i32 %204 to i64
  %arrayidx364 = getelementptr inbounds [2 x i8], [2 x i8]* %203, i64 %idxprom363
  %205 = load i32, i32* %y, align 4
  %idxprom365 = sext i32 %205 to i64
  %arrayidx366 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx364, i64 0, i64 %idxprom365
  %206 = load i8, i8* %arrayidx366, align 1
  %conv367 = sext i8 %206 to i32
  %cmp368 = icmp slt i32 %conv367, 0
  br i1 %cmp368, label %land.lhs.true370, label %if.end429

land.lhs.true370:                                 ; preds = %if.else362
  %207 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %208 = load i32, i32* %x, align 4
  %idxprom371 = sext i32 %208 to i64
  %arrayidx372 = getelementptr inbounds [2 x i8], [2 x i8]* %207, i64 %idxprom371
  %209 = load i32, i32* %y, align 4
  %idxprom373 = sext i32 %209 to i64
  %arrayidx374 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx372, i64 0, i64 %idxprom373
  %210 = load i8, i8* %arrayidx374, align 1
  %conv375 = sext i8 %210 to i32
  %cmp376 = icmp sge i32 %conv375, 0
  br i1 %cmp376, label %if.then378, label %if.end429

if.then378:                                       ; preds = %land.lhs.true370
  store i32 0, i32* %i, align 4
  br label %for.cond379

for.cond379:                                      ; preds = %for.inc418, %if.then378
  %211 = load i32, i32* %i, align 4
  %cmp380 = icmp slt i32 %211, 2
  br i1 %cmp380, label %for.body382, label %for.end420

for.body382:                                      ; preds = %for.cond379
  store i32 0, i32* %j, align 4
  br label %for.cond383

for.cond383:                                      ; preds = %for.inc415, %for.body382
  %212 = load i32, i32* %j, align 4
  %cmp384 = icmp slt i32 %212, 2
  br i1 %cmp384, label %for.body386, label %for.end417

for.body386:                                      ; preds = %for.cond383
  %213 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %214 = load i32, i32* %x, align 4
  %mul387 = mul nsw i32 %214, 2
  %215 = load i32, i32* %i, align 4
  %add388 = add nsw i32 %mul387, %215
  %idxprom389 = sext i32 %add388 to i64
  %arrayidx390 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %213, i64 %idxprom389
  %216 = load i32, i32* %y, align 4
  %mul391 = mul nsw i32 %216, 2
  %217 = load i32, i32* %j, align 4
  %add392 = add nsw i32 %mul391, %217
  %idxprom393 = sext i32 %add392 to i64
  %arrayidx394 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx390, i64 0, i64 %idxprom393
  %arrayidx395 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx394, i64 0, i64 0
  %218 = load i32, i32* %arrayidx395, align 4
  %219 = load i32, i32* %i, align 4
  %idxprom396 = sext i32 %219 to i64
  %arrayidx397 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom396
  %220 = load i32, i32* %j, align 4
  %idxprom398 = sext i32 %220 to i64
  %arrayidx399 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx397, i64 0, i64 %idxprom398
  %arrayidx400 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx399, i64 0, i64 0
  store i32 %218, i32* %arrayidx400, align 8
  %221 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %222 = load i32, i32* %x, align 4
  %mul401 = mul nsw i32 %222, 2
  %223 = load i32, i32* %i, align 4
  %add402 = add nsw i32 %mul401, %223
  %idxprom403 = sext i32 %add402 to i64
  %arrayidx404 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %221, i64 %idxprom403
  %224 = load i32, i32* %y, align 4
  %mul405 = mul nsw i32 %224, 2
  %225 = load i32, i32* %j, align 4
  %add406 = add nsw i32 %mul405, %225
  %idxprom407 = sext i32 %add406 to i64
  %arrayidx408 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx404, i64 0, i64 %idxprom407
  %arrayidx409 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx408, i64 0, i64 1
  %226 = load i32, i32* %arrayidx409, align 4
  %227 = load i32, i32* %i, align 4
  %idxprom410 = sext i32 %227 to i64
  %arrayidx411 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i64 0, i64 %idxprom410
  %228 = load i32, i32* %j, align 4
  %idxprom412 = sext i32 %228 to i64
  %arrayidx413 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx411, i64 0, i64 %idxprom412
  %arrayidx414 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx413, i64 0, i64 1
  store i32 %226, i32* %arrayidx414, align 4
  br label %for.inc415

for.inc415:                                       ; preds = %for.body386
  %229 = load i32, i32* %j, align 4
  %inc416 = add nsw i32 %229, 1
  store i32 %inc416, i32* %j, align 4
  br label %for.cond383

for.end417:                                       ; preds = %for.cond383
  br label %for.inc418

for.inc418:                                       ; preds = %for.end417
  %230 = load i32, i32* %i, align 4
  %inc419 = add nsw i32 %230, 1
  store i32 %inc419, i32* %i, align 4
  br label %for.cond379

for.end420:                                       ; preds = %for.cond379
  %231 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1421 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %231, i32 0, i32 13
  %232 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %233 = load i32, i32* %x, align 4
  %idxprom422 = sext i32 %233 to i64
  %arrayidx423 = getelementptr inbounds [2 x i8], [2 x i8]* %232, i64 %idxprom422
  %234 = load i32, i32* %y, align 4
  %idxprom424 = sext i32 %234 to i64
  %arrayidx425 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx423, i64 0, i64 %idxprom424
  %235 = load i8, i8* %arrayidx425, align 1
  %conv426 = sext i8 %235 to i32
  %idxprom427 = zext i32 %conv426 to i64
  %arrayidx428 = getelementptr inbounds [3 x i32], [3 x i32]* %list1421, i64 0, i64 %idxprom427
  %236 = load i32, i32* %arrayidx428, align 4
  store i32 %236, i32* %tmpidx0, align 4
  br label %if.end429

if.end429:                                        ; preds = %for.end420, %land.lhs.true370, %if.else362
  br label %if.end430

if.end430:                                        ; preds = %if.end429, %for.end353
  br label %if.end431

if.end431:                                        ; preds = %if.end430, %for.end280
  %237 = load i8, i8* %tmpImode.addr, align 1
  %conv432 = zext i8 %237 to i32
  %cmp433 = icmp eq i32 %conv432, 0
  br i1 %cmp433, label %if.then438, label %lor.lhs.false, !prof !67

lor.lhs.false:                                    ; preds = %if.end431
  %238 = load i8, i8* %tmpImode.addr, align 1
  %conv435 = zext i8 %238 to i32
  %cmp436 = icmp eq i32 %conv435, 1
  br i1 %cmp436, label %if.then438, label %if.else486, !prof !68

if.then438:                                       ; preds = %lor.lhs.false, %if.end431
  %239 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC_0.addr, align 8
  %240 = load i32, i32* %x, align 4
  %241 = load i32, i32* %y, align 4
  %mul439 = mul nsw i32 %241, 2
  %add440 = add nsw i32 %240, %mul439
  %idxprom441 = sext i32 %add440 to i64
  %arrayidx442 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %239, i64 %idxprom441
  %arraydecay443 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx442, i32 0, i32 0
  %242 = load i32, i32* %x, align 4
  %idxprom444 = sext i32 %242 to i64
  %arrayidx445 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom444
  %243 = load i32, i32* %y, align 4
  %idxprom446 = sext i32 %243 to i64
  %arrayidx447 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx445, i64 0, i64 %idxprom446
  %arraydecay448 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx447, i32 0, i32 0
  %244 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %245 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %245, i32 0, i32 9
  %246 = load i32, i32* %mem_idx, align 4
  %idxprom449 = sext i32 %246 to i64
  %arrayidx450 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %244, i64 %idxprom449
  %arraydecay451 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx450, i32 0, i32 0
  %247 = load i32, i32* %mbaddrx.addr, align 4
  %mul452 = mul nsw i32 %247, 2
  %248 = load i32, i32* %x, align 4
  %add453 = add nsw i32 %mul452, %248
  %mul454 = mul nsw i32 %add453, 4
  %249 = load i32, i32* %mbaddry.addr, align 4
  %mul455 = mul nsw i32 %249, 2
  %250 = load i32, i32* %y, align 4
  %add456 = add nsw i32 %mul455, %250
  %mul457 = mul nsw i32 %add456, 4
  %251 = load i8, i8* %tmpImode.addr, align 1
  %conv458 = zext i8 %251 to i32
  %cmp459 = icmp eq i32 %conv458, 3
  %conv460 = zext i1 %cmp459 to i32
  %conv461 = trunc i32 %conv460 to i8
  call void @write_Chroma([4 x i8]* %arraydecay443, [4 x i32]* %arraydecay448, [72 x i8]* %arraydecay451, i32 %mul454, i32 %mul457, i8 zeroext %conv461)
  %252 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** %predC_1.addr, align 8
  %253 = load i32, i32* %x, align 4
  %254 = load i32, i32* %y, align 4
  %mul462 = mul nsw i32 %254, 2
  %add463 = add nsw i32 %253, %mul462
  %idxprom464 = sext i32 %add463 to i64
  %arrayidx465 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %252, i64 %idxprom464
  %arraydecay466 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx465, i32 0, i32 0
  %255 = load i32, i32* %x, align 4
  %idxprom467 = sext i32 %255 to i64
  %arrayidx468 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom467
  %256 = load i32, i32* %y, align 4
  %idxprom469 = sext i32 %256 to i64
  %arrayidx470 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx468, i64 0, i64 %idxprom469
  %arraydecay471 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx470, i32 0, i32 0
  %257 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %258 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx472 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %258, i32 0, i32 9
  %259 = load i32, i32* %mem_idx472, align 4
  %idxprom473 = sext i32 %259 to i64
  %arrayidx474 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %257, i64 %idxprom473
  %arraydecay475 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx474, i32 0, i32 0
  %260 = load i32, i32* %mbaddrx.addr, align 4
  %mul476 = mul nsw i32 %260, 2
  %261 = load i32, i32* %x, align 4
  %add477 = add nsw i32 %mul476, %261
  %mul478 = mul nsw i32 %add477, 4
  %262 = load i32, i32* %mbaddry.addr, align 4
  %mul479 = mul nsw i32 %262, 2
  %263 = load i32, i32* %y, align 4
  %add480 = add nsw i32 %mul479, %263
  %mul481 = mul nsw i32 %add480, 4
  %264 = load i8, i8* %tmpImode.addr, align 1
  %conv482 = zext i8 %264 to i32
  %cmp483 = icmp eq i32 %conv482, 3
  %conv484 = zext i1 %cmp483 to i32
  %conv485 = trunc i32 %conv484 to i8
  call void @write_Chroma([4 x i8]* %arraydecay466, [4 x i32]* %arraydecay471, [72 x i8]* %arraydecay475, i32 %mul478, i32 %mul481, i8 zeroext %conv485)
  br label %if.end607

if.else486:                                       ; preds = %lor.lhs.false
  %265 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %266 = load i32, i32* %x, align 4
  %idxprom487 = sext i32 %266 to i64
  %arrayidx488 = getelementptr inbounds [2 x i8], [2 x i8]* %265, i64 %idxprom487
  %267 = load i32, i32* %y, align 4
  %idxprom489 = sext i32 %267 to i64
  %arrayidx490 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx488, i64 0, i64 %idxprom489
  %268 = load i8, i8* %arrayidx490, align 1
  %conv491 = sext i8 %268 to i32
  %cmp492 = icmp sge i32 %conv491, 0
  br i1 %cmp492, label %land.lhs.true494, label %if.else559, !prof !69

land.lhs.true494:                                 ; preds = %if.else486
  %269 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %270 = load i32, i32* %x, align 4
  %idxprom495 = sext i32 %270 to i64
  %arrayidx496 = getelementptr inbounds [2 x i8], [2 x i8]* %269, i64 %idxprom495
  %271 = load i32, i32* %y, align 4
  %idxprom497 = sext i32 %271 to i64
  %arrayidx498 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx496, i64 0, i64 %idxprom497
  %272 = load i8, i8* %arrayidx498, align 1
  %conv499 = sext i8 %272 to i32
  %cmp500 = icmp sge i32 %conv499, 0
  br i1 %cmp500, label %if.then502, label %if.else559, !prof !70

if.then502:                                       ; preds = %land.lhs.true494
  %273 = load i32, i32* %x, align 4
  %idxprom503 = sext i32 %273 to i64
  %arrayidx504 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom503
  %274 = load i32, i32* %y, align 4
  %idxprom505 = sext i32 %274 to i64
  %arrayidx506 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx504, i64 0, i64 %idxprom505
  %arraydecay507 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx506, i32 0, i32 0
  %arraydecay508 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %arraydecay509 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i32 0, i32 0
  %275 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %276 = load i32, i32* %tmpidx0, align 4
  %idxprom510 = sext i32 %276 to i64
  %arrayidx511 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %275, i64 %idxprom510
  %arraydecay512 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx511, i32 0, i32 0
  %277 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %278 = load i32, i32* %tmpidx1, align 4
  %idxprom513 = sext i32 %278 to i64
  %arrayidx514 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %277, i64 %idxprom513
  %arraydecay515 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx514, i32 0, i32 0
  %279 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %280 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx516 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %280, i32 0, i32 9
  %281 = load i32, i32* %mem_idx516, align 4
  %idxprom517 = sext i32 %281 to i64
  %arrayidx518 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %279, i64 %idxprom517
  %arraydecay519 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx518, i32 0, i32 0
  %282 = load i32, i32* %mbaddrx.addr, align 4
  %mul520 = mul nsw i32 %282, 2
  %283 = load i32, i32* %x, align 4
  %add521 = add nsw i32 %mul520, %283
  %mul522 = mul nsw i32 %add521, 4
  %284 = load i32, i32* %mbaddry.addr, align 4
  %mul523 = mul nsw i32 %284, 2
  %285 = load i32, i32* %y, align 4
  %add524 = add nsw i32 %mul523, %285
  %mul525 = mul nsw i32 %add524, 4
  %286 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv526 = zext i8 %286 to i32
  %and527 = and i32 %conv526, 3
  %cmp528 = icmp ne i32 %and527, 0
  %conv529 = zext i1 %cmp528 to i32
  %conv530 = trunc i32 %conv529 to i8
  call void @inter_prediction_chroma_subblock_double([4 x i32]* %arraydecay507, [2 x [2 x i32]]* %arraydecay508, [2 x [2 x i32]]* %arraydecay509, [72 x i8]* %arraydecay512, [72 x i8]* %arraydecay515, [72 x i8]* %arraydecay519, i32 %mul522, i32 %mul525, i8 zeroext %conv530)
  %287 = load i32, i32* %x, align 4
  %idxprom531 = sext i32 %287 to i64
  %arrayidx532 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom531
  %288 = load i32, i32* %y, align 4
  %idxprom533 = sext i32 %288 to i64
  %arrayidx534 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx532, i64 0, i64 %idxprom533
  %arraydecay535 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx534, i32 0, i32 0
  %arraydecay536 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %arraydecay537 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC1, i32 0, i32 0
  %289 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %290 = load i32, i32* %tmpidx0, align 4
  %idxprom538 = sext i32 %290 to i64
  %arrayidx539 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %289, i64 %idxprom538
  %arraydecay540 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx539, i32 0, i32 0
  %291 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %292 = load i32, i32* %tmpidx1, align 4
  %idxprom541 = sext i32 %292 to i64
  %arrayidx542 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %291, i64 %idxprom541
  %arraydecay543 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx542, i32 0, i32 0
  %293 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %294 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx544 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %294, i32 0, i32 9
  %295 = load i32, i32* %mem_idx544, align 4
  %idxprom545 = sext i32 %295 to i64
  %arrayidx546 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %293, i64 %idxprom545
  %arraydecay547 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx546, i32 0, i32 0
  %296 = load i32, i32* %mbaddrx.addr, align 4
  %mul548 = mul nsw i32 %296, 2
  %297 = load i32, i32* %x, align 4
  %add549 = add nsw i32 %mul548, %297
  %mul550 = mul nsw i32 %add549, 4
  %298 = load i32, i32* %mbaddry.addr, align 4
  %mul551 = mul nsw i32 %298, 2
  %299 = load i32, i32* %y, align 4
  %add552 = add nsw i32 %mul551, %299
  %mul553 = mul nsw i32 %add552, 4
  %300 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv554 = zext i8 %300 to i32
  %and555 = and i32 %conv554, 3
  %cmp556 = icmp ne i32 %and555, 0
  %conv557 = zext i1 %cmp556 to i32
  %conv558 = trunc i32 %conv557 to i8
  call void @inter_prediction_chroma_subblock_double([4 x i32]* %arraydecay535, [2 x [2 x i32]]* %arraydecay536, [2 x [2 x i32]]* %arraydecay537, [72 x i8]* %arraydecay540, [72 x i8]* %arraydecay543, [72 x i8]* %arraydecay547, i32 %mul550, i32 %mul553, i8 zeroext %conv558)
  br label %if.end606

if.else559:                                       ; preds = %land.lhs.true494, %if.else486
  %301 = load i32, i32* %x, align 4
  %idxprom560 = sext i32 %301 to i64
  %arrayidx561 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_0, i64 0, i64 %idxprom560
  %302 = load i32, i32* %y, align 4
  %idxprom562 = sext i32 %302 to i64
  %arrayidx563 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx561, i64 0, i64 %idxprom562
  %arraydecay564 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx563, i32 0, i32 0
  %arraydecay565 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %303 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %304 = load i32, i32* %tmpidx0, align 4
  %idxprom566 = sext i32 %304 to i64
  %arrayidx567 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %303, i64 %idxprom566
  %arraydecay568 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx567, i32 0, i32 0
  %305 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %306 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx569 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %306, i32 0, i32 9
  %307 = load i32, i32* %mem_idx569, align 4
  %idxprom570 = sext i32 %307 to i64
  %arrayidx571 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %305, i64 %idxprom570
  %arraydecay572 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx571, i32 0, i32 0
  %308 = load i32, i32* %mbaddrx.addr, align 4
  %mul573 = mul nsw i32 %308, 2
  %309 = load i32, i32* %x, align 4
  %add574 = add nsw i32 %mul573, %309
  %mul575 = mul nsw i32 %add574, 4
  %310 = load i32, i32* %mbaddry.addr, align 4
  %mul576 = mul nsw i32 %310, 2
  %311 = load i32, i32* %y, align 4
  %add577 = add nsw i32 %mul576, %311
  %mul578 = mul nsw i32 %add577, 4
  %312 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv579 = zext i8 %312 to i32
  %and580 = and i32 %conv579, 3
  %cmp581 = icmp ne i32 %and580, 0
  %conv582 = zext i1 %cmp581 to i32
  call void @inter_prediction_chroma_subblock_single([4 x i32]* %arraydecay564, [2 x [2 x i32]]* %arraydecay565, [72 x i8]* %arraydecay568, [72 x i8]* %arraydecay572, i32 %mul575, i32 %mul578, i32 %conv582)
  %313 = load i32, i32* %x, align 4
  %idxprom583 = sext i32 %313 to i64
  %arrayidx584 = getelementptr inbounds [2 x [2 x [4 x [4 x i32]]]], [2 x [2 x [4 x [4 x i32]]]]* %rMbC_1, i64 0, i64 %idxprom583
  %314 = load i32, i32* %y, align 4
  %idxprom585 = sext i32 %314 to i64
  %arrayidx586 = getelementptr inbounds [2 x [4 x [4 x i32]]], [2 x [4 x [4 x i32]]]* %arrayidx584, i64 0, i64 %idxprom585
  %arraydecay587 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx586, i32 0, i32 0
  %arraydecay588 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %mvdC0, i32 0, i32 0
  %315 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %316 = load i32, i32* %tmpidx0, align 4
  %idxprom589 = sext i32 %316 to i64
  %arrayidx590 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %315, i64 %idxprom589
  %arraydecay591 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx590, i32 0, i32 0
  %317 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %318 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx592 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %318, i32 0, i32 9
  %319 = load i32, i32* %mem_idx592, align 4
  %idxprom593 = sext i32 %319 to i64
  %arrayidx594 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %317, i64 %idxprom593
  %arraydecay595 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx594, i32 0, i32 0
  %320 = load i32, i32* %mbaddrx.addr, align 4
  %mul596 = mul nsw i32 %320, 2
  %321 = load i32, i32* %x, align 4
  %add597 = add nsw i32 %mul596, %321
  %mul598 = mul nsw i32 %add597, 4
  %322 = load i32, i32* %mbaddry.addr, align 4
  %mul599 = mul nsw i32 %322, 2
  %323 = load i32, i32* %y, align 4
  %add600 = add nsw i32 %mul599, %323
  %mul601 = mul nsw i32 %add600, 4
  %324 = load i8, i8* %CodedPatternChroma.addr, align 1
  %conv602 = zext i8 %324 to i32
  %and603 = and i32 %conv602, 3
  %cmp604 = icmp ne i32 %and603, 0
  %conv605 = zext i1 %cmp604 to i32
  call void @inter_prediction_chroma_subblock_single([4 x i32]* %arraydecay587, [2 x [2 x i32]]* %arraydecay588, [72 x i8]* %arraydecay591, [72 x i8]* %arraydecay595, i32 %mul598, i32 %mul601, i32 %conv605)
  br label %if.end606

if.end606:                                        ; preds = %if.else559, %if.then502
  br label %if.end607

if.end607:                                        ; preds = %if.end606, %if.then438
  br label %for.inc608

for.inc608:                                       ; preds = %if.end607
  %325 = load i32, i32* %x, align 4
  %inc609 = add nsw i32 %325, 1
  store i32 %inc609, i32* %x, align 4
  br label %for.cond149

for.end610:                                       ; preds = %for.cond149
  br label %for.inc611

for.inc611:                                       ; preds = %for.end610
  %326 = load i32, i32* %y, align 4
  %inc612 = add nsw i32 %326, 1
  store i32 %inc612, i32* %y, align 4
  br label %for.cond145

for.end613:                                       ; preds = %for.cond145
  ret void
}

declare dso_local zeroext i8 @nc_Chroma([9 x i8]*, [18 x i8]*, i32, i32) #1

declare dso_local void @inter_prediction_chroma_subblock_double([4 x i32]*, [2 x [2 x i32]]*, [2 x [2 x i32]]*, [72 x i8]*, [72 x i8]*, [72 x i8]*, i32, i32, i8 zeroext) #1

declare dso_local void @inter_prediction_chroma_subblock_single([4 x i32]*, [2 x [2 x i32]]*, [72 x i8]*, [72 x i8]*, i32, i32, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ProcessSlice(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct.StorablePicture* %PIC, [176 x [144 x i8]]* %PIC_Sluma, [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]* %PIC_SChroma_1, %struct.StorablePictureInfo* %PICINFO, [9 x i8]* %Imode, [36 x i8]* %IntraPredMode, [36 x i8]* %NzLuma, [22 x [18 x i8]]* %NzChroma, i8 zeroext %constraint_intra_flag, %struct.slice_header_rbsp_t* %SH, %struct.ImageParameters* %img) #0 !prof !71 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %PIC.addr = alloca %struct.StorablePicture*, align 8
  %PIC_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %PIC_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %PIC_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %PICINFO.addr = alloca %struct.StorablePictureInfo*, align 8
  %Imode.addr = alloca [9 x i8]*, align 8
  %IntraPredMode.addr = alloca [36 x i8]*, align 8
  %NzLuma.addr = alloca [36 x i8]*, align 8
  %NzChroma.addr = alloca [22 x [18 x i8]]*, align 8
  %constraint_intra_flag.addr = alloca i8, align 1
  %SH.addr = alloca %struct.slice_header_rbsp_t*, align 8
  %img.addr = alloca %struct.ImageParameters*, align 8
  %qPprev = alloca i32, align 4
  %type = alloca i32, align 4
  %qPCtable = alloca [22 x i32], align 16
  %power2 = alloca [6 x i32], align 16
  %intratypecutoff = alloca [3 x i32], align 4
  %MbType = alloca i8, align 1
  %MbSkipFlag = alloca i8, align 1
  %PrevSkip = alloca i8, align 1
  %MbSkipRun = alloca i32, align 4
  %tmpImode = alloca i8, align 1
  %nC = alloca i8, align 1
  %tmpmbtp = alloca i8, align 1
  %coded_block_pattern = alloca i8, align 1
  %CodedPatternLuma = alloca i8, align 1
  %CodedPatternChroma = alloca i8, align 1
  %IntraChromaPredMode = alloca i8, align 1
  %Intra16x16PredMode = alloca i8, align 1
  %mb_qp_delta = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mbaddrx = alloca i32, align 4
  %mbaddry = alloca i32, align 4
  %refCOL = alloca [2 x [2 x i8]], align 1
  %mvCOL = alloca [4 x [4 x [2 x i32]]], align 16
  %refidx0 = alloca [2 x [2 x i8]], align 1
  %refidx1 = alloca [2 x [2 x i8]], align 1
  %mvd0 = alloca [4 x [4 x [2 x i32]]], align 16
  %mvd1 = alloca [4 x [4 x [2 x i32]]], align 16
  %intra4x4predmode = alloca [16 x i8], align 16
  %predL = alloca [16 x [4 x [4 x i8]]], align 16
  %predC_0 = alloca [4 x [4 x [4 x i8]]], align 16
  %predC_1 = alloca [4 x [4 x [4 x i8]]], align 16
  %qPm6 = alloca i8, align 1
  %qPi = alloca i8, align 1
  %qPy = alloca i8, align 1
  %qPc = alloca i8, align 1
  %qPcm6 = alloca i8, align 1
  %temp1l = alloca i8, align 1
  %temp2l = alloca i8, align 1
  %temp3l = alloca i8, align 1
  %temp1c = alloca i8, align 1
  %temp2c = alloca i8, align 1
  %temp3c = alloca i8, align 1
  %scale1 = alloca i8, align 1
  %scale2 = alloca i8, align 1
  %scale3 = alloca i8, align 1
  %coeffDCL = alloca [4 x [4 x i32]], align 16
  %coeffDCC_0 = alloca [4 x [2 x i32]], align 16
  %coeffDCC_1 = alloca [4 x [2 x i32]], align 16
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct.StorablePicture* %PIC, %struct.StorablePicture** %PIC.addr, align 8
  store [176 x [144 x i8]]* %PIC_Sluma, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_0, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %PIC_SChroma_1, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  store %struct.StorablePictureInfo* %PICINFO, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  store [9 x i8]* %Imode, [9 x i8]** %Imode.addr, align 8
  store [36 x i8]* %IntraPredMode, [36 x i8]** %IntraPredMode.addr, align 8
  store [36 x i8]* %NzLuma, [36 x i8]** %NzLuma.addr, align 8
  store [22 x [18 x i8]]* %NzChroma, [22 x [18 x i8]]** %NzChroma.addr, align 8
  store i8 %constraint_intra_flag, i8* %constraint_intra_flag.addr, align 1
  store %struct.slice_header_rbsp_t* %SH, %struct.slice_header_rbsp_t** %SH.addr, align 8
  store %struct.ImageParameters* %img, %struct.ImageParameters** %img.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %sliceQPY = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 15
  %1 = load i32, i32* %sliceQPY, align 4
  store i32 %1, i32* %qPprev, align 4
  %2 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %slice_type = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %2, i32 0, i32 1
  %3 = load i8, i8* %slice_type, align 4
  %conv = zext i8 %3 to i32
  store i32 %conv, i32* %type, align 4
  %4 = bitcast [22 x i32]* %qPCtable to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 bitcast ([22 x i32]* @__const.ProcessSlice.qPCtable to i8*), i64 88, i1 false)
  %5 = bitcast [6 x i32]* %power2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([6 x i32]* @__const.ProcessSlice.power2 to i8*), i64 24, i1 false)
  %6 = bitcast [3 x i32]* %intratypecutoff to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([3 x i32]* @__const.ProcessSlice.intratypecutoff to i8*), i64 12, i1 false)
  store i8 0, i8* %MbType, align 1
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  store i32 0, i32* %MbSkipRun, align 4
  store i8 0, i8* %tmpImode, align 1
  store i8 0, i8* %nC, align 1
  store i8 0, i8* %tmpmbtp, align 1
  store i8 0, i8* %coded_block_pattern, align 1
  store i8 0, i8* %CodedPatternLuma, align 1
  store i8 0, i8* %CodedPatternChroma, align 1
  store i8 0, i8* %IntraChromaPredMode, align 1
  store i8 0, i8* %Intra16x16PredMode, align 1
  store i32 0, i32* %mb_qp_delta, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %mbaddrx, align 4
  store i32 0, i32* %mbaddry, align 4
  %7 = bitcast [2 x [2 x i8]]* %refCOL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 4, i1 false)
  %8 = bitcast [4 x [4 x [2 x i32]]]* %mvCOL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 128, i1 false)
  %9 = bitcast [2 x [2 x i8]]* %refidx0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 0, i64 4, i1 false)
  %10 = bitcast [2 x [2 x i8]]* %refidx1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 4, i1 false)
  %11 = bitcast [4 x [4 x [2 x i32]]]* %mvd0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %11, i8 0, i64 128, i1 false)
  %12 = bitcast [4 x [4 x [2 x i32]]]* %mvd1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 128, i1 false)
  %13 = bitcast [16 x i8]* %intra4x4predmode to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %13, i8 0, i64 16, i1 false)
  %14 = bitcast [16 x [4 x [4 x i8]]]* %predL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 0, i64 256, i1 false)
  %15 = bitcast [4 x [4 x [4 x i8]]]* %predC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %15, i8 0, i64 64, i1 false)
  %16 = bitcast [4 x [4 x [4 x i8]]]* %predC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 64, i1 false)
  store i8 0, i8* %qPm6, align 1
  store i8 0, i8* %qPi, align 1
  store i8 0, i8* %qPy, align 1
  store i8 0, i8* %qPc, align 1
  store i8 0, i8* %qPcm6, align 1
  store i8 0, i8* %temp1l, align 1
  store i8 0, i8* %temp2l, align 1
  store i8 0, i8* %temp3l, align 1
  store i8 0, i8* %temp1c, align 1
  store i8 0, i8* %temp2c, align 1
  store i8 0, i8* %temp3c, align 1
  store i8 0, i8* %scale1, align 1
  store i8 0, i8* %scale2, align 1
  store i8 0, i8* %scale3, align 1
  %17 = bitcast [4 x [4 x i32]]* %coeffDCL to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %17, i8 0, i64 64, i1 false)
  %18 = bitcast [4 x [2 x i32]]* %coeffDCC_0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 32, i1 false)
  %19 = bitcast [4 x [2 x i32]]* %coeffDCC_1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 32, i1 false)
  store i32 0, i32* %mbaddry, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc613, %entry
  %20 = load i32, i32* %mbaddry, align 4
  %cmp = icmp slt i32 %20, 9
  br i1 %cmp, label %for.body, label %for.end615, !prof !72

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %mbaddrx, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc610, %for.body
  %21 = load i32, i32* %mbaddrx, align 4
  %cmp3 = icmp slt i32 %21, 11
  br i1 %cmp3, label %for.body5, label %for.end612, !prof !73

for.body5:                                        ; preds = %for.cond2
  %22 = load i32, i32* %type, align 4
  %cmp6 = icmp ne i32 %22, 2
  br i1 %cmp6, label %if.then, label %if.end25, !prof !74

if.then:                                          ; preds = %for.body5
  %23 = load i32, i32* %MbSkipRun, align 4
  %cmp8 = icmp eq i32 %23, 0
  br i1 %cmp8, label %land.lhs.true, label %if.else17, !prof !75

land.lhs.true:                                    ; preds = %if.then
  %24 = load i8, i8* %PrevSkip, align 1
  %conv10 = zext i8 %24 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.else17, !prof !76

if.then13:                                        ; preds = %land.lhs.true
  %25 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %25, i8* %26, i64* %27)
  store i32 %call, i32* %MbSkipRun, align 4
  %28 = load i32, i32* %MbSkipRun, align 4
  %cmp14 = icmp eq i32 %28, 0
  br i1 %cmp14, label %if.then16, label %if.else, !prof !77

if.then16:                                        ; preds = %if.then13
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  br label %if.end

if.else:                                          ; preds = %if.then13
  store i8 1, i8* %MbSkipFlag, align 1
  store i8 1, i8* %PrevSkip, align 1
  %29 = load i32, i32* %MbSkipRun, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %MbSkipRun, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then16
  br label %if.end24

if.else17:                                        ; preds = %land.lhs.true, %if.then
  %30 = load i32, i32* %MbSkipRun, align 4
  %cmp18 = icmp sgt i32 %30, 0
  br i1 %cmp18, label %if.then20, label %if.else22, !prof !78

if.then20:                                        ; preds = %if.else17
  store i8 1, i8* %MbSkipFlag, align 1
  %31 = load i32, i32* %MbSkipRun, align 4
  %dec21 = add nsw i32 %31, -1
  store i32 %dec21, i32* %MbSkipRun, align 4
  br label %if.end23

if.else22:                                        ; preds = %if.else17
  store i8 0, i8* %MbSkipFlag, align 1
  store i8 0, i8* %PrevSkip, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.else22, %if.then20
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %for.body5
  %32 = load i8, i8* %MbSkipFlag, align 1
  %conv26 = zext i8 %32 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %if.then29, label %if.else61, !prof !79

if.then29:                                        ; preds = %if.end25
  %33 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %34 = load i8*, i8** %nalu_buf.addr, align 8
  %35 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call30 = call i32 @u_e(%struct.NALU_t* %33, i8* %34, i64* %35)
  %conv31 = trunc i32 %call30 to i8
  store i8 %conv31, i8* %MbType, align 1
  store i8 %conv31, i8* %tmpmbtp, align 1
  %36 = load i8, i8* %MbType, align 1
  %conv32 = zext i8 %36 to i32
  %37 = load i32, i32* %type, align 4
  %idxprom = sext i32 %37 to i64
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %intratypecutoff, i64 0, i64 %idxprom
  %38 = load i32, i32* %arrayidx, align 4
  %cmp33 = icmp sge i32 %conv32, %38
  br i1 %cmp33, label %if.then35, label %if.else52, !prof !80

if.then35:                                        ; preds = %if.then29
  %39 = load i8, i8* %MbType, align 1
  %conv36 = zext i8 %39 to i32
  %40 = load i32, i32* %type, align 4
  %idxprom37 = sext i32 %40 to i64
  %arrayidx38 = getelementptr inbounds [3 x i32], [3 x i32]* %intratypecutoff, i64 0, i64 %idxprom37
  %41 = load i32, i32* %arrayidx38, align 4
  %sub = sub nsw i32 %conv36, %41
  %conv39 = trunc i32 %sub to i8
  store i8 %conv39, i8* %MbType, align 1
  %42 = load i8, i8* %MbType, align 1
  %conv40 = zext i8 %42 to i32
  %cmp41 = icmp eq i32 %conv40, 0
  br i1 %cmp41, label %cond.true, label %lor.lhs.false, !prof !81

lor.lhs.false:                                    ; preds = %if.then35
  %43 = load i8, i8* %MbType, align 1
  %conv43 = zext i8 %43 to i32
  %cmp44 = icmp eq i32 %conv43, 25
  br i1 %cmp44, label %cond.true, label %cond.false, !prof !82

cond.true:                                        ; preds = %lor.lhs.false, %if.then35
  %44 = load i8, i8* %MbType, align 1
  %conv46 = zext i8 %44 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv46, %cond.true ], [ 1, %cond.false ]
  %conv47 = trunc i32 %cond to i8
  %45 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %46 = load i32, i32* %mbaddrx, align 4
  %idxprom48 = sext i32 %46 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %45, i64 %idxprom48
  %47 = load i32, i32* %mbaddry, align 4
  %idxprom50 = sext i32 %47 to i64
  %arrayidx51 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom50
  store i8 %conv47, i8* %arrayidx51, align 1
  store i8 %conv47, i8* %tmpImode, align 1
  br label %if.end60

if.else52:                                        ; preds = %if.then29
  %48 = load i8, i8* %MbType, align 1
  %conv53 = zext i8 %48 to i32
  %49 = load i32, i32* %type, align 4
  %tobool = icmp ne i32 %49, 0
  %50 = zext i1 %tobool to i64
  %cond54 = select i1 %tobool, i32 7, i32 1
  %add = add nsw i32 %conv53, %cond54
  %conv55 = trunc i32 %add to i8
  store i8 %conv55, i8* %MbType, align 1
  %51 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %52 = load i32, i32* %mbaddrx, align 4
  %idxprom56 = sext i32 %52 to i64
  %arrayidx57 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom56
  %53 = load i32, i32* %mbaddry, align 4
  %idxprom58 = sext i32 %53 to i64
  %arrayidx59 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx57, i64 0, i64 %idxprom58
  store i8 2, i8* %arrayidx59, align 1
  store i8 2, i8* %tmpImode, align 1
  br label %if.end60

if.end60:                                         ; preds = %if.else52, %cond.end
  br label %if.end69

if.else61:                                        ; preds = %if.end25
  %54 = load i32, i32* %type, align 4
  %tobool62 = icmp ne i32 %54, 0
  %55 = zext i1 %tobool62 to i64
  %cond63 = select i1 %tobool62, i32 6, i32 0
  %conv64 = trunc i32 %cond63 to i8
  store i8 %conv64, i8* %MbType, align 1
  %56 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %57 = load i32, i32* %mbaddrx, align 4
  %idxprom65 = sext i32 %57 to i64
  %arrayidx66 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom65
  %58 = load i32, i32* %mbaddry, align 4
  %idxprom67 = sext i32 %58 to i64
  %arrayidx68 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx66, i64 0, i64 %idxprom67
  store i8 3, i8* %arrayidx68, align 1
  store i8 3, i8* %tmpImode, align 1
  store i8 0, i8* %CodedPatternChroma, align 1
  store i8 0, i8* %CodedPatternLuma, align 1
  br label %if.end69

if.end69:                                         ; preds = %if.else61, %if.end60
  %59 = load i8, i8* %tmpImode, align 1
  %conv70 = zext i8 %59 to i32
  %cmp71 = icmp eq i32 %conv70, 2
  br i1 %cmp71, label %if.then77, label %lor.lhs.false73, !prof !83

lor.lhs.false73:                                  ; preds = %if.end69
  %60 = load i8, i8* %tmpImode, align 1
  %conv74 = zext i8 %60 to i32
  %cmp75 = icmp eq i32 %conv74, 3
  br i1 %cmp75, label %if.then77, label %if.else279, !prof !84

if.then77:                                        ; preds = %lor.lhs.false73, %if.end69
  %61 = load i32, i32* %type, align 4
  %cmp78 = icmp eq i32 %61, 1
  br i1 %cmp78, label %if.then80, label %if.end224, !prof !85

if.then80:                                        ; preds = %if.then77
  store i32 0, i32* %i, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc221, %if.then80
  %62 = load i32, i32* %i, align 4
  %cmp82 = icmp slt i32 %62, 4
  br i1 %cmp82, label %for.body84, label %for.end223, !prof !86

for.body84:                                       ; preds = %for.cond81
  store i32 0, i32* %j, align 4
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc, %for.body84
  %63 = load i32, i32* %j, align 4
  %cmp86 = icmp slt i32 %63, 4
  br i1 %cmp86, label %for.body88, label %for.end, !prof !87

for.body88:                                       ; preds = %for.cond85
  %64 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %65 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %65, i32 0, i32 13
  %arrayidx89 = getelementptr inbounds [3 x i32], [3 x i32]* %list1, i64 0, i64 0
  %66 = load i32, i32* %arrayidx89, align 4
  %idxprom90 = sext i32 %66 to i64
  %arrayidx91 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %64, i64 %idxprom90
  %refIdxL0 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx91, i32 0, i32 0
  %67 = load i32, i32* %mbaddrx, align 4
  %mul = mul nsw i32 %67, 4
  %68 = load i32, i32* %i, align 4
  %add92 = add nsw i32 %mul, %68
  %div = sdiv i32 %add92, 2
  %idxprom93 = sext i32 %div to i64
  %arrayidx94 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0, i64 0, i64 %idxprom93
  %69 = load i32, i32* %mbaddry, align 4
  %mul95 = mul nsw i32 %69, 4
  %70 = load i32, i32* %j, align 4
  %add96 = add nsw i32 %mul95, %70
  %div97 = sdiv i32 %add96, 2
  %idxprom98 = sext i32 %div97 to i64
  %arrayidx99 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx94, i64 0, i64 %idxprom98
  %71 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %71 to i32
  %cmp101 = icmp sge i32 %conv100, 0
  br i1 %cmp101, label %if.then103, label %if.else162, !prof !88

if.then103:                                       ; preds = %for.body88
  %72 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %73 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1104 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %73, i32 0, i32 13
  %arrayidx105 = getelementptr inbounds [3 x i32], [3 x i32]* %list1104, i64 0, i64 0
  %74 = load i32, i32* %arrayidx105, align 4
  %idxprom106 = sext i32 %74 to i64
  %arrayidx107 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %72, i64 %idxprom106
  %refIdxL0108 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx107, i32 0, i32 0
  %75 = load i32, i32* %mbaddrx, align 4
  %mul109 = mul nsw i32 %75, 4
  %76 = load i32, i32* %i, align 4
  %add110 = add nsw i32 %mul109, %76
  %div111 = sdiv i32 %add110, 2
  %idxprom112 = sext i32 %div111 to i64
  %arrayidx113 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0108, i64 0, i64 %idxprom112
  %77 = load i32, i32* %mbaddry, align 4
  %mul114 = mul nsw i32 %77, 4
  %78 = load i32, i32* %j, align 4
  %add115 = add nsw i32 %mul114, %78
  %div116 = sdiv i32 %add115, 2
  %idxprom117 = sext i32 %div116 to i64
  %arrayidx118 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx113, i64 0, i64 %idxprom117
  %79 = load i8, i8* %arrayidx118, align 1
  %80 = load i32, i32* %i, align 4
  %div119 = sdiv i32 %80, 2
  %idxprom120 = sext i32 %div119 to i64
  %arrayidx121 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i64 0, i64 %idxprom120
  %81 = load i32, i32* %j, align 4
  %div122 = sdiv i32 %81, 2
  %idxprom123 = sext i32 %div122 to i64
  %arrayidx124 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx121, i64 0, i64 %idxprom123
  store i8 %79, i8* %arrayidx124, align 1
  %82 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %83 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1125 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %83, i32 0, i32 13
  %arrayidx126 = getelementptr inbounds [3 x i32], [3 x i32]* %list1125, i64 0, i64 0
  %84 = load i32, i32* %arrayidx126, align 4
  %idxprom127 = sext i32 %84 to i64
  %arrayidx128 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %82, i64 %idxprom127
  %mvd_l0 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx128, i32 0, i32 2
  %85 = load i32, i32* %mbaddrx, align 4
  %mul129 = mul nsw i32 %85, 4
  %86 = load i32, i32* %i, align 4
  %add130 = add nsw i32 %mul129, %86
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0, i64 0, i64 %idxprom131
  %87 = load i32, i32* %mbaddry, align 4
  %mul133 = mul nsw i32 %87, 4
  %88 = load i32, i32* %j, align 4
  %add134 = add nsw i32 %mul133, %88
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx132, i64 0, i64 %idxprom135
  %arrayidx137 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx136, i64 0, i64 0
  %89 = load i32, i32* %arrayidx137, align 4
  %90 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %90 to i64
  %arrayidx139 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom138
  %91 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %91 to i64
  %arrayidx141 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx139, i64 0, i64 %idxprom140
  %arrayidx142 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx141, i64 0, i64 0
  store i32 %89, i32* %arrayidx142, align 8
  %92 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %93 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1143 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %93, i32 0, i32 13
  %arrayidx144 = getelementptr inbounds [3 x i32], [3 x i32]* %list1143, i64 0, i64 0
  %94 = load i32, i32* %arrayidx144, align 4
  %idxprom145 = sext i32 %94 to i64
  %arrayidx146 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %92, i64 %idxprom145
  %mvd_l0147 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx146, i32 0, i32 2
  %95 = load i32, i32* %mbaddrx, align 4
  %mul148 = mul nsw i32 %95, 4
  %96 = load i32, i32* %i, align 4
  %add149 = add nsw i32 %mul148, %96
  %idxprom150 = sext i32 %add149 to i64
  %arrayidx151 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0147, i64 0, i64 %idxprom150
  %97 = load i32, i32* %mbaddry, align 4
  %mul152 = mul nsw i32 %97, 4
  %98 = load i32, i32* %j, align 4
  %add153 = add nsw i32 %mul152, %98
  %idxprom154 = sext i32 %add153 to i64
  %arrayidx155 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx151, i64 0, i64 %idxprom154
  %arrayidx156 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx155, i64 0, i64 1
  %99 = load i32, i32* %arrayidx156, align 4
  %100 = load i32, i32* %i, align 4
  %idxprom157 = sext i32 %100 to i64
  %arrayidx158 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom157
  %101 = load i32, i32* %j, align 4
  %idxprom159 = sext i32 %101 to i64
  %arrayidx160 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx158, i64 0, i64 %idxprom159
  %arrayidx161 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx160, i64 0, i64 1
  store i32 %99, i32* %arrayidx161, align 4
  br label %if.end220

if.else162:                                       ; preds = %for.body88
  %102 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %103 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1163 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %103, i32 0, i32 13
  %arrayidx164 = getelementptr inbounds [3 x i32], [3 x i32]* %list1163, i64 0, i64 0
  %104 = load i32, i32* %arrayidx164, align 4
  %idxprom165 = sext i32 %104 to i64
  %arrayidx166 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %102, i64 %idxprom165
  %refIdxL1 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx166, i32 0, i32 1
  %105 = load i32, i32* %mbaddrx, align 4
  %mul167 = mul nsw i32 %105, 4
  %106 = load i32, i32* %i, align 4
  %add168 = add nsw i32 %mul167, %106
  %div169 = sdiv i32 %add168, 2
  %idxprom170 = sext i32 %div169 to i64
  %arrayidx171 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1, i64 0, i64 %idxprom170
  %107 = load i32, i32* %mbaddry, align 4
  %mul172 = mul nsw i32 %107, 4
  %108 = load i32, i32* %j, align 4
  %add173 = add nsw i32 %mul172, %108
  %div174 = sdiv i32 %add173, 2
  %idxprom175 = sext i32 %div174 to i64
  %arrayidx176 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx171, i64 0, i64 %idxprom175
  %109 = load i8, i8* %arrayidx176, align 1
  %110 = load i32, i32* %i, align 4
  %div177 = sdiv i32 %110, 2
  %idxprom178 = sext i32 %div177 to i64
  %arrayidx179 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i64 0, i64 %idxprom178
  %111 = load i32, i32* %j, align 4
  %div180 = sdiv i32 %111, 2
  %idxprom181 = sext i32 %div180 to i64
  %arrayidx182 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx179, i64 0, i64 %idxprom181
  store i8 %109, i8* %arrayidx182, align 1
  %112 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %113 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1183 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %113, i32 0, i32 13
  %arrayidx184 = getelementptr inbounds [3 x i32], [3 x i32]* %list1183, i64 0, i64 0
  %114 = load i32, i32* %arrayidx184, align 4
  %idxprom185 = sext i32 %114 to i64
  %arrayidx186 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %112, i64 %idxprom185
  %mvd_l1 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx186, i32 0, i32 3
  %115 = load i32, i32* %mbaddrx, align 4
  %mul187 = mul nsw i32 %115, 4
  %116 = load i32, i32* %i, align 4
  %add188 = add nsw i32 %mul187, %116
  %idxprom189 = sext i32 %add188 to i64
  %arrayidx190 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1, i64 0, i64 %idxprom189
  %117 = load i32, i32* %mbaddry, align 4
  %mul191 = mul nsw i32 %117, 4
  %118 = load i32, i32* %j, align 4
  %add192 = add nsw i32 %mul191, %118
  %idxprom193 = sext i32 %add192 to i64
  %arrayidx194 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx190, i64 0, i64 %idxprom193
  %arrayidx195 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx194, i64 0, i64 0
  %119 = load i32, i32* %arrayidx195, align 4
  %120 = load i32, i32* %i, align 4
  %idxprom196 = sext i32 %120 to i64
  %arrayidx197 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom196
  %121 = load i32, i32* %j, align 4
  %idxprom198 = sext i32 %121 to i64
  %arrayidx199 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx197, i64 0, i64 %idxprom198
  %arrayidx200 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx199, i64 0, i64 0
  store i32 %119, i32* %arrayidx200, align 8
  %122 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %123 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1201 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %123, i32 0, i32 13
  %arrayidx202 = getelementptr inbounds [3 x i32], [3 x i32]* %list1201, i64 0, i64 0
  %124 = load i32, i32* %arrayidx202, align 4
  %idxprom203 = sext i32 %124 to i64
  %arrayidx204 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %122, i64 %idxprom203
  %mvd_l1205 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx204, i32 0, i32 3
  %125 = load i32, i32* %mbaddrx, align 4
  %mul206 = mul nsw i32 %125, 4
  %126 = load i32, i32* %i, align 4
  %add207 = add nsw i32 %mul206, %126
  %idxprom208 = sext i32 %add207 to i64
  %arrayidx209 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1205, i64 0, i64 %idxprom208
  %127 = load i32, i32* %mbaddry, align 4
  %mul210 = mul nsw i32 %127, 4
  %128 = load i32, i32* %j, align 4
  %add211 = add nsw i32 %mul210, %128
  %idxprom212 = sext i32 %add211 to i64
  %arrayidx213 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx209, i64 0, i64 %idxprom212
  %arrayidx214 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx213, i64 0, i64 1
  %129 = load i32, i32* %arrayidx214, align 4
  %130 = load i32, i32* %i, align 4
  %idxprom215 = sext i32 %130 to i64
  %arrayidx216 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i64 0, i64 %idxprom215
  %131 = load i32, i32* %j, align 4
  %idxprom217 = sext i32 %131 to i64
  %arrayidx218 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx216, i64 0, i64 %idxprom217
  %arrayidx219 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx218, i64 0, i64 1
  store i32 %129, i32* %arrayidx219, align 4
  br label %if.end220

if.end220:                                        ; preds = %if.else162, %if.then103
  br label %for.inc

for.inc:                                          ; preds = %if.end220
  %132 = load i32, i32* %j, align 4
  %inc = add nsw i32 %132, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond85

for.end:                                          ; preds = %for.cond85
  br label %for.inc221

for.inc221:                                       ; preds = %for.end
  %133 = load i32, i32* %i, align 4
  %inc222 = add nsw i32 %133, 1
  store i32 %inc222, i32* %i, align 4
  br label %for.cond81

for.end223:                                       ; preds = %for.cond81
  br label %if.end224

if.end224:                                        ; preds = %for.end223, %if.then77
  store i32 0, i32* %i, align 4
  br label %for.cond225

for.cond225:                                      ; preds = %for.inc245, %if.end224
  %134 = load i32, i32* %i, align 4
  %cmp226 = icmp slt i32 %134, 4
  br i1 %cmp226, label %for.body228, label %for.end247, !prof !89

for.body228:                                      ; preds = %for.cond225
  %135 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %136 = load i32, i32* %mbaddrx, align 4
  %mul229 = mul nsw i32 %136, 4
  %add230 = add nsw i32 %mul229, 3
  %idxprom231 = sext i32 %add230 to i64
  %arrayidx232 = getelementptr inbounds [36 x i8], [36 x i8]* %135, i64 %idxprom231
  %137 = load i32, i32* %mbaddry, align 4
  %mul233 = mul nsw i32 %137, 4
  %138 = load i32, i32* %i, align 4
  %add234 = add nsw i32 %mul233, %138
  %idxprom235 = sext i32 %add234 to i64
  %arrayidx236 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx232, i64 0, i64 %idxprom235
  store i8 2, i8* %arrayidx236, align 1
  %139 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %140 = load i32, i32* %mbaddrx, align 4
  %mul237 = mul nsw i32 %140, 4
  %141 = load i32, i32* %i, align 4
  %add238 = add nsw i32 %mul237, %141
  %idxprom239 = sext i32 %add238 to i64
  %arrayidx240 = getelementptr inbounds [36 x i8], [36 x i8]* %139, i64 %idxprom239
  %142 = load i32, i32* %mbaddry, align 4
  %mul241 = mul nsw i32 %142, 4
  %add242 = add nsw i32 %mul241, 3
  %idxprom243 = sext i32 %add242 to i64
  %arrayidx244 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx240, i64 0, i64 %idxprom243
  store i8 2, i8* %arrayidx244, align 1
  br label %for.inc245

for.inc245:                                       ; preds = %for.body228
  %143 = load i32, i32* %i, align 4
  %inc246 = add nsw i32 %143, 1
  store i32 %inc246, i32* %i, align 4
  br label %for.cond225

for.end247:                                       ; preds = %for.cond225
  %144 = load i8, i8* %tmpmbtp, align 1
  %145 = load i32, i32* %type, align 4
  %conv248 = trunc i32 %145 to i8
  %146 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %147 = load i8*, i8** %nalu_buf.addr, align 8
  %148 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %149 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l1_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %149, i32 0, i32 14
  %150 = load i8, i8* %num_ref_idx_l1_active_minus1, align 1
  %151 = load %struct.slice_header_rbsp_t*, %struct.slice_header_rbsp_t** %SH.addr, align 8
  %num_ref_idx_l0_active_minus1 = getelementptr inbounds %struct.slice_header_rbsp_t, %struct.slice_header_rbsp_t* %151, i32 0, i32 13
  %152 = load i8, i8* %num_ref_idx_l0_active_minus1, align 2
  %arraydecay = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i32 0, i32 0
  %arraydecay249 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i32 0, i32 0
  %arraydecay250 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i32 0, i32 0
  %arraydecay251 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i32 0, i32 0
  %153 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %154 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %154, i32 0, i32 9
  %155 = load i32, i32* %mem_idx, align 4
  %idxprom252 = sext i32 %155 to i64
  %arrayidx253 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %153, i64 %idxprom252
  %refIdxL0254 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx253, i32 0, i32 0
  %arraydecay255 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0254, i32 0, i32 0
  %156 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %157 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx256 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %157, i32 0, i32 9
  %158 = load i32, i32* %mem_idx256, align 4
  %idxprom257 = sext i32 %158 to i64
  %arrayidx258 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %156, i64 %idxprom257
  %refIdxL1259 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx258, i32 0, i32 1
  %arraydecay260 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1259, i32 0, i32 0
  %159 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %160 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx261 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %160, i32 0, i32 9
  %161 = load i32, i32* %mem_idx261, align 4
  %idxprom262 = sext i32 %161 to i64
  %arrayidx263 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %159, i64 %idxprom262
  %mvd_l0264 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx263, i32 0, i32 2
  %arraydecay265 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l0264, i32 0, i32 0
  %162 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %163 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx266 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %163, i32 0, i32 9
  %164 = load i32, i32* %mem_idx266, align 4
  %idxprom267 = sext i32 %164 to i64
  %arrayidx268 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %162, i64 %idxprom267
  %mvd_l1269 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx268, i32 0, i32 3
  %arraydecay270 = getelementptr inbounds [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]]* %mvd_l1269, i32 0, i32 0
  %165 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list0 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %165, i32 0, i32 12
  %arraydecay271 = getelementptr inbounds [3 x i32], [3 x i32]* %list0, i32 0, i32 0
  %166 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %list1272 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %166, i32 0, i32 13
  %arraydecay273 = getelementptr inbounds [3 x i32], [3 x i32]* %list1272, i32 0, i32 0
  %167 = load i32, i32* %mbaddrx, align 4
  %168 = load i32, i32* %mbaddry, align 4
  %mul274 = mul nsw i32 %168, 11
  %add275 = add nsw i32 %167, %mul274
  %169 = load i8, i8* %MbSkipFlag, align 1
  %conv276 = zext i8 %169 to i32
  %arraydecay277 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refCOL, i32 0, i32 0
  %arraydecay278 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvCOL, i32 0, i32 0
  %170 = load i8, i8* %MbType, align 1
  call void @processinterMbType(i8 zeroext %144, i8 zeroext %conv248, %struct.NALU_t* %146, i8* %147, i64* %148, i8 zeroext %150, i8 zeroext %152, [2 x i8]* %arraydecay, [2 x i8]* %arraydecay249, [4 x [2 x i32]]* %arraydecay250, [4 x [2 x i32]]* %arraydecay251, [18 x i8]* %arraydecay255, [18 x i8]* %arraydecay260, [36 x [2 x i32]]* %arraydecay265, [36 x [2 x i32]]* %arraydecay270, i32* %arraydecay271, i32* %arraydecay273, i32 %add275, i32 %conv276, [2 x i8]* %arraydecay277, [4 x [2 x i32]]* %arraydecay278, i8 zeroext %170)
  br label %if.end336

if.else279:                                       ; preds = %lor.lhs.false73
  %171 = load i8, i8* %tmpImode, align 1
  %conv280 = zext i8 %171 to i32
  %cmp281 = icmp eq i32 %conv280, 1
  br i1 %cmp281, label %if.then287, label %lor.lhs.false283, !prof !90

lor.lhs.false283:                                 ; preds = %if.else279
  %172 = load i8, i8* %tmpImode, align 1
  %conv284 = zext i8 %172 to i32
  %cmp285 = icmp eq i32 %conv284, 0
  br i1 %cmp285, label %if.then287, label %if.end335, !prof !91

if.then287:                                       ; preds = %lor.lhs.false283, %if.else279
  %173 = load i8, i8* %tmpImode, align 1
  %conv288 = zext i8 %173 to i32
  %cmp289 = icmp eq i32 %conv288, 0
  br i1 %cmp289, label %if.then291, label %if.else305, !prof !81

if.then291:                                       ; preds = %if.then287
  %174 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %175 = load i8*, i8** %nalu_buf.addr, align 8
  %176 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %177 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %178 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %179 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx292 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %179, i32 0, i32 9
  %180 = load i32, i32* %mem_idx292, align 4
  %idxprom293 = sext i32 %180 to i64
  %arrayidx294 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %178, i64 %idxprom293
  %refIdxL0295 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx294, i32 0, i32 0
  %arraydecay296 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL0295, i32 0, i32 0
  %181 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %PICINFO.addr, align 8
  %182 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx297 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %182, i32 0, i32 9
  %183 = load i32, i32* %mem_idx297, align 4
  %idxprom298 = sext i32 %183 to i64
  %arrayidx299 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %181, i64 %idxprom298
  %refIdxL1300 = getelementptr inbounds %struct.StorablePictureInfo, %struct.StorablePictureInfo* %arrayidx299, i32 0, i32 1
  %arraydecay301 = getelementptr inbounds [22 x [18 x i8]], [22 x [18 x i8]]* %refIdxL1300, i32 0, i32 0
  %arraydecay302 = getelementptr inbounds [16 x i8], [16 x i8]* %intra4x4predmode, i32 0, i32 0
  %184 = load i8, i8* %constraint_intra_flag.addr, align 1
  %185 = load i32, i32* %mbaddrx, align 4
  %mul303 = mul nsw i32 %185, 4
  %186 = load i32, i32* %mbaddry, align 4
  %mul304 = mul nsw i32 %186, 4
  call void @IntraInfo(%struct.NALU_t* %174, i8* %175, i64* %176, [36 x i8]* %177, [18 x i8]* %arraydecay296, [18 x i8]* %arraydecay301, i8* %arraydecay302, i8 zeroext %184, i32 %mul303, i32 %mul304)
  br label %if.end329

if.else305:                                       ; preds = %if.then287
  store i32 0, i32* %i, align 4
  br label %for.cond306

for.cond306:                                      ; preds = %for.inc326, %if.else305
  %187 = load i32, i32* %i, align 4
  %cmp307 = icmp slt i32 %187, 4
  br i1 %cmp307, label %for.body309, label %for.end328, !prof !92

for.body309:                                      ; preds = %for.cond306
  %188 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %189 = load i32, i32* %mbaddrx, align 4
  %mul310 = mul nsw i32 %189, 4
  %add311 = add nsw i32 %mul310, 3
  %idxprom312 = sext i32 %add311 to i64
  %arrayidx313 = getelementptr inbounds [36 x i8], [36 x i8]* %188, i64 %idxprom312
  %190 = load i32, i32* %mbaddry, align 4
  %mul314 = mul nsw i32 %190, 4
  %191 = load i32, i32* %i, align 4
  %add315 = add nsw i32 %mul314, %191
  %idxprom316 = sext i32 %add315 to i64
  %arrayidx317 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx313, i64 0, i64 %idxprom316
  store i8 2, i8* %arrayidx317, align 1
  %192 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %193 = load i32, i32* %mbaddrx, align 4
  %mul318 = mul nsw i32 %193, 4
  %194 = load i32, i32* %i, align 4
  %add319 = add nsw i32 %mul318, %194
  %idxprom320 = sext i32 %add319 to i64
  %arrayidx321 = getelementptr inbounds [36 x i8], [36 x i8]* %192, i64 %idxprom320
  %195 = load i32, i32* %mbaddry, align 4
  %mul322 = mul nsw i32 %195, 4
  %add323 = add nsw i32 %mul322, 3
  %idxprom324 = sext i32 %add323 to i64
  %arrayidx325 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx321, i64 0, i64 %idxprom324
  store i8 2, i8* %arrayidx325, align 1
  br label %for.inc326

for.inc326:                                       ; preds = %for.body309
  %196 = load i32, i32* %i, align 4
  %inc327 = add nsw i32 %196, 1
  store i32 %inc327, i32* %i, align 4
  br label %for.cond306

for.end328:                                       ; preds = %for.cond306
  br label %if.end329

if.end329:                                        ; preds = %for.end328, %if.then291
  %197 = load i8, i8* %MbType, align 1
  %conv330 = zext i8 %197 to i32
  %sub331 = sub nsw i32 %conv330, 1
  %rem = srem i32 %sub331, 4
  %conv332 = trunc i32 %rem to i8
  store i8 %conv332, i8* %Intra16x16PredMode, align 1
  %198 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %199 = load i8*, i8** %nalu_buf.addr, align 8
  %200 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call333 = call i32 @u_e(%struct.NALU_t* %198, i8* %199, i64* %200)
  %conv334 = trunc i32 %call333 to i8
  store i8 %conv334, i8* %IntraChromaPredMode, align 1
  br label %if.end335

if.end335:                                        ; preds = %if.end329, %lor.lhs.false283
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %for.end247
  %201 = load i8, i8* %tmpImode, align 1
  %conv337 = zext i8 %201 to i32
  %cmp338 = icmp ne i32 %conv337, 25
  br i1 %cmp338, label %if.then340, label %if.end609, !prof !93

if.then340:                                       ; preds = %if.end336
  %202 = load i8, i8* %tmpImode, align 1
  %conv341 = zext i8 %202 to i32
  %cmp342 = icmp ne i32 %conv341, 3
  br i1 %cmp342, label %if.then344, label %if.end458, !prof !79

if.then344:                                       ; preds = %if.then340
  %203 = load i8, i8* %tmpImode, align 1
  %conv345 = zext i8 %203 to i32
  %cmp346 = icmp ne i32 %conv345, 1
  br i1 %cmp346, label %if.then348, label %if.else359, !prof !94

if.then348:                                       ; preds = %if.then344
  %204 = load i8, i8* %tmpImode, align 1
  %conv349 = zext i8 %204 to i32
  %cmp350 = icmp ne i32 %conv349, 0
  %conv351 = zext i1 %cmp350 to i32
  %205 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %206 = load i8*, i8** %nalu_buf.addr, align 8
  %207 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call352 = call zeroext i8 @m_e(i32 %conv351, %struct.NALU_t* %205, i8* %206, i64* %207)
  store i8 %call352, i8* %coded_block_pattern, align 1
  %208 = load i8, i8* %coded_block_pattern, align 1
  %conv353 = zext i8 %208 to i32
  %rem354 = srem i32 %conv353, 16
  %conv355 = trunc i32 %rem354 to i8
  store i8 %conv355, i8* %CodedPatternLuma, align 1
  %209 = load i8, i8* %coded_block_pattern, align 1
  %conv356 = zext i8 %209 to i32
  %div357 = sdiv i32 %conv356, 16
  %conv358 = trunc i32 %div357 to i8
  store i8 %conv358, i8* %CodedPatternChroma, align 1
  br label %if.end370

if.else359:                                       ; preds = %if.then344
  %210 = load i8, i8* %MbType, align 1
  %conv360 = zext i8 %210 to i32
  %sub361 = sub nsw i32 %conv360, 1
  %div362 = sdiv i32 %sub361, 4
  %rem363 = srem i32 %div362, 3
  %conv364 = trunc i32 %rem363 to i8
  store i8 %conv364, i8* %CodedPatternChroma, align 1
  %211 = load i8, i8* %MbType, align 1
  %conv365 = zext i8 %211 to i32
  %cmp366 = icmp sgt i32 %conv365, 12
  %212 = zext i1 %cmp366 to i64
  %cond368 = select i1 %cmp366, i32 15, i32 0
  %conv369 = trunc i32 %cond368 to i8
  store i8 %conv369, i8* %CodedPatternLuma, align 1
  br label %if.end370

if.end370:                                        ; preds = %if.else359, %if.then348
  %213 = load i8, i8* %CodedPatternChroma, align 1
  %conv371 = zext i8 %213 to i32
  %cmp372 = icmp sgt i32 %conv371, 0
  br i1 %cmp372, label %if.then382, label %lor.lhs.false374, !prof !95

lor.lhs.false374:                                 ; preds = %if.end370
  %214 = load i8, i8* %CodedPatternLuma, align 1
  %conv375 = zext i8 %214 to i32
  %cmp376 = icmp sgt i32 %conv375, 0
  br i1 %cmp376, label %if.then382, label %lor.lhs.false378, !prof !96

lor.lhs.false378:                                 ; preds = %lor.lhs.false374
  %215 = load i8, i8* %tmpImode, align 1
  %conv379 = zext i8 %215 to i32
  %cmp380 = icmp eq i32 %conv379, 1
  br i1 %cmp380, label %if.then382, label %if.end457, !prof !97

if.then382:                                       ; preds = %lor.lhs.false378, %lor.lhs.false374, %if.end370
  %216 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %217 = load i8*, i8** %nalu_buf.addr, align 8
  %218 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call383 = call i32 @s_e(%struct.NALU_t* %216, i8* %217, i64* %218)
  store i32 %call383, i32* %mb_qp_delta, align 4
  %219 = load i32, i32* %mb_qp_delta, align 4
  %220 = load i32, i32* %qPprev, align 4
  %add384 = add nsw i32 %220, %219
  store i32 %add384, i32* %qPprev, align 4
  %221 = load i32, i32* %qPprev, align 4
  %conv385 = trunc i32 %221 to i8
  store i8 %conv385, i8* %qPy, align 1
  %222 = load i8, i8* %qPy, align 1
  %conv386 = sext i8 %222 to i32
  %rem387 = srem i32 %conv386, 6
  %conv388 = trunc i32 %rem387 to i8
  store i8 %conv388, i8* %qPm6, align 1
  %223 = load i8, i8* %qPy, align 1
  %conv389 = sext i8 %223 to i32
  %div390 = sdiv i32 %conv389, 6
  %sub391 = sub nsw i32 %div390, 4
  %conv392 = trunc i32 %sub391 to i8
  store i8 %conv392, i8* %temp1l, align 1
  %224 = load i8, i8* %qPy, align 1
  %conv393 = sext i8 %224 to i32
  %div394 = sdiv i32 %conv393, 6
  %sub395 = sub nsw i32 4, %div394
  %conv396 = trunc i32 %sub395 to i8
  store i8 %conv396, i8* %temp2l, align 1
  %225 = load i8, i8* %temp1l, align 1
  %conv397 = sext i8 %225 to i32
  %cmp398 = icmp slt i32 %conv397, 0
  br i1 %cmp398, label %if.then400, label %if.end407, !prof !98

if.then400:                                       ; preds = %if.then382
  %226 = load i8, i8* %qPy, align 1
  %conv401 = sext i8 %226 to i32
  %div402 = sdiv i32 %conv401, 6
  %sub403 = sub nsw i32 3, %div402
  %idxprom404 = sext i32 %sub403 to i64
  %arrayidx405 = getelementptr inbounds [6 x i32], [6 x i32]* %power2, i64 0, i64 %idxprom404
  %227 = load i32, i32* %arrayidx405, align 4
  %conv406 = trunc i32 %227 to i8
  store i8 %conv406, i8* %temp3l, align 1
  br label %if.end407

if.end407:                                        ; preds = %if.then400, %if.then382
  %228 = load i8, i8* %qPy, align 1
  %conv408 = sext i8 %228 to i32
  %div409 = sdiv i32 %conv408, 6
  %sub410 = sub nsw i32 %div409, 6
  %conv411 = trunc i32 %sub410 to i8
  store i8 %conv411, i8* %scale1, align 1
  %229 = load i8, i8* %qPy, align 1
  %conv412 = sext i8 %229 to i32
  %div413 = sdiv i32 %conv412, 6
  %sub414 = sub nsw i32 6, %div413
  %conv415 = trunc i32 %sub414 to i8
  store i8 %conv415, i8* %scale2, align 1
  %230 = load i8, i8* %scale1, align 1
  %conv416 = sext i8 %230 to i32
  %cmp417 = icmp slt i32 %conv416, 0
  br i1 %cmp417, label %if.then419, label %if.end426, !prof !99

if.then419:                                       ; preds = %if.end407
  %231 = load i8, i8* %qPy, align 1
  %conv420 = sext i8 %231 to i32
  %div421 = sdiv i32 %conv420, 6
  %sub422 = sub nsw i32 5, %div421
  %idxprom423 = sext i32 %sub422 to i64
  %arrayidx424 = getelementptr inbounds [6 x i32], [6 x i32]* %power2, i64 0, i64 %idxprom423
  %232 = load i32, i32* %arrayidx424, align 4
  %conv425 = trunc i32 %232 to i8
  store i8 %conv425, i8* %scale3, align 1
  br label %if.end426

if.end426:                                        ; preds = %if.then419, %if.end407
  %233 = load i8, i8* %qPy, align 1
  %conv427 = sext i8 %233 to i32
  %234 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %chroma_offset = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %234, i32 0, i32 17
  %235 = load i32, i32* %chroma_offset, align 4
  %add428 = add nsw i32 %conv427, %235
  %call429 = call i32 @Clip3(i32 0, i32 51, i32 %add428)
  %conv430 = trunc i32 %call429 to i8
  store i8 %conv430, i8* %qPi, align 1
  %236 = load i8, i8* %qPi, align 1
  %conv431 = sext i8 %236 to i32
  %cmp432 = icmp slt i32 %conv431, 30
  br i1 %cmp432, label %if.then434, label %if.else435, !prof !99

if.then434:                                       ; preds = %if.end426
  %237 = load i8, i8* %qPi, align 1
  store i8 %237, i8* %qPc, align 1
  br label %if.end441

if.else435:                                       ; preds = %if.end426
  %238 = load i8, i8* %qPi, align 1
  %conv436 = sext i8 %238 to i32
  %sub437 = sub nsw i32 %conv436, 30
  %idxprom438 = sext i32 %sub437 to i64
  %arrayidx439 = getelementptr inbounds [22 x i32], [22 x i32]* %qPCtable, i64 0, i64 %idxprom438
  %239 = load i32, i32* %arrayidx439, align 4
  %conv440 = trunc i32 %239 to i8
  store i8 %conv440, i8* %qPc, align 1
  br label %if.end441

if.end441:                                        ; preds = %if.else435, %if.then434
  %240 = load i8, i8* %qPc, align 1
  %conv442 = sext i8 %240 to i32
  %rem443 = srem i32 %conv442, 6
  %conv444 = trunc i32 %rem443 to i8
  store i8 %conv444, i8* %qPcm6, align 1
  %241 = load i8, i8* %qPc, align 1
  %conv445 = sext i8 %241 to i32
  %div446 = sdiv i32 %conv445, 6
  %sub447 = sub nsw i32 %div446, 4
  %conv448 = trunc i32 %sub447 to i8
  store i8 %conv448, i8* %temp1c, align 1
  %242 = load i8, i8* %qPc, align 1
  %conv449 = sext i8 %242 to i32
  %div450 = sdiv i32 %conv449, 6
  %sub451 = sub nsw i32 4, %div450
  %conv452 = trunc i32 %sub451 to i8
  store i8 %conv452, i8* %temp2c, align 1
  %243 = load i8, i8* %qPc, align 1
  %conv453 = sext i8 %243 to i32
  %div454 = sdiv i32 %conv453, 6
  %sub455 = sub nsw i32 3, %div454
  %shl = shl i32 1, %sub455
  %conv456 = trunc i32 %shl to i8
  store i8 %conv456, i8* %temp3c, align 1
  br label %if.end457

if.end457:                                        ; preds = %if.end441, %lor.lhs.false378
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %if.then340
  %244 = load i8, i8* %tmpImode, align 1
  %conv459 = zext i8 %244 to i32
  %cmp460 = icmp eq i32 %conv459, 1
  br i1 %cmp460, label %if.then462, label %if.end489, !prof !100

if.then462:                                       ; preds = %if.end458
  %245 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %246 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %247 = load i32, i32* %mbaddrx, align 4
  %mul463 = mul nsw i32 %247, 4
  %248 = load i32, i32* %mbaddry, align 4
  %mul464 = mul nsw i32 %248, 4
  %call465 = call zeroext i8 @nc_Luma([9 x i8]* %245, [36 x i8]* %246, i32 %mul463, i32 %mul464)
  store i8 %call465, i8* %nC, align 1
  %arraydecay466 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i32 0, i32 0
  %249 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %250 = load i8*, i8** %nalu_buf.addr, align 8
  %251 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %252 = load i8, i8* %nC, align 1
  %conv467 = zext i8 %252 to i32
  %call468 = call zeroext i8 @residual_block_cavlc_16([4 x i32]* %arraydecay466, %struct.NALU_t* %249, i8* %250, i64* %251, i32 0, i32 15, i32 %conv467)
  %253 = load i8, i8* %qPy, align 1
  %conv469 = sext i8 %253 to i32
  %arraydecay470 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i32 0, i32 0
  %254 = load i8, i8* %qPm6, align 1
  %conv471 = sext i8 %254 to i32
  %255 = load i8, i8* %scale1, align 1
  %conv472 = sext i8 %255 to i32
  %256 = load i8, i8* %scale2, align 1
  %conv473 = sext i8 %256 to i32
  %257 = load i8, i8* %scale3, align 1
  %conv474 = sext i8 %257 to i32
  call void @scale_and_inv_trans_Intra16x16DC(i32 %conv469, [4 x i32]* %arraydecay470, i32 %conv471, i32 %conv472, i32 %conv473, i32 %conv474)
  %arraydecay475 = getelementptr inbounds [16 x [4 x [4 x i8]]], [16 x [4 x [4 x i8]]]* %predL, i32 0, i32 0
  %258 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %259 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx476 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %259, i32 0, i32 9
  %260 = load i32, i32* %mem_idx476, align 4
  %idxprom477 = sext i32 %260 to i64
  %arrayidx478 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %258, i64 %idxprom477
  %arraydecay479 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx478, i32 0, i32 0
  %261 = load i8, i8* %Intra16x16PredMode, align 1
  %262 = load i32, i32* %mbaddrx, align 4
  %cmp480 = icmp sgt i32 %262, 0
  %conv481 = zext i1 %cmp480 to i32
  %mul482 = mul nsw i32 %conv481, 2
  %263 = load i32, i32* %mbaddry, align 4
  %cmp483 = icmp sgt i32 %263, 0
  %conv484 = zext i1 %cmp483 to i32
  %add485 = add nsw i32 %mul482, %conv484
  %conv486 = trunc i32 %add485 to i8
  %264 = load i32, i32* %mbaddrx, align 4
  %mul487 = mul nsw i32 %264, 16
  %265 = load i32, i32* %mbaddry, align 4
  %mul488 = mul nsw i32 %265, 16
  call void @predict_intra16x16_luma_NonField([4 x [4 x i8]]* %arraydecay475, [144 x i8]* %arraydecay479, i8 zeroext %261, i8 zeroext %conv486, i32 %mul487, i32 %mul488)
  br label %if.end489

if.end489:                                        ; preds = %if.then462, %if.end458
  store i32 0, i32* %k, align 4
  br label %for.cond490

for.cond490:                                      ; preds = %for.inc544, %if.end489
  %266 = load i32, i32* %k, align 4
  %cmp491 = icmp slt i32 %266, 16
  br i1 %cmp491, label %for.body493, label %for.end546, !prof !101

for.body493:                                      ; preds = %for.cond490
  %267 = load i32, i32* %k, align 4
  %and = and i32 %267, 4
  %cmp494 = icmp ne i32 %and, 0
  %conv495 = zext i1 %cmp494 to i32
  %mul496 = mul nsw i32 %conv495, 2
  %268 = load i32, i32* %k, align 4
  %and497 = and i32 %268, 1
  %cmp498 = icmp ne i32 %and497, 0
  %conv499 = zext i1 %cmp498 to i32
  %add500 = add nsw i32 %mul496, %conv499
  store i32 %add500, i32* %x, align 4
  %269 = load i32, i32* %k, align 4
  %and501 = and i32 %269, 8
  %cmp502 = icmp ne i32 %and501, 0
  %conv503 = zext i1 %cmp502 to i32
  %mul504 = mul nsw i32 %conv503, 2
  %270 = load i32, i32* %k, align 4
  %and505 = and i32 %270, 2
  %cmp506 = icmp ne i32 %and505, 0
  %conv507 = zext i1 %cmp506 to i32
  %add508 = add nsw i32 %mul504, %conv507
  store i32 %add508, i32* %y, align 4
  %271 = load i32, i32* %x, align 4
  %conv509 = trunc i32 %271 to i8
  %272 = load i32, i32* %y, align 4
  %conv510 = trunc i32 %272 to i8
  %273 = load i32, i32* %k, align 4
  %conv511 = trunc i32 %273 to i8
  %274 = load i32, i32* %mbaddrx, align 4
  %275 = load i32, i32* %mbaddry, align 4
  %276 = load i8, i8* %CodedPatternLuma, align 1
  %277 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %278 = load i8*, i8** %nalu_buf.addr, align 8
  %279 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %280 = load i8, i8* %tmpImode, align 1
  %conv512 = zext i8 %280 to i32
  %281 = load i32, i32* %x, align 4
  %idxprom513 = sext i32 %281 to i64
  %arrayidx514 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %coeffDCL, i64 0, i64 %idxprom513
  %282 = load i32, i32* %y, align 4
  %idxprom515 = sext i32 %282 to i64
  %arrayidx516 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx514, i64 0, i64 %idxprom515
  %283 = load i32, i32* %arrayidx516, align 4
  %284 = load %struct.StorablePicture*, %struct.StorablePicture** %PIC.addr, align 8
  %285 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %286 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %287 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %288 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %289 = load [36 x i8]*, [36 x i8]** %IntraPredMode.addr, align 8
  %290 = load [36 x i8]*, [36 x i8]** %NzLuma.addr, align 8
  %291 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %292 = load i32, i32* %k, align 4
  %idxprom517 = sext i32 %292 to i64
  %arrayidx518 = getelementptr inbounds [16 x [4 x [4 x i8]]], [16 x [4 x [4 x i8]]]* %predL, i64 0, i64 %idxprom517
  %arraydecay519 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %arrayidx518, i32 0, i32 0
  %293 = load i8, i8* %qPm6, align 1
  %294 = load i8, i8* %qPy, align 1
  %295 = load i8, i8* %temp1l, align 1
  %296 = load i8, i8* %temp2l, align 1
  %297 = load i8, i8* %temp3l, align 1
  %298 = load i32, i32* %x, align 4
  %div520 = sdiv i32 %298, 2
  %idxprom521 = sext i32 %div520 to i64
  %arrayidx522 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i64 0, i64 %idxprom521
  %299 = load i32, i32* %y, align 4
  %div523 = sdiv i32 %299, 2
  %idxprom524 = sext i32 %div523 to i64
  %arrayidx525 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx522, i64 0, i64 %idxprom524
  %300 = load i8, i8* %arrayidx525, align 1
  %301 = load i32, i32* %x, align 4
  %div526 = sdiv i32 %301, 2
  %idxprom527 = sext i32 %div526 to i64
  %arrayidx528 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i64 0, i64 %idxprom527
  %302 = load i32, i32* %y, align 4
  %div529 = sdiv i32 %302, 2
  %idxprom530 = sext i32 %div529 to i64
  %arrayidx531 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx528, i64 0, i64 %idxprom530
  %303 = load i8, i8* %arrayidx531, align 1
  %304 = load i32, i32* %x, align 4
  %idxprom532 = sext i32 %304 to i64
  %arrayidx533 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i64 0, i64 %idxprom532
  %305 = load i32, i32* %y, align 4
  %idxprom534 = sext i32 %305 to i64
  %arrayidx535 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx533, i64 0, i64 %idxprom534
  %arraydecay536 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx535, i32 0, i32 0
  %306 = load i32, i32* %x, align 4
  %idxprom537 = sext i32 %306 to i64
  %arrayidx538 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i64 0, i64 %idxprom537
  %307 = load i32, i32* %y, align 4
  %idxprom539 = sext i32 %307 to i64
  %arrayidx540 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx538, i64 0, i64 %idxprom539
  %arraydecay541 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx540, i32 0, i32 0
  %308 = load i32, i32* %k, align 4
  %idxprom542 = sext i32 %308 to i64
  %arrayidx543 = getelementptr inbounds [16 x i8], [16 x i8]* %intra4x4predmode, i64 0, i64 %idxprom542
  %309 = load i8, i8* %arrayidx543, align 1
  call void @process_luma(i8 zeroext %conv509, i8 zeroext %conv510, i8 zeroext %conv511, i32 %274, i32 %275, i8 zeroext %276, %struct.NALU_t* %277, i8* %278, i64* %279, i32 %conv512, i32 %283, %struct.StorablePicture* %284, [176 x [144 x i8]]* %285, [88 x [72 x i8]]* %286, [88 x [72 x i8]]* %287, [9 x i8]* %288, [36 x i8]* %289, [36 x i8]* %290, %struct.ImageParameters* %291, [4 x i8]* %arraydecay519, i8 signext %293, i8 signext %294, i8 signext %295, i8 signext %296, i8 signext %297, i8 signext %300, i8 signext %303, i32* %arraydecay536, i32* %arraydecay541, i8 zeroext %309)
  br label %for.inc544

for.inc544:                                       ; preds = %for.body493
  %310 = load i32, i32* %k, align 4
  %inc545 = add nsw i32 %310, 1
  store i32 %inc545, i32* %k, align 4
  br label %for.cond490

for.end546:                                       ; preds = %for.cond490
  %311 = load i8, i8* %CodedPatternChroma, align 1
  %conv547 = zext i8 %311 to i32
  %and548 = and i32 %conv547, 3
  %tobool549 = icmp ne i32 %and548, 0
  br i1 %tobool549, label %if.then550, label %if.end563, !prof !102

if.then550:                                       ; preds = %for.end546
  %arraydecay551 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %312 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %313 = load i8*, i8** %nalu_buf.addr, align 8
  %314 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call552 = call zeroext i8 @residual_block_cavlc_4([2 x i32]* %arraydecay551, %struct.NALU_t* %312, i8* %313, i64* %314, i32 0, i32 3)
  %arraydecay553 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %315 = load i8, i8* %qPc, align 1
  %conv554 = sext i8 %315 to i32
  %316 = load i8, i8* %qPc, align 1
  %conv555 = sext i8 %316 to i32
  %rem556 = srem i32 %conv555, 6
  call void @scale_and_inv_trans_chroma2x2([2 x i32]* %arraydecay553, i32 %conv554, i32 %rem556)
  %arraydecay557 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %317 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %318 = load i8*, i8** %nalu_buf.addr, align 8
  %319 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call558 = call zeroext i8 @residual_block_cavlc_4([2 x i32]* %arraydecay557, %struct.NALU_t* %317, i8* %318, i64* %319, i32 0, i32 3)
  %arraydecay559 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %320 = load i8, i8* %qPc, align 1
  %conv560 = sext i8 %320 to i32
  %321 = load i8, i8* %qPc, align 1
  %conv561 = sext i8 %321 to i32
  %rem562 = srem i32 %conv561, 6
  call void @scale_and_inv_trans_chroma2x2([2 x i32]* %arraydecay559, i32 %conv560, i32 %rem562)
  br label %if.end563

if.end563:                                        ; preds = %if.then550, %for.end546
  %322 = load i8, i8* %tmpImode, align 1
  %conv564 = zext i8 %322 to i32
  %cmp565 = icmp eq i32 %conv564, 1
  br i1 %cmp565, label %if.then571, label %lor.lhs.false567, !prof !100

lor.lhs.false567:                                 ; preds = %if.end563
  %323 = load i8, i8* %tmpImode, align 1
  %conv568 = zext i8 %323 to i32
  %cmp569 = icmp eq i32 %conv568, 0
  br i1 %cmp569, label %if.then571, label %if.end600, !prof !103

if.then571:                                       ; preds = %lor.lhs.false567, %if.end563
  %arraydecay572 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_0, i32 0, i32 0
  %324 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %325 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx573 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %325, i32 0, i32 9
  %326 = load i32, i32* %mem_idx573, align 4
  %idxprom574 = sext i32 %326 to i64
  %arrayidx575 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %324, i64 %idxprom574
  %arraydecay576 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx575, i32 0, i32 0
  %327 = load i32, i32* %mbaddrx, align 4
  %cmp577 = icmp sgt i32 %327, 0
  %conv578 = zext i1 %cmp577 to i32
  %mul579 = mul nsw i32 %conv578, 2
  %328 = load i32, i32* %mbaddry, align 4
  %cmp580 = icmp sgt i32 %328, 0
  %conv581 = zext i1 %cmp580 to i32
  %add582 = add nsw i32 %mul579, %conv581
  %conv583 = trunc i32 %add582 to i8
  %329 = load i32, i32* %mbaddrx, align 4
  %mul584 = mul nsw i32 %329, 8
  %330 = load i32, i32* %mbaddry, align 4
  %mul585 = mul nsw i32 %330, 8
  %331 = load i8, i8* %IntraChromaPredMode, align 1
  call void @prediction_Chroma([4 x [4 x i8]]* %arraydecay572, [72 x i8]* %arraydecay576, i8 zeroext %conv583, i32 %mul584, i32 %mul585, i8 zeroext %331)
  %arraydecay586 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_1, i32 0, i32 0
  %332 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  %333 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %mem_idx587 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %333, i32 0, i32 9
  %334 = load i32, i32* %mem_idx587, align 4
  %idxprom588 = sext i32 %334 to i64
  %arrayidx589 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %332, i64 %idxprom588
  %arraydecay590 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx589, i32 0, i32 0
  %335 = load i32, i32* %mbaddrx, align 4
  %cmp591 = icmp sgt i32 %335, 0
  %conv592 = zext i1 %cmp591 to i32
  %mul593 = mul nsw i32 %conv592, 2
  %336 = load i32, i32* %mbaddry, align 4
  %cmp594 = icmp sgt i32 %336, 0
  %conv595 = zext i1 %cmp594 to i32
  %add596 = add nsw i32 %mul593, %conv595
  %conv597 = trunc i32 %add596 to i8
  %337 = load i32, i32* %mbaddrx, align 4
  %mul598 = mul nsw i32 %337, 8
  %338 = load i32, i32* %mbaddry, align 4
  %mul599 = mul nsw i32 %338, 8
  %339 = load i8, i8* %IntraChromaPredMode, align 1
  call void @prediction_Chroma([4 x [4 x i8]]* %arraydecay586, [72 x i8]* %arraydecay590, i8 zeroext %conv597, i32 %mul598, i32 %mul599, i8 zeroext %339)
  br label %if.end600

if.end600:                                        ; preds = %if.then571, %lor.lhs.false567
  %340 = load i8, i8* %CodedPatternChroma, align 1
  %341 = load [22 x [18 x i8]]*, [22 x [18 x i8]]** %NzChroma.addr, align 8
  %342 = load [9 x i8]*, [9 x i8]** %Imode.addr, align 8
  %343 = load i32, i32* %mbaddrx, align 4
  %344 = load i32, i32* %mbaddry, align 4
  %345 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %346 = load i8*, i8** %nalu_buf.addr, align 8
  %347 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %348 = load i8, i8* %qPc, align 1
  %349 = load i8, i8* %qPcm6, align 1
  %350 = load i8, i8* %temp1c, align 1
  %351 = load i8, i8* %temp2c, align 1
  %352 = load i8, i8* %temp3c, align 1
  %arraydecay601 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_0, i32 0, i32 0
  %arraydecay602 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %coeffDCC_1, i32 0, i32 0
  %arraydecay603 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx0, i32 0, i32 0
  %arraydecay604 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %refidx1, i32 0, i32 0
  %arraydecay605 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd0, i32 0, i32 0
  %arraydecay606 = getelementptr inbounds [4 x [4 x [2 x i32]]], [4 x [4 x [2 x i32]]]* %mvd1, i32 0, i32 0
  %353 = load %struct.ImageParameters*, %struct.ImageParameters** %img.addr, align 8
  %354 = load i8, i8* %tmpImode, align 1
  %arraydecay607 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_0, i32 0, i32 0
  %arraydecay608 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* %predC_1, i32 0, i32 0
  %355 = load %struct.StorablePicture*, %struct.StorablePicture** %PIC.addr, align 8
  %356 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %PIC_Sluma.addr, align 8
  %357 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_0.addr, align 8
  %358 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %PIC_SChroma_1.addr, align 8
  call void @process_chroma(i8 zeroext %340, [22 x [18 x i8]]* %341, [9 x i8]* %342, i32 %343, i32 %344, %struct.NALU_t* %345, i8* %346, i64* %347, i8 signext %348, i8 signext %349, i8 signext %350, i8 signext %351, i8 signext %352, [2 x i32]* %arraydecay601, [2 x i32]* %arraydecay602, [2 x i8]* %arraydecay603, [2 x i8]* %arraydecay604, [4 x [2 x i32]]* %arraydecay605, [4 x [2 x i32]]* %arraydecay606, %struct.ImageParameters* %353, i8 zeroext %354, [4 x [4 x i8]]* %arraydecay607, [4 x [4 x i8]]* %arraydecay608, %struct.StorablePicture* %355, [176 x [144 x i8]]* %356, [88 x [72 x i8]]* %357, [88 x [72 x i8]]* %358)
  br label %if.end609

if.end609:                                        ; preds = %if.end600, %if.end336
  br label %for.inc610

for.inc610:                                       ; preds = %if.end609
  %359 = load i32, i32* %mbaddrx, align 4
  %inc611 = add nsw i32 %359, 1
  store i32 %inc611, i32* %mbaddrx, align 4
  br label %for.cond2

for.end612:                                       ; preds = %for.cond2
  br label %for.inc613

for.inc613:                                       ; preds = %for.end612
  %360 = load i32, i32* %mbaddry, align 4
  %inc614 = add nsw i32 %360, 1
  store i32 %inc614, i32* %mbaddry, align 4
  br label %for.cond

for.end615:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

declare dso_local i32 @u_e(%struct.NALU_t*, i8*, i64*) #1

declare dso_local void @processinterMbType(i8 zeroext, i8 zeroext, %struct.NALU_t*, i8*, i64*, i8 zeroext, i8 zeroext, [2 x i8]*, [2 x i8]*, [4 x [2 x i32]]*, [4 x [2 x i32]]*, [18 x i8]*, [18 x i8]*, [36 x [2 x i32]]*, [36 x [2 x i32]]*, i32*, i32*, i32, i32, [2 x i8]*, [4 x [2 x i32]]*, i8 zeroext) #1

declare dso_local void @IntraInfo(%struct.NALU_t*, i8*, i64*, [36 x i8]*, [18 x i8]*, [18 x i8]*, i8*, i8 zeroext, i32, i32) #1

declare dso_local zeroext i8 @m_e(i32, %struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @s_e(%struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @Clip3(i32, i32, i32) #1

declare dso_local void @scale_and_inv_trans_Intra16x16DC(i32, [4 x i32]*, i32, i32, i32, i32) #1

declare dso_local void @predict_intra16x16_luma_NonField([4 x [4 x i8]]*, [144 x i8]*, i8 zeroext, i8 zeroext, i32, i32) #1

declare dso_local zeroext i8 @residual_block_cavlc_4([2 x i32]*, %struct.NALU_t*, i8*, i64*, i32, i32) #1

declare dso_local void @scale_and_inv_trans_chroma2x2([2 x i32]*, i32, i32) #1

declare dso_local void @prediction_Chroma([4 x [4 x i8]]*, [72 x i8]*, i8 zeroext, i32, i32, i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 3168}
!30 = !{!"branch_weights", i32 12673, i32 3169}
!31 = !{!"branch_weights", i32 50689, i32 12673}
!32 = !{!"function_entry_count", i64 1584}
!33 = !{!"branch_weights", i32 6337, i32 1585}
!34 = !{!"branch_weights", i32 25345, i32 6337}
!35 = !{!"function_entry_count", i64 7920}
!36 = !{!"branch_weights", i32 2421, i32 5501}
!37 = !{!"branch_weights", i32 257, i32 5245}
!38 = !{!"branch_weights", i32 1025, i32 257}
!39 = !{!"branch_weights", i32 4097, i32 1025}
!40 = !{!"branch_weights", i32 2593, i32 5329}
!41 = !{!"branch_weights", i32 2101, i32 493}
!42 = !{!"branch_weights", i32 577, i32 4753}
!43 = !{!"branch_weights", i32 321, i32 257}
!44 = !{!"branch_weights", i32 4753, i32 1}
!45 = !{!"branch_weights", i32 1589, i32 3165}
!46 = !{!"branch_weights", i32 3165, i32 1}
!47 = !{!"branch_weights", i32 1, i32 3165}
!48 = !{!"branch_weights", i32 3165, i32 1589}
!49 = !{!"branch_weights", i32 1589, i32 1}
!50 = !{!"branch_weights", i32 1, i32 1589}
!51 = !{!"branch_weights", i32 33, i32 1557}
!52 = !{!"branch_weights", i32 89, i32 1}
!53 = !{!"function_entry_count", i64 495}
!54 = !{!"branch_weights", i32 991, i32 496}
!55 = !{!"branch_weights", i32 1981, i32 991}
!56 = !{!"branch_weights", i32 337, i32 1645}
!57 = !{!"branch_weights", i32 6577, i32 1645}
!58 = !{!"branch_weights", i32 26305, i32 6577}
!59 = !{!"branch_weights", i32 557, i32 1425}
!60 = !{!"branch_weights", i32 1981, i32 1}
!61 = !{!"branch_weights", i32 1584, i32 398}
!62 = !{!"branch_weights", i32 3167, i32 1584}
!63 = !{!"branch_weights", i32 6333, i32 3167}
!64 = !{!"branch_weights", i32 398, i32 1}
!65 = !{!"branch_weights", i32 795, i32 398}
!66 = !{!"branch_weights", i32 1589, i32 795}
!67 = !{!"branch_weights", i32 649, i32 1333}
!68 = !{!"branch_weights", i32 145, i32 1189}
!69 = !{!"branch_weights", i32 1189, i32 1}
!70 = !{!"branch_weights", i32 792, i32 398}
!71 = !{!"function_entry_count", i64 5}
!72 = !{!"branch_weights", i32 46, i32 6}
!73 = !{!"branch_weights", i32 496, i32 46}
!74 = !{!"branch_weights", i32 298, i32 199}
!75 = !{!"branch_weights", i32 40, i32 259}
!76 = !{!"branch_weights", i32 24, i32 17}
!77 = !{!"branch_weights", i32 5, i32 20}
!78 = !{!"branch_weights", i32 259, i32 17}
!79 = !{!"branch_weights", i32 219, i32 278}
!80 = !{!"branch_weights", i32 199, i32 21}
!81 = !{!"branch_weights", i32 163, i32 37}
!82 = !{!"branch_weights", i32 1, i32 37}
!83 = !{!"branch_weights", i32 21, i32 476}
!84 = !{!"branch_weights", i32 278, i32 199}
!85 = !{!"branch_weights", i32 199, i32 100}
!86 = !{!"branch_weights", i32 793, i32 199}
!87 = !{!"branch_weights", i32 3169, i32 793}
!88 = !{!"branch_weights", i32 1841, i32 1329}
!89 = !{!"branch_weights", i32 1189, i32 298}
!90 = !{!"branch_weights", i32 37, i32 163}
!91 = !{!"branch_weights", i32 163, i32 1}
!92 = !{!"branch_weights", i32 145, i32 37}
!93 = !{!"branch_weights", i32 496, i32 1}
!94 = !{!"branch_weights", i32 183, i32 37}
!95 = !{!"branch_weights", i32 140, i32 80}
!96 = !{!"branch_weights", i32 49, i32 32}
!97 = !{!"branch_weights", i32 11, i32 22}
!98 = !{!"branch_weights", i32 1, i32 198}
!99 = !{!"branch_weights", i32 198, i32 1}
!100 = !{!"branch_weights", i32 37, i32 460}
!101 = !{!"branch_weights", i32 7921, i32 496}
!102 = !{!"branch_weights", i32 140, i32 357}
!103 = !{!"branch_weights", i32 163, i32 298}
