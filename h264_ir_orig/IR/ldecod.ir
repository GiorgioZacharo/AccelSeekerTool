; ModuleID = '../src/ldecod.c'
source_filename = "../src/ldecod.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ImageParameters = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i8, [3 x i32], [3 x i32], i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }
%struct.StorablePicture = type { i32, i8, i8, i8, i8 }
%struct.StorablePictureInfo = type { [22 x [18 x i8]], [22 x [18 x i8]], [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]] }
%struct.seq_parameter_set_rbsp_t = type { i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i32, i32, i32, [256 x i32], i32, i8, i32, i32, i8, i8, i8, i8, i32, i32, i32, i32, i8 }
%struct.pic_parameter_set_rbsp_t = type { i8, i32, i32, i8, i8, i32, i32, i32, i8, i8, i32, i32, i32, i8, i8, i8 }
%struct.slice_header_rbsp_t = type { i32, i8, i8, i32, i8, i8, i32, i32, i32, [2 x i32], i32, i8, i8, i8, i8, i8, i8, [5 x i8], [5 x i32], [5 x i8], [5 x i32], %struct.pred_weight_table_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t, i8, i32, i8, i32, i32 }
%struct.pred_weight_table_rbsp_t = type { i32, i32, [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]], [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]] }
%struct.dec_ref_pic_marking_rbsp_t = type { i8, i8, i8, [10 x i8], [10 x i32] }

@img_inst = common dso_local global %struct.ImageParameters* null, align 8
@.str = private unnamed_addr constant [51 x i8] c"ERROR: Usage %s <input_file.264> <golden_file.yuv>\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"input/test.264\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@bitstr = common dso_local global %struct._IO_FILE* null, align 8
@.str.4 = private unnamed_addr constant [36 x i8] c"cannot find the corresponding file.\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"testresult.yuv\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@p_out = common dso_local global %struct._IO_FILE* null, align 8
@PINGPONGbuffer = common dso_local global %struct.NALU_t zeroinitializer, align 8
@Pic = common dso_local global [3 x %struct.StorablePicture] zeroinitializer, align 16
@Pic_Sluma = common dso_local global [3 x [176 x [144 x i8]]] zeroinitializer, align 16
@Pic_SChroma_0 = common dso_local global [3 x [88 x [72 x i8]]] zeroinitializer, align 16
@Pic_SChroma_1 = common dso_local global [3 x [88 x [72 x i8]]] zeroinitializer, align 16
@Pic_info = common dso_local global [3 x %struct.StorablePictureInfo] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@PINGPONGbuffer_buf = common dso_local global [2450 x i8] zeroinitializer, align 16
@PINGPONGbuffer_bit_offset = common dso_local global i64 0, align 8
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16
@SPS_GLOBAL = common dso_local global %struct.seq_parameter_set_rbsp_t zeroinitializer, align 4
@PPS_GLOBAL = common dso_local global %struct.pic_parameter_set_rbsp_t zeroinitializer, align 4
@sliceHeader_inst = common dso_local global %struct.slice_header_rbsp_t zeroinitializer, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_out_pic(%struct.StorablePicture* %pic, i32 %pic_index, [176 x [144 x i8]]* %Pic_Sluma, [88 x [72 x i8]]* %Pic_SChroma_0, [88 x [72 x i8]]* %Pic_SChroma_1, %struct._IO_FILE* %p_out) #0 !prof !29 {
entry:
  %pic.addr = alloca %struct.StorablePicture*, align 8
  %pic_index.addr = alloca i32, align 4
  %Pic_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %Pic_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %Pic_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %p_out.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.StorablePicture* %pic, %struct.StorablePicture** %pic.addr, align 8
  store i32 %pic_index, i32* %pic_index.addr, align 4
  store [176 x [144 x i8]]* %Pic_Sluma, [176 x [144 x i8]]** %Pic_Sluma.addr, align 8
  store [88 x [72 x i8]]* %Pic_SChroma_0, [88 x [72 x i8]]** %Pic_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %Pic_SChroma_1, [88 x [72 x i8]]** %Pic_SChroma_1.addr, align 8
  store %struct._IO_FILE* %p_out, %struct._IO_FILE** %p_out.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 144
  br i1 %cmp, label %for.body, label %for.end10, !prof !30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 176
  br i1 %cmp2, label %for.body3, label %for.end, !prof !31

for.body3:                                        ; preds = %for.cond1
  %2 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %Pic_Sluma.addr, align 8
  %3 = load i32, i32* %pic_index.addr, align 4
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %2, i64 %idxprom
  %4 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [176 x [144 x i8]], [176 x [144 x i8]]* %arrayidx, i64 0, i64 %idxprom4
  %5 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx5, i64 0, i64 %idxprom6
  %6 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %6 to i32
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call = call i32 @fputc(i32 %conv, %struct._IO_FILE* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %9, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.end10
  %10 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %10, 72
  br i1 %cmp12, label %for.body14, label %for.end32, !prof !32

for.body14:                                       ; preds = %for.cond11
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc27, %for.body14
  %11 = load i32, i32* %j, align 4
  %cmp16 = icmp slt i32 %11, 88
  br i1 %cmp16, label %for.body18, label %for.end29, !prof !33

for.body18:                                       ; preds = %for.cond15
  %12 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %Pic_SChroma_0.addr, align 8
  %13 = load i32, i32* %pic_index.addr, align 4
  %idxprom19 = zext i32 %13 to i64
  %arrayidx20 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %12, i64 %idxprom19
  %14 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx20, i64 0, i64 %idxprom21
  %15 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %15 to i64
  %arrayidx24 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx22, i64 0, i64 %idxprom23
  %16 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %16 to i32
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call26 = call i32 @fputc(i32 %conv25, %struct._IO_FILE* %17)
  br label %for.inc27

for.inc27:                                        ; preds = %for.body18
  %18 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %18, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond15

for.end29:                                        ; preds = %for.cond15
  br label %for.inc30

for.inc30:                                        ; preds = %for.end29
  %19 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %19, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc52, %for.end32
  %20 = load i32, i32* %i, align 4
  %cmp34 = icmp slt i32 %20, 72
  br i1 %cmp34, label %for.body36, label %for.end54, !prof !32

for.body36:                                       ; preds = %for.cond33
  store i32 0, i32* %j, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc49, %for.body36
  %21 = load i32, i32* %j, align 4
  %cmp38 = icmp slt i32 %21, 88
  br i1 %cmp38, label %for.body40, label %for.end51, !prof !33

for.body40:                                       ; preds = %for.cond37
  %22 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %Pic_SChroma_1.addr, align 8
  %23 = load i32, i32* %pic_index.addr, align 4
  %idxprom41 = zext i32 %23 to i64
  %arrayidx42 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %22, i64 %idxprom41
  %24 = load i32, i32* %j, align 4
  %idxprom43 = sext i32 %24 to i64
  %arrayidx44 = getelementptr inbounds [88 x [72 x i8]], [88 x [72 x i8]]* %arrayidx42, i64 0, i64 %idxprom43
  %25 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %25 to i64
  %arrayidx46 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx44, i64 0, i64 %idxprom45
  %26 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %26 to i32
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %p_out.addr, align 8
  %call48 = call i32 @fputc(i32 %conv47, %struct._IO_FILE* %27)
  br label %for.inc49

for.inc49:                                        ; preds = %for.body40
  %28 = load i32, i32* %j, align 4
  %inc50 = add nsw i32 %28, 1
  store i32 %inc50, i32* %j, align 4
  br label %for.cond37

for.end51:                                        ; preds = %for.cond37
  br label %for.inc52

for.inc52:                                        ; preds = %for.end51
  %29 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %29, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond33

for.end54:                                        ; preds = %for.cond33
  ret void
}

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !prof !34 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %AnnexbFileName = alloca [100 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %poc = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call noalias i8* @malloc(i64 84) #5
  %0 = bitcast i8* %call to %struct.ImageParameters*
  store %struct.ImageParameters* %0, %struct.ImageParameters** @img_inst, align 8
  %1 = load i32, i32* %argc.addr, align 4
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %if.then, label %if.end, !prof !35

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 0
  %3 = load i8*, i8** %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i32 0, i32 0), i8* %3)
  call void @exit(i32 -1) #6
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %argc.addr, align 4
  %cmp2 = icmp eq i32 %4, 3
  br i1 %cmp2, label %if.then3, label %if.else, !prof !36

if.then3:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %5 = load i8**, i8*** %argv.addr, align 8
  %arrayidx4 = getelementptr inbounds i8*, i8** %5, i64 1
  %6 = load i8*, i8** %arrayidx4, align 8
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %6) #5
  br label %if.end8

if.else:                                          ; preds = %if.end
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %call7 = call i8* @strcpy(i8* %arraydecay6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0)) #5
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then3
  %arraydecay9 = getelementptr inbounds [100 x i8], [100 x i8]* %AnnexbFileName, i32 0, i32 0
  %call10 = call %struct._IO_FILE* @fopen(i8* %arraydecay9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  store %struct._IO_FILE* %call10, %struct._IO_FILE** @bitstr, align 8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %cmp11 = icmp eq %struct._IO_FILE* %7, null
  br i1 %cmp11, label %if.then12, label %if.end14, !prof !35

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 @puts(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i32 0, i32 0))
  call void @exit(i32 -1) #6
  unreachable

if.end14:                                         ; preds = %if.end8
  %call15 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0))
  store %struct._IO_FILE* %call15, %struct._IO_FILE** @p_out, align 8
  store i32 0, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([3 x %struct.StorablePicture]* @Pic to i8*), i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0, i32 0, i32 0), i8 0, i64 76032, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0, i32 0, i32 0), i8 0, i64 19008, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0, i32 0, i32 0), i8 0, i64 19008, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([3 x %struct.StorablePictureInfo], [3 x %struct.StorablePictureInfo]* @Pic_info, i32 0, i32 0, i32 0, i32 0, i32 0), i8 0, i64 78408, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([2 x [22 x [18 x i8]]], [2 x [22 x [18 x i8]]]* @nz_coeff_chroma, i32 0, i32 0, i32 0, i32 0), i8 0, i64 792, i1 false)
  %8 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %9 = bitcast %struct.ImageParameters* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 84, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %poc, align 4
  br label %while.body

while.body:                                       ; preds = %if.end14, %if.end41
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %call16 = call i32 @GetAnnexbNALU(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, %struct._IO_FILE* %10)
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %if.then18, label %if.end19, !prof !37

if.then18:                                        ; preds = %while.body
  br label %while.end

if.end19:                                         ; preds = %while.body
  %11 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %call20 = call i32 @EBSPtoRBSP(i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i32 %11, i32 1)
  store i32 %call20, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %12 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 1), align 4
  %sub = sub i32 %12, 1
  call void @RBSPtoSODB(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, i32 %sub)
  call void @decode_main(%struct.NALU_t* @PINGPONGbuffer, i8* getelementptr inbounds ([2450 x i8], [2450 x i8]* @PINGPONGbuffer_buf, i32 0, i32 0), i64* @PINGPONGbuffer_bit_offset, %struct.StorablePicture* getelementptr inbounds ([3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i32 0, i32 0), [176 x [144 x i8]]* getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0), %struct.StorablePictureInfo* getelementptr inbounds ([3 x %struct.StorablePictureInfo], [3 x %struct.StorablePictureInfo]* @Pic_info, i32 0, i32 0))
  %13 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  %cmp21 = icmp eq i32 %13, 5
  br i1 %cmp21, label %if.then23, label %lor.lhs.false, !prof !38

lor.lhs.false:                                    ; preds = %if.end19
  %14 = load i32, i32* getelementptr inbounds (%struct.NALU_t, %struct.NALU_t* @PINGPONGbuffer, i32 0, i32 2), align 8
  %cmp22 = icmp eq i32 %14, 1
  br i1 %cmp22, label %if.then23, label %if.end41, !prof !39

if.then23:                                        ; preds = %lor.lhs.false, %if.end19
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %if.then23
  %15 = load i32, i32* %j, align 4
  %cmp24 = icmp slt i32 %15, 3
  br i1 %cmp24, label %for.body, label %for.end40, !prof !40

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %16 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %16, 3
  br i1 %cmp26, label %for.body27, label %for.end, !prof !41

for.body27:                                       ; preds = %for.cond25
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %arrayidx28 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom
  %memoccupied = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx28, i32 0, i32 1
  %18 = load i8, i8* %memoccupied, align 4
  %conv = zext i8 %18 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.end36, !prof !42

land.lhs.true:                                    ; preds = %for.body27
  %19 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %19 to i64
  %arrayidx30 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom29
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx30, i32 0, i32 0
  %20 = load i32, i32* %Picorder_num, align 8
  %21 = load i32, i32* %poc, align 4
  %cmp31 = icmp eq i32 %20, %21
  br i1 %cmp31, label %if.then33, label %if.end36, !prof !43

if.then33:                                        ; preds = %land.lhs.true
  %22 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %22 to i64
  %arrayidx35 = getelementptr inbounds [3 x %struct.StorablePicture], [3 x %struct.StorablePicture]* @Pic, i64 0, i64 %idxprom34
  %23 = load i32, i32* %i, align 4
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @p_out, align 8
  call void @write_out_pic(%struct.StorablePicture* %arrayidx35, i32 %23, [176 x [144 x i8]]* getelementptr inbounds ([3 x [176 x [144 x i8]]], [3 x [176 x [144 x i8]]]* @Pic_Sluma, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_0, i32 0, i32 0), [88 x [72 x i8]]* getelementptr inbounds ([3 x [88 x [72 x i8]]], [3 x [88 x [72 x i8]]]* @Pic_SChroma_1, i32 0, i32 0), %struct._IO_FILE* %24)
  %25 = load i32, i32* %poc, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %poc, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true, %for.body27
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %26 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %26, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond25

for.end:                                          ; preds = %for.cond25
  br label %for.inc38

for.inc38:                                        ; preds = %for.end
  %27 = load i32, i32* %j, align 4
  %inc39 = add nsw i32 %27, 1
  store i32 %inc39, i32* %j, align 4
  br label %for.cond

for.end40:                                        ; preds = %for.cond
  br label %if.end41

if.end41:                                         ; preds = %for.end40, %lor.lhs.false
  br label %while.body

while.end:                                        ; preds = %if.then18
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @bitstr, align 8
  %call42 = call i32 @fclose(%struct._IO_FILE* %28)
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @p_out, align 8
  %call43 = call i32 @fclose(%struct._IO_FILE* %29)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #1

declare dso_local i32 @puts(i8*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #4

declare dso_local i32 @GetAnnexbNALU(%struct.NALU_t*, i8*, i64*, %struct._IO_FILE*) #1

declare dso_local i32 @EBSPtoRBSP(i8*, i32, i32) #1

declare dso_local void @RBSPtoSODB(%struct.NALU_t*, i8*, i64*, i32) #1

declare dso_local void @decode_main(%struct.NALU_t*, i8*, i64*, %struct.StorablePicture*, [176 x [144 x i8]]*, [88 x [72 x i8]]*, [88 x [72 x i8]]*, %struct.StorablePictureInfo*) #1

declare dso_local i32 @fclose(%struct._IO_FILE*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 5}
!30 = !{!"branch_weights", i32 721, i32 6}
!31 = !{!"branch_weights", i32 126721, i32 721}
!32 = !{!"branch_weights", i32 361, i32 6}
!33 = !{!"branch_weights", i32 31681, i32 361}
!34 = !{!"function_entry_count", i64 1}
!35 = !{!"branch_weights", i32 1, i32 2}
!36 = !{!"branch_weights", i32 2, i32 1}
!37 = !{!"branch_weights", i32 2, i32 8}
!38 = !{!"branch_weights", i32 2, i32 7}
!39 = !{!"branch_weights", i32 5, i32 3}
!40 = !{!"branch_weights", i32 16, i32 6}
!41 = !{!"branch_weights", i32 46, i32 16}
!42 = !{!"branch_weights", i32 37, i32 10}
!43 = !{!"branch_weights", i32 6, i32 32}
