; ModuleID = '../src/residual.c'
source_filename = "../src/residual.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.get_LevelScale4x4.v = private unnamed_addr constant [6 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 160, i32 208], [2 x i32] [i32 208, i32 256]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 224], [2 x i32] [i32 224, i32 288]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 256], [2 x i32] [i32 256, i32 320]], [2 x [2 x i32]] [[2 x i32] [i32 224, i32 288], [2 x i32] [i32 288, i32 368]], [2 x [2 x i32]] [[2 x i32] [i32 256, i32 320], [2 x i32] [i32 320, i32 400]], [2 x [2 x i32]] [[2 x i32] [i32 288, i32 368], [2 x i32] [i32 368, i32 464]]], align 16
@vt = dso_local constant [6 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 160, i32 208], [2 x i32] [i32 208, i32 256]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 224], [2 x i32] [i32 224, i32 288]], [2 x [2 x i32]] [[2 x i32] [i32 208, i32 256], [2 x i32] [i32 256, i32 320]], [2 x [2 x i32]] [[2 x i32] [i32 224, i32 288], [2 x i32] [i32 288, i32 368]], [2 x [2 x i32]] [[2 x i32] [i32 256, i32 320], [2 x i32] [i32 320, i32 400]], [2 x [2 x i32]] [[2 x i32] [i32 288, i32 368], [2 x i32] [i32 368, i32 464]]], align 16
@__const.scale_and_inv_trans_Intra16x16DC.inv1 = private unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 1, i32 1, i32 1, i32 1], [4 x i32] [i32 1, i32 1, i32 -1, i32 -1], [4 x i32] [i32 1, i32 -1, i32 -1, i32 1], [4 x i32] [i32 1, i32 -1, i32 1, i32 -1]], align 16
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @matrix_mult4x4([4 x i32]* %A, [4 x i32]* %B, [4 x i32]* %C) #0 !prof !29 {
entry:
  %A.addr = alloca [4 x i32]*, align 8
  %B.addr = alloca [4 x i32]*, align 8
  %C.addr = alloca [4 x i32]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %sum = alloca i32, align 4
  store [4 x i32]* %A, [4 x i32]** %A.addr, align 8
  store [4 x i32]* %B, [4 x i32]** %B.addr, align 8
  store [4 x i32]* %C, [4 x i32]** %C.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end22, !prof !30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc17, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end19, !prof !31

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %2, 4
  br i1 %cmp5, label %for.body6, label %for.end, !prof !32

for.body6:                                        ; preds = %for.cond4
  %3 = load [4 x i32]*, [4 x i32]** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %k, align 4
  %idxprom7 = sext i32 %5 to i64
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom7
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load [4 x i32]*, [4 x i32]** %B.addr, align 8
  %8 = load i32, i32* %k, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx10, i64 0, i64 %idxprom11
  %10 = load i32, i32* %arrayidx12, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %sum, align 4
  %add = add nsw i32 %11, %mul
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %13 = load i32, i32* %sum, align 4
  %14 = load [4 x i32]*, [4 x i32]** %C.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 %idxprom13
  %16 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx14, i64 0, i64 %idxprom15
  store i32 %13, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %17, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond1

for.end19:                                        ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end19
  %18 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @matrix_mult2x2([2 x i32]* %A, [2 x i32]* %B, [2 x i32]* %C) #0 !prof !33 {
entry:
  %A.addr = alloca [2 x i32]*, align 8
  %B.addr = alloca [2 x i32]*, align 8
  %C.addr = alloca [2 x i32]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %sum = alloca i32, align 4
  store [2 x i32]* %A, [2 x i32]** %A.addr, align 8
  store [2 x i32]* %B, [2 x i32]** %B.addr, align 8
  store [2 x i32]* %C, [2 x i32]** %C.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc17, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 2
  br i1 %cmp2, label %for.body3, label %for.end19

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %2, 2
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load [2 x i32]*, [2 x i32]** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %k, align 4
  %idxprom7 = sext i32 %5 to i64
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom7
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load [2 x i32]*, [2 x i32]** %B.addr, align 8
  %8 = load i32, i32* %k, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 %idxprom11
  %10 = load i32, i32* %arrayidx12, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %sum, align 4
  %add = add nsw i32 %11, %mul
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %13 = load i32, i32* %sum, align 4
  %14 = load [2 x i32]*, [2 x i32]** %C.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 %idxprom13
  %16 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx14, i64 0, i64 %idxprom15
  store i32 %13, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %17, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond1

for.end19:                                        ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end19
  %18 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_LevelScale4x4(i32 %m, i32 %i, i32 %j) #0 !prof !34 {
entry:
  %m.addr = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %v = alloca [6 x [2 x [2 x i32]]], align 16
  store i32 %m, i32* %m.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = bitcast [6 x [2 x [2 x i32]]]* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([6 x [2 x [2 x i32]]]* @__const.get_LevelScale4x4.v to i8*), i64 96, i1 false)
  %1 = load i32, i32* %m.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* %v, i64 0, i64 %idxprom
  %2 = load i32, i32* %i.addr, align 4
  %and = and i32 %2, 1
  %idxprom1 = sext i32 %and to i64
  %arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom1
  %3 = load i32, i32* %j.addr, align 4
  %and3 = and i32 %3, 1
  %idxprom4 = sext i32 %and3 to i64
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 %idxprom4
  %4 = load i32, i32* %arrayidx5, align 4
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_and_inv_trans_Intra16x16DC(i32 %qP, [4 x i32]* %c, i32 %qPm6, i32 %scale1, i32 %scale2, i32 %scale3) #0 !prof !34 {
entry:
  %qP.addr = alloca i32, align 4
  %c.addr = alloca [4 x i32]*, align 8
  %qPm6.addr = alloca i32, align 4
  %scale1.addr = alloca i32, align 4
  %scale2.addr = alloca i32, align 4
  %scale3.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %inv1 = alloca [4 x [4 x i32]], align 16
  %f = alloca [4 x [4 x i32]], align 16
  %temp = alloca [4 x [4 x i32]], align 16
  %LevelScale4x4 = alloca i32, align 4
  store i32 %qP, i32* %qP.addr, align 4
  store [4 x i32]* %c, [4 x i32]** %c.addr, align 8
  store i32 %qPm6, i32* %qPm6.addr, align 4
  store i32 %scale1, i32* %scale1.addr, align 4
  store i32 %scale2, i32* %scale2.addr, align 4
  store i32 %scale3, i32* %scale3.addr, align 4
  %0 = bitcast [4 x [4 x i32]]* %inv1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x i32]]* @__const.scale_and_inv_trans_Intra16x16DC.inv1 to i8*), i64 64, i1 false)
  %1 = load i32, i32* %qPm6.addr, align 4
  %call = call i32 @get_LevelScale4x4(i32 %1, i32 0, i32 0)
  store i32 %call, i32* %LevelScale4x4, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %inv1, i32 0, i32 0
  %2 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %arraydecay1 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i32 0, i32 0
  call void @matrix_mult4x4([4 x i32]* %arraydecay, [4 x i32]* %2, [4 x i32]* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %inv1, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i32 0, i32 0
  call void @matrix_mult4x4([4 x i32]* %arraydecay2, [4 x i32]* %arraydecay3, [4 x i32]* %arraydecay4)
  %3 = load i32, i32* %qP.addr, align 4
  %cmp = icmp sge i32 %3, 36
  br i1 %cmp, label %if.then, label %if.else, !prof !35

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.then
  %4 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %4, 4
  br i1 %cmp5, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %5, 4
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i64 0, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %7 to i64
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom9
  %8 = load i32, i32* %arrayidx10, align 4
  %9 = load i32, i32* %LevelScale4x4, align 4
  %mul = mul nsw i32 %8, %9
  %10 = load i32, i32* %scale1.addr, align 4
  %shl = shl i32 %mul, %10
  %11 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %12 to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 %idxprom11
  %13 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx12, i64 0, i64 %idxprom13
  store i32 %shl, i32* %arrayidx14, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc36, %if.else
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 4
  br i1 %cmp19, label %for.body20, label %for.end38, !prof !36

for.body20:                                       ; preds = %for.cond18
  store i32 0, i32* %j, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc33, %for.body20
  %17 = load i32, i32* %j, align 4
  %cmp22 = icmp slt i32 %17, 4
  br i1 %cmp22, label %for.body23, label %for.end35, !prof !37

for.body23:                                       ; preds = %for.cond21
  %18 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %18 to i64
  %arrayidx25 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %f, i64 0, i64 %idxprom24
  %19 = load i32, i32* %j, align 4
  %idxprom26 = sext i32 %19 to i64
  %arrayidx27 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx25, i64 0, i64 %idxprom26
  %20 = load i32, i32* %arrayidx27, align 4
  %21 = load i32, i32* %LevelScale4x4, align 4
  %mul28 = mul nsw i32 %20, %21
  %22 = load i32, i32* %scale3.addr, align 4
  %add = add nsw i32 %mul28, %22
  %23 = load i32, i32* %scale2.addr, align 4
  %shr = ashr i32 %add, %23
  %24 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %25 to i64
  %arrayidx30 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 %idxprom29
  %26 = load i32, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %arrayidx32 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx30, i64 0, i64 %idxprom31
  store i32 %shr, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body23
  %27 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %27, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond21

for.end35:                                        ; preds = %for.cond21
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %28 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %28, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond18

for.end38:                                        ; preds = %for.cond18
  br label %if.end

if.end:                                           ; preds = %for.end38, %for.end17
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_residual4x4_and_trans_inverse(i32 %qP, i32 %qPm6, i32 %temp1, i32 %temp2, i32 %temp3, [4 x i32]* %c, [4 x i32]* %r, i32 %DC_comp, i8 zeroext %flag) #0 !prof !38 {
entry:
  %qP.addr = alloca i32, align 4
  %qPm6.addr = alloca i32, align 4
  %temp1.addr = alloca i32, align 4
  %temp2.addr = alloca i32, align 4
  %temp3.addr = alloca i32, align 4
  %c.addr = alloca [4 x i32]*, align 8
  %r.addr = alloca [4 x i32]*, align 8
  %DC_comp.addr = alloca i32, align 4
  %flag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca [4 x [4 x i32]], align 16
  %tmp = alloca [4 x [4 x i32]], align 16
  %i1 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %f = alloca [4 x i32], align 16
  store i32 %qP, i32* %qP.addr, align 4
  store i32 %qPm6, i32* %qPm6.addr, align 4
  store i32 %temp1, i32* %temp1.addr, align 4
  store i32 %temp2, i32* %temp2.addr, align 4
  store i32 %temp3, i32* %temp3.addr, align 4
  store [4 x i32]* %c, [4 x i32]** %c.addr, align 8
  store [4 x i32]* %r, [4 x i32]** %r.addr, align 8
  store i32 %DC_comp, i32* %DC_comp.addr, align 4
  store i8 %flag, i8* %flag.addr, align 1
  %0 = load i32, i32* %qP.addr, align 4
  %cmp = icmp sge i32 %0, 24
  br i1 %cmp, label %if.then, label %if.else, !prof !39

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 4
  br i1 %cmp1, label %for.body, label %for.end20, !prof !40

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp3 = icmp slt i32 %2, 4
  br i1 %cmp3, label %for.body4, label %for.end, !prof !41

for.body4:                                        ; preds = %for.cond2
  %3 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom5
  %6 = load i32, i32* %arrayidx6, align 4
  %7 = load i32, i32* %qPm6.addr, align 4
  %idxprom7 = sext i32 %7 to i64
  %arrayidx8 = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom7
  %8 = load i32, i32* %i, align 4
  %and = and i32 %8, 1
  %idxprom9 = sext i32 %and to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %9 = load i32, i32* %j, align 4
  %and11 = and i32 %9, 1
  %idxprom12 = sext i32 %and11 to i64
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 %idxprom12
  %10 = load i32, i32* %arrayidx13, align 4
  %mul = mul nsw i32 %6, %10
  %11 = load i32, i32* %temp1.addr, align 4
  %shl = shl i32 %mul, %11
  %12 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %12 to i64
  %arrayidx15 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 %idxprom14
  %13 = load i32, i32* %j, align 4
  %idxprom16 = sext i32 %13 to i64
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx15, i64 0, i64 %idxprom16
  store i32 %shl, i32* %arrayidx17, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %15, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc47, %if.else
  %16 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %16, 4
  br i1 %cmp22, label %for.body23, label %for.end49

for.body23:                                       ; preds = %for.cond21
  store i32 0, i32* %j, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc44, %for.body23
  %17 = load i32, i32* %j, align 4
  %cmp25 = icmp slt i32 %17, 4
  br i1 %cmp25, label %for.body26, label %for.end46

for.body26:                                       ; preds = %for.cond24
  %18 = load [4 x i32]*, [4 x i32]** %c.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %19 to i64
  %arrayidx28 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 %idxprom27
  %20 = load i32, i32* %j, align 4
  %idxprom29 = sext i32 %20 to i64
  %arrayidx30 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx28, i64 0, i64 %idxprom29
  %21 = load i32, i32* %arrayidx30, align 4
  %22 = load i32, i32* %qPm6.addr, align 4
  %idxprom31 = sext i32 %22 to i64
  %arrayidx32 = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom31
  %23 = load i32, i32* %i, align 4
  %and33 = and i32 %23, 1
  %idxprom34 = sext i32 %and33 to i64
  %arrayidx35 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx32, i64 0, i64 %idxprom34
  %24 = load i32, i32* %j, align 4
  %and36 = and i32 %24, 1
  %idxprom37 = sext i32 %and36 to i64
  %arrayidx38 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx35, i64 0, i64 %idxprom37
  %25 = load i32, i32* %arrayidx38, align 4
  %mul39 = mul nsw i32 %21, %25
  %26 = load i32, i32* %temp3.addr, align 4
  %add = add nsw i32 %mul39, %26
  %27 = load i32, i32* %temp2.addr, align 4
  %shr = ashr i32 %add, %27
  %28 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %28 to i64
  %arrayidx41 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 %idxprom40
  %29 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %29 to i64
  %arrayidx43 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx41, i64 0, i64 %idxprom42
  store i32 %shr, i32* %arrayidx43, align 4
  br label %for.inc44

for.inc44:                                        ; preds = %for.body26
  %30 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %30, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond24

for.end46:                                        ; preds = %for.cond24
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %31 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %31, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond21

for.end49:                                        ; preds = %for.cond21
  br label %if.end

if.end:                                           ; preds = %for.end49, %for.end20
  %32 = load i8, i8* %flag.addr, align 1
  %tobool = icmp ne i8 %32, 0
  br i1 %tobool, label %if.then50, label %if.end53, !prof !42

if.then50:                                        ; preds = %if.end
  %33 = load i32, i32* %DC_comp.addr, align 4
  %arrayidx51 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %arrayidx52 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx51, i64 0, i64 0
  store i32 %33, i32* %arrayidx52, align 16
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc115, %if.end53
  %34 = load i32, i32* %j, align 4
  %cmp55 = icmp slt i32 %34, 4
  br i1 %cmp55, label %for.body56, label %for.end117, !prof !40

for.body56:                                       ; preds = %for.cond54
  %arrayidx57 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %35 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %35 to i64
  %arrayidx59 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx57, i64 0, i64 %idxprom58
  %36 = load i32, i32* %arrayidx59, align 4
  %arrayidx60 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 2
  %37 = load i32, i32* %j, align 4
  %idxprom61 = sext i32 %37 to i64
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx60, i64 0, i64 %idxprom61
  %38 = load i32, i32* %arrayidx62, align 4
  %add63 = add nsw i32 %36, %38
  %arrayidx64 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 0
  store i32 %add63, i32* %arrayidx64, align 16
  %arrayidx65 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 0
  %39 = load i32, i32* %j, align 4
  %idxprom66 = sext i32 %39 to i64
  %arrayidx67 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx65, i64 0, i64 %idxprom66
  %40 = load i32, i32* %arrayidx67, align 4
  %arrayidx68 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 2
  %41 = load i32, i32* %j, align 4
  %idxprom69 = sext i32 %41 to i64
  %arrayidx70 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx68, i64 0, i64 %idxprom69
  %42 = load i32, i32* %arrayidx70, align 4
  %sub = sub nsw i32 %40, %42
  %arrayidx71 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 1
  store i32 %sub, i32* %arrayidx71, align 4
  %arrayidx72 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 1
  %43 = load i32, i32* %j, align 4
  %idxprom73 = sext i32 %43 to i64
  %arrayidx74 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx72, i64 0, i64 %idxprom73
  %44 = load i32, i32* %arrayidx74, align 4
  %shr75 = ashr i32 %44, 1
  %arrayidx76 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 3
  %45 = load i32, i32* %j, align 4
  %idxprom77 = sext i32 %45 to i64
  %arrayidx78 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx76, i64 0, i64 %idxprom77
  %46 = load i32, i32* %arrayidx78, align 4
  %sub79 = sub nsw i32 %shr75, %46
  %arrayidx80 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 2
  store i32 %sub79, i32* %arrayidx80, align 8
  %arrayidx81 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 1
  %47 = load i32, i32* %j, align 4
  %idxprom82 = sext i32 %47 to i64
  %arrayidx83 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx81, i64 0, i64 %idxprom82
  %48 = load i32, i32* %arrayidx83, align 4
  %arrayidx84 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %temp, i64 0, i64 3
  %49 = load i32, i32* %j, align 4
  %idxprom85 = sext i32 %49 to i64
  %arrayidx86 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx84, i64 0, i64 %idxprom85
  %50 = load i32, i32* %arrayidx86, align 4
  %shr87 = ashr i32 %50, 1
  %add88 = add nsw i32 %48, %shr87
  %arrayidx89 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 3
  store i32 %add88, i32* %arrayidx89, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc112, %for.body56
  %51 = load i32, i32* %i, align 4
  %cmp91 = icmp slt i32 %51, 2
  br i1 %cmp91, label %for.body92, label %for.end114, !prof !43

for.body92:                                       ; preds = %for.cond90
  %52 = load i32, i32* %i, align 4
  %sub93 = sub nsw i32 3, %52
  store i32 %sub93, i32* %i1, align 4
  %53 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %53 to i64
  %arrayidx95 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom94
  %54 = load i32, i32* %arrayidx95, align 4
  %55 = load i32, i32* %i1, align 4
  %idxprom96 = sext i32 %55 to i64
  %arrayidx97 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom96
  %56 = load i32, i32* %arrayidx97, align 4
  %add98 = add nsw i32 %54, %56
  %57 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %57 to i64
  %arrayidx100 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom99
  %58 = load i32, i32* %j, align 4
  %idxprom101 = sext i32 %58 to i64
  %arrayidx102 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx100, i64 0, i64 %idxprom101
  store i32 %add98, i32* %arrayidx102, align 4
  %59 = load i32, i32* %i, align 4
  %idxprom103 = sext i32 %59 to i64
  %arrayidx104 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom103
  %60 = load i32, i32* %arrayidx104, align 4
  %61 = load i32, i32* %i1, align 4
  %idxprom105 = sext i32 %61 to i64
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom105
  %62 = load i32, i32* %arrayidx106, align 4
  %sub107 = sub nsw i32 %60, %62
  %63 = load i32, i32* %i1, align 4
  %idxprom108 = sext i32 %63 to i64
  %arrayidx109 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom108
  %64 = load i32, i32* %j, align 4
  %idxprom110 = sext i32 %64 to i64
  %arrayidx111 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx109, i64 0, i64 %idxprom110
  store i32 %sub107, i32* %arrayidx111, align 4
  br label %for.inc112

for.inc112:                                       ; preds = %for.body92
  %65 = load i32, i32* %i, align 4
  %inc113 = add nsw i32 %65, 1
  store i32 %inc113, i32* %i, align 4
  br label %for.cond90

for.end114:                                       ; preds = %for.cond90
  br label %for.inc115

for.inc115:                                       ; preds = %for.end114
  %66 = load i32, i32* %j, align 4
  %inc116 = add nsw i32 %66, 1
  store i32 %inc116, i32* %j, align 4
  br label %for.cond54

for.end117:                                       ; preds = %for.cond54
  store i32 0, i32* %i, align 4
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc184, %for.end117
  %67 = load i32, i32* %i, align 4
  %cmp119 = icmp slt i32 %67, 4
  br i1 %cmp119, label %for.body120, label %for.end186, !prof !40

for.body120:                                      ; preds = %for.cond118
  %68 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %68 to i64
  %arrayidx122 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom121
  %arrayidx123 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx122, i64 0, i64 0
  %69 = load i32, i32* %arrayidx123, align 16
  %70 = load i32, i32* %i, align 4
  %idxprom124 = sext i32 %70 to i64
  %arrayidx125 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom124
  %arrayidx126 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx125, i64 0, i64 2
  %71 = load i32, i32* %arrayidx126, align 8
  %add127 = add nsw i32 %69, %71
  %arrayidx128 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 0
  store i32 %add127, i32* %arrayidx128, align 16
  %72 = load i32, i32* %i, align 4
  %idxprom129 = sext i32 %72 to i64
  %arrayidx130 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom129
  %arrayidx131 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx130, i64 0, i64 0
  %73 = load i32, i32* %arrayidx131, align 16
  %74 = load i32, i32* %i, align 4
  %idxprom132 = sext i32 %74 to i64
  %arrayidx133 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom132
  %arrayidx134 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx133, i64 0, i64 2
  %75 = load i32, i32* %arrayidx134, align 8
  %sub135 = sub nsw i32 %73, %75
  %arrayidx136 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 1
  store i32 %sub135, i32* %arrayidx136, align 4
  %76 = load i32, i32* %i, align 4
  %idxprom137 = sext i32 %76 to i64
  %arrayidx138 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom137
  %arrayidx139 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx138, i64 0, i64 1
  %77 = load i32, i32* %arrayidx139, align 4
  %shr140 = ashr i32 %77, 1
  %78 = load i32, i32* %i, align 4
  %idxprom141 = sext i32 %78 to i64
  %arrayidx142 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom141
  %arrayidx143 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx142, i64 0, i64 3
  %79 = load i32, i32* %arrayidx143, align 4
  %sub144 = sub nsw i32 %shr140, %79
  %arrayidx145 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 2
  store i32 %sub144, i32* %arrayidx145, align 8
  %80 = load i32, i32* %i, align 4
  %idxprom146 = sext i32 %80 to i64
  %arrayidx147 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom146
  %arrayidx148 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx147, i64 0, i64 1
  %81 = load i32, i32* %arrayidx148, align 4
  %82 = load i32, i32* %i, align 4
  %idxprom149 = sext i32 %82 to i64
  %arrayidx150 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %tmp, i64 0, i64 %idxprom149
  %arrayidx151 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx150, i64 0, i64 3
  %83 = load i32, i32* %arrayidx151, align 4
  %shr152 = ashr i32 %83, 1
  %add153 = add nsw i32 %81, %shr152
  %arrayidx154 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 3
  store i32 %add153, i32* %arrayidx154, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc181, %for.body120
  %84 = load i32, i32* %j, align 4
  %cmp156 = icmp slt i32 %84, 2
  br i1 %cmp156, label %for.body157, label %for.end183, !prof !43

for.body157:                                      ; preds = %for.cond155
  %85 = load i32, i32* %j, align 4
  %sub158 = sub nsw i32 3, %85
  store i32 %sub158, i32* %j1, align 4
  %86 = load i32, i32* %j, align 4
  %idxprom159 = sext i32 %86 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom159
  %87 = load i32, i32* %arrayidx160, align 4
  %88 = load i32, i32* %j1, align 4
  %idxprom161 = sext i32 %88 to i64
  %arrayidx162 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom161
  %89 = load i32, i32* %arrayidx162, align 4
  %add163 = add nsw i32 %87, %89
  %add164 = add nsw i32 %add163, 32
  %shr165 = ashr i32 %add164, 6
  %90 = load [4 x i32]*, [4 x i32]** %r.addr, align 8
  %91 = load i32, i32* %i, align 4
  %idxprom166 = sext i32 %91 to i64
  %arrayidx167 = getelementptr inbounds [4 x i32], [4 x i32]* %90, i64 %idxprom166
  %92 = load i32, i32* %j, align 4
  %idxprom168 = sext i32 %92 to i64
  %arrayidx169 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx167, i64 0, i64 %idxprom168
  store i32 %shr165, i32* %arrayidx169, align 4
  %93 = load i32, i32* %j, align 4
  %idxprom170 = sext i32 %93 to i64
  %arrayidx171 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom170
  %94 = load i32, i32* %arrayidx171, align 4
  %95 = load i32, i32* %j1, align 4
  %idxprom172 = sext i32 %95 to i64
  %arrayidx173 = getelementptr inbounds [4 x i32], [4 x i32]* %f, i64 0, i64 %idxprom172
  %96 = load i32, i32* %arrayidx173, align 4
  %sub174 = sub nsw i32 %94, %96
  %add175 = add nsw i32 %sub174, 32
  %shr176 = ashr i32 %add175, 6
  %97 = load [4 x i32]*, [4 x i32]** %r.addr, align 8
  %98 = load i32, i32* %i, align 4
  %idxprom177 = sext i32 %98 to i64
  %arrayidx178 = getelementptr inbounds [4 x i32], [4 x i32]* %97, i64 %idxprom177
  %99 = load i32, i32* %j1, align 4
  %idxprom179 = sext i32 %99 to i64
  %arrayidx180 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx178, i64 0, i64 %idxprom179
  store i32 %shr176, i32* %arrayidx180, align 4
  br label %for.inc181

for.inc181:                                       ; preds = %for.body157
  %100 = load i32, i32* %j, align 4
  %inc182 = add nsw i32 %100, 1
  store i32 %inc182, i32* %j, align 4
  br label %for.cond155

for.end183:                                       ; preds = %for.cond155
  br label %for.inc184

for.inc184:                                       ; preds = %for.end183
  %101 = load i32, i32* %i, align 4
  %inc185 = add nsw i32 %101, 1
  store i32 %inc185, i32* %i, align 4
  br label %for.cond118

for.end186:                                       ; preds = %for.cond118
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scale_and_inv_trans_chroma2x2([2 x i32]* %c, i32 %qP, i32 %qPcm6) #0 !prof !44 {
entry:
  %c.addr = alloca [2 x i32]*, align 8
  %qP.addr = alloca i32, align 4
  %qPcm6.addr = alloca i32, align 4
  %tran = alloca [2 x [2 x i32]], align 16
  %temp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [2 x i32]* %c, [2 x i32]** %c.addr, align 8
  store i32 %qP, i32* %qP.addr, align 4
  store i32 %qPcm6, i32* %qPcm6.addr, align 4
  %0 = load i32, i32* %qPcm6.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [6 x [2 x [2 x i32]]], [6 x [2 x [2 x i32]]]* @vt, i64 0, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx1, i64 0, i64 0
  %1 = load i32, i32* %arrayidx2, align 16
  store i32 %1, i32* %temp, align 4
  %2 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx3, i64 0, i64 0
  %3 = load i32, i32* %arrayidx4, align 4
  %4 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %5 = load i32, i32* %arrayidx6, align 4
  %add = add nsw i32 %3, %5
  %6 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx7, i64 0, i64 1
  %7 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %add, %7
  %8 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 1
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %9 = load i32, i32* %arrayidx11, align 4
  %add12 = add nsw i32 %add9, %9
  %arrayidx13 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 0
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx13, i64 0, i64 0
  store i32 %add12, i32* %arrayidx14, align 16
  %10 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %11 = load i32, i32* %arrayidx16, align 4
  %12 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 1
  %arrayidx18 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx17, i64 0, i64 0
  %13 = load i32, i32* %arrayidx18, align 4
  %sub = sub nsw i32 %11, %13
  %14 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx19, i64 0, i64 1
  %15 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %sub, %15
  %16 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 1
  %arrayidx23 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx22, i64 0, i64 1
  %17 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %add21, %17
  %arrayidx25 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 1
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx25, i64 0, i64 0
  store i32 %sub24, i32* %arrayidx26, align 8
  %18 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0
  %arrayidx28 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx27, i64 0, i64 0
  %19 = load i32, i32* %arrayidx28, align 4
  %20 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 1
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx29, i64 0, i64 0
  %21 = load i32, i32* %arrayidx30, align 4
  %add31 = add nsw i32 %19, %21
  %22 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx32 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx32, i64 0, i64 1
  %23 = load i32, i32* %arrayidx33, align 4
  %sub34 = sub nsw i32 %add31, %23
  %24 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx35 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 1
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx35, i64 0, i64 1
  %25 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %sub34, %25
  %arrayidx38 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 0
  %arrayidx39 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx38, i64 0, i64 1
  store i32 %sub37, i32* %arrayidx39, align 4
  %26 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx40 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx40, i64 0, i64 0
  %27 = load i32, i32* %arrayidx41, align 4
  %28 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx42 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 1
  %arrayidx43 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx42, i64 0, i64 0
  %29 = load i32, i32* %arrayidx43, align 4
  %sub44 = sub nsw i32 %27, %29
  %30 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx45 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0
  %arrayidx46 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx45, i64 0, i64 1
  %31 = load i32, i32* %arrayidx46, align 4
  %sub47 = sub nsw i32 %sub44, %31
  %32 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 1
  %arrayidx49 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx48, i64 0, i64 1
  %33 = load i32, i32* %arrayidx49, align 4
  %add50 = add nsw i32 %sub47, %33
  %arrayidx51 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 1
  %arrayidx52 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx51, i64 0, i64 1
  store i32 %add50, i32* %arrayidx52, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc64, %entry
  %34 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %34, 2
  br i1 %cmp, label %for.body, label %for.end66, !prof !45

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc, %for.body
  %35 = load i32, i32* %j, align 4
  %cmp54 = icmp slt i32 %35, 2
  br i1 %cmp54, label %for.body55, label %for.end, !prof !46

for.body55:                                       ; preds = %for.cond53
  %36 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %36 to i64
  %arrayidx57 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %tran, i64 0, i64 %idxprom56
  %37 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %37 to i64
  %arrayidx59 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx57, i64 0, i64 %idxprom58
  %38 = load i32, i32* %arrayidx59, align 4
  %39 = load i32, i32* %temp, align 4
  %mul = mul nsw i32 %38, %39
  %40 = load i32, i32* %qP.addr, align 4
  %div = sdiv i32 %40, 6
  %shl = shl i32 %mul, %div
  %shr = ashr i32 %shl, 5
  %41 = load [2 x i32]*, [2 x i32]** %c.addr, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %42 to i64
  %arrayidx61 = getelementptr inbounds [2 x i32], [2 x i32]* %41, i64 %idxprom60
  %43 = load i32, i32* %j, align 4
  %idxprom62 = sext i32 %43 to i64
  %arrayidx63 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx61, i64 0, i64 %idxprom62
  store i32 %shr, i32* %arrayidx63, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body55
  %44 = load i32, i32* %j, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond53

for.end:                                          ; preds = %for.cond53
  br label %for.inc64

for.inc64:                                        ; preds = %for.end
  %45 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %45, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond

for.end66:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 72}
!30 = !{!"branch_weights", i32 289, i32 73}
!31 = !{!"branch_weights", i32 1153, i32 289}
!32 = !{!"branch_weights", i32 4609, i32 1153}
!33 = !{!"function_entry_count", i64 0}
!34 = !{!"function_entry_count", i64 36}
!35 = !{!"branch_weights", i32 1, i32 37}
!36 = !{!"branch_weights", i32 145, i32 37}
!37 = !{!"branch_weights", i32 577, i32 145}
!38 = !{!"function_entry_count", i64 3788}
!39 = !{!"branch_weights", i32 3789, i32 1}
!40 = !{!"branch_weights", i32 15153, i32 3789}
!41 = !{!"branch_weights", i32 60609, i32 15153}
!42 = !{!"branch_weights", i32 1689, i32 2101}
!43 = !{!"branch_weights", i32 30305, i32 15153}
!44 = !{!"function_entry_count", i64 278}
!45 = !{!"branch_weights", i32 557, i32 279}
!46 = !{!"branch_weights", i32 1113, i32 557}
