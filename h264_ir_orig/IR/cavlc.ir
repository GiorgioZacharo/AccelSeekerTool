; ModuleID = '../src/cavlc.c'
source_filename = "../src/cavlc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }

@lentab = dso_local constant [3 x [4 x [17 x i8]]] [[4 x [17 x i8]] [[17 x i8] c"\01\06\08\09\0A\0B\0D\0D\0D\0E\0E\0F\0F\10\10\10\10", [17 x i8] c"\00\02\06\08\09\0A\0B\0D\0D\0E\0E\0F\0F\0F\10\10\10", [17 x i8] c"\00\00\03\07\08\09\0A\0B\0D\0D\0E\0E\0F\0F\10\10\10", [17 x i8] c"\00\00\00\05\06\07\08\09\0A\0B\0D\0E\0E\0F\0F\10\10"], [4 x [17 x i8]] [[17 x i8] c"\02\06\06\07\08\08\09\0B\0B\0C\0C\0C\0D\0D\0D\0E\0E", [17 x i8] c"\00\02\05\06\06\07\08\09\0B\0B\0C\0C\0D\0D\0E\0E\0E", [17 x i8] c"\00\00\03\06\06\07\08\09\0B\0B\0C\0C\0D\0D\0D\0E\0E", [17 x i8] c"\00\00\00\04\04\05\06\06\07\09\0B\0B\0C\0D\0D\0D\0E"], [4 x [17 x i8]] [[17 x i8] c"\04\06\06\06\07\07\07\07\08\08\09\09\09\0A\0A\0A\0A", [17 x i8] c"\00\04\05\05\05\05\06\06\07\08\08\09\09\09\0A\0A\0A", [17 x i8] c"\00\00\04\05\05\05\06\06\07\07\08\08\09\09\0A\0A\0A", [17 x i8] c"\00\00\00\04\04\04\04\04\05\06\07\08\08\09\0A\0A\0A"]], align 16
@codtab = dso_local constant [3 x [4 x [17 x i8]]] [[4 x [17 x i8]] [[17 x i8] c"\01\05\07\07\07\07\0F\0B\08\0F\0B\0F\0B\0F\0B\07\04", [17 x i8] c"\00\01\04\06\06\06\06\0E\0A\0E\0A\0E\0A\01\0E\0A\06", [17 x i8] c"\00\00\01\05\05\05\05\05\0D\09\0D\09\0D\09\0D\09\05", [17 x i8] c"\00\00\00\03\03\04\04\04\04\04\0C\0C\08\0C\08\0C\08"], [4 x [17 x i8]] [[17 x i8] c"\03\0B\07\07\07\04\07\0F\0B\0F\0B\08\0F\0B\07\09\07", [17 x i8] c"\00\02\07\0A\06\06\06\06\0E\0A\0E\0A\0E\0A\0B\08\06", [17 x i8] c"\00\00\03\09\05\05\05\05\0D\09\0D\09\0D\09\06\0A\05", [17 x i8] c"\00\00\00\05\04\06\08\04\04\04\0C\08\0C\0C\08\01\04"], [4 x [17 x i8]] [[17 x i8] c"\0F\0F\0B\08\0F\0B\09\08\0F\0B\0F\0B\08\0D\09\05\01", [17 x i8] c"\00\0E\0F\0C\0A\08\0E\0A\0E\0E\0A\0E\0A\07\0C\08\04", [17 x i8] c"\00\00\0D\0E\0B\09\0D\09\0D\0A\0D\09\0D\09\0B\07\03", [17 x i8] c"\00\00\00\0C\0B\0A\09\08\0D\0C\0C\0C\08\0C\0A\06\02"]], align 16
@lentabDC = dso_local constant [4 x [5 x i8]] [[5 x i8] c"\02\06\06\06\06", [5 x i8] c"\00\01\06\07\08", [5 x i8] c"\00\00\03\07\08", [5 x i8] c"\00\00\00\06\07"], align 16
@codtabDC = dso_local constant [4 x [5 x i8]] [[5 x i8] c"\01\07\04\03\02", [5 x i8] c"\00\01\06\03\03", [5 x i8] c"\00\00\01\02\02", [5 x i8] c"\00\00\00\05\00"], align 16
@tzlentab = dso_local constant <{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }> <{ [16 x i8] c"\01\03\03\04\04\05\05\06\06\07\07\08\08\09\09\09", [16 x i8] c"\03\03\03\03\03\04\04\04\04\05\05\06\06\06\06\00", [16 x i8] c"\04\03\03\03\04\04\03\03\04\05\05\06\05\06\00\00", [16 x i8] c"\05\03\04\04\03\03\03\04\03\04\05\05\05\00\00\00", [16 x i8] c"\04\04\04\03\03\03\03\03\04\05\04\05\00\00\00\00", [16 x i8] c"\06\05\03\03\03\03\03\03\04\03\06\00\00\00\00\00", [16 x i8] c"\06\05\03\03\03\02\03\04\03\06\00\00\00\00\00\00", [16 x i8] c"\06\04\05\03\02\02\03\03\06\00\00\00\00\00\00\00", <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\06\06\04\02\02\03\02\05", [8 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 5, i8 5, i8 3, i8 2, i8 2, i8 2, i8 4, [9 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 4, i8 4, i8 3, i8 3, i8 1, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 4, i8 4, i8 2, i8 1, i8 3, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 3, i8 3, i8 1, i8 2, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 2, i8 2, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }> }>, align 16
@tzcodtab = dso_local constant <{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }> <{ [16 x i8] c"\01\03\02\03\02\03\02\03\02\03\02\03\02\03\02\01", [16 x i8] c"\07\06\05\04\03\05\04\03\02\03\02\03\02\01\00\00", [16 x i8] c"\05\07\06\05\04\03\04\03\02\03\02\01\01\00\00\00", [16 x i8] c"\03\07\05\04\06\05\04\03\03\02\02\01\00\00\00\00", [16 x i8] c"\05\04\03\07\06\05\04\03\02\01\01\00\00\00\00\00", [16 x i8] c"\01\01\07\06\05\04\03\02\01\01\00\00\00\00\00\00", [16 x i8] c"\01\01\05\04\03\03\02\01\01\00\00\00\00\00\00\00", <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\01\01\01\03\03\02\02\01", [8 x i8] zeroinitializer }>, <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\01\00\01\03\02\01\01\01", [8 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 1, i8 0, i8 1, i8 3, i8 2, i8 1, i8 1, [9 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 0, i8 1, i8 1, i8 2, i8 1, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 0, i8 1, i8 1, i8 1, i8 1, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 1, i8 1, i8 1, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 0, i8 1, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 0, i8 1, [14 x i8] zeroinitializer }> }>, align 16
@tzlentabDC = dso_local constant [3 x [4 x i8]] [[4 x i8] c"\01\02\03\03", [4 x i8] c"\01\02\02\00", [4 x i8] c"\01\01\00\00"], align 1
@tzcodtabDC = dso_local constant [3 x [4 x i8]] [[4 x i8] c"\01\01\01\00", [4 x i8] c"\01\01\00\00", [4 x i8] c"\01\00\00\00"], align 1
@rblentab = dso_local constant <{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }> <{ <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 1, i8 2, i8 2, [13 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 2, i8 2, i8 2, i8 2, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 2, i8 2, i8 2, i8 3, i8 3, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 2, i8 2, i8 3, i8 3, i8 3, i8 3, [10 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 2, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, [9 x i8] zeroinitializer }>, [16 x i8] c"\03\03\03\03\03\03\03\04\05\06\07\08\09\0A\0B\00" }>, align 16
@rbcodtab = dso_local constant <{ <{ i8, [15 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }> <{ <{ i8, [15 x i8] }> <{ i8 1, [15 x i8] zeroinitializer }>, <{ i8, i8, [14 x i8] }> <{ i8 1, i8 1, [14 x i8] zeroinitializer }>, <{ i8, i8, i8, [13 x i8] }> <{ i8 3, i8 2, i8 1, [13 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 3, i8 2, i8 1, i8 1, [12 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 3, i8 2, i8 3, i8 2, i8 1, [11 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 3, i8 0, i8 1, i8 3, i8 2, i8 5, i8 4, [9 x i8] zeroinitializer }>, [16 x i8] c"\07\06\05\04\03\02\01\01\01\01\01\01\01\01\01\00" }>, align 16
@.str = private unnamed_addr constant [20 x i8] c"nc_range too large!\00", align 1
@__const.residual_block_cavlc_16.framescan = private unnamed_addr constant [16 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\01\00", [2 x i8] c"\00\01", [2 x i8] c"\00\02", [2 x i8] c"\01\01", [2 x i8] c"\02\00", [2 x i8] c"\03\00", [2 x i8] c"\02\01", [2 x i8] c"\01\02", [2 x i8] c"\00\03", [2 x i8] c"\01\03", [2 x i8] c"\02\02", [2 x i8] c"\03\01", [2 x i8] c"\03\02", [2 x i8] c"\02\03", [2 x i8] c"\03\03"], align 16
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TrailingOnes_TotalCoeff(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8* %TotalCoeff, i8* %TrailingZeros, i8 zeroext %nC_range) #0 !prof !29 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %TotalCoeff.addr = alloca i8*, align 8
  %TrailingZeros.addr = alloca i8*, align 8
  %nC_range.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8* %TotalCoeff, i8** %TotalCoeff.addr, align 8
  store i8* %TrailingZeros, i8** %TrailingZeros.addr, align 8
  store i8 %nC_range, i8* %nC_range.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  %0 = load i8, i8* %nC_range.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.end, !prof !30

if.then:                                          ; preds = %entry
  %call = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #4
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i8, i8* %nC_range.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %if.then5, label %if.end15, !prof !31

if.then5:                                         ; preds = %if.end
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call6 = call i32 @u_n(i32 6, %struct.NALU_t* %2, i8* %3, i64* %4)
  store i32 %call6, i32* %cod, align 4
  %5 = load i32, i32* %cod, align 4
  %and = and i32 %5, 3
  %conv7 = trunc i32 %and to i8
  %6 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv7, i8* %6, align 1
  %7 = load i32, i32* %cod, align 4
  %shr = ashr i32 %7, 2
  %add = add nsw i32 %shr, 1
  %conv8 = trunc i32 %add to i8
  %8 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv8, i8* %8, align 1
  %9 = load i8*, i8** %TrailingZeros.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv9 = zext i8 %10 to i32
  %11 = load i8*, i8** %TotalCoeff.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv10 = zext i8 %12 to i32
  %cmp11 = icmp sgt i32 %conv9, %conv10
  br i1 %cmp11, label %if.then13, label %if.end14, !prof !32

if.then13:                                        ; preds = %if.then5
  %13 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 0, i8* %13, align 1
  %14 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 0, i8* %14, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.then5
  br label %return

if.end15:                                         ; preds = %if.end
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %15 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %16 = load i64, i64* %15, align 8
  %conv16 = trunc i64 %16 to i32
  store i32 %conv16, i32* %offset, align 4
  %17 = load i8*, i8** %nalu_buf.addr, align 8
  %18 = load i32, i32* %offset, align 4
  %div = sdiv i32 %18, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %19 = load i8, i8* %arrayidx, align 1
  store i8 %19, i8* %temp_1, align 1
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i32, i32* %offset, align 4
  %div17 = sdiv i32 %21, 8
  %add18 = add nsw i32 %div17, 1
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 %idxprom19
  %22 = load i8, i8* %arrayidx20, align 1
  store i8 %22, i8* %temp_2, align 1
  %23 = load i8*, i8** %nalu_buf.addr, align 8
  %24 = load i32, i32* %offset, align 4
  %div21 = sdiv i32 %24, 8
  %add22 = add nsw i32 %div21, 2
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %23, i64 %idxprom23
  %25 = load i8, i8* %arrayidx24, align 1
  store i8 %25, i8* %temp_3, align 1
  %26 = load i8*, i8** %nalu_buf.addr, align 8
  %27 = load i32, i32* %offset, align 4
  %div25 = sdiv i32 %27, 8
  %add26 = add nsw i32 %div25, 3
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %26, i64 %idxprom27
  %28 = load i8, i8* %arrayidx28, align 1
  store i8 %28, i8* %temp_4, align 1
  %29 = load i8, i8* %temp_4, align 1
  %conv29 = zext i8 %29 to i32
  store i32 %conv29, i32* %temp, align 4
  %30 = load i32, i32* %temp, align 4
  %shl = shl i32 %30, 8
  %31 = load i8, i8* %temp_3, align 1
  %conv30 = zext i8 %31 to i32
  %or = or i32 %shl, %conv30
  store i32 %or, i32* %temp, align 4
  %32 = load i32, i32* %temp, align 4
  %shl31 = shl i32 %32, 8
  %33 = load i8, i8* %temp_2, align 1
  %conv32 = zext i8 %33 to i32
  %or33 = or i32 %shl31, %conv32
  store i32 %or33, i32* %temp, align 4
  %34 = load i32, i32* %temp, align 4
  %shl34 = shl i32 %34, 8
  %35 = load i8, i8* %temp_1, align 1
  %conv35 = zext i8 %35 to i32
  %or36 = or i32 %shl34, %conv35
  store i32 %or36, i32* %temp, align 4
  %36 = load i32, i32* %temp, align 4
  %call37 = call i32 @bytes_reverse_32(i32 %36)
  store i32 %call37, i32* %temp0, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc70, %if.end15
  %37 = load i32, i32* %j, align 4
  %cmp38 = icmp slt i32 %37, 4
  br i1 %cmp38, label %for.body, label %for.end72, !prof !33

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc, %for.body
  %38 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %38, 17
  br i1 %cmp41, label %for.body43, label %for.end, !prof !34

for.body43:                                       ; preds = %for.cond40
  %39 = load i8, i8* %nC_range.addr, align 1
  %idxprom44 = zext i8 %39 to i64
  %arrayidx45 = getelementptr inbounds [3 x [4 x [17 x i8]]], [3 x [4 x [17 x i8]]]* @lentab, i64 0, i64 %idxprom44
  %40 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %40 to i64
  %arrayidx47 = getelementptr inbounds [4 x [17 x i8]], [4 x [17 x i8]]* %arrayidx45, i64 0, i64 %idxprom46
  %41 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %41 to i64
  %arrayidx49 = getelementptr inbounds [17 x i8], [17 x i8]* %arrayidx47, i64 0, i64 %idxprom48
  %42 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %42 to i32
  store i32 %conv50, i32* %len, align 4
  %43 = load i8, i8* %nC_range.addr, align 1
  %idxprom51 = zext i8 %43 to i64
  %arrayidx52 = getelementptr inbounds [3 x [4 x [17 x i8]]], [3 x [4 x [17 x i8]]]* @codtab, i64 0, i64 %idxprom51
  %44 = load i32, i32* %j, align 4
  %idxprom53 = sext i32 %44 to i64
  %arrayidx54 = getelementptr inbounds [4 x [17 x i8]], [4 x [17 x i8]]* %arrayidx52, i64 0, i64 %idxprom53
  %45 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %45 to i64
  %arrayidx56 = getelementptr inbounds [17 x i8], [17 x i8]* %arrayidx54, i64 0, i64 %idxprom55
  %46 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %46 to i32
  store i32 %conv57, i32* %cod, align 4
  %47 = load i32, i32* %len, align 4
  %48 = load i32, i32* %temp0, align 4
  %49 = load i32, i32* %offset, align 4
  %call58 = call i32 @showbits(i32 %47, i32 %48, i32 %49)
  %50 = load i32, i32* %cod, align 4
  %cmp59 = icmp eq i32 %call58, %50
  %conv60 = zext i1 %cmp59 to i32
  %conv61 = trunc i32 %conv60 to i8
  store i8 %conv61, i8* %test, align 1
  %51 = load i32, i32* %j, align 4
  %52 = load i8, i8* %test, align 1
  %conv62 = zext i8 %52 to i32
  %mul = mul nsw i32 %51, %conv62
  %53 = load i32, i32* %a, align 4
  %add63 = add nsw i32 %53, %mul
  store i32 %add63, i32* %a, align 4
  %54 = load i32, i32* %i, align 4
  %55 = load i8, i8* %test, align 1
  %conv64 = zext i8 %55 to i32
  %mul65 = mul nsw i32 %54, %conv64
  %56 = load i32, i32* %b, align 4
  %add66 = add nsw i32 %56, %mul65
  store i32 %add66, i32* %b, align 4
  %57 = load i32, i32* %len, align 4
  %58 = load i8, i8* %test, align 1
  %conv67 = zext i8 %58 to i32
  %mul68 = mul nsw i32 %57, %conv67
  %59 = load i32, i32* %c, align 4
  %add69 = add nsw i32 %59, %mul68
  store i32 %add69, i32* %c, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body43
  %60 = load i32, i32* %i, align 4
  %inc = add nsw i32 %60, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond40

for.end:                                          ; preds = %for.cond40
  br label %for.inc70

for.inc70:                                        ; preds = %for.end
  %61 = load i32, i32* %j, align 4
  %inc71 = add nsw i32 %61, 1
  store i32 %inc71, i32* %j, align 4
  br label %for.cond

for.end72:                                        ; preds = %for.cond
  %62 = load i32, i32* %a, align 4
  %conv73 = trunc i32 %62 to i8
  %63 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv73, i8* %63, align 1
  %64 = load i32, i32* %b, align 4
  %conv74 = trunc i32 %64 to i8
  %65 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv74, i8* %65, align 1
  %66 = load i32, i32* %c, align 4
  %conv75 = sext i32 %66 to i64
  %67 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %68 = load i64, i64* %67, align 8
  %add76 = add i64 %68, %conv75
  store i64 %add76, i64* %67, align 8
  br label %return

return:                                           ; preds = %for.end72, %if.end14
  ret void
}

declare dso_local i32 @puts(i8*) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

declare dso_local i32 @u_n(i32, %struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @bytes_reverse_32(i32) #1

declare dso_local i32 @showbits(i32, i32, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TrailingOnes_TotalCoeff_ChromaDc(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8* %TotalCoeff, i8* %TrailingZeros) #0 !prof !35 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %TotalCoeff.addr = alloca i8*, align 8
  %TrailingZeros.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8* %TotalCoeff, i8** %TotalCoeff.addr, align 8
  store i8* %TrailingZeros, i8** %TrailingZeros.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 4
  br i1 %cmp, label %for.body, label %for.end49, !prof !36

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc, %for.body
  %23 = load i32, i32* %j, align 4
  %cmp22 = icmp slt i32 %23, 5
  br i1 %cmp22, label %for.body24, label %for.end, !prof !37

for.body24:                                       ; preds = %for.cond21
  %24 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %24 to i64
  %arrayidx26 = getelementptr inbounds [4 x [5 x i8]], [4 x [5 x i8]]* @lentabDC, i64 0, i64 %idxprom25
  %25 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %25 to i64
  %arrayidx28 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx26, i64 0, i64 %idxprom27
  %26 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %26 to i32
  store i32 %conv29, i32* %len, align 4
  %27 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %27 to i64
  %arrayidx31 = getelementptr inbounds [4 x [5 x i8]], [4 x [5 x i8]]* @codtabDC, i64 0, i64 %idxprom30
  %28 = load i32, i32* %j, align 4
  %idxprom32 = sext i32 %28 to i64
  %arrayidx33 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx31, i64 0, i64 %idxprom32
  %29 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %29 to i32
  store i32 %conv34, i32* %cod, align 4
  %30 = load i32, i32* %len, align 4
  %31 = load i32, i32* %temp0, align 4
  %32 = load i32, i32* %offset, align 4
  %call35 = call i32 @showbits(i32 %30, i32 %31, i32 %32)
  %33 = load i32, i32* %cod, align 4
  %cmp36 = icmp eq i32 %call35, %33
  %conv37 = zext i1 %cmp36 to i32
  %conv38 = trunc i32 %conv37 to i8
  store i8 %conv38, i8* %test, align 1
  %34 = load i32, i32* %j, align 4
  %35 = load i8, i8* %test, align 1
  %conv39 = zext i8 %35 to i32
  %mul = mul nsw i32 %34, %conv39
  %36 = load i32, i32* %a, align 4
  %add40 = add nsw i32 %36, %mul
  store i32 %add40, i32* %a, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i8, i8* %test, align 1
  %conv41 = zext i8 %38 to i32
  %mul42 = mul nsw i32 %37, %conv41
  %39 = load i32, i32* %b, align 4
  %add43 = add nsw i32 %39, %mul42
  store i32 %add43, i32* %b, align 4
  %40 = load i32, i32* %len, align 4
  %41 = load i8, i8* %test, align 1
  %conv44 = zext i8 %41 to i32
  %mul45 = mul nsw i32 %40, %conv44
  %42 = load i32, i32* %c, align 4
  %add46 = add nsw i32 %42, %mul45
  store i32 %add46, i32* %c, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body24
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond21

for.end:                                          ; preds = %for.cond21
  br label %for.inc47

for.inc47:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %44, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  %45 = load i32, i32* %b, align 4
  %conv50 = trunc i32 %45 to i8
  %46 = load i8*, i8** %TrailingZeros.addr, align 8
  store i8 %conv50, i8* %46, align 1
  %47 = load i32, i32* %a, align 4
  %conv51 = trunc i32 %47 to i8
  %48 = load i8*, i8** %TotalCoeff.addr, align 8
  store i8 %conv51, i8* %48, align 1
  %49 = load i32, i32* %c, align 4
  %conv52 = sext i32 %49 to i64
  %50 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %51 = load i64, i64* %50, align 8
  %add53 = add i64 %51, %conv52
  store i64 %add53, i64* %50, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @total_zeros(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !38 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 15
  br i1 %cmp, label %for.body, label %for.end, !prof !39

for.body:                                         ; preds = %for.cond
  %23 = load i8, i8* %tzVLC.addr, align 1
  %conv21 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv21, 1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx23 = getelementptr inbounds [15 x [16 x i8]], [15 x [16 x i8]]* bitcast (<{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }>* @tzlentab to [15 x [16 x i8]]*), i64 0, i64 %idxprom22
  %24 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx23, i64 0, i64 %idxprom24
  %25 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %25 to i32
  store i32 %conv26, i32* %len, align 4
  %26 = load i8, i8* %tzVLC.addr, align 1
  %conv27 = zext i8 %26 to i32
  %sub28 = sub nsw i32 %conv27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [15 x [16 x i8]], [15 x [16 x i8]]* bitcast (<{ [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x i8], <{ [8 x i8], [8 x i8] }>, <{ [8 x i8], [8 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, [14 x i8] }> }>* @tzcodtab to [15 x [16 x i8]]*), i64 0, i64 %idxprom29
  %27 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %27 to i64
  %arrayidx32 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx30, i64 0, i64 %idxprom31
  %28 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %28 to i32
  store i32 %conv33, i32* %cod, align 4
  %29 = load i32, i32* %len, align 4
  %30 = load i32, i32* %temp0, align 4
  %31 = load i32, i32* %offset, align 4
  %call34 = call i32 @showbits(i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %cod, align 4
  %cmp35 = icmp eq i32 %call34, %32
  %conv36 = zext i1 %cmp35 to i32
  %conv37 = trunc i32 %conv36 to i8
  store i8 %conv37, i8* %test, align 1
  %33 = load i32, i32* %len, align 4
  %34 = load i8, i8* %test, align 1
  %conv38 = zext i8 %34 to i32
  %mul = mul nsw i32 %33, %conv38
  %35 = load i32, i32* %a, align 4
  %add39 = add nsw i32 %35, %mul
  store i32 %add39, i32* %a, align 4
  %36 = load i32, i32* %i, align 4
  %37 = load i8, i8* %test, align 1
  %conv40 = zext i8 %37 to i32
  %mul41 = mul nsw i32 %36, %conv40
  %38 = load i32, i32* %b, align 4
  %add42 = add nsw i32 %38, %mul41
  store i32 %add42, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i32, i32* %a, align 4
  %conv43 = sext i32 %40 to i64
  %41 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %42 = load i64, i64* %41, align 8
  %add44 = add i64 %42, %conv43
  store i64 %add44, i64* %41, align 8
  %43 = load i32, i32* %b, align 4
  %conv45 = trunc i32 %43 to i8
  ret i8 %conv45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @total_zeros_DC(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !40 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i8*, i8** %nalu_buf.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %div = sdiv i32 %3, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  store i8 %4, i8* %temp_1, align 1
  %5 = load i8*, i8** %nalu_buf.addr, align 8
  %6 = load i32, i32* %offset, align 4
  %div1 = sdiv i32 %6, 8
  %add = add nsw i32 %div1, 1
  %idxprom2 = sext i32 %add to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %idxprom2
  %7 = load i8, i8* %arrayidx3, align 1
  store i8 %7, i8* %temp_2, align 1
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i32, i32* %offset, align 4
  %div4 = sdiv i32 %9, 8
  %add5 = add nsw i32 %div4, 2
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  store i8 %10, i8* %temp_3, align 1
  %11 = load i8*, i8** %nalu_buf.addr, align 8
  %12 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %12, 8
  %add9 = add nsw i32 %div8, 3
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 %idxprom10
  %13 = load i8, i8* %arrayidx11, align 1
  store i8 %13, i8* %temp_4, align 1
  %14 = load i8, i8* %temp_4, align 1
  %conv12 = zext i8 %14 to i32
  store i32 %conv12, i32* %temp, align 4
  %15 = load i32, i32* %temp, align 4
  %shl = shl i32 %15, 8
  %16 = load i8, i8* %temp_3, align 1
  %conv13 = zext i8 %16 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl14 = shl i32 %17, 8
  %18 = load i8, i8* %temp_2, align 1
  %conv15 = zext i8 %18 to i32
  %or16 = or i32 %shl14, %conv15
  store i32 %or16, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl17 = shl i32 %19, 8
  %20 = load i8, i8* %temp_1, align 1
  %conv18 = zext i8 %20 to i32
  %or19 = or i32 %shl17, %conv18
  store i32 %or19, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %21)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %22 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %22, 4
  br i1 %cmp, label %for.body, label %for.end, !prof !41

for.body:                                         ; preds = %for.cond
  %23 = load i8, i8* %tzVLC.addr, align 1
  %conv21 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv21, 1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx23 = getelementptr inbounds [3 x [4 x i8]], [3 x [4 x i8]]* @tzlentabDC, i64 0, i64 %idxprom22
  %24 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i64 0, i64 %idxprom24
  %25 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %25 to i32
  store i32 %conv26, i32* %len, align 4
  %26 = load i8, i8* %tzVLC.addr, align 1
  %conv27 = zext i8 %26 to i32
  %sub28 = sub nsw i32 %conv27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [3 x [4 x i8]], [3 x [4 x i8]]* @tzcodtabDC, i64 0, i64 %idxprom29
  %27 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %27 to i64
  %arrayidx32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx30, i64 0, i64 %idxprom31
  %28 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %28 to i32
  store i32 %conv33, i32* %cod, align 4
  %29 = load i32, i32* %len, align 4
  %30 = load i32, i32* %temp0, align 4
  %31 = load i32, i32* %offset, align 4
  %call34 = call i32 @showbits(i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %cod, align 4
  %cmp35 = icmp eq i32 %call34, %32
  %conv36 = zext i1 %cmp35 to i32
  %conv37 = trunc i32 %conv36 to i8
  store i8 %conv37, i8* %test, align 1
  %33 = load i32, i32* %len, align 4
  %34 = load i8, i8* %test, align 1
  %conv38 = zext i8 %34 to i32
  %mul = mul nsw i32 %33, %conv38
  %35 = load i32, i32* %a, align 4
  %add39 = add nsw i32 %35, %mul
  store i32 %add39, i32* %a, align 4
  %36 = load i32, i32* %i, align 4
  %37 = load i8, i8* %test, align 1
  %conv40 = zext i8 %37 to i32
  %mul41 = mul nsw i32 %36, %conv40
  %38 = load i32, i32* %b, align 4
  %add42 = add nsw i32 %38, %mul41
  store i32 %add42, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i32, i32* %a, align 4
  %conv43 = sext i32 %40 to i64
  %41 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %42 = load i64, i64* %41, align 8
  %add44 = add i64 %42, %conv43
  store i64 %add44, i64* %41, align 8
  %43 = load i32, i32* %b, align 4
  %conv45 = trunc i32 %43 to i8
  ret i8 %conv45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @run_before(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %tzVLC) #0 !prof !42 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %tzVLC.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %cod = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp_1 = alloca i8, align 1
  %temp_2 = alloca i8, align 1
  %temp_3 = alloca i8, align 1
  %temp_4 = alloca i8, align 1
  %temp = alloca i32, align 4
  %temp0 = alloca i32, align 4
  %test = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %tzVLC, i8* %tzVLC.addr, align 1
  store i32 0, i32* %len, align 4
  store i32 0, i32* %cod, align 4
  store i32 0, i32* %i, align 4
  store i8 0, i8* %tmp, align 1
  %0 = load i8, i8* %tzVLC.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, 7
  br i1 %cmp, label %if.then, label %if.else, !prof !43

if.then:                                          ; preds = %entry
  store i8 6, i8* %tmp, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8, i8* %tzVLC.addr, align 1
  %conv2 = zext i8 %1 to i32
  %sub = sub nsw i32 %conv2, 1
  %conv3 = trunc i32 %sub to i8
  store i8 %conv3, i8* %tmp, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %3 = load i64, i64* %2, align 8
  %conv4 = trunc i64 %3 to i32
  store i32 %conv4, i32* %offset, align 4
  %4 = load i8*, i8** %nalu_buf.addr, align 8
  %5 = load i32, i32* %offset, align 4
  %div = sdiv i32 %5, 8
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp_1, align 1
  %7 = load i8*, i8** %nalu_buf.addr, align 8
  %8 = load i32, i32* %offset, align 4
  %div5 = sdiv i32 %8, 8
  %add = add nsw i32 %div5, 1
  %idxprom6 = sext i32 %add to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i64 %idxprom6
  %9 = load i8, i8* %arrayidx7, align 1
  store i8 %9, i8* %temp_2, align 1
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i32, i32* %offset, align 4
  %div8 = sdiv i32 %11, 8
  %add9 = add nsw i32 %div8, 2
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %12 = load i8, i8* %arrayidx11, align 1
  store i8 %12, i8* %temp_3, align 1
  %13 = load i8*, i8** %nalu_buf.addr, align 8
  %14 = load i32, i32* %offset, align 4
  %div12 = sdiv i32 %14, 8
  %add13 = add nsw i32 %div12, 3
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 %idxprom14
  %15 = load i8, i8* %arrayidx15, align 1
  store i8 %15, i8* %temp_4, align 1
  %16 = load i8, i8* %temp_4, align 1
  %conv16 = zext i8 %16 to i32
  store i32 %conv16, i32* %temp, align 4
  %17 = load i32, i32* %temp, align 4
  %shl = shl i32 %17, 8
  %18 = load i8, i8* %temp_3, align 1
  %conv17 = zext i8 %18 to i32
  %or = or i32 %shl, %conv17
  store i32 %or, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %shl18 = shl i32 %19, 8
  %20 = load i8, i8* %temp_2, align 1
  %conv19 = zext i8 %20 to i32
  %or20 = or i32 %shl18, %conv19
  store i32 %or20, i32* %temp, align 4
  %21 = load i32, i32* %temp, align 4
  %shl21 = shl i32 %21, 8
  %22 = load i8, i8* %temp_1, align 1
  %conv22 = zext i8 %22 to i32
  %or23 = or i32 %shl21, %conv22
  store i32 %or23, i32* %temp, align 4
  %23 = load i32, i32* %temp, align 4
  %call = call i32 @bytes_reverse_32(i32 %23)
  store i32 %call, i32* %temp0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %24 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %24, 15
  br i1 %cmp24, label %for.body, label %for.end, !prof !44

for.body:                                         ; preds = %for.cond
  %25 = load i8, i8* %tmp, align 1
  %idxprom26 = zext i8 %25 to i64
  %arrayidx27 = getelementptr inbounds [7 x [16 x i8]], [7 x [16 x i8]]* bitcast (<{ <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [10 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }>* @rblentab to [7 x [16 x i8]]*), i64 0, i64 %idxprom26
  %26 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %26 to i64
  %arrayidx29 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx27, i64 0, i64 %idxprom28
  %27 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %27 to i32
  store i32 %conv30, i32* %len, align 4
  %28 = load i8, i8* %tmp, align 1
  %idxprom31 = zext i8 %28 to i64
  %arrayidx32 = getelementptr inbounds [7 x [16 x i8]], [7 x [16 x i8]]* bitcast (<{ <{ i8, [15 x i8] }>, <{ i8, i8, [14 x i8] }>, <{ i8, i8, i8, [13 x i8] }>, <{ i8, i8, i8, i8, [12 x i8] }>, <{ i8, i8, i8, i8, i8, [11 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }>, [16 x i8] }>* @rbcodtab to [7 x [16 x i8]]*), i64 0, i64 %idxprom31
  %29 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %29 to i64
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* %arrayidx32, i64 0, i64 %idxprom33
  %30 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %30 to i32
  store i32 %conv35, i32* %cod, align 4
  %31 = load i32, i32* %len, align 4
  %32 = load i32, i32* %temp0, align 4
  %33 = load i32, i32* %offset, align 4
  %call36 = call i32 @showbits(i32 %31, i32 %32, i32 %33)
  %34 = load i32, i32* %cod, align 4
  %cmp37 = icmp eq i32 %call36, %34
  %conv38 = zext i1 %cmp37 to i32
  %conv39 = trunc i32 %conv38 to i8
  store i8 %conv39, i8* %test, align 1
  %35 = load i32, i32* %len, align 4
  %36 = load i8, i8* %test, align 1
  %conv40 = zext i8 %36 to i32
  %mul = mul nsw i32 %35, %conv40
  %37 = load i32, i32* %a, align 4
  %add41 = add nsw i32 %37, %mul
  store i32 %add41, i32* %a, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i8, i8* %test, align 1
  %conv42 = zext i8 %39 to i32
  %mul43 = mul nsw i32 %38, %conv42
  %40 = load i32, i32* %b, align 4
  %add44 = add nsw i32 %40, %mul43
  store i32 %add44, i32* %b, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %41 = load i32, i32* %i, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load i32, i32* %a, align 4
  %conv45 = sext i32 %42 to i64
  %43 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %44 = load i64, i64* %43, align 8
  %add46 = add i64 %44, %conv45
  store i64 %add46, i64* %43, align 8
  %45 = load i32, i32* %b, align 4
  %conv47 = trunc i32 %45 to i8
  ret i8 %conv47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @unary_code(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !45 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %i = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 0, i8* %i, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %0, i8* %1, i64* %2)
  %conv = zext i8 %call to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end, !prof !46

while.body:                                       ; preds = %while.cond
  %3 = load i8, i8* %i, align 1
  %inc = add i8 %3, 1
  store i8 %inc, i8* %i, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i8, i8* %i, align 1
  ret i8 %4
}

declare dso_local zeroext i8 @u_1(%struct.NALU_t*, i8*, i64*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @residual_block_cavlc_16([4 x i32]* %coeffLevel, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %startIdx, i32 %endIdx, i32 %nC) #0 !prof !29 {
entry:
  %coeffLevel.addr = alloca [4 x i32]*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %startIdx.addr = alloca i32, align 4
  %endIdx.addr = alloca i32, align 4
  %nC.addr = alloca i32, align 4
  %framescan = alloca [16 x [2 x i8]], align 16
  %i = alloca i32, align 4
  %trailingOnes = alloca i8, align 1
  %totalcoeff = alloca i8, align 1
  %nC_range = alloca i8, align 1
  %suffixLength = alloca i8, align 1
  %trailing_ones_sign_flag = alloca i8, align 1
  %level_prefix = alloca i8, align 1
  %level_suffix = alloca i8, align 1
  %SizesuffixLength = alloca i8, align 1
  %zeroLeft = alloca i8, align 1
  %levelCode = alloca i32, align 4
  %levelVal = alloca [16 x i32], align 16
  %runVal = alloca [16 x i8], align 16
  %coeffNum = alloca i32, align 4
  store [4 x i32]* %coeffLevel, [4 x i32]** %coeffLevel.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %startIdx, i32* %startIdx.addr, align 4
  store i32 %endIdx, i32* %endIdx.addr, align 4
  store i32 %nC, i32* %nC.addr, align 4
  %0 = bitcast [16 x [2 x i8]]* %framescan to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x [2 x i8]], [16 x [2 x i8]]* @__const.residual_block_cavlc_16.framescan, i32 0, i32 0, i32 0), i64 32, i1 false)
  store i32 0, i32* %i, align 4
  store i8 0, i8* %trailingOnes, align 1
  store i8 0, i8* %totalcoeff, align 1
  store i8 0, i8* %nC_range, align 1
  store i8 0, i8* %suffixLength, align 1
  store i8 0, i8* %trailing_ones_sign_flag, align 1
  store i8 0, i8* %level_suffix, align 1
  store i8 0, i8* %SizesuffixLength, align 1
  store i8 0, i8* %zeroLeft, align 1
  store i32 0, i32* %levelCode, align 4
  %1 = bitcast [16 x i32]* %levelVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 64, i1 false)
  %2 = bitcast [16 x i8]* %runVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 16, i1 false)
  %3 = load i32, i32* %nC.addr, align 4
  %div = sdiv i32 %3, 2
  %conv = trunc i32 %div to i8
  store i8 %conv, i8* %nC_range, align 1
  %4 = load i8, i8* %nC_range, align 1
  %conv1 = zext i8 %4 to i32
  %cmp = icmp sgt i32 %conv1, 3
  br i1 %cmp, label %if.then, label %if.else, !prof !31

if.then:                                          ; preds = %entry
  store i8 3, i8* %nC_range, align 1
  br label %if.end7

if.else:                                          ; preds = %entry
  %5 = load i8, i8* %nC_range, align 1
  %conv3 = zext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 3
  br i1 %cmp4, label %if.then6, label %if.end, !prof !47

if.then6:                                         ; preds = %if.else
  store i8 2, i8* %nC_range, align 1
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end7
  %6 = load i32, i32* %i, align 4
  %cmp8 = icmp slt i32 %6, 16
  br i1 %cmp8, label %for.body, label %for.end, !prof !48

for.body:                                         ; preds = %for.cond
  %7 = load [4 x i32]*, [4 x i32]** %coeffLevel.addr, align 8
  %8 = load i32, i32* %i, align 4
  %div10 = sdiv i32 %8, 4
  %idxprom = sext i32 %div10 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 %idxprom
  %9 = load i32, i32* %i, align 4
  %rem = srem i32 %9, 4
  %idxprom11 = sext i32 %rem to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom11
  store i32 0, i32* %arrayidx12, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %12 = load i8*, i8** %nalu_buf.addr, align 8
  %13 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %14 = load i8, i8* %nC_range, align 1
  call void @TrailingOnes_TotalCoeff(%struct.NALU_t* %11, i8* %12, i64* %13, i8* %totalcoeff, i8* %trailingOnes, i8 zeroext %14)
  %15 = load i8, i8* %totalcoeff, align 1
  %conv13 = zext i8 %15 to i32
  %cmp14 = icmp sgt i32 %conv13, 0
  br i1 %cmp14, label %if.then16, label %if.end211, !prof !49

if.then16:                                        ; preds = %for.end
  %16 = load i8, i8* %totalcoeff, align 1
  %conv17 = zext i8 %16 to i32
  %cmp18 = icmp sgt i32 %conv17, 10
  br i1 %cmp18, label %land.rhs, label %land.end, !prof !50

land.rhs:                                         ; preds = %if.then16
  %17 = load i8, i8* %trailingOnes, align 1
  %conv20 = zext i8 %17 to i32
  %cmp21 = icmp slt i32 %conv20, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then16
  %18 = phi i1 [ false, %if.then16 ], [ %cmp21, %land.rhs ]
  %19 = zext i1 %18 to i64
  %cond = select i1 %18, i32 1, i32 0
  %conv23 = trunc i32 %cond to i8
  store i8 %conv23, i8* %suffixLength, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc142, %land.end
  %20 = load i32, i32* %i, align 4
  %21 = load i8, i8* %totalcoeff, align 1
  %conv25 = zext i8 %21 to i32
  %cmp26 = icmp slt i32 %20, %conv25
  br i1 %cmp26, label %for.body28, label %for.end144, !prof !51

for.body28:                                       ; preds = %for.cond24
  %22 = load i32, i32* %i, align 4
  %23 = load i8, i8* %trailingOnes, align 1
  %conv29 = zext i8 %23 to i32
  %cmp30 = icmp slt i32 %22, %conv29
  br i1 %cmp30, label %if.then32, label %if.else36, !prof !52

if.then32:                                        ; preds = %for.body28
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %24, i8* %25, i64* %26)
  store i8 %call, i8* %trailing_ones_sign_flag, align 1
  %27 = load i8, i8* %trailing_ones_sign_flag, align 1
  %conv33 = zext i8 %27 to i32
  %mul = mul nsw i32 2, %conv33
  %sub = sub nsw i32 1, %mul
  %28 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %28 to i64
  %arrayidx35 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom34
  store i32 %sub, i32* %arrayidx35, align 4
  br label %if.end141

if.else36:                                        ; preds = %for.body28
  %29 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %30 = load i8*, i8** %nalu_buf.addr, align 8
  %31 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call37 = call zeroext i8 @unary_code(%struct.NALU_t* %29, i8* %30, i64* %31)
  store i8 %call37, i8* %level_prefix, align 1
  %32 = load i8, i8* %level_prefix, align 1
  %conv38 = zext i8 %32 to i32
  %33 = load i8, i8* %suffixLength, align 1
  %conv39 = zext i8 %33 to i32
  %shl = shl i32 %conv38, %conv39
  store i32 %shl, i32* %levelCode, align 4
  %34 = load i8, i8* %suffixLength, align 1
  %conv40 = zext i8 %34 to i32
  %cmp41 = icmp sgt i32 %conv40, 0
  br i1 %cmp41, label %if.then46, label %lor.lhs.false, !prof !53

lor.lhs.false:                                    ; preds = %if.else36
  %35 = load i8, i8* %level_prefix, align 1
  %conv43 = zext i8 %35 to i32
  %cmp44 = icmp sge i32 %conv43, 14
  br i1 %cmp44, label %if.then46, label %if.end69, !prof !54

if.then46:                                        ; preds = %lor.lhs.false, %if.else36
  %36 = load i8, i8* %level_prefix, align 1
  %conv47 = zext i8 %36 to i32
  %cmp48 = icmp eq i32 %conv47, 14
  br i1 %cmp48, label %land.lhs.true, label %if.else54, !prof !55

land.lhs.true:                                    ; preds = %if.then46
  %37 = load i8, i8* %suffixLength, align 1
  %conv50 = zext i8 %37 to i32
  %cmp51 = icmp eq i32 %conv50, 0
  br i1 %cmp51, label %if.then53, label %if.else54, !prof !56

if.then53:                                        ; preds = %land.lhs.true
  store i8 4, i8* %SizesuffixLength, align 1
  br label %if.end64

if.else54:                                        ; preds = %land.lhs.true, %if.then46
  %38 = load i8, i8* %level_prefix, align 1
  %conv55 = zext i8 %38 to i32
  %cmp56 = icmp sge i32 %conv55, 15
  br i1 %cmp56, label %if.then58, label %if.else62, !prof !57

if.then58:                                        ; preds = %if.else54
  %39 = load i8, i8* %level_prefix, align 1
  %conv59 = zext i8 %39 to i32
  %sub60 = sub nsw i32 %conv59, 3
  %conv61 = trunc i32 %sub60 to i8
  store i8 %conv61, i8* %SizesuffixLength, align 1
  br label %if.end63

if.else62:                                        ; preds = %if.else54
  %40 = load i8, i8* %suffixLength, align 1
  store i8 %40, i8* %SizesuffixLength, align 1
  br label %if.end63

if.end63:                                         ; preds = %if.else62, %if.then58
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then53
  %41 = load i8, i8* %SizesuffixLength, align 1
  %conv65 = zext i8 %41 to i32
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %43 = load i8*, i8** %nalu_buf.addr, align 8
  %44 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call66 = call i32 @u_n(i32 %conv65, %struct.NALU_t* %42, i8* %43, i64* %44)
  %conv67 = trunc i32 %call66 to i8
  store i8 %conv67, i8* %level_suffix, align 1
  %45 = load i8, i8* %level_suffix, align 1
  %conv68 = zext i8 %45 to i32
  %46 = load i32, i32* %levelCode, align 4
  %add = add nsw i32 %46, %conv68
  store i32 %add, i32* %levelCode, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.end64, %lor.lhs.false
  %47 = load i8, i8* %level_prefix, align 1
  %conv70 = zext i8 %47 to i32
  %cmp71 = icmp sge i32 %conv70, 15
  br i1 %cmp71, label %land.lhs.true73, label %if.end79, !prof !58

land.lhs.true73:                                  ; preds = %if.end69
  %48 = load i8, i8* %suffixLength, align 1
  %conv74 = zext i8 %48 to i32
  %cmp75 = icmp eq i32 %conv74, 0
  br i1 %cmp75, label %if.then77, label %if.end79, !prof !59

if.then77:                                        ; preds = %land.lhs.true73
  %49 = load i32, i32* %levelCode, align 4
  %add78 = add nsw i32 %49, 15
  store i32 %add78, i32* %levelCode, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then77, %land.lhs.true73, %if.end69
  %50 = load i8, i8* %level_prefix, align 1
  %conv80 = zext i8 %50 to i32
  %cmp81 = icmp sge i32 %conv80, 16
  br i1 %cmp81, label %if.then83, label %if.end89, !prof !60

if.then83:                                        ; preds = %if.end79
  %51 = load i8, i8* %level_prefix, align 1
  %conv84 = zext i8 %51 to i32
  %sub85 = sub nsw i32 %conv84, 3
  %shl86 = shl i32 1, %sub85
  %sub87 = sub nsw i32 %shl86, 4096
  %52 = load i32, i32* %levelCode, align 4
  %add88 = add nsw i32 %52, %sub87
  store i32 %add88, i32* %levelCode, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.then83, %if.end79
  %53 = load i32, i32* %i, align 4
  %54 = load i8, i8* %trailingOnes, align 1
  %conv90 = zext i8 %54 to i32
  %cmp91 = icmp eq i32 %53, %conv90
  br i1 %cmp91, label %land.lhs.true93, label %if.end99, !prof !61

land.lhs.true93:                                  ; preds = %if.end89
  %55 = load i8, i8* %trailingOnes, align 1
  %conv94 = zext i8 %55 to i32
  %cmp95 = icmp slt i32 %conv94, 3
  br i1 %cmp95, label %if.then97, label %if.end99, !prof !62

if.then97:                                        ; preds = %land.lhs.true93
  %56 = load i32, i32* %levelCode, align 4
  %add98 = add nsw i32 %56, 2
  store i32 %add98, i32* %levelCode, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %land.lhs.true93, %if.end89
  %57 = load i32, i32* %levelCode, align 4
  %rem100 = srem i32 %57, 2
  %cmp101 = icmp eq i32 %rem100, 0
  br i1 %cmp101, label %if.then103, label %if.else107, !prof !63

if.then103:                                       ; preds = %if.end99
  %58 = load i32, i32* %levelCode, align 4
  %add104 = add nsw i32 %58, 2
  %shr = ashr i32 %add104, 1
  %59 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %59 to i64
  %arrayidx106 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom105
  store i32 %shr, i32* %arrayidx106, align 4
  br label %if.end113

if.else107:                                       ; preds = %if.end99
  %60 = load i32, i32* %levelCode, align 4
  %sub108 = sub nsw i32 0, %60
  %sub109 = sub nsw i32 %sub108, 1
  %shr110 = ashr i32 %sub109, 1
  %61 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %61 to i64
  %arrayidx112 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom111
  store i32 %shr110, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else107, %if.then103
  %62 = load i8, i8* %suffixLength, align 1
  %conv114 = zext i8 %62 to i32
  %cmp115 = icmp eq i32 %conv114, 0
  br i1 %cmp115, label %if.then117, label %if.end118, !prof !64

if.then117:                                       ; preds = %if.end113
  store i8 1, i8* %suffixLength, align 1
  br label %if.end118

if.end118:                                        ; preds = %if.then117, %if.end113
  %63 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %63 to i64
  %arrayidx120 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom119
  %64 = load i32, i32* %arrayidx120, align 4
  %cmp121 = icmp sgt i32 %64, 0
  br i1 %cmp121, label %cond.true, label %cond.false, !prof !63

cond.true:                                        ; preds = %if.end118
  %65 = load i32, i32* %i, align 4
  %idxprom123 = sext i32 %65 to i64
  %arrayidx124 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom123
  %66 = load i32, i32* %arrayidx124, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end118
  %67 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %67 to i64
  %arrayidx126 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom125
  %68 = load i32, i32* %arrayidx126, align 4
  %sub127 = sub nsw i32 0, %68
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond128 = phi i32 [ %66, %cond.true ], [ %sub127, %cond.false ]
  %69 = load i8, i8* %suffixLength, align 1
  %conv129 = zext i8 %69 to i32
  %sub130 = sub nsw i32 %conv129, 1
  %shl131 = shl i32 3, %sub130
  %cmp132 = icmp sgt i32 %cond128, %shl131
  br i1 %cmp132, label %land.lhs.true134, label %if.end140, !prof !65

land.lhs.true134:                                 ; preds = %cond.end
  %70 = load i8, i8* %suffixLength, align 1
  %conv135 = zext i8 %70 to i32
  %cmp136 = icmp slt i32 %conv135, 6
  br i1 %cmp136, label %if.then138, label %if.end140, !prof !66

if.then138:                                       ; preds = %land.lhs.true134
  %71 = load i8, i8* %suffixLength, align 1
  %inc139 = add i8 %71, 1
  store i8 %inc139, i8* %suffixLength, align 1
  br label %if.end140

if.end140:                                        ; preds = %if.then138, %land.lhs.true134, %cond.end
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then32
  br label %for.inc142

for.inc142:                                       ; preds = %if.end141
  %72 = load i32, i32* %i, align 4
  %inc143 = add nsw i32 %72, 1
  store i32 %inc143, i32* %i, align 4
  br label %for.cond24

for.end144:                                       ; preds = %for.cond24
  %73 = load i8, i8* %totalcoeff, align 1
  %conv145 = zext i8 %73 to i32
  %74 = load i32, i32* %endIdx.addr, align 4
  %75 = load i32, i32* %startIdx.addr, align 4
  %sub146 = sub nsw i32 %74, %75
  %add147 = add nsw i32 %sub146, 1
  %cmp148 = icmp slt i32 %conv145, %add147
  br i1 %cmp148, label %if.then150, label %if.else152, !prof !67

if.then150:                                       ; preds = %for.end144
  %76 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %77 = load i8*, i8** %nalu_buf.addr, align 8
  %78 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %79 = load i8, i8* %totalcoeff, align 1
  %call151 = call zeroext i8 @total_zeros(%struct.NALU_t* %76, i8* %77, i64* %78, i8 zeroext %79)
  store i8 %call151, i8* %zeroLeft, align 1
  br label %if.end153

if.else152:                                       ; preds = %for.end144
  store i8 0, i8* %zeroLeft, align 1
  br label %if.end153

if.end153:                                        ; preds = %if.else152, %if.then150
  store i32 0, i32* %i, align 4
  br label %for.cond154

for.cond154:                                      ; preds = %for.inc177, %if.end153
  %80 = load i32, i32* %i, align 4
  %81 = load i8, i8* %totalcoeff, align 1
  %conv155 = zext i8 %81 to i32
  %sub156 = sub nsw i32 %conv155, 1
  %cmp157 = icmp slt i32 %80, %sub156
  br i1 %cmp157, label %for.body159, label %for.end179, !prof !68

for.body159:                                      ; preds = %for.cond154
  %82 = load i8, i8* %zeroLeft, align 1
  %conv160 = zext i8 %82 to i32
  %cmp161 = icmp sgt i32 %conv160, 0
  br i1 %cmp161, label %if.then163, label %if.else167, !prof !69

if.then163:                                       ; preds = %for.body159
  %83 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %84 = load i8*, i8** %nalu_buf.addr, align 8
  %85 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %86 = load i8, i8* %zeroLeft, align 1
  %call164 = call zeroext i8 @run_before(%struct.NALU_t* %83, i8* %84, i64* %85, i8 zeroext %86)
  %87 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %87 to i64
  %arrayidx166 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom165
  store i8 %call164, i8* %arrayidx166, align 1
  br label %if.end170

if.else167:                                       ; preds = %for.body159
  %88 = load i32, i32* %i, align 4
  %idxprom168 = sext i32 %88 to i64
  %arrayidx169 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom168
  store i8 0, i8* %arrayidx169, align 1
  br label %if.end170

if.end170:                                        ; preds = %if.else167, %if.then163
  %89 = load i8, i8* %zeroLeft, align 1
  %conv171 = zext i8 %89 to i32
  %90 = load i32, i32* %i, align 4
  %idxprom172 = sext i32 %90 to i64
  %arrayidx173 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom172
  %91 = load i8, i8* %arrayidx173, align 1
  %conv174 = zext i8 %91 to i32
  %sub175 = sub nsw i32 %conv171, %conv174
  %conv176 = trunc i32 %sub175 to i8
  store i8 %conv176, i8* %zeroLeft, align 1
  br label %for.inc177

for.inc177:                                       ; preds = %if.end170
  %92 = load i32, i32* %i, align 4
  %inc178 = add nsw i32 %92, 1
  store i32 %inc178, i32* %i, align 4
  br label %for.cond154

for.end179:                                       ; preds = %for.cond154
  %93 = load i8, i8* %zeroLeft, align 1
  %94 = load i8, i8* %totalcoeff, align 1
  %conv180 = zext i8 %94 to i32
  %sub181 = sub nsw i32 %conv180, 1
  %idxprom182 = sext i32 %sub181 to i64
  %arrayidx183 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom182
  store i8 %93, i8* %arrayidx183, align 1
  store i32 -1, i32* %coeffNum, align 4
  %95 = load i8, i8* %totalcoeff, align 1
  %conv184 = zext i8 %95 to i32
  %sub185 = sub nsw i32 %conv184, 1
  store i32 %sub185, i32* %i, align 4
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc209, %for.end179
  %96 = load i32, i32* %i, align 4
  %cmp187 = icmp sge i32 %96, 0
  br i1 %cmp187, label %for.body189, label %for.end210, !prof !51

for.body189:                                      ; preds = %for.cond186
  %97 = load i32, i32* %i, align 4
  %idxprom190 = sext i32 %97 to i64
  %arrayidx191 = getelementptr inbounds [16 x i8], [16 x i8]* %runVal, i64 0, i64 %idxprom190
  %98 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %98 to i32
  %add193 = add nsw i32 %conv192, 1
  %99 = load i32, i32* %coeffNum, align 4
  %add194 = add nsw i32 %99, %add193
  store i32 %add194, i32* %coeffNum, align 4
  %100 = load i32, i32* %i, align 4
  %idxprom195 = sext i32 %100 to i64
  %arrayidx196 = getelementptr inbounds [16 x i32], [16 x i32]* %levelVal, i64 0, i64 %idxprom195
  %101 = load i32, i32* %arrayidx196, align 4
  %102 = load [4 x i32]*, [4 x i32]** %coeffLevel.addr, align 8
  %103 = load i32, i32* %startIdx.addr, align 4
  %104 = load i32, i32* %coeffNum, align 4
  %add197 = add nsw i32 %103, %104
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* %framescan, i64 0, i64 %idxprom198
  %arrayidx200 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx199, i64 0, i64 0
  %105 = load i8, i8* %arrayidx200, align 2
  %idxprom201 = zext i8 %105 to i64
  %arrayidx202 = getelementptr inbounds [4 x i32], [4 x i32]* %102, i64 %idxprom201
  %106 = load i32, i32* %startIdx.addr, align 4
  %107 = load i32, i32* %coeffNum, align 4
  %add203 = add nsw i32 %106, %107
  %idxprom204 = sext i32 %add203 to i64
  %arrayidx205 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* %framescan, i64 0, i64 %idxprom204
  %arrayidx206 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx205, i64 0, i64 1
  %108 = load i8, i8* %arrayidx206, align 1
  %idxprom207 = zext i8 %108 to i64
  %arrayidx208 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx202, i64 0, i64 %idxprom207
  store i32 %101, i32* %arrayidx208, align 4
  br label %for.inc209

for.inc209:                                       ; preds = %for.body189
  %109 = load i32, i32* %i, align 4
  %dec = add nsw i32 %109, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond186

for.end210:                                       ; preds = %for.cond186
  br label %if.end211

if.end211:                                        ; preds = %for.end210, %for.end
  %110 = load i8, i8* %totalcoeff, align 1
  ret i8 %110
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @residual_block_cavlc_4([2 x i32]* %coeffLevel, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %startIdx, i32 %endIdx) #0 !prof !35 {
entry:
  %coeffLevel.addr = alloca [2 x i32]*, align 8
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %startIdx.addr = alloca i32, align 4
  %endIdx.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %trailingOnes = alloca i8, align 1
  %totalcoeff = alloca i8, align 1
  %suffixLength = alloca i8, align 1
  %trailing_ones_sign_flag = alloca i8, align 1
  %level_prefix = alloca i8, align 1
  %level_suffix = alloca i8, align 1
  %SizesuffixLength = alloca i8, align 1
  %zeroLeft = alloca i8, align 1
  %levelCode = alloca i32, align 4
  %levelVal = alloca [4 x i32], align 16
  %runVal = alloca [4 x i8], align 1
  %coeffNum = alloca i32, align 4
  store [2 x i32]* %coeffLevel, [2 x i32]** %coeffLevel.addr, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %startIdx, i32* %startIdx.addr, align 4
  store i32 %endIdx, i32* %endIdx.addr, align 4
  store i32 0, i32* %i, align 4
  store i8 0, i8* %trailingOnes, align 1
  store i8 0, i8* %totalcoeff, align 1
  store i8 0, i8* %suffixLength, align 1
  store i8 0, i8* %trailing_ones_sign_flag, align 1
  store i8 0, i8* %level_prefix, align 1
  store i8 0, i8* %level_suffix, align 1
  store i8 0, i8* %SizesuffixLength, align 1
  store i8 0, i8* %zeroLeft, align 1
  store i32 0, i32* %levelCode, align 4
  %0 = bitcast [4 x i32]* %levelVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 16, i1 false)
  %1 = bitcast [4 x i8]* %runVal to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end, !prof !36

for.body:                                         ; preds = %for.cond
  %3 = load [2 x i32]*, [2 x i32]** %coeffLevel.addr, align 8
  %4 = load i32, i32* %i, align 4
  %div = sdiv i32 %4, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 %idxprom
  %5 = load i32, i32* %i, align 4
  %rem = srem i32 %5, 2
  %idxprom1 = sext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom1
  store i32 0, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %8 = load i8*, i8** %nalu_buf.addr, align 8
  %9 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @TrailingOnes_TotalCoeff_ChromaDc(%struct.NALU_t* %7, i8* %8, i64* %9, i8* %totalcoeff, i8* %trailingOnes)
  %10 = load i8, i8* %totalcoeff, align 1
  %conv = zext i8 %10 to i32
  %cmp3 = icmp sgt i32 %conv, 0
  br i1 %cmp3, label %if.then, label %if.end193, !prof !70

if.then:                                          ; preds = %for.end
  %11 = load i8, i8* %totalcoeff, align 1
  %conv5 = zext i8 %11 to i32
  %cmp6 = icmp sgt i32 %conv5, 10
  br i1 %cmp6, label %land.rhs, label %land.end, !prof !71

land.rhs:                                         ; preds = %if.then
  %12 = load i8, i8* %trailingOnes, align 1
  %conv8 = zext i8 %12 to i32
  %cmp9 = icmp slt i32 %conv8, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %13 = phi i1 [ false, %if.then ], [ %cmp9, %land.rhs ]
  %14 = zext i1 %13 to i64
  %cond = select i1 %13, i32 1, i32 0
  %conv11 = trunc i32 %cond to i8
  store i8 %conv11, i8* %suffixLength, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc128, %land.end
  %15 = load i32, i32* %i, align 4
  %16 = load i8, i8* %totalcoeff, align 1
  %conv13 = zext i8 %16 to i32
  %cmp14 = icmp slt i32 %15, %conv13
  br i1 %cmp14, label %for.body16, label %for.end130, !prof !72

for.body16:                                       ; preds = %for.cond12
  %17 = load i32, i32* %i, align 4
  %18 = load i8, i8* %trailingOnes, align 1
  %conv17 = zext i8 %18 to i32
  %cmp18 = icmp slt i32 %17, %conv17
  br i1 %cmp18, label %if.then20, label %if.else, !prof !73

if.then20:                                        ; preds = %for.body16
  %19 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %20 = load i8*, i8** %nalu_buf.addr, align 8
  %21 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call zeroext i8 @u_1(%struct.NALU_t* %19, i8* %20, i64* %21)
  store i8 %call, i8* %trailing_ones_sign_flag, align 1
  %22 = load i8, i8* %trailing_ones_sign_flag, align 1
  %conv21 = zext i8 %22 to i32
  %mul = mul nsw i32 2, %conv21
  %sub = sub nsw i32 1, %mul
  %23 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %23 to i64
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom22
  store i32 %sub, i32* %arrayidx23, align 4
  br label %if.end127

if.else:                                          ; preds = %for.body16
  %24 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %25 = load i8*, i8** %nalu_buf.addr, align 8
  %26 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call24 = call zeroext i8 @unary_code(%struct.NALU_t* %24, i8* %25, i64* %26)
  store i8 %call24, i8* %level_prefix, align 1
  %27 = load i8, i8* %level_prefix, align 1
  %conv25 = zext i8 %27 to i32
  %28 = load i8, i8* %suffixLength, align 1
  %conv26 = zext i8 %28 to i32
  %shl = shl i32 %conv25, %conv26
  store i32 %shl, i32* %levelCode, align 4
  %29 = load i8, i8* %suffixLength, align 1
  %conv27 = zext i8 %29 to i32
  %cmp28 = icmp sgt i32 %conv27, 0
  br i1 %cmp28, label %if.then33, label %lor.lhs.false, !prof !74

lor.lhs.false:                                    ; preds = %if.else
  %30 = load i8, i8* %level_prefix, align 1
  %conv30 = zext i8 %30 to i32
  %cmp31 = icmp sge i32 %conv30, 14
  br i1 %cmp31, label %if.then33, label %if.end55, !prof !75

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  %31 = load i8, i8* %level_prefix, align 1
  %conv34 = zext i8 %31 to i32
  %cmp35 = icmp eq i32 %conv34, 14
  br i1 %cmp35, label %land.lhs.true, label %if.else41, !prof !76

land.lhs.true:                                    ; preds = %if.then33
  %32 = load i8, i8* %suffixLength, align 1
  %conv37 = zext i8 %32 to i32
  %cmp38 = icmp eq i32 %conv37, 0
  br i1 %cmp38, label %if.then40, label %if.else41, !prof !77

if.then40:                                        ; preds = %land.lhs.true
  store i8 4, i8* %SizesuffixLength, align 1
  br label %if.end50

if.else41:                                        ; preds = %land.lhs.true, %if.then33
  %33 = load i8, i8* %level_prefix, align 1
  %conv42 = zext i8 %33 to i32
  %cmp43 = icmp sge i32 %conv42, 15
  br i1 %cmp43, label %if.then45, label %if.else49, !prof !78

if.then45:                                        ; preds = %if.else41
  %34 = load i8, i8* %level_prefix, align 1
  %conv46 = zext i8 %34 to i32
  %sub47 = sub nsw i32 %conv46, 3
  %conv48 = trunc i32 %sub47 to i8
  store i8 %conv48, i8* %SizesuffixLength, align 1
  br label %if.end

if.else49:                                        ; preds = %if.else41
  %35 = load i8, i8* %suffixLength, align 1
  store i8 %35, i8* %SizesuffixLength, align 1
  br label %if.end

if.end:                                           ; preds = %if.else49, %if.then45
  br label %if.end50

if.end50:                                         ; preds = %if.end, %if.then40
  %36 = load i8, i8* %SizesuffixLength, align 1
  %conv51 = zext i8 %36 to i32
  %37 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %38 = load i8*, i8** %nalu_buf.addr, align 8
  %39 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call52 = call i32 @u_n(i32 %conv51, %struct.NALU_t* %37, i8* %38, i64* %39)
  %conv53 = trunc i32 %call52 to i8
  store i8 %conv53, i8* %level_suffix, align 1
  %40 = load i8, i8* %level_suffix, align 1
  %conv54 = zext i8 %40 to i32
  %41 = load i32, i32* %levelCode, align 4
  %add = add nsw i32 %41, %conv54
  store i32 %add, i32* %levelCode, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.end50, %lor.lhs.false
  %42 = load i8, i8* %level_prefix, align 1
  %conv56 = zext i8 %42 to i32
  %cmp57 = icmp sge i32 %conv56, 15
  br i1 %cmp57, label %land.lhs.true59, label %if.end65, !prof !79

land.lhs.true59:                                  ; preds = %if.end55
  %43 = load i8, i8* %suffixLength, align 1
  %conv60 = zext i8 %43 to i32
  %cmp61 = icmp eq i32 %conv60, 0
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %land.lhs.true59
  %44 = load i32, i32* %levelCode, align 4
  %add64 = add nsw i32 %44, 15
  store i32 %add64, i32* %levelCode, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %land.lhs.true59, %if.end55
  %45 = load i8, i8* %level_prefix, align 1
  %conv66 = zext i8 %45 to i32
  %cmp67 = icmp sge i32 %conv66, 16
  br i1 %cmp67, label %if.then69, label %if.end75, !prof !79

if.then69:                                        ; preds = %if.end65
  %46 = load i8, i8* %level_prefix, align 1
  %conv70 = zext i8 %46 to i32
  %sub71 = sub nsw i32 %conv70, 3
  %shl72 = shl i32 1, %sub71
  %sub73 = sub nsw i32 %shl72, 4096
  %47 = load i32, i32* %levelCode, align 4
  %add74 = add nsw i32 %47, %sub73
  store i32 %add74, i32* %levelCode, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then69, %if.end65
  %48 = load i32, i32* %i, align 4
  %49 = load i8, i8* %trailingOnes, align 1
  %conv76 = zext i8 %49 to i32
  %cmp77 = icmp eq i32 %48, %conv76
  br i1 %cmp77, label %land.lhs.true79, label %if.end85, !prof !80

land.lhs.true79:                                  ; preds = %if.end75
  %50 = load i8, i8* %trailingOnes, align 1
  %conv80 = zext i8 %50 to i32
  %cmp81 = icmp slt i32 %conv80, 3
  br i1 %cmp81, label %if.then83, label %if.end85, !prof !81

if.then83:                                        ; preds = %land.lhs.true79
  %51 = load i32, i32* %levelCode, align 4
  %add84 = add nsw i32 %51, 2
  store i32 %add84, i32* %levelCode, align 4
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %land.lhs.true79, %if.end75
  %52 = load i32, i32* %levelCode, align 4
  %rem86 = srem i32 %52, 2
  %cmp87 = icmp eq i32 %rem86, 0
  br i1 %cmp87, label %if.then89, label %if.else93, !prof !82

if.then89:                                        ; preds = %if.end85
  %53 = load i32, i32* %levelCode, align 4
  %add90 = add nsw i32 %53, 2
  %shr = ashr i32 %add90, 1
  %54 = load i32, i32* %i, align 4
  %idxprom91 = sext i32 %54 to i64
  %arrayidx92 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom91
  store i32 %shr, i32* %arrayidx92, align 4
  br label %if.end99

if.else93:                                        ; preds = %if.end85
  %55 = load i32, i32* %levelCode, align 4
  %sub94 = sub nsw i32 0, %55
  %sub95 = sub nsw i32 %sub94, 1
  %shr96 = ashr i32 %sub95, 1
  %56 = load i32, i32* %i, align 4
  %idxprom97 = sext i32 %56 to i64
  %arrayidx98 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom97
  store i32 %shr96, i32* %arrayidx98, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.else93, %if.then89
  %57 = load i8, i8* %suffixLength, align 1
  %conv100 = zext i8 %57 to i32
  %cmp101 = icmp eq i32 %conv100, 0
  br i1 %cmp101, label %if.then103, label %if.end104, !prof !80

if.then103:                                       ; preds = %if.end99
  store i8 1, i8* %suffixLength, align 1
  br label %if.end104

if.end104:                                        ; preds = %if.then103, %if.end99
  %58 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %58 to i64
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom105
  %59 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sgt i32 %59, 0
  br i1 %cmp107, label %cond.true, label %cond.false, !prof !82

cond.true:                                        ; preds = %if.end104
  %60 = load i32, i32* %i, align 4
  %idxprom109 = sext i32 %60 to i64
  %arrayidx110 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom109
  %61 = load i32, i32* %arrayidx110, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end104
  %62 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %62 to i64
  %arrayidx112 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom111
  %63 = load i32, i32* %arrayidx112, align 4
  %sub113 = sub nsw i32 0, %63
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond114 = phi i32 [ %61, %cond.true ], [ %sub113, %cond.false ]
  %64 = load i8, i8* %suffixLength, align 1
  %conv115 = zext i8 %64 to i32
  %sub116 = sub nsw i32 %conv115, 1
  %shl117 = shl i32 3, %sub116
  %cmp118 = icmp sgt i32 %cond114, %shl117
  br i1 %cmp118, label %land.lhs.true120, label %if.end126, !prof !83

land.lhs.true120:                                 ; preds = %cond.end
  %65 = load i8, i8* %suffixLength, align 1
  %conv121 = zext i8 %65 to i32
  %cmp122 = icmp slt i32 %conv121, 6
  br i1 %cmp122, label %if.then124, label %if.end126, !prof !84

if.then124:                                       ; preds = %land.lhs.true120
  %66 = load i8, i8* %suffixLength, align 1
  %inc125 = add i8 %66, 1
  store i8 %inc125, i8* %suffixLength, align 1
  br label %if.end126

if.end126:                                        ; preds = %if.then124, %land.lhs.true120, %cond.end
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.then20
  br label %for.inc128

for.inc128:                                       ; preds = %if.end127
  %67 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %67, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond12

for.end130:                                       ; preds = %for.cond12
  %68 = load i8, i8* %totalcoeff, align 1
  %conv131 = zext i8 %68 to i32
  %69 = load i32, i32* %endIdx.addr, align 4
  %70 = load i32, i32* %startIdx.addr, align 4
  %sub132 = sub nsw i32 %69, %70
  %add133 = add nsw i32 %sub132, 1
  %cmp134 = icmp slt i32 %conv131, %add133
  br i1 %cmp134, label %if.then136, label %if.else138, !prof !85

if.then136:                                       ; preds = %for.end130
  %71 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %72 = load i8*, i8** %nalu_buf.addr, align 8
  %73 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %74 = load i8, i8* %totalcoeff, align 1
  %call137 = call zeroext i8 @total_zeros_DC(%struct.NALU_t* %71, i8* %72, i64* %73, i8 zeroext %74)
  store i8 %call137, i8* %zeroLeft, align 1
  br label %if.end139

if.else138:                                       ; preds = %for.end130
  store i8 0, i8* %zeroLeft, align 1
  br label %if.end139

if.end139:                                        ; preds = %if.else138, %if.then136
  store i32 0, i32* %i, align 4
  br label %for.cond140

for.cond140:                                      ; preds = %for.inc163, %if.end139
  %75 = load i32, i32* %i, align 4
  %76 = load i8, i8* %totalcoeff, align 1
  %conv141 = zext i8 %76 to i32
  %sub142 = sub nsw i32 %conv141, 1
  %cmp143 = icmp slt i32 %75, %sub142
  br i1 %cmp143, label %for.body145, label %for.end165, !prof !86

for.body145:                                      ; preds = %for.cond140
  %77 = load i8, i8* %zeroLeft, align 1
  %conv146 = zext i8 %77 to i32
  %cmp147 = icmp sgt i32 %conv146, 0
  br i1 %cmp147, label %if.then149, label %if.else153, !prof !87

if.then149:                                       ; preds = %for.body145
  %78 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %79 = load i8*, i8** %nalu_buf.addr, align 8
  %80 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %81 = load i8, i8* %zeroLeft, align 1
  %call150 = call zeroext i8 @run_before(%struct.NALU_t* %78, i8* %79, i64* %80, i8 zeroext %81)
  %82 = load i32, i32* %i, align 4
  %idxprom151 = sext i32 %82 to i64
  %arrayidx152 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom151
  store i8 %call150, i8* %arrayidx152, align 1
  br label %if.end156

if.else153:                                       ; preds = %for.body145
  %83 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %83 to i64
  %arrayidx155 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom154
  store i8 0, i8* %arrayidx155, align 1
  br label %if.end156

if.end156:                                        ; preds = %if.else153, %if.then149
  %84 = load i8, i8* %zeroLeft, align 1
  %conv157 = zext i8 %84 to i32
  %85 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %85 to i64
  %arrayidx159 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom158
  %86 = load i8, i8* %arrayidx159, align 1
  %conv160 = zext i8 %86 to i32
  %sub161 = sub nsw i32 %conv157, %conv160
  %conv162 = trunc i32 %sub161 to i8
  store i8 %conv162, i8* %zeroLeft, align 1
  br label %for.inc163

for.inc163:                                       ; preds = %if.end156
  %87 = load i32, i32* %i, align 4
  %inc164 = add nsw i32 %87, 1
  store i32 %inc164, i32* %i, align 4
  br label %for.cond140

for.end165:                                       ; preds = %for.cond140
  %88 = load i8, i8* %zeroLeft, align 1
  %89 = load i8, i8* %totalcoeff, align 1
  %conv166 = zext i8 %89 to i32
  %sub167 = sub nsw i32 %conv166, 1
  %idxprom168 = sext i32 %sub167 to i64
  %arrayidx169 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom168
  store i8 %88, i8* %arrayidx169, align 1
  store i32 -1, i32* %coeffNum, align 4
  %90 = load i8, i8* %totalcoeff, align 1
  %conv170 = zext i8 %90 to i32
  %sub171 = sub nsw i32 %conv170, 1
  store i32 %sub171, i32* %i, align 4
  br label %for.cond172

for.cond172:                                      ; preds = %for.inc191, %for.end165
  %91 = load i32, i32* %i, align 4
  %cmp173 = icmp sge i32 %91, 0
  br i1 %cmp173, label %for.body175, label %for.end192, !prof !72

for.body175:                                      ; preds = %for.cond172
  %92 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %92 to i64
  %arrayidx177 = getelementptr inbounds [4 x i8], [4 x i8]* %runVal, i64 0, i64 %idxprom176
  %93 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %93 to i32
  %add179 = add nsw i32 %conv178, 1
  %94 = load i32, i32* %coeffNum, align 4
  %add180 = add nsw i32 %94, %add179
  store i32 %add180, i32* %coeffNum, align 4
  %95 = load i32, i32* %i, align 4
  %idxprom181 = sext i32 %95 to i64
  %arrayidx182 = getelementptr inbounds [4 x i32], [4 x i32]* %levelVal, i64 0, i64 %idxprom181
  %96 = load i32, i32* %arrayidx182, align 4
  %97 = load [2 x i32]*, [2 x i32]** %coeffLevel.addr, align 8
  %98 = load i32, i32* %startIdx.addr, align 4
  %99 = load i32, i32* %coeffNum, align 4
  %add183 = add nsw i32 %98, %99
  %rem184 = srem i32 %add183, 2
  %idxprom185 = sext i32 %rem184 to i64
  %arrayidx186 = getelementptr inbounds [2 x i32], [2 x i32]* %97, i64 %idxprom185
  %100 = load i32, i32* %startIdx.addr, align 4
  %101 = load i32, i32* %coeffNum, align 4
  %add187 = add nsw i32 %100, %101
  %div188 = sdiv i32 %add187, 2
  %idxprom189 = sext i32 %div188 to i64
  %arrayidx190 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx186, i64 0, i64 %idxprom189
  store i32 %96, i32* %arrayidx190, align 4
  br label %for.inc191

for.inc191:                                       ; preds = %for.body175
  %102 = load i32, i32* %i, align 4
  %dec = add nsw i32 %102, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond172

for.end192:                                       ; preds = %for.cond172
  br label %if.end193

if.end193:                                        ; preds = %for.end192, %for.end
  %103 = load i8, i8* %totalcoeff, align 1
  ret i8 %103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @nc_Luma([9 x i8]* %residualmode, [36 x i8]* %nz, i32 %xoff, i32 %yoff) #0 !prof !88 {
entry:
  %residualmode.addr = alloca [9 x i8]*, align 8
  %nz.addr = alloca [36 x i8]*, align 8
  %xoff.addr = alloca i32, align 4
  %yoff.addr = alloca i32, align 4
  %nA = alloca i8, align 1
  %nB = alloca i8, align 1
  %nC = alloca i8, align 1
  store [9 x i8]* %residualmode, [9 x i8]** %residualmode.addr, align 8
  store [36 x i8]* %nz, [36 x i8]** %nz.addr, align 8
  store i32 %xoff, i32* %xoff.addr, align 4
  store i32 %yoff, i32* %yoff.addr, align 4
  store i8 0, i8* %nA, align 1
  store i8 0, i8* %nB, align 1
  store i8 0, i8* %nC, align 1
  %0 = load i32, i32* %xoff.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end, !prof !89

if.then:                                          ; preds = %entry
  %1 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %2 = load i32, i32* %xoff.addr, align 4
  %sub = sub nsw i32 %2, 1
  %div = sdiv i32 %sub, 4
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %yoff.addr, align 4
  %div1 = sdiv i32 %3, 4
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %4 = load i8, i8* %arrayidx3, align 1
  %conv = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv, 25
  %conv5 = zext i1 %cmp4 to i32
  %mul = mul nsw i32 %conv5, 16
  %5 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %6 = load i32, i32* %xoff.addr, align 4
  %sub6 = sub nsw i32 %6, 1
  %div7 = sdiv i32 %sub6, 4
  %idxprom8 = sext i32 %div7 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 %idxprom8
  %7 = load i32, i32* %yoff.addr, align 4
  %div10 = sdiv i32 %7, 4
  %idxprom11 = sext i32 %div10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %cmp14 = icmp ne i32 %conv13, 3
  %conv15 = zext i1 %cmp14 to i32
  %9 = load [36 x i8]*, [36 x i8]** %nz.addr, align 8
  %10 = load i32, i32* %xoff.addr, align 4
  %sub16 = sub nsw i32 %10, 1
  %idxprom17 = sext i32 %sub16 to i64
  %arrayidx18 = getelementptr inbounds [36 x i8], [36 x i8]* %9, i64 %idxprom17
  %11 = load i32, i32* %yoff.addr, align 4
  %idxprom19 = sext i32 %11 to i64
  %arrayidx20 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %12 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %12 to i32
  %mul22 = mul nsw i32 %conv15, %conv21
  %add = add nsw i32 %mul, %mul22
  %conv23 = trunc i32 %add to i8
  store i8 %conv23, i8* %nA, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %yoff.addr, align 4
  %cmp24 = icmp sgt i32 %13, 0
  br i1 %cmp24, label %if.then26, label %if.end57, !prof !90

if.then26:                                        ; preds = %if.end
  %14 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %15 = load i32, i32* %xoff.addr, align 4
  %div27 = sdiv i32 %15, 4
  %idxprom28 = sext i32 %div27 to i64
  %arrayidx29 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom28
  %16 = load i32, i32* %yoff.addr, align 4
  %sub30 = sub nsw i32 %16, 1
  %div31 = sdiv i32 %sub30, 4
  %idxprom32 = sext i32 %div31 to i64
  %arrayidx33 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx29, i64 0, i64 %idxprom32
  %17 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %17 to i32
  %cmp35 = icmp eq i32 %conv34, 25
  %conv36 = zext i1 %cmp35 to i32
  %mul37 = mul nsw i32 %conv36, 16
  %18 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %19 = load i32, i32* %xoff.addr, align 4
  %div38 = sdiv i32 %19, 4
  %idxprom39 = sext i32 %div38 to i64
  %arrayidx40 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom39
  %20 = load i32, i32* %yoff.addr, align 4
  %sub41 = sub nsw i32 %20, 1
  %div42 = sdiv i32 %sub41, 4
  %idxprom43 = sext i32 %div42 to i64
  %arrayidx44 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx40, i64 0, i64 %idxprom43
  %21 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %21 to i32
  %cmp46 = icmp ne i32 %conv45, 3
  %conv47 = zext i1 %cmp46 to i32
  %22 = load [36 x i8]*, [36 x i8]** %nz.addr, align 8
  %23 = load i32, i32* %xoff.addr, align 4
  %idxprom48 = sext i32 %23 to i64
  %arrayidx49 = getelementptr inbounds [36 x i8], [36 x i8]* %22, i64 %idxprom48
  %24 = load i32, i32* %yoff.addr, align 4
  %sub50 = sub nsw i32 %24, 1
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [36 x i8], [36 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %25 to i32
  %mul54 = mul nsw i32 %conv47, %conv53
  %add55 = add nsw i32 %mul37, %mul54
  %conv56 = trunc i32 %add55 to i8
  store i8 %conv56, i8* %nB, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.then26, %if.end
  %26 = load i8, i8* %nA, align 1
  %conv58 = zext i8 %26 to i32
  %27 = load i8, i8* %nB, align 1
  %conv59 = zext i8 %27 to i32
  %add60 = add nsw i32 %conv58, %conv59
  %28 = load i32, i32* %yoff.addr, align 4
  %cmp61 = icmp sgt i32 %28, 0
  %conv62 = zext i1 %cmp61 to i32
  %29 = load i32, i32* %xoff.addr, align 4
  %cmp63 = icmp sgt i32 %29, 0
  %conv64 = zext i1 %cmp63 to i32
  %mul65 = mul nsw i32 %conv62, %conv64
  %add66 = add nsw i32 %add60, %mul65
  %30 = load i32, i32* %yoff.addr, align 4
  %cmp67 = icmp sgt i32 %30, 0
  %conv68 = zext i1 %cmp67 to i32
  %31 = load i32, i32* %xoff.addr, align 4
  %cmp69 = icmp sgt i32 %31, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul71 = mul nsw i32 %conv68, %conv70
  %shr = ashr i32 %add66, %mul71
  %conv72 = trunc i32 %shr to i8
  store i8 %conv72, i8* %nC, align 1
  %32 = load i8, i8* %nC, align 1
  ret i8 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @nc_Chroma([9 x i8]* %residualmode, [18 x i8]* %nzC, i32 %xoff, i32 %yoff) #0 !prof !91 {
entry:
  %residualmode.addr = alloca [9 x i8]*, align 8
  %nzC.addr = alloca [18 x i8]*, align 8
  %xoff.addr = alloca i32, align 4
  %yoff.addr = alloca i32, align 4
  %nA = alloca i8, align 1
  %nB = alloca i8, align 1
  %nC = alloca i8, align 1
  store [9 x i8]* %residualmode, [9 x i8]** %residualmode.addr, align 8
  store [18 x i8]* %nzC, [18 x i8]** %nzC.addr, align 8
  store i32 %xoff, i32* %xoff.addr, align 4
  store i32 %yoff, i32* %yoff.addr, align 4
  store i8 0, i8* %nA, align 1
  store i8 0, i8* %nB, align 1
  store i8 0, i8* %nC, align 1
  %0 = load i32, i32* %xoff.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end, !prof !92

if.then:                                          ; preds = %entry
  %1 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %2 = load i32, i32* %xoff.addr, align 4
  %sub = sub nsw i32 %2, 1
  %div = sdiv i32 %sub, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 %idxprom
  %3 = load i32, i32* %yoff.addr, align 4
  %div1 = sdiv i32 %3, 2
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %4 = load i8, i8* %arrayidx3, align 1
  %conv = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv, 25
  %conv5 = zext i1 %cmp4 to i32
  %mul = mul nsw i32 %conv5, 16
  %5 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %6 = load i32, i32* %xoff.addr, align 4
  %sub6 = sub nsw i32 %6, 1
  %div7 = sdiv i32 %sub6, 2
  %idxprom8 = sext i32 %div7 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 %idxprom8
  %7 = load i32, i32* %yoff.addr, align 4
  %div10 = sdiv i32 %7, 2
  %idxprom11 = sext i32 %div10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %cmp14 = icmp ne i32 %conv13, 3
  %conv15 = zext i1 %cmp14 to i32
  %9 = load [18 x i8]*, [18 x i8]** %nzC.addr, align 8
  %10 = load i32, i32* %xoff.addr, align 4
  %sub16 = sub nsw i32 %10, 1
  %idxprom17 = sext i32 %sub16 to i64
  %arrayidx18 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 %idxprom17
  %11 = load i32, i32* %yoff.addr, align 4
  %idxprom19 = sext i32 %11 to i64
  %arrayidx20 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %12 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %12 to i32
  %mul22 = mul nsw i32 %conv15, %conv21
  %add = add nsw i32 %mul, %mul22
  %conv23 = trunc i32 %add to i8
  store i8 %conv23, i8* %nA, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %yoff.addr, align 4
  %cmp24 = icmp sgt i32 %13, 0
  br i1 %cmp24, label %if.then26, label %if.end57, !prof !93

if.then26:                                        ; preds = %if.end
  %14 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %15 = load i32, i32* %xoff.addr, align 4
  %div27 = sdiv i32 %15, 2
  %idxprom28 = sext i32 %div27 to i64
  %arrayidx29 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom28
  %16 = load i32, i32* %yoff.addr, align 4
  %sub30 = sub nsw i32 %16, 1
  %div31 = sdiv i32 %sub30, 2
  %idxprom32 = sext i32 %div31 to i64
  %arrayidx33 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx29, i64 0, i64 %idxprom32
  %17 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %17 to i32
  %cmp35 = icmp eq i32 %conv34, 25
  %conv36 = zext i1 %cmp35 to i32
  %mul37 = mul nsw i32 %conv36, 16
  %18 = load [9 x i8]*, [9 x i8]** %residualmode.addr, align 8
  %19 = load i32, i32* %xoff.addr, align 4
  %div38 = sdiv i32 %19, 2
  %idxprom39 = sext i32 %div38 to i64
  %arrayidx40 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom39
  %20 = load i32, i32* %yoff.addr, align 4
  %sub41 = sub nsw i32 %20, 1
  %div42 = sdiv i32 %sub41, 2
  %idxprom43 = sext i32 %div42 to i64
  %arrayidx44 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx40, i64 0, i64 %idxprom43
  %21 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %21 to i32
  %cmp46 = icmp ne i32 %conv45, 3
  %conv47 = zext i1 %cmp46 to i32
  %22 = load [18 x i8]*, [18 x i8]** %nzC.addr, align 8
  %23 = load i32, i32* %xoff.addr, align 4
  %idxprom48 = sext i32 %23 to i64
  %arrayidx49 = getelementptr inbounds [18 x i8], [18 x i8]* %22, i64 %idxprom48
  %24 = load i32, i32* %yoff.addr, align 4
  %sub50 = sub nsw i32 %24, 1
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %25 to i32
  %mul54 = mul nsw i32 %conv47, %conv53
  %add55 = add nsw i32 %mul37, %mul54
  %conv56 = trunc i32 %add55 to i8
  store i8 %conv56, i8* %nB, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.then26, %if.end
  %26 = load i8, i8* %nA, align 1
  %conv58 = zext i8 %26 to i32
  %27 = load i8, i8* %nB, align 1
  %conv59 = zext i8 %27 to i32
  %add60 = add nsw i32 %conv58, %conv59
  %28 = load i32, i32* %yoff.addr, align 4
  %cmp61 = icmp sgt i32 %28, 0
  %conv62 = zext i1 %cmp61 to i32
  %29 = load i32, i32* %xoff.addr, align 4
  %cmp63 = icmp sgt i32 %29, 0
  %conv64 = zext i1 %cmp63 to i32
  %mul65 = mul nsw i32 %conv62, %conv64
  %add66 = add nsw i32 %add60, %mul65
  %30 = load i32, i32* %yoff.addr, align 4
  %cmp67 = icmp sgt i32 %30, 0
  %conv68 = zext i1 %cmp67 to i32
  %31 = load i32, i32* %xoff.addr, align 4
  %cmp69 = icmp sgt i32 %31, 0
  %conv70 = zext i1 %cmp69 to i32
  %mul71 = mul nsw i32 %conv68, %conv70
  %shr = ashr i32 %add66, %mul71
  %conv72 = trunc i32 %shr to i8
  store i8 %conv72, i8* %nC, align 1
  %32 = load i8, i8* %nC, align 1
  ret i8 %32
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 3128}
!30 = !{!"branch_weights", i32 1, i32 3129}
!31 = !{!"branch_weights", i32 79, i32 3051}
!32 = !{!"branch_weights", i32 5, i32 75}
!33 = !{!"branch_weights", i32 12201, i32 3051}
!34 = !{!"branch_weights", i32 207401, i32 12201}
!35 = !{!"function_entry_count", i64 278}
!36 = !{!"branch_weights", i32 1113, i32 279}
!37 = !{!"branch_weights", i32 5561, i32 1113}
!38 = !{!"function_entry_count", i64 1660}
!39 = !{!"branch_weights", i32 24901, i32 1661}
!40 = !{!"function_entry_count", i64 182}
!41 = !{!"branch_weights", i32 729, i32 183}
!42 = !{!"function_entry_count", i64 2418}
!43 = !{!"branch_weights", i32 75, i32 2345}
!44 = !{!"branch_weights", i32 36271, i32 2419}
!45 = !{!"function_entry_count", i64 2925}
!46 = !{!"branch_weights", i32 3617, i32 2926}
!47 = !{!"branch_weights", i32 142, i32 2910}
!48 = !{!"branch_weights", i32 50049, i32 3129}
!49 = !{!"branch_weights", i32 1661, i32 1469}
!50 = !{!"branch_weights", i32 25, i32 1637}
!51 = !{!"branch_weights", i32 5265, i32 1661}
!52 = !{!"branch_weights", i32 2591, i32 2675}
!53 = !{!"branch_weights", i32 1900, i32 776}
!54 = !{!"branch_weights", i32 7, i32 770}
!55 = !{!"branch_weights", i32 5, i32 1902}
!56 = !{!"branch_weights", i32 5, i32 1}
!57 = !{!"branch_weights", i32 3, i32 1900}
!58 = !{!"branch_weights", i32 3, i32 2673}
!59 = !{!"branch_weights", i32 3, i32 1}
!60 = !{!"branch_weights", i32 1, i32 2675}
!61 = !{!"branch_weights", i32 785, i32 1891}
!62 = !{!"branch_weights", i32 518, i32 268}
!63 = !{!"branch_weights", i32 1350, i32 1326}
!64 = !{!"branch_weights", i32 776, i32 1900}
!65 = !{!"branch_weights", i32 274, i32 2402}
!66 = !{!"branch_weights", i32 274, i32 1}
!67 = !{!"branch_weights", i32 1661, i32 1}
!68 = !{!"branch_weights", i32 3605, i32 1661}
!69 = !{!"branch_weights", i32 2356, i32 1250}
!70 = !{!"branch_weights", i32 229, i32 51}
!71 = !{!"branch_weights", i32 1, i32 229}
!72 = !{!"branch_weights", i32 512, i32 229}
!73 = !{!"branch_weights", i32 261, i32 252}
!74 = !{!"branch_weights", i32 134, i32 119}
!75 = !{!"branch_weights", i32 6, i32 114}
!76 = !{!"branch_weights", i32 6, i32 134}
!77 = !{!"branch_weights", i32 6, i32 1}
!78 = !{!"branch_weights", i32 1, i32 134}
!79 = !{!"branch_weights", i32 1, i32 252}
!80 = !{!"branch_weights", i32 119, i32 134}
!81 = !{!"branch_weights", i32 109, i32 11}
!82 = !{!"branch_weights", i32 117, i32 136}
!83 = !{!"branch_weights", i32 64, i32 189}
!84 = !{!"branch_weights", i32 64, i32 1}
!85 = !{!"branch_weights", i32 183, i32 47}
!86 = !{!"branch_weights", i32 284, i32 229}
!87 = !{!"branch_weights", i32 64, i32 221}
!88 = !{!"function_entry_count", i64 2456}
!89 = !{!"branch_weights", i32 2399, i32 59}
!90 = !{!"branch_weights", i32 2401, i32 57}
!91 = !{!"function_entry_count", i64 672}
!92 = !{!"branch_weights", i32 649, i32 25}
!93 = !{!"branch_weights", i32 625, i32 49}
