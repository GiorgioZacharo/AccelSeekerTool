; ModuleID = '../src/interpred.c'
source_filename = "../src/interpred.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }

@__const.processinterMbType.val_stepX = private unnamed_addr constant [30 x i8] c"\04\04\04\02\02\02\02\02\04\04\04\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\02", align 16
@__const.processinterMbType.val_stepY = private unnamed_addr constant [30 x i8] c"\04\04\02\04\02\02\02\02\04\04\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02\04\02", align 16
@__const.processinterMbType.val_listuse = private unnamed_addr constant [30 x [4 x i8]] [[4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\01\01\01\01", [4 x i8] c"\02\02\02\02", [4 x i8] c"\03\03\03\03", [4 x i8] c"\01\01\01\01", [4 x i8] c"\01\01\01\01", [4 x i8] c"\02\02\02\02", [4 x i8] c"\02\02\02\02", [4 x i8] c"\01\01\02\02", [4 x i8] c"\01\02\01\02", [4 x i8] c"\02\02\01\01", [4 x i8] c"\02\01\02\01", [4 x i8] c"\01\01\03\03", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\03\03", [4 x i8] c"\02\03\02\03", [4 x i8] c"\03\03\01\01", [4 x i8] c"\03\01\03\01", [4 x i8] c"\03\03\02\02", [4 x i8] c"\03\02\03\02", [4 x i8] c"\03\03\03\03", [4 x i8] c"\03\03\03\03", [4 x i8] zeroinitializer], align 16
@__const.processinterMbType.val_predir = private unnamed_addr constant [30 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] c"\02\02\01\01", [4 x i8] c"\01\03\01\03", [4 x i8] zeroinitializer], align 16
@__const.processinterMbType.val_sublistuse = private unnamed_addr constant [17 x i8] c"\01\01\01\01\00\01\02\03\01\01\02\02\03\03\01\02\03", align 16
@__const.processinterMbType.val_subX = private unnamed_addr constant [17 x i8] c"\02\02\01\01\02\02\02\02\02\01\02\01\02\01\01\01\01", align 16
@__const.processinterMbType.val_subY = private unnamed_addr constant [17 x i8] c"\02\01\02\01\02\02\02\02\01\02\01\02\01\02\01\01\01", align 16
@inter_tab = dso_local constant [6 x [6 x i32]] [[6 x i32] [i32 1, i32 -5, i32 20, i32 20, i32 -5, i32 1], [6 x i32] [i32 -5, i32 25, i32 -100, i32 -100, i32 25, i32 -5], [6 x i32] [i32 20, i32 -100, i32 400, i32 400, i32 -100, i32 20], [6 x i32] [i32 20, i32 -100, i32 400, i32 400, i32 -100, i32 20], [6 x i32] [i32 -5, i32 25, i32 -100, i32 -100, i32 25, i32 -5], [6 x i32] [i32 1, i32 -5, i32 20, i32 20, i32 -5, i32 1]], align 16
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @processinterMbType(i8 zeroext %mb_type, i8 zeroext %slice_type, %struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i8 zeroext %num_ref_idx_active1, i8 zeroext %num_ref_idx_active0, [2 x i8]* %refidx0, [2 x i8]* %refidx1, [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]* %mvd1, [18 x i8]* %globref0, [18 x i8]* %globref1, [36 x [2 x i32]]* %globmvd0, [36 x [2 x i32]]* %globmvd1, i32* %list0, i32* %list1, i32 %Mbaddress, i32 %skipflag, [2 x i8]* %refcol, [4 x [2 x i32]]* %mvcol, i8 zeroext %MbType) #0 !prof !29 {
entry:
  %mb_type.addr = alloca i8, align 1
  %slice_type.addr = alloca i8, align 1
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %num_ref_idx_active1.addr = alloca i8, align 1
  %num_ref_idx_active0.addr = alloca i8, align 1
  %refidx0.addr = alloca [2 x i8]*, align 8
  %refidx1.addr = alloca [2 x i8]*, align 8
  %mvd0.addr = alloca [4 x [2 x i32]]*, align 8
  %mvd1.addr = alloca [4 x [2 x i32]]*, align 8
  %globref0.addr = alloca [18 x i8]*, align 8
  %globref1.addr = alloca [18 x i8]*, align 8
  %globmvd0.addr = alloca [36 x [2 x i32]]*, align 8
  %globmvd1.addr = alloca [36 x [2 x i32]]*, align 8
  %list0.addr = alloca i32*, align 8
  %list1.addr = alloca i32*, align 8
  %Mbaddress.addr = alloca i32, align 4
  %skipflag.addr = alloca i32, align 4
  %refcol.addr = alloca [2 x i8]*, align 8
  %mvcol.addr = alloca [4 x [2 x i32]]*, align 8
  %MbType.addr = alloca i8, align 1
  %substepx = alloca [2 x [2 x i8]], align 1
  %substepy = alloca [2 x [2 x i8]], align 1
  %stepx = alloca i8, align 1
  %stepy = alloca i8, align 1
  %listuse = alloca [2 x [2 x i8]], align 1
  %preddir = alloca [2 x [2 x i8]], align 1
  %subtype = alloca i8, align 1
  %dflag = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %subx = alloca i32, align 4
  %suby = alloca i32, align 4
  %refidx = alloca i8, align 1
  %mvdx = alloca i32, align 4
  %mvdy = alloca i32, align 4
  %tpmmv = alloca [2 x i32], align 4
  %tpmmv1 = alloca [2 x i32], align 4
  %foundmv0 = alloca [2 x i32], align 4
  %foundmv1 = alloca [2 x i32], align 4
  %tmpref01 = alloca [2 x i8], align 1
  %startblkx = alloca i32, align 4
  %startblky = alloca i32, align 4
  %val_stepX = alloca [30 x i8], align 16
  %val_stepY = alloca [30 x i8], align 16
  %val_listuse = alloca [30 x [4 x i8]], align 16
  %val_predir = alloca [30 x [4 x i8]], align 16
  %val_sublistuse = alloca [17 x i8], align 16
  %val_subX = alloca [17 x i8], align 16
  %val_subY = alloca [17 x i8], align 16
  %stpw = alloca i8, align 1
  %stph = alloca i8, align 1
  store i8 %mb_type, i8* %mb_type.addr, align 1
  store i8 %slice_type, i8* %slice_type.addr, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i8 %num_ref_idx_active1, i8* %num_ref_idx_active1.addr, align 1
  store i8 %num_ref_idx_active0, i8* %num_ref_idx_active0.addr, align 1
  store [2 x i8]* %refidx0, [2 x i8]** %refidx0.addr, align 8
  store [2 x i8]* %refidx1, [2 x i8]** %refidx1.addr, align 8
  store [4 x [2 x i32]]* %mvd0, [4 x [2 x i32]]** %mvd0.addr, align 8
  store [4 x [2 x i32]]* %mvd1, [4 x [2 x i32]]** %mvd1.addr, align 8
  store [18 x i8]* %globref0, [18 x i8]** %globref0.addr, align 8
  store [18 x i8]* %globref1, [18 x i8]** %globref1.addr, align 8
  store [36 x [2 x i32]]* %globmvd0, [36 x [2 x i32]]** %globmvd0.addr, align 8
  store [36 x [2 x i32]]* %globmvd1, [36 x [2 x i32]]** %globmvd1.addr, align 8
  store i32* %list0, i32** %list0.addr, align 8
  store i32* %list1, i32** %list1.addr, align 8
  store i32 %Mbaddress, i32* %Mbaddress.addr, align 4
  store i32 %skipflag, i32* %skipflag.addr, align 4
  store [2 x i8]* %refcol, [2 x i8]** %refcol.addr, align 8
  store [4 x [2 x i32]]* %mvcol, [4 x [2 x i32]]** %mvcol.addr, align 8
  store i8 %MbType, i8* %MbType.addr, align 1
  %0 = bitcast [2 x [2 x i8]]* %substepx to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 4, i1 false)
  %1 = bitcast [2 x [2 x i8]]* %substepy to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 4, i1 false)
  store i8 0, i8* %stepx, align 1
  store i8 0, i8* %stepy, align 1
  %2 = bitcast [2 x [2 x i8]]* %listuse to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 4, i1 false)
  %3 = bitcast [2 x [2 x i8]]* %preddir to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 4, i1 false)
  store i8 0, i8* %subtype, align 1
  store i8 0, i8* %dflag, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %subx, align 4
  store i32 0, i32* %suby, align 4
  store i8 0, i8* %refidx, align 1
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  %4 = bitcast [2 x i32]* %tpmmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 8, i1 false)
  %5 = bitcast [2 x i32]* %tpmmv1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 8, i1 false)
  %6 = bitcast [2 x i32]* %foundmv0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 8, i1 false)
  %7 = bitcast [2 x i32]* %foundmv1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 8, i1 false)
  %8 = bitcast [2 x i8]* %tmpref01 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 2, i1 false)
  %9 = load i32, i32* %Mbaddress.addr, align 4
  %rem = srem i32 %9, 11
  %mul = mul nsw i32 %rem, 4
  store i32 %mul, i32* %startblkx, align 4
  %10 = load i32, i32* %Mbaddress.addr, align 4
  %div = sdiv i32 %10, 11
  %mul1 = mul nsw i32 %div, 4
  store i32 %mul1, i32* %startblky, align 4
  %11 = bitcast [30 x i8]* %val_stepX to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.processinterMbType.val_stepX, i32 0, i32 0), i64 30, i1 false)
  %12 = bitcast [30 x i8]* %val_stepY to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.processinterMbType.val_stepY, i32 0, i32 0), i64 30, i1 false)
  %13 = bitcast [30 x [4 x i8]]* %val_listuse to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([30 x [4 x i8]], [30 x [4 x i8]]* @__const.processinterMbType.val_listuse, i32 0, i32 0, i32 0), i64 120, i1 false)
  %14 = bitcast [30 x [4 x i8]]* %val_predir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([30 x [4 x i8]], [30 x [4 x i8]]* @__const.processinterMbType.val_predir, i32 0, i32 0, i32 0), i64 120, i1 false)
  %15 = bitcast [17 x i8]* %val_sublistuse to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_sublistuse, i32 0, i32 0), i64 17, i1 false)
  %16 = bitcast [17 x i8]* %val_subX to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_subX, i32 0, i32 0), i64 17, i1 false)
  %17 = bitcast [17 x i8]* %val_subY to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.processinterMbType.val_subY, i32 0, i32 0), i64 17, i1 false)
  %18 = load i8, i8* %MbType.addr, align 1
  %idxprom = zext i8 %18 to i64
  %arrayidx = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom
  %arrayidx2 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 0
  %19 = load i8, i8* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 0
  %arrayidx4 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx3, i64 0, i64 0
  store i8 %19, i8* %arrayidx4, align 1
  %20 = load i8, i8* %MbType.addr, align 1
  %idxprom5 = zext i8 %20 to i64
  %arrayidx6 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom5
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 1
  %21 = load i8, i8* %arrayidx7, align 1
  %arrayidx8 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 1
  %arrayidx9 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx8, i64 0, i64 0
  store i8 %21, i8* %arrayidx9, align 1
  %22 = load i8, i8* %MbType.addr, align 1
  %idxprom10 = zext i8 %22 to i64
  %arrayidx11 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i64 0, i64 2
  %23 = load i8, i8* %arrayidx12, align 2
  %arrayidx13 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 0
  %arrayidx14 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx13, i64 0, i64 1
  store i8 %23, i8* %arrayidx14, align 1
  %24 = load i8, i8* %MbType.addr, align 1
  %idxprom15 = zext i8 %24 to i64
  %arrayidx16 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_listuse, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx16, i64 0, i64 3
  %25 = load i8, i8* %arrayidx17, align 1
  %arrayidx18 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 1
  %arrayidx19 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx18, i64 0, i64 1
  store i8 %25, i8* %arrayidx19, align 1
  %26 = load i8, i8* %MbType.addr, align 1
  %idxprom20 = zext i8 %26 to i64
  %arrayidx21 = getelementptr inbounds [30 x i8], [30 x i8]* %val_stepX, i64 0, i64 %idxprom20
  %27 = load i8, i8* %arrayidx21, align 1
  store i8 %27, i8* %stepx, align 1
  %28 = load i8, i8* %MbType.addr, align 1
  %idxprom22 = zext i8 %28 to i64
  %arrayidx23 = getelementptr inbounds [30 x i8], [30 x i8]* %val_stepY, i64 0, i64 %idxprom22
  %29 = load i8, i8* %arrayidx23, align 1
  store i8 %29, i8* %stepy, align 1
  %30 = load i8, i8* %stepx, align 1
  %arrayidx24 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 0
  %arrayidx25 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx24, i64 0, i64 0
  store i8 %30, i8* %arrayidx25, align 1
  %31 = load i8, i8* %stepy, align 1
  %arrayidx26 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 0
  %arrayidx27 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx26, i64 0, i64 0
  store i8 %31, i8* %arrayidx27, align 1
  %32 = load i8, i8* %stepx, align 1
  %arrayidx28 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 0
  %arrayidx29 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx28, i64 0, i64 1
  store i8 %32, i8* %arrayidx29, align 1
  %33 = load i8, i8* %stepy, align 1
  %arrayidx30 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 0
  %arrayidx31 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx30, i64 0, i64 1
  store i8 %33, i8* %arrayidx31, align 1
  %34 = load i8, i8* %stepx, align 1
  %arrayidx32 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 1
  %arrayidx33 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx32, i64 0, i64 0
  store i8 %34, i8* %arrayidx33, align 1
  %35 = load i8, i8* %stepy, align 1
  %arrayidx34 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 1
  %arrayidx35 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx34, i64 0, i64 0
  store i8 %35, i8* %arrayidx35, align 1
  %36 = load i8, i8* %stepx, align 1
  %arrayidx36 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 1
  %arrayidx37 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx36, i64 0, i64 1
  store i8 %36, i8* %arrayidx37, align 1
  %37 = load i8, i8* %stepy, align 1
  %arrayidx38 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 1
  %arrayidx39 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx38, i64 0, i64 1
  store i8 %37, i8* %arrayidx39, align 1
  %38 = load i8, i8* %MbType.addr, align 1
  %idxprom40 = zext i8 %38 to i64
  %arrayidx41 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx41, i64 0, i64 0
  %39 = load i8, i8* %arrayidx42, align 4
  %arrayidx43 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 0
  %arrayidx44 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx43, i64 0, i64 0
  store i8 %39, i8* %arrayidx44, align 1
  %40 = load i8, i8* %MbType.addr, align 1
  %idxprom45 = zext i8 %40 to i64
  %arrayidx46 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom45
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx46, i64 0, i64 1
  %41 = load i8, i8* %arrayidx47, align 1
  %arrayidx48 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 1
  %arrayidx49 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx48, i64 0, i64 0
  store i8 %41, i8* %arrayidx49, align 1
  %42 = load i8, i8* %MbType.addr, align 1
  %idxprom50 = zext i8 %42 to i64
  %arrayidx51 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom50
  %arrayidx52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i64 0, i64 2
  %43 = load i8, i8* %arrayidx52, align 2
  %arrayidx53 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 0
  %arrayidx54 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx53, i64 0, i64 1
  store i8 %43, i8* %arrayidx54, align 1
  %44 = load i8, i8* %MbType.addr, align 1
  %idxprom55 = zext i8 %44 to i64
  %arrayidx56 = getelementptr inbounds [30 x [4 x i8]], [30 x [4 x i8]]* %val_predir, i64 0, i64 %idxprom55
  %arrayidx57 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx56, i64 0, i64 3
  %45 = load i8, i8* %arrayidx57, align 1
  %arrayidx58 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 1
  %arrayidx59 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx58, i64 0, i64 1
  store i8 %45, i8* %arrayidx59, align 1
  %46 = load i8, i8* %MbType.addr, align 1
  %conv = zext i8 %46 to i32
  %cmp = icmp eq i32 %conv, 5
  br i1 %cmp, label %if.then, label %lor.lhs.false, !prof !30

lor.lhs.false:                                    ; preds = %entry
  %47 = load i8, i8* %MbType.addr, align 1
  %conv61 = zext i8 %47 to i32
  %cmp62 = icmp eq i32 %conv61, 29
  br i1 %cmp62, label %if.then, label %if.end, !prof !31

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc91, %if.then
  %48 = load i32, i32* %i, align 4
  %cmp64 = icmp slt i32 %48, 2
  br i1 %cmp64, label %for.body, label %for.end93, !prof !32

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc, %for.body
  %49 = load i32, i32* %j, align 4
  %cmp67 = icmp slt i32 %49, 2
  br i1 %cmp67, label %for.body69, label %for.end, !prof !33

for.body69:                                       ; preds = %for.cond66
  %50 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %51 = load i8*, i8** %nalu_buf.addr, align 8
  %52 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @u_e(%struct.NALU_t* %50, i8* %51, i64* %52)
  %53 = load i8, i8* %slice_type.addr, align 1
  %conv70 = zext i8 %53 to i32
  %mul71 = mul nsw i32 %conv70, 4
  %add = add i32 %call, %mul71
  %conv72 = trunc i32 %add to i8
  store i8 %conv72, i8* %subtype, align 1
  %54 = load i8, i8* %subtype, align 1
  %idxprom73 = zext i8 %54 to i64
  %arrayidx74 = getelementptr inbounds [17 x i8], [17 x i8]* %val_subX, i64 0, i64 %idxprom73
  %55 = load i8, i8* %arrayidx74, align 1
  %56 = load i32, i32* %j, align 4
  %idxprom75 = sext i32 %56 to i64
  %arrayidx76 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom75
  %57 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %57 to i64
  %arrayidx78 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx76, i64 0, i64 %idxprom77
  store i8 %55, i8* %arrayidx78, align 1
  %58 = load i8, i8* %subtype, align 1
  %idxprom79 = zext i8 %58 to i64
  %arrayidx80 = getelementptr inbounds [17 x i8], [17 x i8]* %val_subY, i64 0, i64 %idxprom79
  %59 = load i8, i8* %arrayidx80, align 1
  %60 = load i32, i32* %j, align 4
  %idxprom81 = sext i32 %60 to i64
  %arrayidx82 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom81
  %61 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %61 to i64
  %arrayidx84 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx82, i64 0, i64 %idxprom83
  store i8 %59, i8* %arrayidx84, align 1
  %62 = load i8, i8* %subtype, align 1
  %idxprom85 = zext i8 %62 to i64
  %arrayidx86 = getelementptr inbounds [17 x i8], [17 x i8]* %val_sublistuse, i64 0, i64 %idxprom85
  %63 = load i8, i8* %arrayidx86, align 1
  %64 = load i32, i32* %j, align 4
  %idxprom87 = sext i32 %64 to i64
  %arrayidx88 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom87
  %65 = load i32, i32* %i, align 4
  %idxprom89 = sext i32 %65 to i64
  %arrayidx90 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx88, i64 0, i64 %idxprom89
  store i8 %63, i8* %arrayidx90, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body69
  %66 = load i32, i32* %j, align 4
  %inc = add nsw i32 %66, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond66

for.end:                                          ; preds = %for.cond66
  br label %for.inc91

for.inc91:                                        ; preds = %for.end
  %67 = load i32, i32* %i, align 4
  %inc92 = add nsw i32 %67, 1
  store i32 %inc92, i32* %i, align 4
  br label %for.cond

for.end93:                                        ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end93, %lor.lhs.false
  %68 = load i8, i8* %MbType.addr, align 1
  %conv94 = zext i8 %68 to i32
  %cmp95 = icmp eq i32 %conv94, 6
  br i1 %cmp95, label %cond.true, label %lor.lhs.false97, !prof !34

lor.lhs.false97:                                  ; preds = %if.end
  %69 = load i8, i8* %MbType.addr, align 1
  %conv98 = zext i8 %69 to i32
  %cmp99 = icmp eq i32 %conv98, 7
  br i1 %cmp99, label %cond.true, label %cond.false, !prof !35

cond.true:                                        ; preds = %lor.lhs.false97, %if.end
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false97
  %70 = load i32, i32* %skipflag.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %70, %cond.false ]
  store i32 %cond, i32* %skipflag.addr, align 4
  %71 = load i8, i8* %MbType.addr, align 1
  %conv101 = zext i8 %71 to i32
  %cmp102 = icmp eq i32 %conv101, 0
  br i1 %cmp102, label %if.then108, label %lor.lhs.false104, !prof !36

lor.lhs.false104:                                 ; preds = %cond.end
  %72 = load i8, i8* %MbType.addr, align 1
  %conv105 = zext i8 %72 to i32
  %cmp106 = icmp eq i32 %conv105, 5
  br i1 %cmp106, label %if.then108, label %if.else, !prof !37

if.then108:                                       ; preds = %lor.lhs.false104, %cond.end
  store i32 0, i32* %i, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc144, %if.then108
  %73 = load i32, i32* %i, align 4
  %cmp110 = icmp slt i32 %73, 2
  br i1 %cmp110, label %for.body112, label %for.end146, !prof !38

for.body112:                                      ; preds = %for.cond109
  store i32 0, i32* %j, align 4
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc141, %for.body112
  %74 = load i32, i32* %j, align 4
  %cmp114 = icmp slt i32 %74, 2
  br i1 %cmp114, label %for.body116, label %for.end143, !prof !39

for.body116:                                      ; preds = %for.cond113
  %75 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %76 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %76 to i64
  %arrayidx118 = getelementptr inbounds [2 x i8], [2 x i8]* %75, i64 %idxprom117
  %77 = load i32, i32* %j, align 4
  %idxprom119 = sext i32 %77 to i64
  %arrayidx120 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx118, i64 0, i64 %idxprom119
  store i8 0, i8* %arrayidx120, align 1
  %78 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %79 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %79 to i64
  %arrayidx122 = getelementptr inbounds [2 x i8], [2 x i8]* %78, i64 %idxprom121
  %80 = load i32, i32* %j, align 4
  %idxprom123 = sext i32 %80 to i64
  %arrayidx124 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx122, i64 0, i64 %idxprom123
  store i8 -1, i8* %arrayidx124, align 1
  %81 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %82 = load i32, i32* %startblkx, align 4
  %div125 = sdiv i32 %82, 2
  %83 = load i32, i32* %j, align 4
  %add126 = add nsw i32 %div125, %83
  %idxprom127 = sext i32 %add126 to i64
  %arrayidx128 = getelementptr inbounds [18 x i8], [18 x i8]* %81, i64 %idxprom127
  %84 = load i32, i32* %startblky, align 4
  %div129 = sdiv i32 %84, 2
  %85 = load i32, i32* %i, align 4
  %add130 = add nsw i32 %div129, %85
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx128, i64 0, i64 %idxprom131
  store i8 0, i8* %arrayidx132, align 1
  %86 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %87 = load i32, i32* %startblkx, align 4
  %div133 = sdiv i32 %87, 2
  %88 = load i32, i32* %j, align 4
  %add134 = add nsw i32 %div133, %88
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds [18 x i8], [18 x i8]* %86, i64 %idxprom135
  %89 = load i32, i32* %startblky, align 4
  %div137 = sdiv i32 %89, 2
  %90 = load i32, i32* %i, align 4
  %add138 = add nsw i32 %div137, %90
  %idxprom139 = sext i32 %add138 to i64
  %arrayidx140 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx136, i64 0, i64 %idxprom139
  store i8 -1, i8* %arrayidx140, align 1
  br label %for.inc141

for.inc141:                                       ; preds = %for.body116
  %91 = load i32, i32* %j, align 4
  %inc142 = add nsw i32 %91, 1
  store i32 %inc142, i32* %j, align 4
  br label %for.cond113

for.end143:                                       ; preds = %for.cond113
  br label %for.inc144

for.inc144:                                       ; preds = %for.end143
  %92 = load i32, i32* %i, align 4
  %inc145 = add nsw i32 %92, 1
  store i32 %inc145, i32* %i, align 4
  br label %for.cond109

for.end146:                                       ; preds = %for.cond109
  br label %if.end453

if.else:                                          ; preds = %lor.lhs.false104
  %93 = load i8, i8* %num_ref_idx_active0.addr, align 1
  %conv147 = zext i8 %93 to i32
  %cmp148 = icmp sgt i32 %conv147, 0
  br i1 %cmp148, label %if.then150, label %if.else284, !prof !40

if.then150:                                       ; preds = %if.else
  store i32 0, i32* %y, align 4
  br label %for.cond151

for.cond151:                                      ; preds = %for.inc279, %if.then150
  %94 = load i32, i32* %y, align 4
  %cmp152 = icmp slt i32 %94, 2
  br i1 %cmp152, label %for.body154, label %for.end283, !prof !41

for.body154:                                      ; preds = %for.cond151
  store i32 0, i32* %x, align 4
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc274, %for.body154
  %95 = load i32, i32* %x, align 4
  %cmp156 = icmp slt i32 %95, 2
  br i1 %cmp156, label %for.body158, label %for.end278, !prof !42

for.body158:                                      ; preds = %for.cond155
  %96 = load i32, i32* %x, align 4
  %idxprom159 = sext i32 %96 to i64
  %arrayidx160 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom159
  %97 = load i32, i32* %y, align 4
  %idxprom161 = sext i32 %97 to i64
  %arrayidx162 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx160, i64 0, i64 %idxprom161
  %98 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %98 to i32
  %cmp164 = icmp eq i32 %conv163, 0
  br i1 %cmp164, label %if.then166, label %if.else194, !prof !43

if.then166:                                       ; preds = %for.body158
  %99 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %100 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i32 0, i32 0
  %101 = load i32, i32* %startblkx, align 4
  %102 = load i32, i32* %startblky, align 4
  %call167 = call signext i8 @find_directzeroflag([18 x i8]* %99, [18 x i8]* %100, i8* %arraydecay, i32 %101, i32 %102)
  store i8 %call167, i8* %dflag, align 1
  %arrayidx168 = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i64 0, i64 0
  %103 = load i8, i8* %arrayidx168, align 1
  %104 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %105 = load i32, i32* %startblkx, align 4
  %div169 = sdiv i32 %105, 2
  %106 = load i32, i32* %x, align 4
  %add170 = add nsw i32 %div169, %106
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [18 x i8], [18 x i8]* %104, i64 %idxprom171
  %107 = load i32, i32* %startblky, align 4
  %div173 = sdiv i32 %107, 2
  %108 = load i32, i32* %y, align 4
  %add174 = add nsw i32 %div173, %108
  %idxprom175 = sext i32 %add174 to i64
  %arrayidx176 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx172, i64 0, i64 %idxprom175
  store i8 %103, i8* %arrayidx176, align 1
  %109 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %110 = load i32, i32* %x, align 4
  %idxprom177 = sext i32 %110 to i64
  %arrayidx178 = getelementptr inbounds [2 x i8], [2 x i8]* %109, i64 %idxprom177
  %111 = load i32, i32* %y, align 4
  %idxprom179 = sext i32 %111 to i64
  %arrayidx180 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx178, i64 0, i64 %idxprom179
  store i8 %103, i8* %arrayidx180, align 1
  %arrayidx181 = getelementptr inbounds [2 x i8], [2 x i8]* %tmpref01, i64 0, i64 1
  %112 = load i8, i8* %arrayidx181, align 1
  %113 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %114 = load i32, i32* %startblkx, align 4
  %div182 = sdiv i32 %114, 2
  %115 = load i32, i32* %x, align 4
  %add183 = add nsw i32 %div182, %115
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds [18 x i8], [18 x i8]* %113, i64 %idxprom184
  %116 = load i32, i32* %startblky, align 4
  %div186 = sdiv i32 %116, 2
  %117 = load i32, i32* %y, align 4
  %add187 = add nsw i32 %div186, %117
  %idxprom188 = sext i32 %add187 to i64
  %arrayidx189 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx185, i64 0, i64 %idxprom188
  store i8 %112, i8* %arrayidx189, align 1
  %118 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %119 = load i32, i32* %x, align 4
  %idxprom190 = sext i32 %119 to i64
  %arrayidx191 = getelementptr inbounds [2 x i8], [2 x i8]* %118, i64 %idxprom190
  %120 = load i32, i32* %y, align 4
  %idxprom192 = sext i32 %120 to i64
  %arrayidx193 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx191, i64 0, i64 %idxprom192
  store i8 %112, i8* %arrayidx193, align 1
  br label %if.end273

if.else194:                                       ; preds = %for.body158
  %121 = load i32, i32* %x, align 4
  %idxprom195 = sext i32 %121 to i64
  %arrayidx196 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom195
  %122 = load i32, i32* %y, align 4
  %idxprom197 = sext i32 %122 to i64
  %arrayidx198 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx196, i64 0, i64 %idxprom197
  %123 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %123 to i32
  %and = and i32 %conv199, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then200, label %if.else237, !prof !44

if.then200:                                       ; preds = %if.else194
  %124 = load i8, i8* %num_ref_idx_active0.addr, align 1
  %conv201 = zext i8 %124 to i32
  %125 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %126 = load i8*, i8** %nalu_buf.addr, align 8
  %127 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call202 = call zeroext i8 @t_e(i32 %conv201, %struct.NALU_t* %125, i8* %126, i64* %127)
  store i8 %call202, i8* %refidx, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond203

for.cond203:                                      ; preds = %for.inc234, %if.then200
  %128 = load i32, i32* %i, align 4
  %129 = load i8, i8* %stepy, align 1
  %conv204 = zext i8 %129 to i32
  %div205 = sdiv i32 %conv204, 2
  %cmp206 = icmp slt i32 %128, %div205
  br i1 %cmp206, label %for.body208, label %for.end236, !prof !45

for.body208:                                      ; preds = %for.cond203
  store i32 0, i32* %j, align 4
  br label %for.cond209

for.cond209:                                      ; preds = %for.inc231, %for.body208
  %130 = load i32, i32* %j, align 4
  %131 = load i8, i8* %stepx, align 1
  %conv210 = zext i8 %131 to i32
  %div211 = sdiv i32 %conv210, 2
  %cmp212 = icmp slt i32 %130, %div211
  br i1 %cmp212, label %for.body214, label %for.end233, !prof !45

for.body214:                                      ; preds = %for.cond209
  %132 = load i8, i8* %refidx, align 1
  %133 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %134 = load i32, i32* %x, align 4
  %135 = load i32, i32* %j, align 4
  %add215 = add nsw i32 %134, %135
  %idxprom216 = sext i32 %add215 to i64
  %arrayidx217 = getelementptr inbounds [2 x i8], [2 x i8]* %133, i64 %idxprom216
  %136 = load i32, i32* %y, align 4
  %137 = load i32, i32* %i, align 4
  %add218 = add nsw i32 %136, %137
  %idxprom219 = sext i32 %add218 to i64
  %arrayidx220 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx217, i64 0, i64 %idxprom219
  store i8 %132, i8* %arrayidx220, align 1
  %138 = load i8, i8* %refidx, align 1
  %139 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %140 = load i32, i32* %startblkx, align 4
  %div221 = sdiv i32 %140, 2
  %141 = load i32, i32* %x, align 4
  %add222 = add nsw i32 %div221, %141
  %142 = load i32, i32* %j, align 4
  %add223 = add nsw i32 %add222, %142
  %idxprom224 = sext i32 %add223 to i64
  %arrayidx225 = getelementptr inbounds [18 x i8], [18 x i8]* %139, i64 %idxprom224
  %143 = load i32, i32* %startblky, align 4
  %div226 = sdiv i32 %143, 2
  %144 = load i32, i32* %y, align 4
  %add227 = add nsw i32 %div226, %144
  %145 = load i32, i32* %i, align 4
  %add228 = add nsw i32 %add227, %145
  %idxprom229 = sext i32 %add228 to i64
  %arrayidx230 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx225, i64 0, i64 %idxprom229
  store i8 %138, i8* %arrayidx230, align 1
  br label %for.inc231

for.inc231:                                       ; preds = %for.body214
  %146 = load i32, i32* %j, align 4
  %inc232 = add nsw i32 %146, 1
  store i32 %inc232, i32* %j, align 4
  br label %for.cond209

for.end233:                                       ; preds = %for.cond209
  br label %for.inc234

for.inc234:                                       ; preds = %for.end233
  %147 = load i32, i32* %i, align 4
  %inc235 = add nsw i32 %147, 1
  store i32 %inc235, i32* %i, align 4
  br label %for.cond203

for.end236:                                       ; preds = %for.cond203
  br label %if.end272

if.else237:                                       ; preds = %if.else194
  store i32 0, i32* %i, align 4
  br label %for.cond238

for.cond238:                                      ; preds = %for.inc269, %if.else237
  %148 = load i32, i32* %i, align 4
  %149 = load i8, i8* %stepy, align 1
  %conv239 = zext i8 %149 to i32
  %div240 = sdiv i32 %conv239, 2
  %cmp241 = icmp slt i32 %148, %div240
  br i1 %cmp241, label %for.body243, label %for.end271

for.body243:                                      ; preds = %for.cond238
  store i32 0, i32* %j, align 4
  br label %for.cond244

for.cond244:                                      ; preds = %for.inc266, %for.body243
  %150 = load i32, i32* %j, align 4
  %151 = load i8, i8* %stepx, align 1
  %conv245 = zext i8 %151 to i32
  %div246 = sdiv i32 %conv245, 2
  %cmp247 = icmp slt i32 %150, %div246
  br i1 %cmp247, label %for.body249, label %for.end268

for.body249:                                      ; preds = %for.cond244
  %152 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %153 = load i32, i32* %x, align 4
  %154 = load i32, i32* %j, align 4
  %add250 = add nsw i32 %153, %154
  %idxprom251 = sext i32 %add250 to i64
  %arrayidx252 = getelementptr inbounds [2 x i8], [2 x i8]* %152, i64 %idxprom251
  %155 = load i32, i32* %y, align 4
  %156 = load i32, i32* %i, align 4
  %add253 = add nsw i32 %155, %156
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx252, i64 0, i64 %idxprom254
  store i8 -1, i8* %arrayidx255, align 1
  %157 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %158 = load i32, i32* %startblkx, align 4
  %div256 = sdiv i32 %158, 2
  %159 = load i32, i32* %x, align 4
  %add257 = add nsw i32 %div256, %159
  %160 = load i32, i32* %j, align 4
  %add258 = add nsw i32 %add257, %160
  %idxprom259 = sext i32 %add258 to i64
  %arrayidx260 = getelementptr inbounds [18 x i8], [18 x i8]* %157, i64 %idxprom259
  %161 = load i32, i32* %startblky, align 4
  %div261 = sdiv i32 %161, 2
  %162 = load i32, i32* %y, align 4
  %add262 = add nsw i32 %div261, %162
  %163 = load i32, i32* %i, align 4
  %add263 = add nsw i32 %add262, %163
  %idxprom264 = sext i32 %add263 to i64
  %arrayidx265 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx260, i64 0, i64 %idxprom264
  store i8 -1, i8* %arrayidx265, align 1
  br label %for.inc266

for.inc266:                                       ; preds = %for.body249
  %164 = load i32, i32* %j, align 4
  %inc267 = add nsw i32 %164, 1
  store i32 %inc267, i32* %j, align 4
  br label %for.cond244

for.end268:                                       ; preds = %for.cond244
  br label %for.inc269

for.inc269:                                       ; preds = %for.end268
  %165 = load i32, i32* %i, align 4
  %inc270 = add nsw i32 %165, 1
  store i32 %inc270, i32* %i, align 4
  br label %for.cond238

for.end271:                                       ; preds = %for.cond238
  br label %if.end272

if.end272:                                        ; preds = %for.end271, %for.end236
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %if.then166
  br label %for.inc274

for.inc274:                                       ; preds = %if.end273
  %166 = load i8, i8* %stepx, align 1
  %conv275 = zext i8 %166 to i32
  %div276 = sdiv i32 %conv275, 2
  %167 = load i32, i32* %x, align 4
  %add277 = add nsw i32 %167, %div276
  store i32 %add277, i32* %x, align 4
  br label %for.cond155

for.end278:                                       ; preds = %for.cond155
  br label %for.inc279

for.inc279:                                       ; preds = %for.end278
  %168 = load i8, i8* %stepy, align 1
  %conv280 = zext i8 %168 to i32
  %div281 = sdiv i32 %conv280, 2
  %169 = load i32, i32* %y, align 4
  %add282 = add nsw i32 %169, %div281
  store i32 %add282, i32* %y, align 4
  br label %for.cond151

for.end283:                                       ; preds = %for.cond151
  br label %if.end311

if.else284:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond285

for.cond285:                                      ; preds = %for.inc308, %if.else284
  %170 = load i32, i32* %i, align 4
  %cmp286 = icmp slt i32 %170, 2
  br i1 %cmp286, label %for.body288, label %for.end310, !prof !46

for.body288:                                      ; preds = %for.cond285
  store i32 0, i32* %j, align 4
  br label %for.cond289

for.cond289:                                      ; preds = %for.inc305, %for.body288
  %171 = load i32, i32* %j, align 4
  %cmp290 = icmp slt i32 %171, 2
  br i1 %cmp290, label %for.body292, label %for.end307, !prof !47

for.body292:                                      ; preds = %for.cond289
  %172 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %173 = load i32, i32* %j, align 4
  %idxprom293 = sext i32 %173 to i64
  %arrayidx294 = getelementptr inbounds [2 x i8], [2 x i8]* %172, i64 %idxprom293
  %174 = load i32, i32* %i, align 4
  %idxprom295 = sext i32 %174 to i64
  %arrayidx296 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx294, i64 0, i64 %idxprom295
  store i8 0, i8* %arrayidx296, align 1
  %175 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %176 = load i32, i32* %startblkx, align 4
  %div297 = sdiv i32 %176, 2
  %177 = load i32, i32* %j, align 4
  %add298 = add nsw i32 %div297, %177
  %idxprom299 = sext i32 %add298 to i64
  %arrayidx300 = getelementptr inbounds [18 x i8], [18 x i8]* %175, i64 %idxprom299
  %178 = load i32, i32* %startblky, align 4
  %div301 = sdiv i32 %178, 2
  %179 = load i32, i32* %i, align 4
  %add302 = add nsw i32 %div301, %179
  %idxprom303 = sext i32 %add302 to i64
  %arrayidx304 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx300, i64 0, i64 %idxprom303
  store i8 0, i8* %arrayidx304, align 1
  br label %for.inc305

for.inc305:                                       ; preds = %for.body292
  %180 = load i32, i32* %j, align 4
  %inc306 = add nsw i32 %180, 1
  store i32 %inc306, i32* %j, align 4
  br label %for.cond289

for.end307:                                       ; preds = %for.cond289
  br label %for.inc308

for.inc308:                                       ; preds = %for.end307
  %181 = load i32, i32* %i, align 4
  %inc309 = add nsw i32 %181, 1
  store i32 %inc309, i32* %i, align 4
  br label %for.cond285

for.end310:                                       ; preds = %for.cond285
  br label %if.end311

if.end311:                                        ; preds = %for.end310, %for.end283
  %182 = load i8, i8* %num_ref_idx_active1.addr, align 1
  %conv312 = zext i8 %182 to i32
  %cmp313 = icmp sgt i32 %conv312, 0
  br i1 %cmp313, label %if.then315, label %if.else425, !prof !48

if.then315:                                       ; preds = %if.end311
  store i32 0, i32* %y, align 4
  br label %for.cond316

for.cond316:                                      ; preds = %for.inc420, %if.then315
  %183 = load i32, i32* %y, align 4
  %cmp317 = icmp slt i32 %183, 2
  br i1 %cmp317, label %for.body319, label %for.end424, !prof !49

for.body319:                                      ; preds = %for.cond316
  store i32 0, i32* %x, align 4
  br label %for.cond320

for.cond320:                                      ; preds = %for.inc415, %for.body319
  %184 = load i32, i32* %x, align 4
  %cmp321 = icmp slt i32 %184, 2
  br i1 %cmp321, label %for.body323, label %for.end419, !prof !50

for.body323:                                      ; preds = %for.cond320
  %185 = load i32, i32* %x, align 4
  %idxprom324 = sext i32 %185 to i64
  %arrayidx325 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom324
  %186 = load i32, i32* %y, align 4
  %idxprom326 = sext i32 %186 to i64
  %arrayidx327 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx325, i64 0, i64 %idxprom326
  %187 = load i8, i8* %arrayidx327, align 1
  %conv328 = zext i8 %187 to i32
  %cmp329 = icmp eq i32 %conv328, 0
  br i1 %cmp329, label %if.then331, label %if.else332, !prof !51

if.then331:                                       ; preds = %for.body323
  br label %if.end414

if.else332:                                       ; preds = %for.body323
  %188 = load i32, i32* %x, align 4
  %idxprom333 = sext i32 %188 to i64
  %arrayidx334 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom333
  %189 = load i32, i32* %y, align 4
  %idxprom335 = sext i32 %189 to i64
  %arrayidx336 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx334, i64 0, i64 %idxprom335
  %190 = load i8, i8* %arrayidx336, align 1
  %conv337 = zext i8 %190 to i32
  %and338 = and i32 %conv337, 2
  %cmp339 = icmp ne i32 %and338, 0
  br i1 %cmp339, label %if.then341, label %if.else378, !prof !52

if.then341:                                       ; preds = %if.else332
  %191 = load i8, i8* %num_ref_idx_active1.addr, align 1
  %conv342 = zext i8 %191 to i32
  %192 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %193 = load i8*, i8** %nalu_buf.addr, align 8
  %194 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call343 = call zeroext i8 @t_e(i32 %conv342, %struct.NALU_t* %192, i8* %193, i64* %194)
  store i8 %call343, i8* %refidx, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond344

for.cond344:                                      ; preds = %for.inc375, %if.then341
  %195 = load i32, i32* %i, align 4
  %196 = load i8, i8* %stepy, align 1
  %conv345 = zext i8 %196 to i32
  %div346 = sdiv i32 %conv345, 2
  %cmp347 = icmp slt i32 %195, %div346
  br i1 %cmp347, label %for.body349, label %for.end377

for.body349:                                      ; preds = %for.cond344
  store i32 0, i32* %j, align 4
  br label %for.cond350

for.cond350:                                      ; preds = %for.inc372, %for.body349
  %197 = load i32, i32* %j, align 4
  %198 = load i8, i8* %stepx, align 1
  %conv351 = zext i8 %198 to i32
  %div352 = sdiv i32 %conv351, 2
  %cmp353 = icmp slt i32 %197, %div352
  br i1 %cmp353, label %for.body355, label %for.end374

for.body355:                                      ; preds = %for.cond350
  %199 = load i8, i8* %refidx, align 1
  %200 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %201 = load i32, i32* %x, align 4
  %202 = load i32, i32* %j, align 4
  %add356 = add nsw i32 %201, %202
  %idxprom357 = sext i32 %add356 to i64
  %arrayidx358 = getelementptr inbounds [2 x i8], [2 x i8]* %200, i64 %idxprom357
  %203 = load i32, i32* %y, align 4
  %204 = load i32, i32* %i, align 4
  %add359 = add nsw i32 %203, %204
  %idxprom360 = sext i32 %add359 to i64
  %arrayidx361 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx358, i64 0, i64 %idxprom360
  store i8 %199, i8* %arrayidx361, align 1
  %205 = load i8, i8* %refidx, align 1
  %206 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %207 = load i32, i32* %startblkx, align 4
  %div362 = sdiv i32 %207, 2
  %208 = load i32, i32* %x, align 4
  %add363 = add nsw i32 %div362, %208
  %209 = load i32, i32* %j, align 4
  %add364 = add nsw i32 %add363, %209
  %idxprom365 = sext i32 %add364 to i64
  %arrayidx366 = getelementptr inbounds [18 x i8], [18 x i8]* %206, i64 %idxprom365
  %210 = load i32, i32* %startblky, align 4
  %div367 = sdiv i32 %210, 2
  %211 = load i32, i32* %y, align 4
  %add368 = add nsw i32 %div367, %211
  %212 = load i32, i32* %i, align 4
  %add369 = add nsw i32 %add368, %212
  %idxprom370 = sext i32 %add369 to i64
  %arrayidx371 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx366, i64 0, i64 %idxprom370
  store i8 %205, i8* %arrayidx371, align 1
  br label %for.inc372

for.inc372:                                       ; preds = %for.body355
  %213 = load i32, i32* %j, align 4
  %inc373 = add nsw i32 %213, 1
  store i32 %inc373, i32* %j, align 4
  br label %for.cond350

for.end374:                                       ; preds = %for.cond350
  br label %for.inc375

for.inc375:                                       ; preds = %for.end374
  %214 = load i32, i32* %i, align 4
  %inc376 = add nsw i32 %214, 1
  store i32 %inc376, i32* %i, align 4
  br label %for.cond344

for.end377:                                       ; preds = %for.cond344
  br label %if.end413

if.else378:                                       ; preds = %if.else332
  store i32 0, i32* %i, align 4
  br label %for.cond379

for.cond379:                                      ; preds = %for.inc410, %if.else378
  %215 = load i32, i32* %i, align 4
  %216 = load i8, i8* %stepy, align 1
  %conv380 = zext i8 %216 to i32
  %div381 = sdiv i32 %conv380, 2
  %cmp382 = icmp slt i32 %215, %div381
  br i1 %cmp382, label %for.body384, label %for.end412, !prof !53

for.body384:                                      ; preds = %for.cond379
  store i32 0, i32* %j, align 4
  br label %for.cond385

for.cond385:                                      ; preds = %for.inc407, %for.body384
  %217 = load i32, i32* %j, align 4
  %218 = load i8, i8* %stepx, align 1
  %conv386 = zext i8 %218 to i32
  %div387 = sdiv i32 %conv386, 2
  %cmp388 = icmp slt i32 %217, %div387
  br i1 %cmp388, label %for.body390, label %for.end409, !prof !54

for.body390:                                      ; preds = %for.cond385
  %219 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %220 = load i32, i32* %x, align 4
  %221 = load i32, i32* %j, align 4
  %add391 = add nsw i32 %220, %221
  %idxprom392 = sext i32 %add391 to i64
  %arrayidx393 = getelementptr inbounds [2 x i8], [2 x i8]* %219, i64 %idxprom392
  %222 = load i32, i32* %y, align 4
  %223 = load i32, i32* %i, align 4
  %add394 = add nsw i32 %222, %223
  %idxprom395 = sext i32 %add394 to i64
  %arrayidx396 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx393, i64 0, i64 %idxprom395
  store i8 -1, i8* %arrayidx396, align 1
  %224 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %225 = load i32, i32* %startblkx, align 4
  %div397 = sdiv i32 %225, 2
  %226 = load i32, i32* %x, align 4
  %add398 = add nsw i32 %div397, %226
  %227 = load i32, i32* %j, align 4
  %add399 = add nsw i32 %add398, %227
  %idxprom400 = sext i32 %add399 to i64
  %arrayidx401 = getelementptr inbounds [18 x i8], [18 x i8]* %224, i64 %idxprom400
  %228 = load i32, i32* %startblky, align 4
  %div402 = sdiv i32 %228, 2
  %229 = load i32, i32* %y, align 4
  %add403 = add nsw i32 %div402, %229
  %230 = load i32, i32* %i, align 4
  %add404 = add nsw i32 %add403, %230
  %idxprom405 = sext i32 %add404 to i64
  %arrayidx406 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx401, i64 0, i64 %idxprom405
  store i8 -1, i8* %arrayidx406, align 1
  br label %for.inc407

for.inc407:                                       ; preds = %for.body390
  %231 = load i32, i32* %j, align 4
  %inc408 = add nsw i32 %231, 1
  store i32 %inc408, i32* %j, align 4
  br label %for.cond385

for.end409:                                       ; preds = %for.cond385
  br label %for.inc410

for.inc410:                                       ; preds = %for.end409
  %232 = load i32, i32* %i, align 4
  %inc411 = add nsw i32 %232, 1
  store i32 %inc411, i32* %i, align 4
  br label %for.cond379

for.end412:                                       ; preds = %for.cond379
  br label %if.end413

if.end413:                                        ; preds = %for.end412, %for.end377
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.then331
  br label %for.inc415

for.inc415:                                       ; preds = %if.end414
  %233 = load i8, i8* %stepx, align 1
  %conv416 = zext i8 %233 to i32
  %div417 = sdiv i32 %conv416, 2
  %234 = load i32, i32* %x, align 4
  %add418 = add nsw i32 %234, %div417
  store i32 %add418, i32* %x, align 4
  br label %for.cond320

for.end419:                                       ; preds = %for.cond320
  br label %for.inc420

for.inc420:                                       ; preds = %for.end419
  %235 = load i8, i8* %stepy, align 1
  %conv421 = zext i8 %235 to i32
  %div422 = sdiv i32 %conv421, 2
  %236 = load i32, i32* %y, align 4
  %add423 = add nsw i32 %236, %div422
  store i32 %add423, i32* %y, align 4
  br label %for.cond316

for.end424:                                       ; preds = %for.cond316
  br label %if.end452

if.else425:                                       ; preds = %if.end311
  store i32 0, i32* %i, align 4
  br label %for.cond426

for.cond426:                                      ; preds = %for.inc449, %if.else425
  %237 = load i32, i32* %i, align 4
  %cmp427 = icmp slt i32 %237, 2
  br i1 %cmp427, label %for.body429, label %for.end451

for.body429:                                      ; preds = %for.cond426
  store i32 0, i32* %j, align 4
  br label %for.cond430

for.cond430:                                      ; preds = %for.inc446, %for.body429
  %238 = load i32, i32* %j, align 4
  %cmp431 = icmp slt i32 %238, 2
  br i1 %cmp431, label %for.body433, label %for.end448

for.body433:                                      ; preds = %for.cond430
  %239 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %240 = load i32, i32* %j, align 4
  %idxprom434 = sext i32 %240 to i64
  %arrayidx435 = getelementptr inbounds [2 x i8], [2 x i8]* %239, i64 %idxprom434
  %241 = load i32, i32* %i, align 4
  %idxprom436 = sext i32 %241 to i64
  %arrayidx437 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx435, i64 0, i64 %idxprom436
  store i8 0, i8* %arrayidx437, align 1
  %242 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %243 = load i32, i32* %startblkx, align 4
  %div438 = sdiv i32 %243, 2
  %244 = load i32, i32* %j, align 4
  %add439 = add nsw i32 %div438, %244
  %idxprom440 = sext i32 %add439 to i64
  %arrayidx441 = getelementptr inbounds [18 x i8], [18 x i8]* %242, i64 %idxprom440
  %245 = load i32, i32* %startblky, align 4
  %div442 = sdiv i32 %245, 2
  %246 = load i32, i32* %i, align 4
  %add443 = add nsw i32 %div442, %246
  %idxprom444 = sext i32 %add443 to i64
  %arrayidx445 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx441, i64 0, i64 %idxprom444
  store i8 0, i8* %arrayidx445, align 1
  br label %for.inc446

for.inc446:                                       ; preds = %for.body433
  %247 = load i32, i32* %j, align 4
  %inc447 = add nsw i32 %247, 1
  store i32 %inc447, i32* %j, align 4
  br label %for.cond430

for.end448:                                       ; preds = %for.cond430
  br label %for.inc449

for.inc449:                                       ; preds = %for.end448
  %248 = load i32, i32* %i, align 4
  %inc450 = add nsw i32 %248, 1
  store i32 %inc450, i32* %i, align 4
  br label %for.cond426

for.end451:                                       ; preds = %for.cond426
  br label %if.end452

if.end452:                                        ; preds = %for.end451, %for.end424
  br label %if.end453

if.end453:                                        ; preds = %if.end452, %for.end146
  store i8 0, i8* %stpw, align 1
  store i8 0, i8* %stph, align 1
  store i32 0, i32* %y, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc747, %if.end453
  %249 = load i32, i32* %y, align 4
  %cmp455 = icmp slt i32 %249, 4
  br i1 %cmp455, label %for.body457, label %for.end750, !prof !55

for.body457:                                      ; preds = %for.cond454
  store i32 0, i32* %x, align 4
  br label %for.cond458

for.cond458:                                      ; preds = %for.inc743, %for.body457
  %250 = load i32, i32* %x, align 4
  %cmp459 = icmp slt i32 %250, 4
  br i1 %cmp459, label %for.body461, label %for.end746, !prof !56

for.body461:                                      ; preds = %for.cond458
  %251 = load i32, i32* %x, align 4
  %shr = ashr i32 %251, 1
  %idxprom462 = sext i32 %shr to i64
  %arrayidx463 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom462
  %252 = load i32, i32* %y, align 4
  %shr464 = ashr i32 %252, 1
  %idxprom465 = sext i32 %shr464 to i64
  %arrayidx466 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx463, i64 0, i64 %idxprom465
  %253 = load i8, i8* %arrayidx466, align 1
  %conv467 = zext i8 %253 to i32
  %cmp468 = icmp eq i32 %conv467, 0
  br i1 %cmp468, label %if.then470, label %if.else593, !prof !57

if.then470:                                       ; preds = %for.body461
  %254 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %255 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %256 = load i32, i32* %startblkx, align 4
  %257 = load i32, i32* %startblky, align 4
  %258 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %259 = load i32, i32* %x, align 4
  %div471 = sdiv i32 %259, 2
  %idxprom472 = sext i32 %div471 to i64
  %arrayidx473 = getelementptr inbounds [2 x i8], [2 x i8]* %258, i64 %idxprom472
  %260 = load i32, i32* %y, align 4
  %div474 = sdiv i32 %260, 2
  %idxprom475 = sext i32 %div474 to i64
  %arrayidx476 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx473, i64 0, i64 %idxprom475
  %261 = load i8, i8* %arrayidx476, align 1
  %conv477 = sext i8 %261 to i32
  %arraydecay478 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i32 0, i32 0
  call void @findmv([18 x i8]* %254, [36 x [2 x i32]]* %255, i32 %256, i32 %257, i32 0, i32 4, i32 0, i32 0, i32 %conv477, i32* %arraydecay478, i8 zeroext 0, i8 zeroext 0)
  %262 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %263 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %264 = load i32, i32* %startblkx, align 4
  %265 = load i32, i32* %startblky, align 4
  %266 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %267 = load i32, i32* %x, align 4
  %div479 = sdiv i32 %267, 2
  %idxprom480 = sext i32 %div479 to i64
  %arrayidx481 = getelementptr inbounds [2 x i8], [2 x i8]* %266, i64 %idxprom480
  %268 = load i32, i32* %y, align 4
  %div482 = sdiv i32 %268, 2
  %idxprom483 = sext i32 %div482 to i64
  %arrayidx484 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx481, i64 0, i64 %idxprom483
  %269 = load i8, i8* %arrayidx484, align 1
  %conv485 = sext i8 %269 to i32
  %arraydecay486 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i32 0, i32 0
  call void @findmv([18 x i8]* %262, [36 x [2 x i32]]* %263, i32 %264, i32 %265, i32 0, i32 4, i32 0, i32 0, i32 %conv485, i32* %arraydecay486, i8 zeroext 0, i8 zeroext 0)
  store i32 0, i32* %i, align 4
  br label %for.cond487

for.cond487:                                      ; preds = %for.inc590, %if.then470
  %270 = load i32, i32* %i, align 4
  %cmp488 = icmp slt i32 %270, 2
  br i1 %cmp488, label %for.body490, label %for.end592, !prof !58

for.body490:                                      ; preds = %for.cond487
  store i32 0, i32* %j, align 4
  br label %for.cond491

for.cond491:                                      ; preds = %for.inc587, %for.body490
  %271 = load i32, i32* %j, align 4
  %cmp492 = icmp slt i32 %271, 2
  br i1 %cmp492, label %for.body494, label %for.end589, !prof !59

for.body494:                                      ; preds = %for.cond491
  %arrayidx495 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i64 0, i64 0
  %272 = load i32, i32* %arrayidx495, align 4
  %arrayidx496 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  store i32 %272, i32* %arrayidx496, align 4
  %arrayidx497 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv0, i64 0, i64 1
  %273 = load i32, i32* %arrayidx497, align 4
  %arrayidx498 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  store i32 %273, i32* %arrayidx498, align 4
  %arrayidx499 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i64 0, i64 0
  %274 = load i32, i32* %arrayidx499, align 4
  %arrayidx500 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 0
  store i32 %274, i32* %arrayidx500, align 4
  %arrayidx501 = getelementptr inbounds [2 x i32], [2 x i32]* %foundmv1, i64 0, i64 1
  %275 = load i32, i32* %arrayidx501, align 4
  %arrayidx502 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 1
  store i32 %275, i32* %arrayidx502, align 4
  %276 = load i8, i8* %dflag, align 1
  %277 = load [2 x i8]*, [2 x i8]** %refcol.addr, align 8
  %278 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %279 = load i32, i32* %x, align 4
  %280 = load i32, i32* %i, align 4
  %add503 = add nsw i32 %279, %280
  %281 = load i32, i32* %y, align 4
  %282 = load i32, i32* %j, align 4
  %add504 = add nsw i32 %281, %282
  %arraydecay505 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i32 0, i32 0
  %arraydecay506 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %283 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %284 = load i32, i32* %x, align 4
  %div507 = sdiv i32 %284, 2
  %idxprom508 = sext i32 %div507 to i64
  %arrayidx509 = getelementptr inbounds [2 x i8], [2 x i8]* %283, i64 %idxprom508
  %285 = load i32, i32* %y, align 4
  %div510 = sdiv i32 %285, 2
  %idxprom511 = sext i32 %div510 to i64
  %arrayidx512 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx509, i64 0, i64 %idxprom511
  %286 = load i8, i8* %arrayidx512, align 1
  %287 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %288 = load i32, i32* %x, align 4
  %div513 = sdiv i32 %288, 2
  %idxprom514 = sext i32 %div513 to i64
  %arrayidx515 = getelementptr inbounds [2 x i8], [2 x i8]* %287, i64 %idxprom514
  %289 = load i32, i32* %y, align 4
  %div516 = sdiv i32 %289, 2
  %idxprom517 = sext i32 %div516 to i64
  %arrayidx518 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx515, i64 0, i64 %idxprom517
  %290 = load i8, i8* %arrayidx518, align 1
  call void @find_directmv_flag(i8 zeroext %276, [2 x i8]* %277, [4 x [2 x i32]]* %278, i32 %add503, i32 %add504, i32* %arraydecay505, i32* %arraydecay506, i8 signext %286, i8 signext %290)
  %arrayidx519 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %291 = load i32, i32* %arrayidx519, align 4
  %292 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %293 = load i32, i32* %startblkx, align 4
  %294 = load i32, i32* %x, align 4
  %add520 = add nsw i32 %293, %294
  %295 = load i32, i32* %i, align 4
  %add521 = add nsw i32 %add520, %295
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %292, i64 %idxprom522
  %296 = load i32, i32* %startblky, align 4
  %297 = load i32, i32* %y, align 4
  %add524 = add nsw i32 %296, %297
  %298 = load i32, i32* %j, align 4
  %add525 = add nsw i32 %add524, %298
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx523, i64 0, i64 %idxprom526
  %arrayidx528 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx527, i64 0, i64 0
  store i32 %291, i32* %arrayidx528, align 4
  %299 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %300 = load i32, i32* %x, align 4
  %301 = load i32, i32* %i, align 4
  %add529 = add nsw i32 %300, %301
  %idxprom530 = sext i32 %add529 to i64
  %arrayidx531 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %299, i64 %idxprom530
  %302 = load i32, i32* %y, align 4
  %303 = load i32, i32* %j, align 4
  %add532 = add nsw i32 %302, %303
  %idxprom533 = sext i32 %add532 to i64
  %arrayidx534 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx531, i64 0, i64 %idxprom533
  %arrayidx535 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx534, i64 0, i64 0
  store i32 %291, i32* %arrayidx535, align 4
  %arrayidx536 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %304 = load i32, i32* %arrayidx536, align 4
  %305 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %306 = load i32, i32* %startblkx, align 4
  %307 = load i32, i32* %x, align 4
  %add537 = add nsw i32 %306, %307
  %308 = load i32, i32* %i, align 4
  %add538 = add nsw i32 %add537, %308
  %idxprom539 = sext i32 %add538 to i64
  %arrayidx540 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %305, i64 %idxprom539
  %309 = load i32, i32* %startblky, align 4
  %310 = load i32, i32* %y, align 4
  %add541 = add nsw i32 %309, %310
  %311 = load i32, i32* %j, align 4
  %add542 = add nsw i32 %add541, %311
  %idxprom543 = sext i32 %add542 to i64
  %arrayidx544 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx540, i64 0, i64 %idxprom543
  %arrayidx545 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx544, i64 0, i64 1
  store i32 %304, i32* %arrayidx545, align 4
  %312 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %313 = load i32, i32* %x, align 4
  %314 = load i32, i32* %i, align 4
  %add546 = add nsw i32 %313, %314
  %idxprom547 = sext i32 %add546 to i64
  %arrayidx548 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %312, i64 %idxprom547
  %315 = load i32, i32* %y, align 4
  %316 = load i32, i32* %j, align 4
  %add549 = add nsw i32 %315, %316
  %idxprom550 = sext i32 %add549 to i64
  %arrayidx551 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx548, i64 0, i64 %idxprom550
  %arrayidx552 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx551, i64 0, i64 1
  store i32 %304, i32* %arrayidx552, align 4
  %arrayidx553 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 0
  %317 = load i32, i32* %arrayidx553, align 4
  %318 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %319 = load i32, i32* %startblkx, align 4
  %320 = load i32, i32* %x, align 4
  %add554 = add nsw i32 %319, %320
  %321 = load i32, i32* %i, align 4
  %add555 = add nsw i32 %add554, %321
  %idxprom556 = sext i32 %add555 to i64
  %arrayidx557 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %318, i64 %idxprom556
  %322 = load i32, i32* %startblky, align 4
  %323 = load i32, i32* %y, align 4
  %add558 = add nsw i32 %322, %323
  %324 = load i32, i32* %j, align 4
  %add559 = add nsw i32 %add558, %324
  %idxprom560 = sext i32 %add559 to i64
  %arrayidx561 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx557, i64 0, i64 %idxprom560
  %arrayidx562 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx561, i64 0, i64 0
  store i32 %317, i32* %arrayidx562, align 4
  %325 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %326 = load i32, i32* %x, align 4
  %327 = load i32, i32* %i, align 4
  %add563 = add nsw i32 %326, %327
  %idxprom564 = sext i32 %add563 to i64
  %arrayidx565 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %325, i64 %idxprom564
  %328 = load i32, i32* %y, align 4
  %329 = load i32, i32* %j, align 4
  %add566 = add nsw i32 %328, %329
  %idxprom567 = sext i32 %add566 to i64
  %arrayidx568 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx565, i64 0, i64 %idxprom567
  %arrayidx569 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx568, i64 0, i64 0
  store i32 %317, i32* %arrayidx569, align 4
  %arrayidx570 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv1, i64 0, i64 1
  %330 = load i32, i32* %arrayidx570, align 4
  %331 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %332 = load i32, i32* %startblkx, align 4
  %333 = load i32, i32* %x, align 4
  %add571 = add nsw i32 %332, %333
  %334 = load i32, i32* %i, align 4
  %add572 = add nsw i32 %add571, %334
  %idxprom573 = sext i32 %add572 to i64
  %arrayidx574 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %331, i64 %idxprom573
  %335 = load i32, i32* %startblky, align 4
  %336 = load i32, i32* %y, align 4
  %add575 = add nsw i32 %335, %336
  %337 = load i32, i32* %j, align 4
  %add576 = add nsw i32 %add575, %337
  %idxprom577 = sext i32 %add576 to i64
  %arrayidx578 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx574, i64 0, i64 %idxprom577
  %arrayidx579 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx578, i64 0, i64 1
  store i32 %330, i32* %arrayidx579, align 4
  %338 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %339 = load i32, i32* %x, align 4
  %340 = load i32, i32* %i, align 4
  %add580 = add nsw i32 %339, %340
  %idxprom581 = sext i32 %add580 to i64
  %arrayidx582 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %338, i64 %idxprom581
  %341 = load i32, i32* %y, align 4
  %342 = load i32, i32* %j, align 4
  %add583 = add nsw i32 %341, %342
  %idxprom584 = sext i32 %add583 to i64
  %arrayidx585 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx582, i64 0, i64 %idxprom584
  %arrayidx586 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx585, i64 0, i64 1
  store i32 %330, i32* %arrayidx586, align 4
  br label %for.inc587

for.inc587:                                       ; preds = %for.body494
  %343 = load i32, i32* %j, align 4
  %inc588 = add nsw i32 %343, 1
  store i32 %inc588, i32* %j, align 4
  br label %for.cond491

for.end589:                                       ; preds = %for.cond491
  br label %for.inc590

for.inc590:                                       ; preds = %for.end589
  %344 = load i32, i32* %i, align 4
  %inc591 = add nsw i32 %344, 1
  store i32 %inc591, i32* %i, align 4
  br label %for.cond487

for.end592:                                       ; preds = %for.cond487
  br label %if.end742

if.else593:                                       ; preds = %for.body461
  %345 = load i32, i32* %x, align 4
  %shr594 = ashr i32 %345, 1
  %idxprom595 = sext i32 %shr594 to i64
  %arrayidx596 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom595
  %346 = load i32, i32* %y, align 4
  %shr597 = ashr i32 %346, 1
  %idxprom598 = sext i32 %shr597 to i64
  %arrayidx599 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx596, i64 0, i64 %idxprom598
  %347 = load i8, i8* %arrayidx599, align 1
  %conv600 = zext i8 %347 to i32
  %and601 = and i32 %conv600, 1
  %tobool602 = icmp ne i32 %and601, 0
  br i1 %tobool602, label %if.then603, label %if.end741, !prof !60

if.then603:                                       ; preds = %if.else593
  %348 = load i32, i32* %x, align 4
  %shr604 = ashr i32 %348, 1
  %idxprom605 = sext i32 %shr604 to i64
  %arrayidx606 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom605
  %349 = load i32, i32* %y, align 4
  %shr607 = ashr i32 %349, 1
  %idxprom608 = sext i32 %shr607 to i64
  %arrayidx609 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx606, i64 0, i64 %idxprom608
  %350 = load i8, i8* %arrayidx609, align 1
  store i8 %350, i8* %stpw, align 1
  %351 = load i32, i32* %x, align 4
  %shr610 = ashr i32 %351, 1
  %idxprom611 = sext i32 %shr610 to i64
  %arrayidx612 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom611
  %352 = load i32, i32* %y, align 4
  %shr613 = ashr i32 %352, 1
  %idxprom614 = sext i32 %shr613 to i64
  %arrayidx615 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx612, i64 0, i64 %idxprom614
  %353 = load i8, i8* %arrayidx615, align 1
  store i8 %353, i8* %stph, align 1
  store i32 0, i32* %suby, align 4
  br label %for.cond616

for.cond616:                                      ; preds = %for.inc737, %if.then603
  %354 = load i32, i32* %suby, align 4
  %355 = load i8, i8* %stepy, align 1
  %conv617 = zext i8 %355 to i32
  %cmp618 = icmp slt i32 %354, %conv617
  br i1 %cmp618, label %for.body620, label %for.end740, !prof !61

for.body620:                                      ; preds = %for.cond616
  store i32 0, i32* %subx, align 4
  br label %for.cond621

for.cond621:                                      ; preds = %for.inc733, %for.body620
  %356 = load i32, i32* %subx, align 4
  %357 = load i8, i8* %stepx, align 1
  %conv622 = zext i8 %357 to i32
  %cmp623 = icmp slt i32 %356, %conv622
  br i1 %cmp623, label %for.body625, label %for.end736, !prof !61

for.body625:                                      ; preds = %for.cond621
  %358 = load i32, i32* %skipflag.addr, align 4
  %cmp626 = icmp ne i32 %358, 1
  br i1 %cmp626, label %if.then628, label %if.else631, !prof !62

if.then628:                                       ; preds = %for.body625
  %359 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %360 = load i8*, i8** %nalu_buf.addr, align 8
  %361 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call629 = call i32 @s_e(%struct.NALU_t* %359, i8* %360, i64* %361)
  store i32 %call629, i32* %mvdx, align 4
  %362 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %363 = load i8*, i8** %nalu_buf.addr, align 8
  %364 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call630 = call i32 @s_e(%struct.NALU_t* %362, i8* %363, i64* %364)
  store i32 %call630, i32* %mvdy, align 4
  br label %if.end632

if.else631:                                       ; preds = %for.body625
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  br label %if.end632

if.end632:                                        ; preds = %if.else631, %if.then628
  %365 = load [18 x i8]*, [18 x i8]** %globref0.addr, align 8
  %366 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %367 = load i32, i32* %startblkx, align 4
  %368 = load i32, i32* %startblky, align 4
  %369 = load i32, i32* %y, align 4
  %370 = load i32, i32* %suby, align 4
  %add633 = add nsw i32 %369, %370
  %and634 = and i32 %add633, 2
  %cmp635 = icmp ne i32 %and634, 0
  %conv636 = zext i1 %cmp635 to i32
  %mul637 = mul nsw i32 %conv636, 8
  %371 = load i32, i32* %x, align 4
  %372 = load i32, i32* %subx, align 4
  %add638 = add nsw i32 %371, %372
  %and639 = and i32 %add638, 2
  %cmp640 = icmp ne i32 %and639, 0
  %conv641 = zext i1 %cmp640 to i32
  %mul642 = mul nsw i32 %conv641, 4
  %add643 = add nsw i32 %mul637, %mul642
  %373 = load i32, i32* %y, align 4
  %374 = load i32, i32* %suby, align 4
  %add644 = add nsw i32 %373, %374
  %and645 = and i32 %add644, 1
  %cmp646 = icmp ne i32 %and645, 0
  %conv647 = zext i1 %cmp646 to i32
  %mul648 = mul nsw i32 %conv647, 2
  %add649 = add nsw i32 %add643, %mul648
  %375 = load i32, i32* %x, align 4
  %376 = load i32, i32* %subx, align 4
  %add650 = add nsw i32 %375, %376
  %and651 = and i32 %add650, 1
  %cmp652 = icmp ne i32 %and651, 0
  %conv653 = zext i1 %cmp652 to i32
  %add654 = add nsw i32 %add649, %conv653
  %377 = load i8, i8* %stpw, align 1
  %conv655 = zext i8 %377 to i32
  %378 = load i32, i32* %x, align 4
  %379 = load i32, i32* %subx, align 4
  %add656 = add nsw i32 %378, %379
  %380 = load i32, i32* %y, align 4
  %381 = load i32, i32* %suby, align 4
  %add657 = add nsw i32 %380, %381
  %382 = load [2 x i8]*, [2 x i8]** %refidx0.addr, align 8
  %383 = load i32, i32* %x, align 4
  %div658 = sdiv i32 %383, 2
  %idxprom659 = sext i32 %div658 to i64
  %arrayidx660 = getelementptr inbounds [2 x i8], [2 x i8]* %382, i64 %idxprom659
  %384 = load i32, i32* %y, align 4
  %div661 = sdiv i32 %384, 2
  %idxprom662 = sext i32 %div661 to i64
  %arrayidx663 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx660, i64 0, i64 %idxprom662
  %385 = load i8, i8* %arrayidx663, align 1
  %conv664 = sext i8 %385 to i32
  %arraydecay665 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %386 = load i32, i32* %x, align 4
  %div666 = sdiv i32 %386, 2
  %idxprom667 = sext i32 %div666 to i64
  %arrayidx668 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 %idxprom667
  %387 = load i32, i32* %y, align 4
  %div669 = sdiv i32 %387, 2
  %idxprom670 = sext i32 %div669 to i64
  %arrayidx671 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx668, i64 0, i64 %idxprom670
  %388 = load i8, i8* %arrayidx671, align 1
  %389 = load i32, i32* %skipflag.addr, align 4
  %conv672 = trunc i32 %389 to i8
  call void @findmv([18 x i8]* %365, [36 x [2 x i32]]* %366, i32 %367, i32 %368, i32 %add654, i32 %conv655, i32 %add656, i32 %add657, i32 %conv664, i32* %arraydecay665, i8 zeroext %388, i8 zeroext %conv672)
  store i32 0, i32* %i, align 4
  br label %for.cond673

for.cond673:                                      ; preds = %for.inc730, %if.end632
  %390 = load i32, i32* %i, align 4
  %391 = load i8, i8* %stpw, align 1
  %conv674 = zext i8 %391 to i32
  %cmp675 = icmp slt i32 %390, %conv674
  br i1 %cmp675, label %for.body677, label %for.end732, !prof !63

for.body677:                                      ; preds = %for.cond673
  store i32 0, i32* %j, align 4
  br label %for.cond678

for.cond678:                                      ; preds = %for.inc727, %for.body677
  %392 = load i32, i32* %j, align 4
  %393 = load i8, i8* %stph, align 1
  %conv679 = zext i8 %393 to i32
  %cmp680 = icmp slt i32 %392, %conv679
  br i1 %cmp680, label %for.body682, label %for.end729, !prof !64

for.body682:                                      ; preds = %for.cond678
  %394 = load i32, i32* %mvdx, align 4
  %arrayidx683 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %395 = load i32, i32* %arrayidx683, align 4
  %add684 = add nsw i32 %394, %395
  %396 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %397 = load i32, i32* %startblkx, align 4
  %398 = load i32, i32* %x, align 4
  %add685 = add nsw i32 %397, %398
  %399 = load i32, i32* %subx, align 4
  %add686 = add nsw i32 %add685, %399
  %400 = load i32, i32* %i, align 4
  %add687 = add nsw i32 %add686, %400
  %idxprom688 = sext i32 %add687 to i64
  %arrayidx689 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %396, i64 %idxprom688
  %401 = load i32, i32* %startblky, align 4
  %402 = load i32, i32* %y, align 4
  %add690 = add nsw i32 %401, %402
  %403 = load i32, i32* %suby, align 4
  %add691 = add nsw i32 %add690, %403
  %404 = load i32, i32* %j, align 4
  %add692 = add nsw i32 %add691, %404
  %idxprom693 = sext i32 %add692 to i64
  %arrayidx694 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx689, i64 0, i64 %idxprom693
  %arrayidx695 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx694, i64 0, i64 0
  store i32 %add684, i32* %arrayidx695, align 4
  %405 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %406 = load i32, i32* %x, align 4
  %407 = load i32, i32* %subx, align 4
  %add696 = add nsw i32 %406, %407
  %408 = load i32, i32* %i, align 4
  %add697 = add nsw i32 %add696, %408
  %idxprom698 = sext i32 %add697 to i64
  %arrayidx699 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %405, i64 %idxprom698
  %409 = load i32, i32* %y, align 4
  %410 = load i32, i32* %suby, align 4
  %add700 = add nsw i32 %409, %410
  %411 = load i32, i32* %j, align 4
  %add701 = add nsw i32 %add700, %411
  %idxprom702 = sext i32 %add701 to i64
  %arrayidx703 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx699, i64 0, i64 %idxprom702
  %arrayidx704 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx703, i64 0, i64 0
  store i32 %add684, i32* %arrayidx704, align 4
  %412 = load i32, i32* %mvdy, align 4
  %arrayidx705 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %413 = load i32, i32* %arrayidx705, align 4
  %add706 = add nsw i32 %412, %413
  %414 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd0.addr, align 8
  %415 = load i32, i32* %startblkx, align 4
  %416 = load i32, i32* %x, align 4
  %add707 = add nsw i32 %415, %416
  %417 = load i32, i32* %subx, align 4
  %add708 = add nsw i32 %add707, %417
  %418 = load i32, i32* %i, align 4
  %add709 = add nsw i32 %add708, %418
  %idxprom710 = sext i32 %add709 to i64
  %arrayidx711 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %414, i64 %idxprom710
  %419 = load i32, i32* %startblky, align 4
  %420 = load i32, i32* %y, align 4
  %add712 = add nsw i32 %419, %420
  %421 = load i32, i32* %suby, align 4
  %add713 = add nsw i32 %add712, %421
  %422 = load i32, i32* %j, align 4
  %add714 = add nsw i32 %add713, %422
  %idxprom715 = sext i32 %add714 to i64
  %arrayidx716 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx711, i64 0, i64 %idxprom715
  %arrayidx717 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx716, i64 0, i64 1
  store i32 %add706, i32* %arrayidx717, align 4
  %423 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd0.addr, align 8
  %424 = load i32, i32* %x, align 4
  %425 = load i32, i32* %subx, align 4
  %add718 = add nsw i32 %424, %425
  %426 = load i32, i32* %i, align 4
  %add719 = add nsw i32 %add718, %426
  %idxprom720 = sext i32 %add719 to i64
  %arrayidx721 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %423, i64 %idxprom720
  %427 = load i32, i32* %y, align 4
  %428 = load i32, i32* %suby, align 4
  %add722 = add nsw i32 %427, %428
  %429 = load i32, i32* %j, align 4
  %add723 = add nsw i32 %add722, %429
  %idxprom724 = sext i32 %add723 to i64
  %arrayidx725 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx721, i64 0, i64 %idxprom724
  %arrayidx726 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx725, i64 0, i64 1
  store i32 %add706, i32* %arrayidx726, align 4
  br label %for.inc727

for.inc727:                                       ; preds = %for.body682
  %430 = load i32, i32* %j, align 4
  %inc728 = add nsw i32 %430, 1
  store i32 %inc728, i32* %j, align 4
  br label %for.cond678

for.end729:                                       ; preds = %for.cond678
  br label %for.inc730

for.inc730:                                       ; preds = %for.end729
  %431 = load i32, i32* %i, align 4
  %inc731 = add nsw i32 %431, 1
  store i32 %inc731, i32* %i, align 4
  br label %for.cond673

for.end732:                                       ; preds = %for.cond673
  br label %for.inc733

for.inc733:                                       ; preds = %for.end732
  %432 = load i8, i8* %stpw, align 1
  %conv734 = zext i8 %432 to i32
  %433 = load i32, i32* %subx, align 4
  %add735 = add nsw i32 %433, %conv734
  store i32 %add735, i32* %subx, align 4
  br label %for.cond621

for.end736:                                       ; preds = %for.cond621
  br label %for.inc737

for.inc737:                                       ; preds = %for.end736
  %434 = load i8, i8* %stph, align 1
  %conv738 = zext i8 %434 to i32
  %435 = load i32, i32* %suby, align 4
  %add739 = add nsw i32 %435, %conv738
  store i32 %add739, i32* %suby, align 4
  br label %for.cond616

for.end740:                                       ; preds = %for.cond616
  br label %if.end741

if.end741:                                        ; preds = %for.end740, %if.else593
  br label %if.end742

if.end742:                                        ; preds = %if.end741, %for.end592
  br label %for.inc743

for.inc743:                                       ; preds = %if.end742
  %436 = load i8, i8* %stepx, align 1
  %conv744 = zext i8 %436 to i32
  %437 = load i32, i32* %x, align 4
  %add745 = add nsw i32 %437, %conv744
  store i32 %add745, i32* %x, align 4
  br label %for.cond458

for.end746:                                       ; preds = %for.cond458
  br label %for.inc747

for.inc747:                                       ; preds = %for.end746
  %438 = load i8, i8* %stepy, align 1
  %conv748 = zext i8 %438 to i32
  %439 = load i32, i32* %y, align 4
  %add749 = add nsw i32 %439, %conv748
  store i32 %add749, i32* %y, align 4
  br label %for.cond454

for.end750:                                       ; preds = %for.cond454
  store i32 0, i32* %y, align 4
  br label %for.cond751

for.cond751:                                      ; preds = %for.inc923, %for.end750
  %440 = load i32, i32* %y, align 4
  %cmp752 = icmp slt i32 %440, 4
  br i1 %cmp752, label %for.body754, label %for.end926, !prof !55

for.body754:                                      ; preds = %for.cond751
  store i32 0, i32* %x, align 4
  br label %for.cond755

for.cond755:                                      ; preds = %for.inc919, %for.body754
  %441 = load i32, i32* %x, align 4
  %cmp756 = icmp slt i32 %441, 4
  br i1 %cmp756, label %for.body758, label %for.end922, !prof !56

for.body758:                                      ; preds = %for.cond755
  %442 = load i32, i32* %x, align 4
  %shr759 = ashr i32 %442, 1
  %idxprom760 = sext i32 %shr759 to i64
  %arrayidx761 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom760
  %443 = load i32, i32* %y, align 4
  %shr762 = ashr i32 %443, 1
  %idxprom763 = sext i32 %shr762 to i64
  %arrayidx764 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx761, i64 0, i64 %idxprom763
  %444 = load i8, i8* %arrayidx764, align 1
  %conv765 = zext i8 %444 to i32
  %cmp766 = icmp eq i32 %conv765, 0
  br i1 %cmp766, label %if.then768, label %if.else769, !prof !57

if.then768:                                       ; preds = %for.body758
  br label %if.end918

if.else769:                                       ; preds = %for.body758
  %445 = load i32, i32* %x, align 4
  %shr770 = ashr i32 %445, 1
  %idxprom771 = sext i32 %shr770 to i64
  %arrayidx772 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %listuse, i64 0, i64 %idxprom771
  %446 = load i32, i32* %y, align 4
  %shr773 = ashr i32 %446, 1
  %idxprom774 = sext i32 %shr773 to i64
  %arrayidx775 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx772, i64 0, i64 %idxprom774
  %447 = load i8, i8* %arrayidx775, align 1
  %conv776 = zext i8 %447 to i32
  %and777 = and i32 %conv776, 2
  %tobool778 = icmp ne i32 %and777, 0
  br i1 %tobool778, label %if.then779, label %if.end917, !prof !65

if.then779:                                       ; preds = %if.else769
  %448 = load i32, i32* %x, align 4
  %shr780 = ashr i32 %448, 1
  %idxprom781 = sext i32 %shr780 to i64
  %arrayidx782 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepx, i64 0, i64 %idxprom781
  %449 = load i32, i32* %y, align 4
  %shr783 = ashr i32 %449, 1
  %idxprom784 = sext i32 %shr783 to i64
  %arrayidx785 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx782, i64 0, i64 %idxprom784
  %450 = load i8, i8* %arrayidx785, align 1
  store i8 %450, i8* %stpw, align 1
  %451 = load i32, i32* %x, align 4
  %shr786 = ashr i32 %451, 1
  %idxprom787 = sext i32 %shr786 to i64
  %arrayidx788 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %substepy, i64 0, i64 %idxprom787
  %452 = load i32, i32* %y, align 4
  %shr789 = ashr i32 %452, 1
  %idxprom790 = sext i32 %shr789 to i64
  %arrayidx791 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx788, i64 0, i64 %idxprom790
  %453 = load i8, i8* %arrayidx791, align 1
  store i8 %453, i8* %stph, align 1
  store i32 0, i32* %suby, align 4
  br label %for.cond792

for.cond792:                                      ; preds = %for.inc913, %if.then779
  %454 = load i32, i32* %suby, align 4
  %455 = load i8, i8* %stepy, align 1
  %conv793 = zext i8 %455 to i32
  %cmp794 = icmp slt i32 %454, %conv793
  br i1 %cmp794, label %for.body796, label %for.end916

for.body796:                                      ; preds = %for.cond792
  store i32 0, i32* %subx, align 4
  br label %for.cond797

for.cond797:                                      ; preds = %for.inc909, %for.body796
  %456 = load i32, i32* %subx, align 4
  %457 = load i8, i8* %stepx, align 1
  %conv798 = zext i8 %457 to i32
  %cmp799 = icmp slt i32 %456, %conv798
  br i1 %cmp799, label %for.body801, label %for.end912

for.body801:                                      ; preds = %for.cond797
  %458 = load i32, i32* %skipflag.addr, align 4
  %cmp802 = icmp ne i32 %458, 1
  br i1 %cmp802, label %if.then804, label %if.else807

if.then804:                                       ; preds = %for.body801
  %459 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %460 = load i8*, i8** %nalu_buf.addr, align 8
  %461 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call805 = call i32 @s_e(%struct.NALU_t* %459, i8* %460, i64* %461)
  store i32 %call805, i32* %mvdx, align 4
  %462 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %463 = load i8*, i8** %nalu_buf.addr, align 8
  %464 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call806 = call i32 @s_e(%struct.NALU_t* %462, i8* %463, i64* %464)
  store i32 %call806, i32* %mvdy, align 4
  br label %if.end808

if.else807:                                       ; preds = %for.body801
  store i32 0, i32* %mvdx, align 4
  store i32 0, i32* %mvdy, align 4
  br label %if.end808

if.end808:                                        ; preds = %if.else807, %if.then804
  %465 = load [18 x i8]*, [18 x i8]** %globref1.addr, align 8
  %466 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %467 = load i32, i32* %startblkx, align 4
  %468 = load i32, i32* %startblky, align 4
  %469 = load i32, i32* %y, align 4
  %470 = load i32, i32* %suby, align 4
  %add809 = add nsw i32 %469, %470
  %and810 = and i32 %add809, 2
  %cmp811 = icmp ne i32 %and810, 0
  %conv812 = zext i1 %cmp811 to i32
  %mul813 = mul nsw i32 %conv812, 8
  %471 = load i32, i32* %x, align 4
  %472 = load i32, i32* %subx, align 4
  %add814 = add nsw i32 %471, %472
  %and815 = and i32 %add814, 2
  %cmp816 = icmp ne i32 %and815, 0
  %conv817 = zext i1 %cmp816 to i32
  %mul818 = mul nsw i32 %conv817, 4
  %add819 = add nsw i32 %mul813, %mul818
  %473 = load i32, i32* %y, align 4
  %474 = load i32, i32* %suby, align 4
  %add820 = add nsw i32 %473, %474
  %and821 = and i32 %add820, 1
  %cmp822 = icmp ne i32 %and821, 0
  %conv823 = zext i1 %cmp822 to i32
  %mul824 = mul nsw i32 %conv823, 2
  %add825 = add nsw i32 %add819, %mul824
  %475 = load i32, i32* %x, align 4
  %476 = load i32, i32* %subx, align 4
  %add826 = add nsw i32 %475, %476
  %and827 = and i32 %add826, 1
  %cmp828 = icmp ne i32 %and827, 0
  %conv829 = zext i1 %cmp828 to i32
  %add830 = add nsw i32 %add825, %conv829
  %477 = load i8, i8* %stpw, align 1
  %conv831 = zext i8 %477 to i32
  %478 = load i32, i32* %x, align 4
  %479 = load i32, i32* %subx, align 4
  %add832 = add nsw i32 %478, %479
  %480 = load i32, i32* %y, align 4
  %481 = load i32, i32* %suby, align 4
  %add833 = add nsw i32 %480, %481
  %482 = load [2 x i8]*, [2 x i8]** %refidx1.addr, align 8
  %483 = load i32, i32* %x, align 4
  %div834 = sdiv i32 %483, 2
  %idxprom835 = sext i32 %div834 to i64
  %arrayidx836 = getelementptr inbounds [2 x i8], [2 x i8]* %482, i64 %idxprom835
  %484 = load i32, i32* %y, align 4
  %div837 = sdiv i32 %484, 2
  %idxprom838 = sext i32 %div837 to i64
  %arrayidx839 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx836, i64 0, i64 %idxprom838
  %485 = load i8, i8* %arrayidx839, align 1
  %conv840 = sext i8 %485 to i32
  %arraydecay841 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i32 0, i32 0
  %486 = load i32, i32* %x, align 4
  %div842 = sdiv i32 %486, 2
  %idxprom843 = sext i32 %div842 to i64
  %arrayidx844 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* %preddir, i64 0, i64 %idxprom843
  %487 = load i32, i32* %y, align 4
  %div845 = sdiv i32 %487, 2
  %idxprom846 = sext i32 %div845 to i64
  %arrayidx847 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx844, i64 0, i64 %idxprom846
  %488 = load i8, i8* %arrayidx847, align 1
  %489 = load i32, i32* %skipflag.addr, align 4
  %conv848 = trunc i32 %489 to i8
  call void @findmv([18 x i8]* %465, [36 x [2 x i32]]* %466, i32 %467, i32 %468, i32 %add830, i32 %conv831, i32 %add832, i32 %add833, i32 %conv840, i32* %arraydecay841, i8 zeroext %488, i8 zeroext %conv848)
  store i32 0, i32* %i, align 4
  br label %for.cond849

for.cond849:                                      ; preds = %for.inc906, %if.end808
  %490 = load i32, i32* %i, align 4
  %491 = load i8, i8* %stpw, align 1
  %conv850 = zext i8 %491 to i32
  %cmp851 = icmp slt i32 %490, %conv850
  br i1 %cmp851, label %for.body853, label %for.end908

for.body853:                                      ; preds = %for.cond849
  store i32 0, i32* %j, align 4
  br label %for.cond854

for.cond854:                                      ; preds = %for.inc903, %for.body853
  %492 = load i32, i32* %j, align 4
  %493 = load i8, i8* %stph, align 1
  %conv855 = zext i8 %493 to i32
  %cmp856 = icmp slt i32 %492, %conv855
  br i1 %cmp856, label %for.body858, label %for.end905

for.body858:                                      ; preds = %for.cond854
  %494 = load i32, i32* %mvdx, align 4
  %arrayidx859 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 0
  %495 = load i32, i32* %arrayidx859, align 4
  %add860 = add nsw i32 %494, %495
  %496 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %497 = load i32, i32* %startblkx, align 4
  %498 = load i32, i32* %x, align 4
  %add861 = add nsw i32 %497, %498
  %499 = load i32, i32* %subx, align 4
  %add862 = add nsw i32 %add861, %499
  %500 = load i32, i32* %i, align 4
  %add863 = add nsw i32 %add862, %500
  %idxprom864 = sext i32 %add863 to i64
  %arrayidx865 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %496, i64 %idxprom864
  %501 = load i32, i32* %startblky, align 4
  %502 = load i32, i32* %y, align 4
  %add866 = add nsw i32 %501, %502
  %503 = load i32, i32* %suby, align 4
  %add867 = add nsw i32 %add866, %503
  %504 = load i32, i32* %j, align 4
  %add868 = add nsw i32 %add867, %504
  %idxprom869 = sext i32 %add868 to i64
  %arrayidx870 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx865, i64 0, i64 %idxprom869
  %arrayidx871 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx870, i64 0, i64 0
  store i32 %add860, i32* %arrayidx871, align 4
  %505 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %506 = load i32, i32* %x, align 4
  %507 = load i32, i32* %subx, align 4
  %add872 = add nsw i32 %506, %507
  %508 = load i32, i32* %i, align 4
  %add873 = add nsw i32 %add872, %508
  %idxprom874 = sext i32 %add873 to i64
  %arrayidx875 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %505, i64 %idxprom874
  %509 = load i32, i32* %y, align 4
  %510 = load i32, i32* %suby, align 4
  %add876 = add nsw i32 %509, %510
  %511 = load i32, i32* %j, align 4
  %add877 = add nsw i32 %add876, %511
  %idxprom878 = sext i32 %add877 to i64
  %arrayidx879 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx875, i64 0, i64 %idxprom878
  %arrayidx880 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx879, i64 0, i64 0
  store i32 %add860, i32* %arrayidx880, align 4
  %512 = load i32, i32* %mvdy, align 4
  %arrayidx881 = getelementptr inbounds [2 x i32], [2 x i32]* %tpmmv, i64 0, i64 1
  %513 = load i32, i32* %arrayidx881, align 4
  %add882 = add nsw i32 %512, %513
  %514 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %globmvd1.addr, align 8
  %515 = load i32, i32* %startblkx, align 4
  %516 = load i32, i32* %x, align 4
  %add883 = add nsw i32 %515, %516
  %517 = load i32, i32* %subx, align 4
  %add884 = add nsw i32 %add883, %517
  %518 = load i32, i32* %i, align 4
  %add885 = add nsw i32 %add884, %518
  %idxprom886 = sext i32 %add885 to i64
  %arrayidx887 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %514, i64 %idxprom886
  %519 = load i32, i32* %startblky, align 4
  %520 = load i32, i32* %y, align 4
  %add888 = add nsw i32 %519, %520
  %521 = load i32, i32* %suby, align 4
  %add889 = add nsw i32 %add888, %521
  %522 = load i32, i32* %j, align 4
  %add890 = add nsw i32 %add889, %522
  %idxprom891 = sext i32 %add890 to i64
  %arrayidx892 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx887, i64 0, i64 %idxprom891
  %arrayidx893 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx892, i64 0, i64 1
  store i32 %add882, i32* %arrayidx893, align 4
  %523 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvd1.addr, align 8
  %524 = load i32, i32* %x, align 4
  %525 = load i32, i32* %subx, align 4
  %add894 = add nsw i32 %524, %525
  %526 = load i32, i32* %i, align 4
  %add895 = add nsw i32 %add894, %526
  %idxprom896 = sext i32 %add895 to i64
  %arrayidx897 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %523, i64 %idxprom896
  %527 = load i32, i32* %y, align 4
  %528 = load i32, i32* %suby, align 4
  %add898 = add nsw i32 %527, %528
  %529 = load i32, i32* %j, align 4
  %add899 = add nsw i32 %add898, %529
  %idxprom900 = sext i32 %add899 to i64
  %arrayidx901 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx897, i64 0, i64 %idxprom900
  %arrayidx902 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx901, i64 0, i64 1
  store i32 %add882, i32* %arrayidx902, align 4
  br label %for.inc903

for.inc903:                                       ; preds = %for.body858
  %530 = load i32, i32* %j, align 4
  %inc904 = add nsw i32 %530, 1
  store i32 %inc904, i32* %j, align 4
  br label %for.cond854

for.end905:                                       ; preds = %for.cond854
  br label %for.inc906

for.inc906:                                       ; preds = %for.end905
  %531 = load i32, i32* %i, align 4
  %inc907 = add nsw i32 %531, 1
  store i32 %inc907, i32* %i, align 4
  br label %for.cond849

for.end908:                                       ; preds = %for.cond849
  br label %for.inc909

for.inc909:                                       ; preds = %for.end908
  %532 = load i8, i8* %stpw, align 1
  %conv910 = zext i8 %532 to i32
  %533 = load i32, i32* %subx, align 4
  %add911 = add nsw i32 %533, %conv910
  store i32 %add911, i32* %subx, align 4
  br label %for.cond797

for.end912:                                       ; preds = %for.cond797
  br label %for.inc913

for.inc913:                                       ; preds = %for.end912
  %534 = load i8, i8* %stph, align 1
  %conv914 = zext i8 %534 to i32
  %535 = load i32, i32* %suby, align 4
  %add915 = add nsw i32 %535, %conv914
  store i32 %add915, i32* %suby, align 4
  br label %for.cond792

for.end916:                                       ; preds = %for.cond792
  br label %if.end917

if.end917:                                        ; preds = %for.end916, %if.else769
  br label %if.end918

if.end918:                                        ; preds = %if.end917, %if.then768
  br label %for.inc919

for.inc919:                                       ; preds = %if.end918
  %536 = load i8, i8* %stepx, align 1
  %conv920 = zext i8 %536 to i32
  %537 = load i32, i32* %x, align 4
  %add921 = add nsw i32 %537, %conv920
  store i32 %add921, i32* %x, align 4
  br label %for.cond755

for.end922:                                       ; preds = %for.cond755
  br label %for.inc923

for.inc923:                                       ; preds = %for.end922
  %538 = load i8, i8* %stepy, align 1
  %conv924 = zext i8 %538 to i32
  %539 = load i32, i32* %y, align 4
  %add925 = add nsw i32 %539, %conv924
  store i32 %add925, i32* %y, align 4
  br label %for.cond751

for.end926:                                       ; preds = %for.cond751
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

declare dso_local i32 @u_e(%struct.NALU_t*, i8*, i64*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @find_directzeroflag([18 x i8]* %refidx0, [18 x i8]* %refidx1, i8* %ref01, i32 %startblkx, i32 %startblky) #0 !prof !66 {
entry:
  %retval = alloca i8, align 1
  %refidx0.addr = alloca [18 x i8]*, align 8
  %refidx1.addr = alloca [18 x i8]*, align 8
  %ref01.addr = alloca i8*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %idxC = alloca [2 x i32], align 4
  %refA0 = alloca i8, align 1
  %refA1 = alloca i8, align 1
  %refB0 = alloca i8, align 1
  %refB1 = alloca i8, align 1
  %refC0 = alloca i8, align 1
  %refC1 = alloca i8, align 1
  store [18 x i8]* %refidx0, [18 x i8]** %refidx0.addr, align 8
  store [18 x i8]* %refidx1, [18 x i8]** %refidx1.addr, align 8
  store i8* %ref01, i8** %ref01.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  %0 = bitcast [2 x i32]* %idxC to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 8, i1 false)
  store i8 0, i8* %refA0, align 1
  store i8 0, i8* %refA1, align 1
  store i8 0, i8* %refB0, align 1
  store i8 0, i8* %refB1, align 1
  store i8 0, i8* %refC0, align 1
  store i8 0, i8* %refC1, align 1
  %1 = load i32, i32* %startblkx.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp sge i32 %sub, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !67

if.then:                                          ; preds = %entry
  %2 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %3 = load i32, i32* %startblkx.addr, align 4
  %sub1 = sub nsw i32 %3, 1
  %div = sdiv i32 %sub1, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %2, i64 %idxprom
  %4 = load i32, i32* %startblky.addr, align 4
  %div2 = sdiv i32 %4, 2
  %idxprom3 = sext i32 %div2 to i64
  %arrayidx4 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom3
  %5 = load i8, i8* %arrayidx4, align 1
  store i8 %5, i8* %refA0, align 1
  %6 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %7 = load i32, i32* %startblkx.addr, align 4
  %sub5 = sub nsw i32 %7, 1
  %div6 = sdiv i32 %sub5, 2
  %idxprom7 = sext i32 %div6 to i64
  %arrayidx8 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 %idxprom7
  %8 = load i32, i32* %startblky.addr, align 4
  %div9 = sdiv i32 %8, 2
  %idxprom10 = sext i32 %div9 to i64
  %arrayidx11 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx8, i64 0, i64 %idxprom10
  %9 = load i8, i8* %arrayidx11, align 1
  store i8 %9, i8* %refA1, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -1, i8* %refA0, align 1
  store i8 -1, i8* %refA1, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %startblky.addr, align 4
  %sub12 = sub nsw i32 %10, 1
  %cmp13 = icmp sge i32 %sub12, 0
  br i1 %cmp13, label %if.then14, label %if.else29, !prof !68

if.then14:                                        ; preds = %if.end
  %11 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %12 = load i32, i32* %startblkx.addr, align 4
  %div15 = sdiv i32 %12, 2
  %idxprom16 = sext i32 %div15 to i64
  %arrayidx17 = getelementptr inbounds [18 x i8], [18 x i8]* %11, i64 %idxprom16
  %13 = load i32, i32* %startblky.addr, align 4
  %sub18 = sub nsw i32 %13, 1
  %div19 = sdiv i32 %sub18, 2
  %idxprom20 = sext i32 %div19 to i64
  %arrayidx21 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx17, i64 0, i64 %idxprom20
  %14 = load i8, i8* %arrayidx21, align 1
  store i8 %14, i8* %refB0, align 1
  %15 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %16 = load i32, i32* %startblkx.addr, align 4
  %div22 = sdiv i32 %16, 2
  %idxprom23 = sext i32 %div22 to i64
  %arrayidx24 = getelementptr inbounds [18 x i8], [18 x i8]* %15, i64 %idxprom23
  %17 = load i32, i32* %startblky.addr, align 4
  %sub25 = sub nsw i32 %17, 1
  %div26 = sdiv i32 %sub25, 2
  %idxprom27 = sext i32 %div26 to i64
  %arrayidx28 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx24, i64 0, i64 %idxprom27
  %18 = load i8, i8* %arrayidx28, align 1
  store i8 %18, i8* %refB1, align 1
  br label %if.end30

if.else29:                                        ; preds = %if.end
  store i8 -1, i8* %refB0, align 1
  store i8 -1, i8* %refB1, align 1
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then14
  %19 = load i32, i32* %startblkx.addr, align 4
  %20 = load i32, i32* %startblky.addr, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i32 0, i32 0
  call void @findCidx(i32 %19, i32 %20, i32 0, i32 1, i32 0, i32 0, i32* %arraydecay)
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %21 = load i32, i32* %arrayidx31, align 4
  %cmp32 = icmp sge i32 %21, 0
  br i1 %cmp32, label %land.lhs.true, label %if.else52, !prof !69

land.lhs.true:                                    ; preds = %if.end30
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %22 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp sge i32 %22, 0
  br i1 %cmp34, label %if.then35, label %if.else52, !prof !68

if.then35:                                        ; preds = %land.lhs.true
  %23 = load [18 x i8]*, [18 x i8]** %refidx0.addr, align 8
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %24 = load i32, i32* %arrayidx36, align 4
  %div37 = sdiv i32 %24, 2
  %idxprom38 = sext i32 %div37 to i64
  %arrayidx39 = getelementptr inbounds [18 x i8], [18 x i8]* %23, i64 %idxprom38
  %arrayidx40 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %25 = load i32, i32* %arrayidx40, align 4
  %div41 = sdiv i32 %25, 2
  %idxprom42 = sext i32 %div41 to i64
  %arrayidx43 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx39, i64 0, i64 %idxprom42
  %26 = load i8, i8* %arrayidx43, align 1
  store i8 %26, i8* %refC0, align 1
  %27 = load [18 x i8]*, [18 x i8]** %refidx1.addr, align 8
  %arrayidx44 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %28 = load i32, i32* %arrayidx44, align 4
  %div45 = sdiv i32 %28, 2
  %idxprom46 = sext i32 %div45 to i64
  %arrayidx47 = getelementptr inbounds [18 x i8], [18 x i8]* %27, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %29 = load i32, i32* %arrayidx48, align 4
  %div49 = sdiv i32 %29, 2
  %idxprom50 = sext i32 %div49 to i64
  %arrayidx51 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx47, i64 0, i64 %idxprom50
  %30 = load i8, i8* %arrayidx51, align 1
  store i8 %30, i8* %refC1, align 1
  br label %if.end53

if.else52:                                        ; preds = %land.lhs.true, %if.end30
  store i8 -1, i8* %refC0, align 1
  store i8 -1, i8* %refC1, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %if.then35
  %31 = load i8, i8* %refA0, align 1
  %conv = sext i8 %31 to i32
  %32 = load i8, i8* %refB0, align 1
  %conv54 = sext i8 %32 to i32
  %33 = load i8, i8* %refC0, align 1
  %conv55 = sext i8 %33 to i32
  %call = call i32 @minpositive(i32 %conv54, i32 %conv55)
  %call56 = call i32 @minpositive(i32 %conv, i32 %call)
  %conv57 = trunc i32 %call56 to i8
  %34 = load i8*, i8** %ref01.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %34, i64 0
  store i8 %conv57, i8* %arrayidx58, align 1
  %35 = load i8, i8* %refA1, align 1
  %conv59 = sext i8 %35 to i32
  %36 = load i8, i8* %refB1, align 1
  %conv60 = sext i8 %36 to i32
  %37 = load i8, i8* %refC1, align 1
  %conv61 = sext i8 %37 to i32
  %call62 = call i32 @minpositive(i32 %conv60, i32 %conv61)
  %call63 = call i32 @minpositive(i32 %conv59, i32 %call62)
  %conv64 = trunc i32 %call63 to i8
  %38 = load i8*, i8** %ref01.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %conv64, i8* %arrayidx65, align 1
  %39 = load i8*, i8** %ref01.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %39, i64 0
  %40 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %40 to i32
  %cmp68 = icmp slt i32 %conv67, 0
  br i1 %cmp68, label %land.lhs.true70, label %if.else78, !prof !70

land.lhs.true70:                                  ; preds = %if.end53
  %41 = load i8*, i8** %ref01.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx71, align 1
  %conv72 = sext i8 %42 to i32
  %cmp73 = icmp slt i32 %conv72, 0
  br i1 %cmp73, label %if.then75, label %if.else78, !prof !71

if.then75:                                        ; preds = %land.lhs.true70
  %43 = load i8*, i8** %ref01.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %43, i64 0
  store i8 0, i8* %arrayidx76, align 1
  %44 = load i8*, i8** %ref01.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 0, i8* %arrayidx77, align 1
  store i8 1, i8* %retval, align 1
  br label %return

if.else78:                                        ; preds = %land.lhs.true70, %if.end53
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else78, %if.then75
  %45 = load i8, i8* %retval, align 1
  ret i8 %45
}

declare dso_local zeroext i8 @t_e(i32, %struct.NALU_t*, i8*, i64*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @findmv([18 x i8]* %refidx01, [36 x [2 x i32]]* %mvd01, i32 %startblkx, i32 %startblky, i32 %blk, i32 %width, i32 %blkx, i32 %blky, i32 %refid, i32* %retmv, i8 zeroext %dir, i8 zeroext %skipflag) #0 !prof !72 {
entry:
  %refidx01.addr = alloca [18 x i8]*, align 8
  %mvd01.addr = alloca [36 x [2 x i32]]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %refid.addr = alloca i32, align 4
  %retmv.addr = alloca i32*, align 8
  %dir.addr = alloca i8, align 1
  %skipflag.addr = alloca i8, align 1
  %tmpAmv = alloca [2 x i32], align 4
  %tmpBmv = alloca [2 x i32], align 4
  %tmpCmv = alloca [2 x i32], align 4
  %idxC = alloca [2 x i32], align 4
  %refA = alloca i8, align 1
  %refB = alloca i8, align 1
  %refC = alloca i8, align 1
  store [18 x i8]* %refidx01, [18 x i8]** %refidx01.addr, align 8
  store [36 x [2 x i32]]* %mvd01, [36 x [2 x i32]]** %mvd01.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32 %refid, i32* %refid.addr, align 4
  store i32* %retmv, i32** %retmv.addr, align 8
  store i8 %dir, i8* %dir.addr, align 1
  store i8 %skipflag, i8* %skipflag.addr, align 1
  %0 = bitcast [2 x i32]* %tmpAmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 8, i1 false)
  %1 = bitcast [2 x i32]* %tmpBmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 8, i1 false)
  %2 = bitcast [2 x i32]* %tmpCmv to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 8, i1 false)
  %3 = bitcast [2 x i32]* %idxC to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 8, i1 false)
  store i8 0, i8* %refA, align 1
  store i8 0, i8* %refB, align 1
  store i8 0, i8* %refC, align 1
  %4 = load i32, i32* %startblkx.addr, align 4
  %5 = load i32, i32* %blkx.addr, align 4
  %add = add nsw i32 %4, %5
  %sub = sub nsw i32 %add, 1
  %cmp = icmp sge i32 %sub, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !73

if.then:                                          ; preds = %entry
  %6 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %7 = load i32, i32* %startblkx.addr, align 4
  %8 = load i32, i32* %blkx.addr, align 4
  %add1 = add nsw i32 %7, %8
  %sub2 = sub nsw i32 %add1, 1
  %div = sdiv i32 %sub2, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 %idxprom
  %9 = load i32, i32* %startblky.addr, align 4
  %10 = load i32, i32* %blky.addr, align 4
  %add3 = add nsw i32 %9, %10
  %div4 = sdiv i32 %add3, 2
  %idxprom5 = sext i32 %div4 to i64
  %arrayidx6 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx, i64 0, i64 %idxprom5
  %11 = load i8, i8* %arrayidx6, align 1
  store i8 %11, i8* %refA, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i8 -1, i8* %refA, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %startblky.addr, align 4
  %13 = load i32, i32* %blky.addr, align 4
  %add7 = add nsw i32 %12, %13
  %sub8 = sub nsw i32 %add7, 1
  %cmp9 = icmp sge i32 %sub8, 0
  br i1 %cmp9, label %if.then10, label %if.else20, !prof !74

if.then10:                                        ; preds = %if.end
  %14 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %15 = load i32, i32* %startblkx.addr, align 4
  %16 = load i32, i32* %blkx.addr, align 4
  %add11 = add nsw i32 %15, %16
  %div12 = sdiv i32 %add11, 2
  %idxprom13 = sext i32 %div12 to i64
  %arrayidx14 = getelementptr inbounds [18 x i8], [18 x i8]* %14, i64 %idxprom13
  %17 = load i32, i32* %startblky.addr, align 4
  %18 = load i32, i32* %blky.addr, align 4
  %add15 = add nsw i32 %17, %18
  %sub16 = sub nsw i32 %add15, 1
  %div17 = sdiv i32 %sub16, 2
  %idxprom18 = sext i32 %div17 to i64
  %arrayidx19 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx14, i64 0, i64 %idxprom18
  %19 = load i8, i8* %arrayidx19, align 1
  store i8 %19, i8* %refB, align 1
  br label %if.end21

if.else20:                                        ; preds = %if.end
  store i8 -1, i8* %refB, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.then10
  %20 = load i32, i32* %startblkx.addr, align 4
  %21 = load i32, i32* %startblky.addr, align 4
  %22 = load i32, i32* %blk.addr, align 4
  %23 = load i32, i32* %width.addr, align 4
  %24 = load i32, i32* %blkx.addr, align 4
  %25 = load i32, i32* %blky.addr, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i32 0, i32 0
  call void @findCidx(i32 %20, i32 %21, i32 %22, i32 %23, i32 %24, i32 %25, i32* %arraydecay)
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %26 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp sge i32 %26, 0
  br i1 %cmp23, label %land.lhs.true, label %if.else35, !prof !75

land.lhs.true:                                    ; preds = %if.end21
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %27 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp sge i32 %27, 0
  br i1 %cmp25, label %if.then26, label %if.else35, !prof !74

if.then26:                                        ; preds = %land.lhs.true
  %28 = load [18 x i8]*, [18 x i8]** %refidx01.addr, align 8
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %29 = load i32, i32* %arrayidx27, align 4
  %div28 = sdiv i32 %29, 2
  %idxprom29 = sext i32 %div28 to i64
  %arrayidx30 = getelementptr inbounds [18 x i8], [18 x i8]* %28, i64 %idxprom29
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %30 = load i32, i32* %arrayidx31, align 4
  %div32 = sdiv i32 %30, 2
  %idxprom33 = sext i32 %div32 to i64
  %arrayidx34 = getelementptr inbounds [18 x i8], [18 x i8]* %arrayidx30, i64 0, i64 %idxprom33
  %31 = load i8, i8* %arrayidx34, align 1
  store i8 %31, i8* %refC, align 1
  br label %if.end36

if.else35:                                        ; preds = %land.lhs.true, %if.end21
  store i8 -1, i8* %refC, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.else35, %if.then26
  %32 = load i8, i8* %skipflag.addr, align 1
  %conv = zext i8 %32 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true37, label %if.else47, !prof !76

land.lhs.true37:                                  ; preds = %if.end36
  %33 = load i8, i8* %refA, align 1
  %conv38 = sext i8 %33 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %if.then44, label %lor.lhs.false, !prof !77

lor.lhs.false:                                    ; preds = %land.lhs.true37
  %34 = load i8, i8* %refB, align 1
  %conv41 = sext i8 %34 to i32
  %cmp42 = icmp slt i32 %conv41, 0
  br i1 %cmp42, label %if.then44, label %if.else47, !prof !78

if.then44:                                        ; preds = %lor.lhs.false, %land.lhs.true37
  %35 = load i32*, i32** %retmv.addr, align 8
  %arrayidx45 = getelementptr inbounds i32, i32* %35, i64 0
  store i32 0, i32* %arrayidx45, align 4
  %36 = load i32*, i32** %retmv.addr, align 8
  %arrayidx46 = getelementptr inbounds i32, i32* %36, i64 1
  store i32 0, i32* %arrayidx46, align 4
  br label %if.end372

if.else47:                                        ; preds = %lor.lhs.false, %if.end36
  %37 = load i8, i8* %dir.addr, align 1
  %conv48 = zext i8 %37 to i32
  %cmp49 = icmp eq i32 %conv48, 1
  br i1 %cmp49, label %land.lhs.true51, label %if.else74, !prof !79

land.lhs.true51:                                  ; preds = %if.else47
  %38 = load i8, i8* %refA, align 1
  %conv52 = sext i8 %38 to i32
  %39 = load i32, i32* %refid.addr, align 4
  %cmp53 = icmp eq i32 %conv52, %39
  br i1 %cmp53, label %if.then55, label %if.else74, !prof !80

if.then55:                                        ; preds = %land.lhs.true51
  %40 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %41 = load i32, i32* %startblkx.addr, align 4
  %42 = load i32, i32* %blkx.addr, align 4
  %add56 = add nsw i32 %41, %42
  %sub57 = sub nsw i32 %add56, 1
  %idxprom58 = sext i32 %sub57 to i64
  %arrayidx59 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %40, i64 %idxprom58
  %43 = load i32, i32* %startblky.addr, align 4
  %44 = load i32, i32* %blky.addr, align 4
  %add60 = add nsw i32 %43, %44
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx59, i64 0, i64 %idxprom61
  %arrayidx63 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx62, i64 0, i64 0
  %45 = load i32, i32* %arrayidx63, align 4
  %46 = load i32*, i32** %retmv.addr, align 8
  %arrayidx64 = getelementptr inbounds i32, i32* %46, i64 0
  store i32 %45, i32* %arrayidx64, align 4
  %47 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %48 = load i32, i32* %startblkx.addr, align 4
  %49 = load i32, i32* %blkx.addr, align 4
  %add65 = add nsw i32 %48, %49
  %sub66 = sub nsw i32 %add65, 1
  %idxprom67 = sext i32 %sub66 to i64
  %arrayidx68 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %47, i64 %idxprom67
  %50 = load i32, i32* %startblky.addr, align 4
  %51 = load i32, i32* %blky.addr, align 4
  %add69 = add nsw i32 %50, %51
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx68, i64 0, i64 %idxprom70
  %arrayidx72 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx71, i64 0, i64 1
  %52 = load i32, i32* %arrayidx72, align 4
  %53 = load i32*, i32** %retmv.addr, align 8
  %arrayidx73 = getelementptr inbounds i32, i32* %53, i64 1
  store i32 %52, i32* %arrayidx73, align 4
  br label %if.end371

if.else74:                                        ; preds = %land.lhs.true51, %if.else47
  %54 = load i8, i8* %dir.addr, align 1
  %conv75 = zext i8 %54 to i32
  %cmp76 = icmp eq i32 %conv75, 2
  br i1 %cmp76, label %land.lhs.true78, label %if.else101, !prof !81

land.lhs.true78:                                  ; preds = %if.else74
  %55 = load i8, i8* %refB, align 1
  %conv79 = sext i8 %55 to i32
  %56 = load i32, i32* %refid.addr, align 4
  %cmp80 = icmp eq i32 %conv79, %56
  br i1 %cmp80, label %if.then82, label %if.else101, !prof !82

if.then82:                                        ; preds = %land.lhs.true78
  %57 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %58 = load i32, i32* %startblkx.addr, align 4
  %59 = load i32, i32* %blkx.addr, align 4
  %add83 = add nsw i32 %58, %59
  %idxprom84 = sext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %57, i64 %idxprom84
  %60 = load i32, i32* %startblky.addr, align 4
  %61 = load i32, i32* %blky.addr, align 4
  %add86 = add nsw i32 %60, %61
  %sub87 = sub nsw i32 %add86, 1
  %idxprom88 = sext i32 %sub87 to i64
  %arrayidx89 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx85, i64 0, i64 %idxprom88
  %arrayidx90 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx89, i64 0, i64 0
  %62 = load i32, i32* %arrayidx90, align 4
  %63 = load i32*, i32** %retmv.addr, align 8
  %arrayidx91 = getelementptr inbounds i32, i32* %63, i64 0
  store i32 %62, i32* %arrayidx91, align 4
  %64 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %65 = load i32, i32* %startblkx.addr, align 4
  %66 = load i32, i32* %blkx.addr, align 4
  %add92 = add nsw i32 %65, %66
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %64, i64 %idxprom93
  %67 = load i32, i32* %startblky.addr, align 4
  %68 = load i32, i32* %blky.addr, align 4
  %add95 = add nsw i32 %67, %68
  %sub96 = sub nsw i32 %add95, 1
  %idxprom97 = sext i32 %sub96 to i64
  %arrayidx98 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx94, i64 0, i64 %idxprom97
  %arrayidx99 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx98, i64 0, i64 1
  %69 = load i32, i32* %arrayidx99, align 4
  %70 = load i32*, i32** %retmv.addr, align 8
  %arrayidx100 = getelementptr inbounds i32, i32* %70, i64 1
  store i32 %69, i32* %arrayidx100, align 4
  br label %if.end370

if.else101:                                       ; preds = %land.lhs.true78, %if.else74
  %71 = load i8, i8* %dir.addr, align 1
  %conv102 = zext i8 %71 to i32
  %cmp103 = icmp eq i32 %conv102, 3
  br i1 %cmp103, label %land.lhs.true105, label %if.else126, !prof !83

land.lhs.true105:                                 ; preds = %if.else101
  %72 = load i8, i8* %refC, align 1
  %conv106 = sext i8 %72 to i32
  %73 = load i32, i32* %refid.addr, align 4
  %cmp107 = icmp eq i32 %conv106, %73
  br i1 %cmp107, label %if.then109, label %if.else126, !prof !32

if.then109:                                       ; preds = %land.lhs.true105
  %74 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx110 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %75 = load i32, i32* %arrayidx110, align 4
  %idxprom111 = sext i32 %75 to i64
  %arrayidx112 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %74, i64 %idxprom111
  %arrayidx113 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %76 = load i32, i32* %arrayidx113, align 4
  %idxprom114 = sext i32 %76 to i64
  %arrayidx115 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx112, i64 0, i64 %idxprom114
  %arrayidx116 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx115, i64 0, i64 0
  %77 = load i32, i32* %arrayidx116, align 4
  %78 = load i32*, i32** %retmv.addr, align 8
  %arrayidx117 = getelementptr inbounds i32, i32* %78, i64 0
  store i32 %77, i32* %arrayidx117, align 4
  %79 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx118 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %80 = load i32, i32* %arrayidx118, align 4
  %idxprom119 = sext i32 %80 to i64
  %arrayidx120 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %79, i64 %idxprom119
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %81 = load i32, i32* %arrayidx121, align 4
  %idxprom122 = sext i32 %81 to i64
  %arrayidx123 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx120, i64 0, i64 %idxprom122
  %arrayidx124 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx123, i64 0, i64 1
  %82 = load i32, i32* %arrayidx124, align 4
  %83 = load i32*, i32** %retmv.addr, align 8
  %arrayidx125 = getelementptr inbounds i32, i32* %83, i64 1
  store i32 %82, i32* %arrayidx125, align 4
  br label %if.end369

if.else126:                                       ; preds = %land.lhs.true105, %if.else101
  %84 = load i8, i8* %refC, align 1
  %conv127 = sext i8 %84 to i32
  %cmp128 = icmp slt i32 %conv127, 0
  br i1 %cmp128, label %land.lhs.true130, label %if.else157, !prof !84

land.lhs.true130:                                 ; preds = %if.else126
  %85 = load i8, i8* %refB, align 1
  %conv131 = sext i8 %85 to i32
  %cmp132 = icmp slt i32 %conv131, 0
  br i1 %cmp132, label %land.lhs.true134, label %if.else157, !prof !85

land.lhs.true134:                                 ; preds = %land.lhs.true130
  %86 = load i8, i8* %refA, align 1
  %conv135 = sext i8 %86 to i32
  %cmp136 = icmp sge i32 %conv135, 0
  br i1 %cmp136, label %if.then138, label %if.else157, !prof !86

if.then138:                                       ; preds = %land.lhs.true134
  %87 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %88 = load i32, i32* %startblkx.addr, align 4
  %89 = load i32, i32* %blkx.addr, align 4
  %add139 = add nsw i32 %88, %89
  %sub140 = sub nsw i32 %add139, 1
  %idxprom141 = sext i32 %sub140 to i64
  %arrayidx142 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %87, i64 %idxprom141
  %90 = load i32, i32* %startblky.addr, align 4
  %91 = load i32, i32* %blky.addr, align 4
  %add143 = add nsw i32 %90, %91
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx142, i64 0, i64 %idxprom144
  %arrayidx146 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx145, i64 0, i64 0
  %92 = load i32, i32* %arrayidx146, align 4
  %93 = load i32*, i32** %retmv.addr, align 8
  %arrayidx147 = getelementptr inbounds i32, i32* %93, i64 0
  store i32 %92, i32* %arrayidx147, align 4
  %94 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %95 = load i32, i32* %startblkx.addr, align 4
  %96 = load i32, i32* %blkx.addr, align 4
  %add148 = add nsw i32 %95, %96
  %sub149 = sub nsw i32 %add148, 1
  %idxprom150 = sext i32 %sub149 to i64
  %arrayidx151 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %94, i64 %idxprom150
  %97 = load i32, i32* %startblky.addr, align 4
  %98 = load i32, i32* %blky.addr, align 4
  %add152 = add nsw i32 %97, %98
  %idxprom153 = sext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx151, i64 0, i64 %idxprom153
  %arrayidx155 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx154, i64 0, i64 1
  %99 = load i32, i32* %arrayidx155, align 4
  %100 = load i32*, i32** %retmv.addr, align 8
  %arrayidx156 = getelementptr inbounds i32, i32* %100, i64 1
  store i32 %99, i32* %arrayidx156, align 4
  br label %if.end368

if.else157:                                       ; preds = %land.lhs.true134, %land.lhs.true130, %if.else126
  %101 = load i8, i8* %refA, align 1
  %conv158 = sext i8 %101 to i32
  %102 = load i32, i32* %refid.addr, align 4
  %cmp159 = icmp eq i32 %conv158, %102
  br i1 %cmp159, label %land.lhs.true161, label %if.else188, !prof !87

land.lhs.true161:                                 ; preds = %if.else157
  %103 = load i8, i8* %refB, align 1
  %conv162 = sext i8 %103 to i32
  %104 = load i32, i32* %refid.addr, align 4
  %cmp163 = icmp ne i32 %conv162, %104
  br i1 %cmp163, label %land.lhs.true165, label %if.else188, !prof !88

land.lhs.true165:                                 ; preds = %land.lhs.true161
  %105 = load i8, i8* %refC, align 1
  %conv166 = sext i8 %105 to i32
  %106 = load i32, i32* %refid.addr, align 4
  %cmp167 = icmp ne i32 %conv166, %106
  br i1 %cmp167, label %if.then169, label %if.else188

if.then169:                                       ; preds = %land.lhs.true165
  %107 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %108 = load i32, i32* %startblkx.addr, align 4
  %109 = load i32, i32* %blkx.addr, align 4
  %add170 = add nsw i32 %108, %109
  %sub171 = sub nsw i32 %add170, 1
  %idxprom172 = sext i32 %sub171 to i64
  %arrayidx173 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %107, i64 %idxprom172
  %110 = load i32, i32* %startblky.addr, align 4
  %111 = load i32, i32* %blky.addr, align 4
  %add174 = add nsw i32 %110, %111
  %idxprom175 = sext i32 %add174 to i64
  %arrayidx176 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx173, i64 0, i64 %idxprom175
  %arrayidx177 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx176, i64 0, i64 0
  %112 = load i32, i32* %arrayidx177, align 4
  %113 = load i32*, i32** %retmv.addr, align 8
  %arrayidx178 = getelementptr inbounds i32, i32* %113, i64 0
  store i32 %112, i32* %arrayidx178, align 4
  %114 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %115 = load i32, i32* %startblkx.addr, align 4
  %116 = load i32, i32* %blkx.addr, align 4
  %add179 = add nsw i32 %115, %116
  %sub180 = sub nsw i32 %add179, 1
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %114, i64 %idxprom181
  %117 = load i32, i32* %startblky.addr, align 4
  %118 = load i32, i32* %blky.addr, align 4
  %add183 = add nsw i32 %117, %118
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx182, i64 0, i64 %idxprom184
  %arrayidx186 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx185, i64 0, i64 1
  %119 = load i32, i32* %arrayidx186, align 4
  %120 = load i32*, i32** %retmv.addr, align 8
  %arrayidx187 = getelementptr inbounds i32, i32* %120, i64 1
  store i32 %119, i32* %arrayidx187, align 4
  br label %if.end367

if.else188:                                       ; preds = %land.lhs.true165, %land.lhs.true161, %if.else157
  %121 = load i8, i8* %refA, align 1
  %conv189 = sext i8 %121 to i32
  %122 = load i32, i32* %refid.addr, align 4
  %cmp190 = icmp ne i32 %conv189, %122
  br i1 %cmp190, label %land.lhs.true192, label %if.else219, !prof !89

land.lhs.true192:                                 ; preds = %if.else188
  %123 = load i8, i8* %refB, align 1
  %conv193 = sext i8 %123 to i32
  %124 = load i32, i32* %refid.addr, align 4
  %cmp194 = icmp eq i32 %conv193, %124
  br i1 %cmp194, label %land.lhs.true196, label %if.else219, !prof !90

land.lhs.true196:                                 ; preds = %land.lhs.true192
  %125 = load i8, i8* %refC, align 1
  %conv197 = sext i8 %125 to i32
  %126 = load i32, i32* %refid.addr, align 4
  %cmp198 = icmp ne i32 %conv197, %126
  br i1 %cmp198, label %if.then200, label %if.else219, !prof !91

if.then200:                                       ; preds = %land.lhs.true196
  %127 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %128 = load i32, i32* %startblkx.addr, align 4
  %129 = load i32, i32* %blkx.addr, align 4
  %add201 = add nsw i32 %128, %129
  %idxprom202 = sext i32 %add201 to i64
  %arrayidx203 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %127, i64 %idxprom202
  %130 = load i32, i32* %startblky.addr, align 4
  %131 = load i32, i32* %blky.addr, align 4
  %add204 = add nsw i32 %130, %131
  %sub205 = sub nsw i32 %add204, 1
  %idxprom206 = sext i32 %sub205 to i64
  %arrayidx207 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx203, i64 0, i64 %idxprom206
  %arrayidx208 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx207, i64 0, i64 0
  %132 = load i32, i32* %arrayidx208, align 4
  %133 = load i32*, i32** %retmv.addr, align 8
  %arrayidx209 = getelementptr inbounds i32, i32* %133, i64 0
  store i32 %132, i32* %arrayidx209, align 4
  %134 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %135 = load i32, i32* %startblkx.addr, align 4
  %136 = load i32, i32* %blkx.addr, align 4
  %add210 = add nsw i32 %135, %136
  %idxprom211 = sext i32 %add210 to i64
  %arrayidx212 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %134, i64 %idxprom211
  %137 = load i32, i32* %startblky.addr, align 4
  %138 = load i32, i32* %blky.addr, align 4
  %add213 = add nsw i32 %137, %138
  %sub214 = sub nsw i32 %add213, 1
  %idxprom215 = sext i32 %sub214 to i64
  %arrayidx216 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx212, i64 0, i64 %idxprom215
  %arrayidx217 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx216, i64 0, i64 1
  %139 = load i32, i32* %arrayidx217, align 4
  %140 = load i32*, i32** %retmv.addr, align 8
  %arrayidx218 = getelementptr inbounds i32, i32* %140, i64 1
  store i32 %139, i32* %arrayidx218, align 4
  br label %if.end366

if.else219:                                       ; preds = %land.lhs.true196, %land.lhs.true192, %if.else188
  %141 = load i8, i8* %refA, align 1
  %conv220 = sext i8 %141 to i32
  %142 = load i32, i32* %refid.addr, align 4
  %cmp221 = icmp ne i32 %conv220, %142
  br i1 %cmp221, label %land.lhs.true223, label %if.else248, !prof !89

land.lhs.true223:                                 ; preds = %if.else219
  %143 = load i8, i8* %refB, align 1
  %conv224 = sext i8 %143 to i32
  %144 = load i32, i32* %refid.addr, align 4
  %cmp225 = icmp ne i32 %conv224, %144
  br i1 %cmp225, label %land.lhs.true227, label %if.else248, !prof !92

land.lhs.true227:                                 ; preds = %land.lhs.true223
  %145 = load i8, i8* %refC, align 1
  %conv228 = sext i8 %145 to i32
  %146 = load i32, i32* %refid.addr, align 4
  %cmp229 = icmp eq i32 %conv228, %146
  br i1 %cmp229, label %if.then231, label %if.else248, !prof !93

if.then231:                                       ; preds = %land.lhs.true227
  %147 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx232 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %148 = load i32, i32* %arrayidx232, align 4
  %idxprom233 = sext i32 %148 to i64
  %arrayidx234 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %147, i64 %idxprom233
  %arrayidx235 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %149 = load i32, i32* %arrayidx235, align 4
  %idxprom236 = sext i32 %149 to i64
  %arrayidx237 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx234, i64 0, i64 %idxprom236
  %arrayidx238 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx237, i64 0, i64 0
  %150 = load i32, i32* %arrayidx238, align 4
  %151 = load i32*, i32** %retmv.addr, align 8
  %arrayidx239 = getelementptr inbounds i32, i32* %151, i64 0
  store i32 %150, i32* %arrayidx239, align 4
  %152 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx240 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %153 = load i32, i32* %arrayidx240, align 4
  %idxprom241 = sext i32 %153 to i64
  %arrayidx242 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %152, i64 %idxprom241
  %arrayidx243 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %154 = load i32, i32* %arrayidx243, align 4
  %idxprom244 = sext i32 %154 to i64
  %arrayidx245 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx242, i64 0, i64 %idxprom244
  %arrayidx246 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx245, i64 0, i64 1
  %155 = load i32, i32* %arrayidx246, align 4
  %156 = load i32*, i32** %retmv.addr, align 8
  %arrayidx247 = getelementptr inbounds i32, i32* %156, i64 1
  store i32 %155, i32* %arrayidx247, align 4
  br label %if.end365

if.else248:                                       ; preds = %land.lhs.true227, %land.lhs.true223, %if.else219
  %157 = load i8, i8* %refA, align 1
  %conv249 = sext i8 %157 to i32
  %cmp250 = icmp slt i32 %conv249, 0
  br i1 %cmp250, label %if.then252, label %if.else255, !prof !89

if.then252:                                       ; preds = %if.else248
  %arrayidx253 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  store i32 0, i32* %arrayidx253, align 4
  %arrayidx254 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  store i32 0, i32* %arrayidx254, align 4
  br label %if.end274

if.else255:                                       ; preds = %if.else248
  %158 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %159 = load i32, i32* %startblkx.addr, align 4
  %160 = load i32, i32* %blkx.addr, align 4
  %add256 = add nsw i32 %159, %160
  %sub257 = sub nsw i32 %add256, 1
  %idxprom258 = sext i32 %sub257 to i64
  %arrayidx259 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %158, i64 %idxprom258
  %161 = load i32, i32* %startblky.addr, align 4
  %162 = load i32, i32* %blky.addr, align 4
  %add260 = add nsw i32 %161, %162
  %idxprom261 = sext i32 %add260 to i64
  %arrayidx262 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx259, i64 0, i64 %idxprom261
  %arrayidx263 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx262, i64 0, i64 0
  %163 = load i32, i32* %arrayidx263, align 4
  %arrayidx264 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  store i32 %163, i32* %arrayidx264, align 4
  %164 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %165 = load i32, i32* %startblkx.addr, align 4
  %166 = load i32, i32* %blkx.addr, align 4
  %add265 = add nsw i32 %165, %166
  %sub266 = sub nsw i32 %add265, 1
  %idxprom267 = sext i32 %sub266 to i64
  %arrayidx268 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %164, i64 %idxprom267
  %167 = load i32, i32* %startblky.addr, align 4
  %168 = load i32, i32* %blky.addr, align 4
  %add269 = add nsw i32 %167, %168
  %idxprom270 = sext i32 %add269 to i64
  %arrayidx271 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx268, i64 0, i64 %idxprom270
  %arrayidx272 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx271, i64 0, i64 1
  %169 = load i32, i32* %arrayidx272, align 4
  %arrayidx273 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  store i32 %169, i32* %arrayidx273, align 4
  br label %if.end274

if.end274:                                        ; preds = %if.else255, %if.then252
  %170 = load i8, i8* %refB, align 1
  %conv275 = sext i8 %170 to i32
  %cmp276 = icmp slt i32 %conv275, 0
  br i1 %cmp276, label %if.then278, label %if.else281, !prof !94

if.then278:                                       ; preds = %if.end274
  %arrayidx279 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  store i32 0, i32* %arrayidx279, align 4
  %arrayidx280 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  store i32 0, i32* %arrayidx280, align 4
  br label %if.end300

if.else281:                                       ; preds = %if.end274
  %171 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %172 = load i32, i32* %startblkx.addr, align 4
  %173 = load i32, i32* %blkx.addr, align 4
  %add282 = add nsw i32 %172, %173
  %idxprom283 = sext i32 %add282 to i64
  %arrayidx284 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %171, i64 %idxprom283
  %174 = load i32, i32* %startblky.addr, align 4
  %175 = load i32, i32* %blky.addr, align 4
  %add285 = add nsw i32 %174, %175
  %sub286 = sub nsw i32 %add285, 1
  %idxprom287 = sext i32 %sub286 to i64
  %arrayidx288 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx284, i64 0, i64 %idxprom287
  %arrayidx289 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx288, i64 0, i64 0
  %176 = load i32, i32* %arrayidx289, align 4
  %arrayidx290 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  store i32 %176, i32* %arrayidx290, align 4
  %177 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %178 = load i32, i32* %startblkx.addr, align 4
  %179 = load i32, i32* %blkx.addr, align 4
  %add291 = add nsw i32 %178, %179
  %idxprom292 = sext i32 %add291 to i64
  %arrayidx293 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %177, i64 %idxprom292
  %180 = load i32, i32* %startblky.addr, align 4
  %181 = load i32, i32* %blky.addr, align 4
  %add294 = add nsw i32 %180, %181
  %sub295 = sub nsw i32 %add294, 1
  %idxprom296 = sext i32 %sub295 to i64
  %arrayidx297 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx293, i64 0, i64 %idxprom296
  %arrayidx298 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx297, i64 0, i64 1
  %182 = load i32, i32* %arrayidx298, align 4
  %arrayidx299 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  store i32 %182, i32* %arrayidx299, align 4
  br label %if.end300

if.end300:                                        ; preds = %if.else281, %if.then278
  %183 = load i8, i8* %refC, align 1
  %conv301 = sext i8 %183 to i32
  %cmp302 = icmp slt i32 %conv301, 0
  br i1 %cmp302, label %if.then304, label %if.else307, !prof !94

if.then304:                                       ; preds = %if.end300
  %arrayidx305 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  store i32 0, i32* %arrayidx305, align 4
  %arrayidx306 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  store i32 0, i32* %arrayidx306, align 4
  br label %if.end324

if.else307:                                       ; preds = %if.end300
  %184 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx308 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %185 = load i32, i32* %arrayidx308, align 4
  %idxprom309 = sext i32 %185 to i64
  %arrayidx310 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %184, i64 %idxprom309
  %arrayidx311 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %186 = load i32, i32* %arrayidx311, align 4
  %idxprom312 = sext i32 %186 to i64
  %arrayidx313 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx310, i64 0, i64 %idxprom312
  %arrayidx314 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx313, i64 0, i64 0
  %187 = load i32, i32* %arrayidx314, align 4
  %arrayidx315 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  store i32 %187, i32* %arrayidx315, align 4
  %188 = load [36 x [2 x i32]]*, [36 x [2 x i32]]** %mvd01.addr, align 8
  %arrayidx316 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 0
  %189 = load i32, i32* %arrayidx316, align 4
  %idxprom317 = sext i32 %189 to i64
  %arrayidx318 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %188, i64 %idxprom317
  %arrayidx319 = getelementptr inbounds [2 x i32], [2 x i32]* %idxC, i64 0, i64 1
  %190 = load i32, i32* %arrayidx319, align 4
  %idxprom320 = sext i32 %190 to i64
  %arrayidx321 = getelementptr inbounds [36 x [2 x i32]], [36 x [2 x i32]]* %arrayidx318, i64 0, i64 %idxprom320
  %arrayidx322 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx321, i64 0, i64 1
  %191 = load i32, i32* %arrayidx322, align 4
  %arrayidx323 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  store i32 %191, i32* %arrayidx323, align 4
  br label %if.end324

if.end324:                                        ; preds = %if.else307, %if.then304
  %192 = load i8, i8* %skipflag.addr, align 1
  %conv325 = zext i8 %192 to i32
  %tobool326 = icmp ne i32 %conv325, 0
  br i1 %tobool326, label %land.lhs.true327, label %if.else354, !prof !95

land.lhs.true327:                                 ; preds = %if.end324
  %193 = load i8, i8* %refA, align 1
  %conv328 = sext i8 %193 to i32
  %cmp329 = icmp eq i32 %conv328, 0
  br i1 %cmp329, label %land.lhs.true331, label %lor.lhs.false339, !prof !96

land.lhs.true331:                                 ; preds = %land.lhs.true327
  %arrayidx332 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  %194 = load i32, i32* %arrayidx332, align 4
  %cmp333 = icmp eq i32 %194, 0
  br i1 %cmp333, label %land.lhs.true335, label %lor.lhs.false339, !prof !97

land.lhs.true335:                                 ; preds = %land.lhs.true331
  %arrayidx336 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  %195 = load i32, i32* %arrayidx336, align 4
  %cmp337 = icmp eq i32 %195, 0
  br i1 %cmp337, label %if.then351, label %lor.lhs.false339, !prof !98

lor.lhs.false339:                                 ; preds = %land.lhs.true335, %land.lhs.true331, %land.lhs.true327
  %196 = load i8, i8* %refB, align 1
  %conv340 = sext i8 %196 to i32
  %cmp341 = icmp eq i32 %conv340, 0
  br i1 %cmp341, label %land.lhs.true343, label %if.else354, !prof !99

land.lhs.true343:                                 ; preds = %lor.lhs.false339
  %arrayidx344 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  %197 = load i32, i32* %arrayidx344, align 4
  %cmp345 = icmp eq i32 %197, 0
  br i1 %cmp345, label %land.lhs.true347, label %if.else354, !prof !100

land.lhs.true347:                                 ; preds = %land.lhs.true343
  %arrayidx348 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  %198 = load i32, i32* %arrayidx348, align 4
  %cmp349 = icmp eq i32 %198, 0
  br i1 %cmp349, label %if.then351, label %if.else354, !prof !101

if.then351:                                       ; preds = %land.lhs.true347, %land.lhs.true335
  %199 = load i32*, i32** %retmv.addr, align 8
  %arrayidx352 = getelementptr inbounds i32, i32* %199, i64 0
  store i32 0, i32* %arrayidx352, align 4
  %200 = load i32*, i32** %retmv.addr, align 8
  %arrayidx353 = getelementptr inbounds i32, i32* %200, i64 1
  store i32 0, i32* %arrayidx353, align 4
  br label %if.end364

if.else354:                                       ; preds = %land.lhs.true347, %land.lhs.true343, %lor.lhs.false339, %if.end324
  %arrayidx355 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 0
  %201 = load i32, i32* %arrayidx355, align 4
  %arrayidx356 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 0
  %202 = load i32, i32* %arrayidx356, align 4
  %arrayidx357 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 0
  %203 = load i32, i32* %arrayidx357, align 4
  %call = call i32 @median(i32 %201, i32 %202, i32 %203)
  %204 = load i32*, i32** %retmv.addr, align 8
  %arrayidx358 = getelementptr inbounds i32, i32* %204, i64 0
  store i32 %call, i32* %arrayidx358, align 4
  %arrayidx359 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpAmv, i64 0, i64 1
  %205 = load i32, i32* %arrayidx359, align 4
  %arrayidx360 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpBmv, i64 0, i64 1
  %206 = load i32, i32* %arrayidx360, align 4
  %arrayidx361 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpCmv, i64 0, i64 1
  %207 = load i32, i32* %arrayidx361, align 4
  %call362 = call i32 @median(i32 %205, i32 %206, i32 %207)
  %208 = load i32*, i32** %retmv.addr, align 8
  %arrayidx363 = getelementptr inbounds i32, i32* %208, i64 1
  store i32 %call362, i32* %arrayidx363, align 4
  br label %if.end364

if.end364:                                        ; preds = %if.else354, %if.then351
  br label %if.end365

if.end365:                                        ; preds = %if.end364, %if.then231
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %if.then200
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %if.then169
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %if.then138
  br label %if.end369

if.end369:                                        ; preds = %if.end368, %if.then109
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %if.then82
  br label %if.end371

if.end371:                                        ; preds = %if.end370, %if.then55
  br label %if.end372

if.end372:                                        ; preds = %if.end371, %if.then44
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @find_directmv_flag(i8 zeroext %dflag, [2 x i8]* %refcol, [4 x [2 x i32]]* %mvcol, i32 %blkx, i32 %blky, i32* %mv1, i32* %mv0, i8 signext %refidx0, i8 signext %refidx1) #0 !prof !102 {
entry:
  %dflag.addr = alloca i8, align 1
  %refcol.addr = alloca [2 x i8]*, align 8
  %mvcol.addr = alloca [4 x [2 x i32]]*, align 8
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %mv1.addr = alloca i32*, align 8
  %mv0.addr = alloca i32*, align 8
  %refidx0.addr = alloca i8, align 1
  %refidx1.addr = alloca i8, align 1
  %colzero = alloca i8, align 1
  store i8 %dflag, i8* %dflag.addr, align 1
  store [2 x i8]* %refcol, [2 x i8]** %refcol.addr, align 8
  store [4 x [2 x i32]]* %mvcol, [4 x [2 x i32]]** %mvcol.addr, align 8
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32* %mv1, i32** %mv1.addr, align 8
  store i32* %mv0, i32** %mv0.addr, align 8
  store i8 %refidx0, i8* %refidx0.addr, align 1
  store i8 %refidx1, i8* %refidx1.addr, align 1
  store i8 0, i8* %colzero, align 1
  %0 = load [2 x i8]*, [2 x i8]** %refcol.addr, align 8
  %1 = load i32, i32* %blkx.addr, align 4
  %div = sdiv i32 %1, 2
  %idxprom = sext i32 %div to i64
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 %idxprom
  %2 = load i32, i32* %blky.addr, align 4
  %div1 = sdiv i32 %2, 2
  %idxprom2 = sext i32 %div1 to i64
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx, i64 0, i64 %idxprom2
  %3 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else, !prof !103

land.lhs.true:                                    ; preds = %entry
  %4 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %5 = load i32, i32* %blkx.addr, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %4, i64 %idxprom5
  %6 = load i32, i32* %blky.addr, align 4
  %idxprom7 = sext i32 %6 to i64
  %arrayidx8 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx6, i64 0, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0
  %7 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sle i32 %7, 1
  br i1 %cmp10, label %land.lhs.true12, label %if.else, !prof !104

land.lhs.true12:                                  ; preds = %land.lhs.true
  %8 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %9 = load i32, i32* %blkx.addr, align 4
  %idxprom13 = sext i32 %9 to i64
  %arrayidx14 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %8, i64 %idxprom13
  %10 = load i32, i32* %blky.addr, align 4
  %idxprom15 = sext i32 %10 to i64
  %arrayidx16 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %11 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp sge i32 %11, -1
  br i1 %cmp18, label %land.lhs.true20, label %if.else, !prof !105

land.lhs.true20:                                  ; preds = %land.lhs.true12
  %12 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %13 = load i32, i32* %blkx.addr, align 4
  %idxprom21 = sext i32 %13 to i64
  %arrayidx22 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %12, i64 %idxprom21
  %14 = load i32, i32* %blky.addr, align 4
  %idxprom23 = sext i32 %14 to i64
  %arrayidx24 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx22, i64 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx24, i64 0, i64 1
  %15 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp sle i32 %15, 1
  br i1 %cmp26, label %land.lhs.true28, label %if.else, !prof !106

land.lhs.true28:                                  ; preds = %land.lhs.true20
  %16 = load [4 x [2 x i32]]*, [4 x [2 x i32]]** %mvcol.addr, align 8
  %17 = load i32, i32* %blkx.addr, align 4
  %idxprom29 = sext i32 %17 to i64
  %arrayidx30 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %16, i64 %idxprom29
  %18 = load i32, i32* %blky.addr, align 4
  %idxprom31 = sext i32 %18 to i64
  %arrayidx32 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %arrayidx30, i64 0, i64 %idxprom31
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx32, i64 0, i64 1
  %19 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp sge i32 %19, -1
  br i1 %cmp34, label %if.then, label %if.else, !prof !107

if.then:                                          ; preds = %land.lhs.true28
  store i8 1, i8* %colzero, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true28, %land.lhs.true20, %land.lhs.true12, %land.lhs.true, %entry
  store i8 0, i8* %colzero, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i8, i8* %dflag.addr, align 1
  %conv36 = zext i8 %20 to i32
  %tobool = icmp ne i32 %conv36, 0
  br i1 %tobool, label %if.then47, label %lor.lhs.false, !prof !108

lor.lhs.false:                                    ; preds = %if.end
  %21 = load i8, i8* %refidx0.addr, align 1
  %conv37 = sext i8 %21 to i32
  %cmp38 = icmp slt i32 %conv37, 0
  br i1 %cmp38, label %if.then47, label %lor.lhs.false40, !prof !109

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %22 = load i8, i8* %refidx0.addr, align 1
  %conv41 = sext i8 %22 to i32
  %cmp42 = icmp eq i32 %conv41, 0
  br i1 %cmp42, label %land.lhs.true44, label %if.end50, !prof !110

land.lhs.true44:                                  ; preds = %lor.lhs.false40
  %23 = load i8, i8* %colzero, align 1
  %conv45 = zext i8 %23 to i32
  %tobool46 = icmp ne i32 %conv45, 0
  br i1 %tobool46, label %if.then47, label %if.end50, !prof !111

if.then47:                                        ; preds = %land.lhs.true44, %lor.lhs.false, %if.end
  %24 = load i32*, i32** %mv0.addr, align 8
  %arrayidx48 = getelementptr inbounds i32, i32* %24, i64 0
  store i32 0, i32* %arrayidx48, align 4
  %25 = load i32*, i32** %mv0.addr, align 8
  %arrayidx49 = getelementptr inbounds i32, i32* %25, i64 1
  store i32 0, i32* %arrayidx49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then47, %land.lhs.true44, %lor.lhs.false40
  %26 = load i8, i8* %dflag.addr, align 1
  %conv51 = zext i8 %26 to i32
  %tobool52 = icmp ne i32 %conv51, 0
  br i1 %tobool52, label %if.then64, label %lor.lhs.false53, !prof !108

lor.lhs.false53:                                  ; preds = %if.end50
  %27 = load i8, i8* %refidx1.addr, align 1
  %conv54 = sext i8 %27 to i32
  %cmp55 = icmp slt i32 %conv54, 0
  br i1 %cmp55, label %if.then64, label %lor.lhs.false57, !prof !109

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %28 = load i8, i8* %refidx1.addr, align 1
  %conv58 = sext i8 %28 to i32
  %cmp59 = icmp eq i32 %conv58, 0
  br i1 %cmp59, label %land.lhs.true61, label %if.end67, !prof !110

land.lhs.true61:                                  ; preds = %lor.lhs.false57
  %29 = load i8, i8* %colzero, align 1
  %conv62 = zext i8 %29 to i32
  %tobool63 = icmp ne i32 %conv62, 0
  br i1 %tobool63, label %if.then64, label %if.end67, !prof !111

if.then64:                                        ; preds = %land.lhs.true61, %lor.lhs.false53, %if.end50
  %30 = load i32*, i32** %mv1.addr, align 8
  %arrayidx65 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx65, align 4
  %31 = load i32*, i32** %mv1.addr, align 8
  %arrayidx66 = getelementptr inbounds i32, i32* %31, i64 1
  store i32 0, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then64, %land.lhs.true61, %lor.lhs.false57
  ret void
}

declare dso_local i32 @s_e(%struct.NALU_t*, i8*, i64*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @findCidx(i32 %startblkx, i32 %startblky, i32 %blk, i32 %width, i32 %blkx, i32 %blky, i32* %idx) #0 !prof !112 {
entry:
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %blk.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %blkx.addr = alloca i32, align 4
  %blky.addr = alloca i32, align 4
  %idx.addr = alloca i32*, align 8
  %blkCy = alloca i32, align 4
  %tempblkcx = alloca i8, align 1
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %blk, i32* %blk.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %blkx, i32* %blkx.addr, align 4
  store i32 %blky, i32* %blky.addr, align 4
  store i32* %idx, i32** %idx.addr, align 8
  store i32 0, i32* %blkCy, align 4
  %0 = load i32, i32* %blkx.addr, align 4
  %1 = load i32, i32* %width.addr, align 4
  %add = add nsw i32 %0, %1
  %conv = trunc i32 %add to i8
  store i8 %conv, i8* %tempblkcx, align 1
  %2 = load i32, i32* %blky.addr, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %blkCy, align 4
  %3 = load i8, i8* %tempblkcx, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp sgt i32 %conv1, 3
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !prof !113

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %blkCy, align 4
  %cmp3 = icmp sge i32 %4, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !prof !114

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %5 = load i32, i32* %blkCy, align 4
  %and = and i32 %5, 2
  %cmp5 = icmp ne i32 %and, 0
  %conv6 = zext i1 %cmp5 to i32
  %mul = mul nsw i32 %conv6, 8
  %6 = load i8, i8* %tempblkcx, align 1
  %conv7 = sext i8 %6 to i32
  %and8 = and i32 %conv7, 2
  %cmp9 = icmp ne i32 %and8, 0
  %conv10 = zext i1 %cmp9 to i32
  %mul11 = mul nsw i32 %conv10, 4
  %add12 = add nsw i32 %mul, %mul11
  %7 = load i32, i32* %blkCy, align 4
  %and13 = and i32 %7, 1
  %cmp14 = icmp ne i32 %and13, 0
  %conv15 = zext i1 %cmp14 to i32
  %mul16 = mul nsw i32 %conv15, 2
  %add17 = add nsw i32 %add12, %mul16
  %8 = load i8, i8* %tempblkcx, align 1
  %conv18 = sext i8 %8 to i32
  %and19 = and i32 %conv18, 1
  %cmp20 = icmp ne i32 %and19, 0
  %conv21 = zext i1 %cmp20 to i32
  %add22 = add nsw i32 %add17, %conv21
  %9 = load i32, i32* %blk.addr, align 4
  %cmp23 = icmp sgt i32 %add22, %9
  br i1 %cmp23, label %land.lhs.true25, label %lor.lhs.false32, !prof !115

land.lhs.true25:                                  ; preds = %lor.lhs.false
  %10 = load i8, i8* %tempblkcx, align 1
  %conv26 = sext i8 %10 to i32
  %cmp27 = icmp sle i32 %conv26, 3
  br i1 %cmp27, label %land.lhs.true29, label %lor.lhs.false32, !prof !116

land.lhs.true29:                                  ; preds = %land.lhs.true25
  %11 = load i32, i32* %blkCy, align 4
  %cmp30 = icmp sge i32 %11, 0
  br i1 %cmp30, label %if.then, label %lor.lhs.false32, !prof !117

lor.lhs.false32:                                  ; preds = %land.lhs.true29, %land.lhs.true25, %lor.lhs.false
  %12 = load i32, i32* %startblkx.addr, align 4
  %13 = load i8, i8* %tempblkcx, align 1
  %conv33 = sext i8 %13 to i32
  %add34 = add nsw i32 %12, %conv33
  %cmp35 = icmp sge i32 %add34, 44
  br i1 %cmp35, label %if.then, label %if.else, !prof !118

if.then:                                          ; preds = %lor.lhs.false32, %land.lhs.true29, %land.lhs.true
  %14 = load i32, i32* %startblkx.addr, align 4
  %15 = load i32, i32* %blkx.addr, align 4
  %add37 = add nsw i32 %14, %15
  %sub38 = sub nsw i32 %add37, 1
  %16 = load i32*, i32** %idx.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 0
  store i32 %sub38, i32* %arrayidx, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false32
  %17 = load i32, i32* %startblkx.addr, align 4
  %18 = load i8, i8* %tempblkcx, align 1
  %conv39 = sext i8 %18 to i32
  %add40 = add nsw i32 %17, %conv39
  %19 = load i32*, i32** %idx.addr, align 8
  %arrayidx41 = getelementptr inbounds i32, i32* %19, i64 0
  store i32 %add40, i32* %arrayidx41, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i32, i32* %startblky.addr, align 4
  %21 = load i32, i32* %blkCy, align 4
  %add42 = add nsw i32 %20, %21
  %22 = load i32*, i32** %idx.addr, align 8
  %arrayidx43 = getelementptr inbounds i32, i32* %22, i64 1
  store i32 %add42, i32* %arrayidx43, align 4
  ret void
}

declare dso_local i32 @median(i32, i32, i32) #2

declare dso_local i32 @minpositive(i32, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_prediction_chroma_subblock_single([4 x i32]* %rMbC, [2 x [2 x i32]]* %mv, [72 x i8]* %Schroma, [72 x i8]* %Schroma_cur, i32 %startblkx, i32 %startblky, i32 %flag) #0 !prof !119 {
entry:
  %rMbC.addr = alloca [4 x i32]*, align 8
  %mv.addr = alloca [2 x [2 x i32]]*, align 8
  %Schroma.addr = alloca [72 x i8]*, align 8
  %Schroma_cur.addr = alloca [72 x i8]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %temp = alloca [3 x [3 x i8]], align 1
  %xfrac = alloca i8, align 1
  %yfrac = alloca i8, align 1
  %xint = alloca i32, align 4
  %yint = alloca i32, align 4
  store [4 x i32]* %rMbC, [4 x i32]** %rMbC.addr, align 8
  store [2 x [2 x i32]]* %mv, [2 x [2 x i32]]** %mv.addr, align 8
  store [72 x i8]* %Schroma, [72 x i8]** %Schroma.addr, align 8
  store [72 x i8]* %Schroma_cur, [72 x i8]** %Schroma_cur.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %x0, align 4
  store i32 0, i32* %y0, align 4
  %0 = bitcast [3 x [3 x i8]]* %temp to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 9, i1 false)
  store i8 0, i8* %xfrac, align 1
  store i8 0, i8* %yfrac, align 1
  store i32 0, i32* %xint, align 4
  store i32 0, i32* %yint, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc138, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 2
  br i1 %cmp, label %for.body, label %for.end140, !prof !120

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc135, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 2
  br i1 %cmp2, label %for.body3, label %for.end137, !prof !121

for.body3:                                        ; preds = %for.cond1
  %3 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %3, i64 %idxprom
  %5 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom4
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %6 = load i32, i32* %arrayidx6, align 4
  %shr = ashr i32 %6, 3
  store i32 %shr, i32* %xint, align 4
  %7 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %7, i64 %idxprom7
  %9 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %9 to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %10 = load i32, i32* %arrayidx11, align 4
  %shr12 = ashr i32 %10, 3
  store i32 %shr12, i32* %yint, align 4
  %11 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %12 to i64
  %arrayidx14 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %11, i64 %idxprom13
  %13 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %13 to i64
  %arrayidx16 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %14 = load i32, i32* %arrayidx17, align 4
  %and = and i32 %14, 7
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %xfrac, align 1
  %15 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %16 to i64
  %arrayidx19 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %15, i64 %idxprom18
  %17 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %17 to i64
  %arrayidx21 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx19, i64 0, i64 %idxprom20
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx21, i64 0, i64 1
  %18 = load i32, i32* %arrayidx22, align 4
  %and23 = and i32 %18, 7
  %conv24 = trunc i32 %and23 to i8
  store i8 %conv24, i8* %yfrac, align 1
  store i32 0, i32* %x, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc48, %for.body3
  %19 = load i32, i32* %x, align 4
  %cmp26 = icmp slt i32 %19, 3
  br i1 %cmp26, label %for.body28, label %for.end50, !prof !122

for.body28:                                       ; preds = %for.cond25
  store i32 0, i32* %y, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc, %for.body28
  %20 = load i32, i32* %y, align 4
  %cmp30 = icmp slt i32 %20, 3
  br i1 %cmp30, label %for.body32, label %for.end, !prof !123

for.body32:                                       ; preds = %for.cond29
  %21 = load i32, i32* %startblkx.addr, align 4
  %22 = load i32, i32* %x, align 4
  %add = add nsw i32 %21, %22
  %23 = load i32, i32* %xint, align 4
  %add33 = add nsw i32 %add, %23
  %24 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %24, 2
  %add34 = add nsw i32 %add33, %mul
  %call = call i32 @Clip3(i32 0, i32 87, i32 %add34)
  store i32 %call, i32* %x0, align 4
  %25 = load i32, i32* %startblky.addr, align 4
  %26 = load i32, i32* %y, align 4
  %add35 = add nsw i32 %25, %26
  %27 = load i32, i32* %yint, align 4
  %add36 = add nsw i32 %add35, %27
  %28 = load i32, i32* %j, align 4
  %mul37 = mul nsw i32 %28, 2
  %add38 = add nsw i32 %add36, %mul37
  %call39 = call i32 @Clip3(i32 0, i32 71, i32 %add38)
  store i32 %call39, i32* %y0, align 4
  %29 = load [72 x i8]*, [72 x i8]** %Schroma.addr, align 8
  %30 = load i32, i32* %x0, align 4
  %idxprom40 = sext i32 %30 to i64
  %arrayidx41 = getelementptr inbounds [72 x i8], [72 x i8]* %29, i64 %idxprom40
  %31 = load i32, i32* %y0, align 4
  %idxprom42 = sext i32 %31 to i64
  %arrayidx43 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx41, i64 0, i64 %idxprom42
  %32 = load i8, i8* %arrayidx43, align 1
  %33 = load i32, i32* %x, align 4
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom44
  %34 = load i32, i32* %y, align 4
  %idxprom46 = sext i32 %34 to i64
  %arrayidx47 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx45, i64 0, i64 %idxprom46
  store i8 %32, i8* %arrayidx47, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body32
  %35 = load i32, i32* %y, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond29

for.end:                                          ; preds = %for.cond29
  br label %for.inc48

for.inc48:                                        ; preds = %for.end
  %36 = load i32, i32* %x, align 4
  %inc49 = add nsw i32 %36, 1
  store i32 %inc49, i32* %x, align 4
  br label %for.cond25

for.end50:                                        ; preds = %for.cond25
  store i32 0, i32* %x, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc132, %for.end50
  %37 = load i32, i32* %x, align 4
  %cmp52 = icmp slt i32 %37, 2
  br i1 %cmp52, label %for.body54, label %for.end134, !prof !124

for.body54:                                       ; preds = %for.cond51
  store i32 0, i32* %y, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc129, %for.body54
  %38 = load i32, i32* %y, align 4
  %cmp56 = icmp slt i32 %38, 2
  br i1 %cmp56, label %for.body58, label %for.end131, !prof !125

for.body58:                                       ; preds = %for.cond55
  %39 = load i32, i32* %flag.addr, align 4
  %40 = load [4 x i32]*, [4 x i32]** %rMbC.addr, align 8
  %41 = load i32, i32* %x, align 4
  %42 = load i32, i32* %i, align 4
  %mul59 = mul nsw i32 %42, 2
  %add60 = add nsw i32 %41, %mul59
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 %idxprom61
  %43 = load i32, i32* %y, align 4
  %44 = load i32, i32* %j, align 4
  %mul63 = mul nsw i32 %44, 2
  %add64 = add nsw i32 %43, %mul63
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx62, i64 0, i64 %idxprom65
  %45 = load i32, i32* %arrayidx66, align 4
  %mul67 = mul i32 %39, %45
  %46 = load i8, i8* %xfrac, align 1
  %conv68 = zext i8 %46 to i32
  %sub = sub nsw i32 8, %conv68
  %47 = load i8, i8* %yfrac, align 1
  %conv69 = zext i8 %47 to i32
  %sub70 = sub nsw i32 8, %conv69
  %mul71 = mul nsw i32 %sub, %sub70
  %48 = load i32, i32* %x, align 4
  %idxprom72 = sext i32 %48 to i64
  %arrayidx73 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom72
  %49 = load i32, i32* %y, align 4
  %idxprom74 = sext i32 %49 to i64
  %arrayidx75 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx73, i64 0, i64 %idxprom74
  %50 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %50 to i32
  %mul77 = mul nsw i32 %mul71, %conv76
  %51 = load i8, i8* %xfrac, align 1
  %conv78 = zext i8 %51 to i32
  %52 = load i8, i8* %yfrac, align 1
  %conv79 = zext i8 %52 to i32
  %sub80 = sub nsw i32 8, %conv79
  %mul81 = mul nsw i32 %conv78, %sub80
  %53 = load i32, i32* %x, align 4
  %add82 = add nsw i32 %53, 1
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom83
  %54 = load i32, i32* %y, align 4
  %idxprom85 = sext i32 %54 to i64
  %arrayidx86 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx84, i64 0, i64 %idxprom85
  %55 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %55 to i32
  %mul88 = mul nsw i32 %mul81, %conv87
  %add89 = add nsw i32 %mul77, %mul88
  %56 = load i8, i8* %xfrac, align 1
  %conv90 = zext i8 %56 to i32
  %sub91 = sub nsw i32 8, %conv90
  %57 = load i8, i8* %yfrac, align 1
  %conv92 = zext i8 %57 to i32
  %mul93 = mul nsw i32 %sub91, %conv92
  %58 = load i32, i32* %x, align 4
  %idxprom94 = sext i32 %58 to i64
  %arrayidx95 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom94
  %59 = load i32, i32* %y, align 4
  %add96 = add nsw i32 %59, 1
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx95, i64 0, i64 %idxprom97
  %60 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %60 to i32
  %mul100 = mul nsw i32 %mul93, %conv99
  %add101 = add nsw i32 %add89, %mul100
  %61 = load i8, i8* %xfrac, align 1
  %conv102 = zext i8 %61 to i32
  %62 = load i8, i8* %yfrac, align 1
  %conv103 = zext i8 %62 to i32
  %mul104 = mul nsw i32 %conv102, %conv103
  %63 = load i32, i32* %x, align 4
  %add105 = add nsw i32 %63, 1
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp, i64 0, i64 %idxprom106
  %64 = load i32, i32* %y, align 4
  %add108 = add nsw i32 %64, 1
  %idxprom109 = sext i32 %add108 to i64
  %arrayidx110 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx107, i64 0, i64 %idxprom109
  %65 = load i8, i8* %arrayidx110, align 1
  %conv111 = zext i8 %65 to i32
  %mul112 = mul nsw i32 %mul104, %conv111
  %add113 = add nsw i32 %add101, %mul112
  %add114 = add nsw i32 %add113, 32
  %shr115 = ashr i32 %add114, 6
  %add116 = add i32 %mul67, %shr115
  %call117 = call i32 @Clip1y(i32 %add116)
  %conv118 = trunc i32 %call117 to i8
  %66 = load [72 x i8]*, [72 x i8]** %Schroma_cur.addr, align 8
  %67 = load i32, i32* %startblkx.addr, align 4
  %68 = load i32, i32* %x, align 4
  %add119 = add nsw i32 %67, %68
  %69 = load i32, i32* %i, align 4
  %mul120 = mul nsw i32 %69, 2
  %add121 = add nsw i32 %add119, %mul120
  %idxprom122 = sext i32 %add121 to i64
  %arrayidx123 = getelementptr inbounds [72 x i8], [72 x i8]* %66, i64 %idxprom122
  %70 = load i32, i32* %startblky.addr, align 4
  %71 = load i32, i32* %y, align 4
  %add124 = add nsw i32 %70, %71
  %72 = load i32, i32* %j, align 4
  %mul125 = mul nsw i32 %72, 2
  %add126 = add nsw i32 %add124, %mul125
  %idxprom127 = sext i32 %add126 to i64
  %arrayidx128 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx123, i64 0, i64 %idxprom127
  store i8 %conv118, i8* %arrayidx128, align 1
  br label %for.inc129

for.inc129:                                       ; preds = %for.body58
  %73 = load i32, i32* %y, align 4
  %inc130 = add nsw i32 %73, 1
  store i32 %inc130, i32* %y, align 4
  br label %for.cond55

for.end131:                                       ; preds = %for.cond55
  br label %for.inc132

for.inc132:                                       ; preds = %for.end131
  %74 = load i32, i32* %x, align 4
  %inc133 = add nsw i32 %74, 1
  store i32 %inc133, i32* %x, align 4
  br label %for.cond51

for.end134:                                       ; preds = %for.cond51
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %75 = load i32, i32* %j, align 4
  %inc136 = add nsw i32 %75, 1
  store i32 %inc136, i32* %j, align 4
  br label %for.cond1

for.end137:                                       ; preds = %for.cond1
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %76 = load i32, i32* %i, align 4
  %inc139 = add nsw i32 %76, 1
  store i32 %inc139, i32* %i, align 4
  br label %for.cond

for.end140:                                       ; preds = %for.cond
  ret void
}

declare dso_local i32 @Clip3(i32, i32, i32) #2

declare dso_local i32 @Clip1y(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_prediction_chroma_subblock_double([4 x i32]* %rMbC, [2 x [2 x i32]]* %mv0, [2 x [2 x i32]]* %mv1, [72 x i8]* %Schroma0, [72 x i8]* %Schroma1, [72 x i8]* %Schroma_cur, i32 %startblkx, i32 %startblky, i8 zeroext %flag) #0 !prof !126 {
entry:
  %rMbC.addr = alloca [4 x i32]*, align 8
  %mv0.addr = alloca [2 x [2 x i32]]*, align 8
  %mv1.addr = alloca [2 x [2 x i32]]*, align 8
  %Schroma0.addr = alloca [72 x i8]*, align 8
  %Schroma1.addr = alloca [72 x i8]*, align 8
  %Schroma_cur.addr = alloca [72 x i8]*, align 8
  %startblkx.addr = alloca i32, align 4
  %startblky.addr = alloca i32, align 4
  %flag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %temp0 = alloca [3 x [3 x i8]], align 1
  %temp1 = alloca [3 x [3 x i8]], align 1
  %xfrac0 = alloca i8, align 1
  %yfrac0 = alloca i8, align 1
  %xint0 = alloca i32, align 4
  %yint0 = alloca i32, align 4
  %xfrac1 = alloca i8, align 1
  %yfrac1 = alloca i8, align 1
  %xint1 = alloca i32, align 4
  %yint1 = alloca i32, align 4
  store [4 x i32]* %rMbC, [4 x i32]** %rMbC.addr, align 8
  store [2 x [2 x i32]]* %mv0, [2 x [2 x i32]]** %mv0.addr, align 8
  store [2 x [2 x i32]]* %mv1, [2 x [2 x i32]]** %mv1.addr, align 8
  store [72 x i8]* %Schroma0, [72 x i8]** %Schroma0.addr, align 8
  store [72 x i8]* %Schroma1, [72 x i8]** %Schroma1.addr, align 8
  store [72 x i8]* %Schroma_cur, [72 x i8]** %Schroma_cur.addr, align 8
  store i32 %startblkx, i32* %startblkx.addr, align 4
  store i32 %startblky, i32* %startblky.addr, align 4
  store i8 %flag, i8* %flag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %x0, align 4
  store i32 0, i32* %y0, align 4
  %0 = bitcast [3 x [3 x i8]]* %temp0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 9, i1 false)
  %1 = bitcast [3 x [3 x i8]]* %temp1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 9, i1 false)
  store i8 0, i8* %xfrac0, align 1
  store i8 0, i8* %yfrac0, align 1
  store i32 0, i32* %xint0, align 4
  store i32 0, i32* %yint0, align 4
  store i8 0, i8* %xfrac1, align 1
  store i8 0, i8* %yfrac1, align 1
  store i32 0, i32* %xint1, align 4
  store i32 0, i32* %yint1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc249, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 2
  br i1 %cmp, label %for.body, label %for.end251, !prof !59

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc246, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 2
  br i1 %cmp2, label %for.body3, label %for.end248, !prof !127

for.body3:                                        ; preds = %for.cond1
  %4 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %4, i64 %idxprom
  %6 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx, i64 0, i64 %idxprom4
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx5, i64 0, i64 0
  %7 = load i32, i32* %arrayidx6, align 4
  %shr = ashr i32 %7, 3
  store i32 %shr, i32* %xint0, align 4
  %8 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %8, i64 %idxprom7
  %10 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx8, i64 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx10, i64 0, i64 1
  %11 = load i32, i32* %arrayidx11, align 4
  %shr12 = ashr i32 %11, 3
  store i32 %shr12, i32* %yint0, align 4
  %12 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 %idxprom13
  %14 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %14 to i64
  %arrayidx16 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx14, i64 0, i64 %idxprom15
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx16, i64 0, i64 0
  %15 = load i32, i32* %arrayidx17, align 4
  %and = and i32 %15, 7
  %conv = trunc i32 %and to i8
  store i8 %conv, i8* %xfrac0, align 1
  %16 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv0.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %17 to i64
  %arrayidx19 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %16, i64 %idxprom18
  %18 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %18 to i64
  %arrayidx21 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx19, i64 0, i64 %idxprom20
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx21, i64 0, i64 1
  %19 = load i32, i32* %arrayidx22, align 4
  %and23 = and i32 %19, 7
  %conv24 = trunc i32 %and23 to i8
  store i8 %conv24, i8* %yfrac0, align 1
  %20 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %21 to i64
  %arrayidx26 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %20, i64 %idxprom25
  %22 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %22 to i64
  %arrayidx28 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx26, i64 0, i64 %idxprom27
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx28, i64 0, i64 0
  %23 = load i32, i32* %arrayidx29, align 4
  %shr30 = ashr i32 %23, 3
  store i32 %shr30, i32* %xint1, align 4
  %24 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %25 to i64
  %arrayidx32 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %24, i64 %idxprom31
  %26 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %26 to i64
  %arrayidx34 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx32, i64 0, i64 %idxprom33
  %arrayidx35 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx34, i64 0, i64 1
  %27 = load i32, i32* %arrayidx35, align 4
  %shr36 = ashr i32 %27, 3
  store i32 %shr36, i32* %yint1, align 4
  %28 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %29 to i64
  %arrayidx38 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %28, i64 %idxprom37
  %30 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %30 to i64
  %arrayidx40 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx38, i64 0, i64 %idxprom39
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx40, i64 0, i64 0
  %31 = load i32, i32* %arrayidx41, align 4
  %and42 = and i32 %31, 7
  %conv43 = trunc i32 %and42 to i8
  store i8 %conv43, i8* %xfrac1, align 1
  %32 = load [2 x [2 x i32]]*, [2 x [2 x i32]]** %mv1.addr, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %33 to i64
  %arrayidx45 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %32, i64 %idxprom44
  %34 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %34 to i64
  %arrayidx47 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx45, i64 0, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx47, i64 0, i64 1
  %35 = load i32, i32* %arrayidx48, align 4
  %and49 = and i32 %35, 7
  %conv50 = trunc i32 %and49 to i8
  store i8 %conv50, i8* %yfrac1, align 1
  store i32 0, i32* %x, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc74, %for.body3
  %36 = load i32, i32* %x, align 4
  %cmp52 = icmp slt i32 %36, 3
  br i1 %cmp52, label %for.body54, label %for.end76, !prof !128

for.body54:                                       ; preds = %for.cond51
  store i32 0, i32* %y, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc, %for.body54
  %37 = load i32, i32* %y, align 4
  %cmp56 = icmp slt i32 %37, 3
  br i1 %cmp56, label %for.body58, label %for.end, !prof !129

for.body58:                                       ; preds = %for.cond55
  %38 = load i32, i32* %startblkx.addr, align 4
  %39 = load i32, i32* %x, align 4
  %add = add nsw i32 %38, %39
  %40 = load i32, i32* %xint0, align 4
  %add59 = add nsw i32 %add, %40
  %41 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %41, 2
  %add60 = add nsw i32 %add59, %mul
  %call = call i32 @Clip3(i32 0, i32 87, i32 %add60)
  store i32 %call, i32* %x0, align 4
  %42 = load i32, i32* %startblky.addr, align 4
  %43 = load i32, i32* %y, align 4
  %add61 = add nsw i32 %42, %43
  %44 = load i32, i32* %yint0, align 4
  %add62 = add nsw i32 %add61, %44
  %45 = load i32, i32* %j, align 4
  %mul63 = mul nsw i32 %45, 2
  %add64 = add nsw i32 %add62, %mul63
  %call65 = call i32 @Clip3(i32 0, i32 71, i32 %add64)
  store i32 %call65, i32* %y0, align 4
  %46 = load [72 x i8]*, [72 x i8]** %Schroma0.addr, align 8
  %47 = load i32, i32* %x0, align 4
  %idxprom66 = sext i32 %47 to i64
  %arrayidx67 = getelementptr inbounds [72 x i8], [72 x i8]* %46, i64 %idxprom66
  %48 = load i32, i32* %y0, align 4
  %idxprom68 = sext i32 %48 to i64
  %arrayidx69 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx67, i64 0, i64 %idxprom68
  %49 = load i8, i8* %arrayidx69, align 1
  %50 = load i32, i32* %x, align 4
  %idxprom70 = sext i32 %50 to i64
  %arrayidx71 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom70
  %51 = load i32, i32* %y, align 4
  %idxprom72 = sext i32 %51 to i64
  %arrayidx73 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx71, i64 0, i64 %idxprom72
  store i8 %49, i8* %arrayidx73, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body58
  %52 = load i32, i32* %y, align 4
  %inc = add nsw i32 %52, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond55

for.end:                                          ; preds = %for.cond55
  br label %for.inc74

for.inc74:                                        ; preds = %for.end
  %53 = load i32, i32* %x, align 4
  %inc75 = add nsw i32 %53, 1
  store i32 %inc75, i32* %x, align 4
  br label %for.cond51

for.end76:                                        ; preds = %for.cond51
  store i32 0, i32* %x, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc106, %for.end76
  %54 = load i32, i32* %x, align 4
  %cmp78 = icmp slt i32 %54, 3
  br i1 %cmp78, label %for.body80, label %for.end108, !prof !128

for.body80:                                       ; preds = %for.cond77
  store i32 0, i32* %y, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc103, %for.body80
  %55 = load i32, i32* %y, align 4
  %cmp82 = icmp slt i32 %55, 3
  br i1 %cmp82, label %for.body84, label %for.end105, !prof !129

for.body84:                                       ; preds = %for.cond81
  %56 = load i32, i32* %startblkx.addr, align 4
  %57 = load i32, i32* %x, align 4
  %add85 = add nsw i32 %56, %57
  %58 = load i32, i32* %xint1, align 4
  %add86 = add nsw i32 %add85, %58
  %59 = load i32, i32* %i, align 4
  %mul87 = mul nsw i32 %59, 2
  %add88 = add nsw i32 %add86, %mul87
  %call89 = call i32 @Clip3(i32 0, i32 87, i32 %add88)
  store i32 %call89, i32* %x0, align 4
  %60 = load i32, i32* %startblky.addr, align 4
  %61 = load i32, i32* %y, align 4
  %add90 = add nsw i32 %60, %61
  %62 = load i32, i32* %yint1, align 4
  %add91 = add nsw i32 %add90, %62
  %63 = load i32, i32* %j, align 4
  %mul92 = mul nsw i32 %63, 2
  %add93 = add nsw i32 %add91, %mul92
  %call94 = call i32 @Clip3(i32 0, i32 71, i32 %add93)
  store i32 %call94, i32* %y0, align 4
  %64 = load [72 x i8]*, [72 x i8]** %Schroma1.addr, align 8
  %65 = load i32, i32* %x0, align 4
  %idxprom95 = sext i32 %65 to i64
  %arrayidx96 = getelementptr inbounds [72 x i8], [72 x i8]* %64, i64 %idxprom95
  %66 = load i32, i32* %y0, align 4
  %idxprom97 = sext i32 %66 to i64
  %arrayidx98 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx96, i64 0, i64 %idxprom97
  %67 = load i8, i8* %arrayidx98, align 1
  %68 = load i32, i32* %x, align 4
  %idxprom99 = sext i32 %68 to i64
  %arrayidx100 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom99
  %69 = load i32, i32* %y, align 4
  %idxprom101 = sext i32 %69 to i64
  %arrayidx102 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx100, i64 0, i64 %idxprom101
  store i8 %67, i8* %arrayidx102, align 1
  br label %for.inc103

for.inc103:                                       ; preds = %for.body84
  %70 = load i32, i32* %y, align 4
  %inc104 = add nsw i32 %70, 1
  store i32 %inc104, i32* %y, align 4
  br label %for.cond81

for.end105:                                       ; preds = %for.cond81
  br label %for.inc106

for.inc106:                                       ; preds = %for.end105
  %71 = load i32, i32* %x, align 4
  %inc107 = add nsw i32 %71, 1
  store i32 %inc107, i32* %x, align 4
  br label %for.cond77

for.end108:                                       ; preds = %for.cond77
  store i32 0, i32* %x, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc243, %for.end108
  %72 = load i32, i32* %x, align 4
  %cmp110 = icmp slt i32 %72, 2
  br i1 %cmp110, label %for.body112, label %for.end245, !prof !130

for.body112:                                      ; preds = %for.cond109
  store i32 0, i32* %y, align 4
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc240, %for.body112
  %73 = load i32, i32* %y, align 4
  %cmp114 = icmp slt i32 %73, 2
  br i1 %cmp114, label %for.body116, label %for.end242, !prof !131

for.body116:                                      ; preds = %for.cond113
  %74 = load i8, i8* %flag.addr, align 1
  %conv117 = zext i8 %74 to i32
  %75 = load [4 x i32]*, [4 x i32]** %rMbC.addr, align 8
  %76 = load i32, i32* %x, align 4
  %77 = load i32, i32* %i, align 4
  %mul118 = mul nsw i32 %77, 2
  %add119 = add nsw i32 %76, %mul118
  %idxprom120 = sext i32 %add119 to i64
  %arrayidx121 = getelementptr inbounds [4 x i32], [4 x i32]* %75, i64 %idxprom120
  %78 = load i32, i32* %y, align 4
  %79 = load i32, i32* %j, align 4
  %mul122 = mul nsw i32 %79, 2
  %add123 = add nsw i32 %78, %mul122
  %idxprom124 = sext i32 %add123 to i64
  %arrayidx125 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx121, i64 0, i64 %idxprom124
  %80 = load i32, i32* %arrayidx125, align 4
  %mul126 = mul nsw i32 %conv117, %80
  %81 = load i8, i8* %xfrac0, align 1
  %conv127 = zext i8 %81 to i32
  %sub = sub nsw i32 8, %conv127
  %82 = load i8, i8* %yfrac0, align 1
  %conv128 = zext i8 %82 to i32
  %sub129 = sub nsw i32 8, %conv128
  %mul130 = mul nsw i32 %sub, %sub129
  %83 = load i32, i32* %x, align 4
  %idxprom131 = sext i32 %83 to i64
  %arrayidx132 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom131
  %84 = load i32, i32* %y, align 4
  %idxprom133 = sext i32 %84 to i64
  %arrayidx134 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx132, i64 0, i64 %idxprom133
  %85 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %85 to i32
  %mul136 = mul nsw i32 %mul130, %conv135
  %86 = load i8, i8* %xfrac0, align 1
  %conv137 = zext i8 %86 to i32
  %87 = load i8, i8* %yfrac0, align 1
  %conv138 = zext i8 %87 to i32
  %sub139 = sub nsw i32 8, %conv138
  %mul140 = mul nsw i32 %conv137, %sub139
  %88 = load i32, i32* %x, align 4
  %add141 = add nsw i32 %88, 1
  %idxprom142 = sext i32 %add141 to i64
  %arrayidx143 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom142
  %89 = load i32, i32* %y, align 4
  %idxprom144 = sext i32 %89 to i64
  %arrayidx145 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx143, i64 0, i64 %idxprom144
  %90 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %90 to i32
  %mul147 = mul nsw i32 %mul140, %conv146
  %add148 = add nsw i32 %mul136, %mul147
  %91 = load i8, i8* %xfrac0, align 1
  %conv149 = zext i8 %91 to i32
  %sub150 = sub nsw i32 8, %conv149
  %92 = load i8, i8* %yfrac0, align 1
  %conv151 = zext i8 %92 to i32
  %mul152 = mul nsw i32 %sub150, %conv151
  %93 = load i32, i32* %x, align 4
  %idxprom153 = sext i32 %93 to i64
  %arrayidx154 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom153
  %94 = load i32, i32* %y, align 4
  %add155 = add nsw i32 %94, 1
  %idxprom156 = sext i32 %add155 to i64
  %arrayidx157 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx154, i64 0, i64 %idxprom156
  %95 = load i8, i8* %arrayidx157, align 1
  %conv158 = zext i8 %95 to i32
  %mul159 = mul nsw i32 %mul152, %conv158
  %add160 = add nsw i32 %add148, %mul159
  %96 = load i8, i8* %xfrac0, align 1
  %conv161 = zext i8 %96 to i32
  %97 = load i8, i8* %yfrac0, align 1
  %conv162 = zext i8 %97 to i32
  %mul163 = mul nsw i32 %conv161, %conv162
  %98 = load i32, i32* %x, align 4
  %add164 = add nsw i32 %98, 1
  %idxprom165 = sext i32 %add164 to i64
  %arrayidx166 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp0, i64 0, i64 %idxprom165
  %99 = load i32, i32* %y, align 4
  %add167 = add nsw i32 %99, 1
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx166, i64 0, i64 %idxprom168
  %100 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %100 to i32
  %mul171 = mul nsw i32 %mul163, %conv170
  %add172 = add nsw i32 %add160, %mul171
  %add173 = add nsw i32 %add172, 32
  %shr174 = ashr i32 %add173, 6
  %101 = load i8, i8* %xfrac1, align 1
  %conv175 = zext i8 %101 to i32
  %sub176 = sub nsw i32 8, %conv175
  %102 = load i8, i8* %yfrac1, align 1
  %conv177 = zext i8 %102 to i32
  %sub178 = sub nsw i32 8, %conv177
  %mul179 = mul nsw i32 %sub176, %sub178
  %103 = load i32, i32* %x, align 4
  %idxprom180 = sext i32 %103 to i64
  %arrayidx181 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom180
  %104 = load i32, i32* %y, align 4
  %idxprom182 = sext i32 %104 to i64
  %arrayidx183 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx181, i64 0, i64 %idxprom182
  %105 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %105 to i32
  %mul185 = mul nsw i32 %mul179, %conv184
  %106 = load i8, i8* %xfrac1, align 1
  %conv186 = zext i8 %106 to i32
  %107 = load i8, i8* %yfrac1, align 1
  %conv187 = zext i8 %107 to i32
  %sub188 = sub nsw i32 8, %conv187
  %mul189 = mul nsw i32 %conv186, %sub188
  %108 = load i32, i32* %x, align 4
  %add190 = add nsw i32 %108, 1
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom191
  %109 = load i32, i32* %y, align 4
  %idxprom193 = sext i32 %109 to i64
  %arrayidx194 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx192, i64 0, i64 %idxprom193
  %110 = load i8, i8* %arrayidx194, align 1
  %conv195 = zext i8 %110 to i32
  %mul196 = mul nsw i32 %mul189, %conv195
  %add197 = add nsw i32 %mul185, %mul196
  %111 = load i8, i8* %xfrac1, align 1
  %conv198 = zext i8 %111 to i32
  %sub199 = sub nsw i32 8, %conv198
  %112 = load i8, i8* %yfrac1, align 1
  %conv200 = zext i8 %112 to i32
  %mul201 = mul nsw i32 %sub199, %conv200
  %113 = load i32, i32* %x, align 4
  %idxprom202 = sext i32 %113 to i64
  %arrayidx203 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom202
  %114 = load i32, i32* %y, align 4
  %add204 = add nsw i32 %114, 1
  %idxprom205 = sext i32 %add204 to i64
  %arrayidx206 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx203, i64 0, i64 %idxprom205
  %115 = load i8, i8* %arrayidx206, align 1
  %conv207 = zext i8 %115 to i32
  %mul208 = mul nsw i32 %mul201, %conv207
  %add209 = add nsw i32 %add197, %mul208
  %116 = load i8, i8* %xfrac1, align 1
  %conv210 = zext i8 %116 to i32
  %117 = load i8, i8* %yfrac1, align 1
  %conv211 = zext i8 %117 to i32
  %mul212 = mul nsw i32 %conv210, %conv211
  %118 = load i32, i32* %x, align 4
  %add213 = add nsw i32 %118, 1
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %temp1, i64 0, i64 %idxprom214
  %119 = load i32, i32* %y, align 4
  %add216 = add nsw i32 %119, 1
  %idxprom217 = sext i32 %add216 to i64
  %arrayidx218 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx215, i64 0, i64 %idxprom217
  %120 = load i8, i8* %arrayidx218, align 1
  %conv219 = zext i8 %120 to i32
  %mul220 = mul nsw i32 %mul212, %conv219
  %add221 = add nsw i32 %add209, %mul220
  %add222 = add nsw i32 %add221, 32
  %shr223 = ashr i32 %add222, 6
  %add224 = add nsw i32 %shr174, %shr223
  %add225 = add nsw i32 %add224, 1
  %shr226 = ashr i32 %add225, 1
  %add227 = add nsw i32 %mul126, %shr226
  %call228 = call i32 @Clip1y(i32 %add227)
  %conv229 = trunc i32 %call228 to i8
  %121 = load [72 x i8]*, [72 x i8]** %Schroma_cur.addr, align 8
  %122 = load i32, i32* %startblkx.addr, align 4
  %123 = load i32, i32* %x, align 4
  %add230 = add nsw i32 %122, %123
  %124 = load i32, i32* %i, align 4
  %mul231 = mul nsw i32 %124, 2
  %add232 = add nsw i32 %add230, %mul231
  %idxprom233 = sext i32 %add232 to i64
  %arrayidx234 = getelementptr inbounds [72 x i8], [72 x i8]* %121, i64 %idxprom233
  %125 = load i32, i32* %startblky.addr, align 4
  %126 = load i32, i32* %y, align 4
  %add235 = add nsw i32 %125, %126
  %127 = load i32, i32* %j, align 4
  %mul236 = mul nsw i32 %127, 2
  %add237 = add nsw i32 %add235, %mul236
  %idxprom238 = sext i32 %add237 to i64
  %arrayidx239 = getelementptr inbounds [72 x i8], [72 x i8]* %arrayidx234, i64 0, i64 %idxprom238
  store i8 %conv229, i8* %arrayidx239, align 1
  br label %for.inc240

for.inc240:                                       ; preds = %for.body116
  %128 = load i32, i32* %y, align 4
  %inc241 = add nsw i32 %128, 1
  store i32 %inc241, i32* %y, align 4
  br label %for.cond113

for.end242:                                       ; preds = %for.cond113
  br label %for.inc243

for.inc243:                                       ; preds = %for.end242
  %129 = load i32, i32* %x, align 4
  %inc244 = add nsw i32 %129, 1
  store i32 %inc244, i32* %x, align 4
  br label %for.cond109

for.end245:                                       ; preds = %for.cond109
  br label %for.inc246

for.inc246:                                       ; preds = %for.end245
  %130 = load i32, i32* %j, align 4
  %inc247 = add nsw i32 %130, 1
  store i32 %inc247, i32* %j, align 4
  br label %for.cond1

for.end248:                                       ; preds = %for.cond1
  br label %for.inc249

for.inc249:                                       ; preds = %for.end248
  %131 = load i32, i32* %i, align 4
  %inc250 = add nsw i32 %131, 1
  store i32 %inc250, i32* %i, align 4
  br label %for.cond

for.end251:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_j([144 x i8]* %Sluma, i32 %xint, i32 %yint, [9 x i8]* %temp) #0 !prof !132 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x, align 4
  %4 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %4, 2
  %5 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %5
  %call6 = call i32 @Clip3(i32 0, i32 143, i32 %add5)
  store i32 %call6, i32* %y, align 4
  %6 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %7 = load i32, i32* %x, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %6, i64 %idxprom
  %8 = load i32, i32* %y, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom7
  %9 = load i8, i8* %arrayidx8, align 1
  %10 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 %idxprom9
  %12 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %12 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx10, i64 0, i64 %idxprom11
  store i8 %9, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %14, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_H([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %yoffset, [9 x i8]* %temp) #0 !prof !133 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %yoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %yoffset, i32* %yoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end17, !prof !134

for.body:                                         ; preds = %for.cond
  store i32 2, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 6
  br i1 %cmp2, label %for.body3, label %for.end, !prof !135

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x, align 4
  %4 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %4, 2
  %5 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %5
  %6 = load i32, i32* %yoffset.addr, align 4
  %add6 = add nsw i32 %add5, %6
  %call7 = call i32 @Clip3(i32 0, i32 143, i32 %add6)
  store i32 %call7, i32* %y, align 4
  %7 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %8 = load i32, i32* %x, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %7, i64 %idxprom
  %9 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %11 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %12 to i64
  %arrayidx11 = getelementptr inbounds [9 x i8], [9 x i8]* %11, i64 %idxprom10
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %yoffset.addr, align 4
  %add12 = add nsw i32 %13, %14
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx11, i64 0, i64 %idxprom13
  store i8 %10, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_V([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %xoffset, [9 x i8]* %temp) #0 !prof !136 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %xoffset, i32* %xoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end17, !prof !137

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end, !prof !138

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %2, 2
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %3
  %4 = load i32, i32* %xoffset.addr, align 4
  %add4 = add nsw i32 %add, %4
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add4)
  store i32 %call, i32* %x, align 4
  %5 = load i32, i32* %yint.addr, align 4
  %sub5 = sub nsw i32 %5, 2
  %6 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %sub5, %6
  %call7 = call i32 @Clip3(i32 0, i32 143, i32 %add6)
  store i32 %call7, i32* %y, align 4
  %7 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %8 = load i32, i32* %x, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %7, i64 %idxprom
  %9 = load i32, i32* %y, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %11 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %xoffset.addr, align 4
  %add10 = add nsw i32 %12, %13
  %idxprom11 = sext i32 %add10 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %11, i64 %idxprom11
  %14 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %14 to i64
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx12, i64 0, i64 %idxprom13
  store i8 %10, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_Cross([144 x i8]* %Sluma, i32 %xint, i32 %yint, i32 %xoffset, i32 %yoffset, [9 x i8]* %temp) #0 !prof !139 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xoffset.addr = alloca i32, align 4
  %yoffset.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i32 %xoffset, i32* %xoffset.addr, align 4
  store i32 %yoffset, i32* %yoffset.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end24, !prof !140

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %for.body3, label %for.end, !prof !141

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %xoffset.addr, align 4
  %add = add nsw i32 1, %3
  %cmp4 = icmp sgt i32 %2, %add
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false, !prof !142

land.lhs.true:                                    ; preds = %for.body3
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %xoffset.addr, align 4
  %add5 = add nsw i32 6, %5
  %cmp6 = icmp slt i32 %4, %add5
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !prof !143

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body3
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %yoffset.addr, align 4
  %add7 = add nsw i32 1, %7
  %cmp8 = icmp sgt i32 %6, %add7
  br i1 %cmp8, label %land.lhs.true9, label %if.end, !prof !144

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %yoffset.addr, align 4
  %add10 = add nsw i32 6, %9
  %cmp11 = icmp slt i32 %8, %add10
  br i1 %cmp11, label %if.then, label %if.end, !prof !145

if.then:                                          ; preds = %land.lhs.true9, %land.lhs.true
  %10 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %10, 2
  %11 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %sub, %11
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add12)
  store i32 %call, i32* %x, align 4
  %12 = load i32, i32* %yint.addr, align 4
  %sub13 = sub nsw i32 %12, 2
  %13 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %sub13, %13
  %call15 = call i32 @Clip3(i32 0, i32 143, i32 %add14)
  store i32 %call15, i32* %y, align 4
  %14 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %15 = load i32, i32* %x, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %14, i64 %idxprom
  %16 = load i32, i32* %y, align 4
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom16
  %17 = load i8, i8* %arrayidx17, align 1
  %18 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %19 to i64
  %arrayidx19 = getelementptr inbounds [9 x i8], [9 x i8]* %18, i64 %idxprom18
  %20 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %20 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx19, i64 0, i64 %idxprom20
  store i8 %17, i8* %arrayidx21, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true9, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %22 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %22, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_G([144 x i8]* %Sluma, i32 %xint, i32 %yint, [9 x i8]* %temp) #0 !prof !132 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %temp.addr = alloca [9 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 2, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %3 = load i32, i32* %xint.addr, align 4
  %sub = sub nsw i32 %3, 2
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %sub, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds [144 x i8], [144 x i8]* %2, i64 %idxprom
  %5 = load i32, i32* %yint.addr, align 4
  %sub4 = sub nsw i32 %5, 2
  %6 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %sub4, %6
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx, i64 0, i64 %idxprom6
  %7 = load i8, i8* %arrayidx7, align 1
  %8 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds [9 x i8], [9 x i8]* %8, i64 %idxprom8
  %10 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx9, i64 0, i64 %idxprom10
  store i8 %7, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_comp([144 x i8]* %Sluma, i32 %xint, i32 %yint, i8 zeroext %xfrac, i8 zeroext %yfrac, [9 x i8]* %temp) #0 !prof !146 {
entry:
  %Sluma.addr = alloca [144 x i8]*, align 8
  %xint.addr = alloca i32, align 4
  %yint.addr = alloca i32, align 4
  %xfrac.addr = alloca i8, align 1
  %yfrac.addr = alloca i8, align 1
  %temp.addr = alloca [9 x i8]*, align 8
  store [144 x i8]* %Sluma, [144 x i8]** %Sluma.addr, align 8
  store i32 %xint, i32* %xint.addr, align 4
  store i32 %yint, i32* %yint.addr, align 4
  store i8 %xfrac, i8* %xfrac.addr, align 1
  store i8 %yfrac, i8* %yfrac.addr, align 1
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  %0 = load i8, i8* %xfrac.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else, !prof !147

if.then:                                          ; preds = %entry
  %1 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %2 = load i32, i32* %xint.addr, align 4
  %3 = load i32, i32* %yint.addr, align 4
  %4 = load i8, i8* %xfrac.addr, align 1
  %conv2 = zext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %land.rhs, label %land.end, !prof !148

land.rhs:                                         ; preds = %if.then
  %5 = load i8, i8* %yfrac.addr, align 1
  %conv5 = zext i8 %5 to i32
  %cmp6 = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %6 = phi i1 [ false, %if.then ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_V([144 x i8]* %1, i32 %2, i32 %3, i32 %land.ext, [9 x i8]* %7)
  br label %if.end47

if.else:                                          ; preds = %entry
  %8 = load i8, i8* %yfrac.addr, align 1
  %conv8 = zext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %if.then11, label %if.else21, !prof !149

if.then11:                                        ; preds = %if.else
  %9 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %10 = load i32, i32* %xint.addr, align 4
  %11 = load i32, i32* %yint.addr, align 4
  %12 = load i8, i8* %yfrac.addr, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 3
  br i1 %cmp13, label %land.rhs15, label %land.end19, !prof !150

land.rhs15:                                       ; preds = %if.then11
  %13 = load i8, i8* %xfrac.addr, align 1
  %conv16 = zext i8 %13 to i32
  %cmp17 = icmp ne i32 %conv16, 0
  br label %land.end19

land.end19:                                       ; preds = %land.rhs15, %if.then11
  %14 = phi i1 [ false, %if.then11 ], [ %cmp17, %land.rhs15 ]
  %land.ext20 = zext i1 %14 to i32
  %15 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_H([144 x i8]* %9, i32 %10, i32 %11, i32 %land.ext20, [9 x i8]* %15)
  br label %if.end46

if.else21:                                        ; preds = %if.else
  %16 = load i8, i8* %xfrac.addr, align 1
  %conv22 = zext i8 %16 to i32
  %rem = srem i32 %conv22, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %land.lhs.true, label %if.else45, !prof !151

land.lhs.true:                                    ; preds = %if.else21
  %17 = load i8, i8* %yfrac.addr, align 1
  %conv23 = zext i8 %17 to i32
  %rem24 = srem i32 %conv23, 2
  %tobool25 = icmp ne i32 %rem24, 0
  br i1 %tobool25, label %if.then26, label %if.else45, !prof !151

if.then26:                                        ; preds = %land.lhs.true
  %18 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %19 = load i32, i32* %xint.addr, align 4
  %20 = load i32, i32* %yint.addr, align 4
  %21 = load i8, i8* %xfrac.addr, align 1
  %conv27 = zext i8 %21 to i32
  %cmp28 = icmp eq i32 %conv27, 3
  br i1 %cmp28, label %land.rhs30, label %land.end34, !prof !152

land.rhs30:                                       ; preds = %if.then26
  %22 = load i8, i8* %yfrac.addr, align 1
  %conv31 = zext i8 %22 to i32
  %cmp32 = icmp ne i32 %conv31, 0
  br label %land.end34

land.end34:                                       ; preds = %land.rhs30, %if.then26
  %23 = phi i1 [ false, %if.then26 ], [ %cmp32, %land.rhs30 ]
  %land.ext35 = zext i1 %23 to i32
  %24 = load i8, i8* %yfrac.addr, align 1
  %conv36 = zext i8 %24 to i32
  %cmp37 = icmp eq i32 %conv36, 3
  br i1 %cmp37, label %land.rhs39, label %land.end43, !prof !153

land.rhs39:                                       ; preds = %land.end34
  %25 = load i8, i8* %xfrac.addr, align 1
  %conv40 = zext i8 %25 to i32
  %cmp41 = icmp ne i32 %conv40, 0
  br label %land.end43

land.end43:                                       ; preds = %land.rhs39, %land.end34
  %26 = phi i1 [ false, %land.end34 ], [ %cmp41, %land.rhs39 ]
  %land.ext44 = zext i1 %26 to i32
  %27 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_Cross([144 x i8]* %18, i32 %19, i32 %20, i32 %land.ext35, i32 %land.ext44, [9 x i8]* %27)
  br label %if.end

if.else45:                                        ; preds = %land.lhs.true, %if.else21
  %28 = load [144 x i8]*, [144 x i8]** %Sluma.addr, align 8
  %29 = load i32, i32* %xint.addr, align 4
  %30 = load i32, i32* %yint.addr, align 4
  %31 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  call void @copy_j([144 x i8]* %28, i32 %29, i32 %30, [9 x i8]* %31)
  br label %if.end

if.end:                                           ; preds = %if.else45, %land.end43
  br label %if.end46

if.end46:                                         ; preds = %if.end, %land.end19
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_double_bizero_skip([144 x i8]* %Sluma0, [144 x i8]* %Sluma1, [144 x i8]* %Sluma_cur, i32 %startx, i32 %starty, i32 %xint0, i32 %yint0, i32 %xint1, i32 %yint1, [4 x i32]* %rMb, i8 zeroext %rmbflag) #0 !prof !102 {
entry:
  %Sluma0.addr = alloca [144 x i8]*, align 8
  %Sluma1.addr = alloca [144 x i8]*, align 8
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xint0.addr = alloca i32, align 4
  %yint0.addr = alloca i32, align 4
  %xint1.addr = alloca i32, align 4
  %yint1.addr = alloca i32, align 4
  %rMb.addr = alloca [4 x i32]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  store [144 x i8]* %Sluma0, [144 x i8]** %Sluma0.addr, align 8
  store [144 x i8]* %Sluma1, [144 x i8]** %Sluma1.addr, align 8
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i32 %xint0, i32* %xint0.addr, align 4
  store i32 %yint0, i32* %yint0.addr, align 4
  store i32 %xint1, i32* %xint1.addr, align 4
  store i32 %yint1, i32* %yint1.addr, align 4
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc33, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end35, !prof !154

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end, !prof !155

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %xint0.addr, align 4
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, %3
  %call = call i32 @Clip3(i32 0, i32 175, i32 %add)
  store i32 %call, i32* %x0, align 4
  %4 = load i32, i32* %yint0.addr, align 4
  %5 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %4, %5
  %call5 = call i32 @Clip3(i32 0, i32 143, i32 %add4)
  store i32 %call5, i32* %y0, align 4
  %6 = load i32, i32* %xint1.addr, align 4
  %7 = load i32, i32* %i, align 4
  %add6 = add nsw i32 %6, %7
  %call7 = call i32 @Clip3(i32 0, i32 175, i32 %add6)
  store i32 %call7, i32* %x1, align 4
  %8 = load i32, i32* %yint1.addr, align 4
  %9 = load i32, i32* %j, align 4
  %add8 = add nsw i32 %8, %9
  %call9 = call i32 @Clip3(i32 0, i32 143, i32 %add8)
  store i32 %call9, i32* %y1, align 4
  %10 = load i8, i8* %rmbflag.addr, align 1
  %conv = zext i8 %10 to i32
  %11 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 %idxprom
  %13 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx, i64 0, i64 %idxprom10
  %14 = load i32, i32* %arrayidx11, align 4
  %mul = mul nsw i32 %conv, %14
  %15 = load [144 x i8]*, [144 x i8]** %Sluma0.addr, align 8
  %16 = load i32, i32* %x0, align 4
  %idxprom12 = sext i32 %16 to i64
  %arrayidx13 = getelementptr inbounds [144 x i8], [144 x i8]* %15, i64 %idxprom12
  %17 = load i32, i32* %y0, align 4
  %idxprom14 = sext i32 %17 to i64
  %arrayidx15 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx13, i64 0, i64 %idxprom14
  %18 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %18 to i32
  %19 = load [144 x i8]*, [144 x i8]** %Sluma1.addr, align 8
  %20 = load i32, i32* %x1, align 4
  %idxprom17 = sext i32 %20 to i64
  %arrayidx18 = getelementptr inbounds [144 x i8], [144 x i8]* %19, i64 %idxprom17
  %21 = load i32, i32* %y1, align 4
  %idxprom19 = sext i32 %21 to i64
  %arrayidx20 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %22 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %22 to i32
  %add22 = add nsw i32 %conv16, %conv21
  %add23 = add nsw i32 %add22, 1
  %shr = ashr i32 %add23, 1
  %add24 = add nsw i32 %mul, %shr
  %call25 = call i32 @Clip1y(i32 %add24)
  %conv26 = trunc i32 %call25 to i8
  %23 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %24 = load i32, i32* %startx.addr, align 4
  %25 = load i32, i32* %i, align 4
  %add27 = add nsw i32 %24, %25
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i8], [144 x i8]* %23, i64 %idxprom28
  %26 = load i32, i32* %starty.addr, align 4
  %27 = load i32, i32* %j, align 4
  %add30 = add nsw i32 %26, %27
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx29, i64 0, i64 %idxprom31
  store i8 %conv26, i8* %arrayidx32, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc33

for.inc33:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %29, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_double_skip([144 x i8]* %Sluma_cur, i32 %startx, i32 %starty, i8 zeroext %xfrac0, i8 zeroext %yfrac0, i8 zeroext %xfrac1, i8 zeroext %yfrac1, i8 zeroext %xoffset0, i8 zeroext %yoffset0, i8 zeroext %xoffset1, i8 zeroext %yoffset1, [9 x i8]* %temp0, [9 x i8]* %temp1, [4 x i32]* %rMb, i8 zeroext %rmbflag) #0 !prof !132 {
entry:
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xfrac0.addr = alloca i8, align 1
  %yfrac0.addr = alloca i8, align 1
  %xfrac1.addr = alloca i8, align 1
  %yfrac1.addr = alloca i8, align 1
  %xoffset0.addr = alloca i8, align 1
  %yoffset0.addr = alloca i8, align 1
  %xoffset1.addr = alloca i8, align 1
  %yoffset1.addr = alloca i8, align 1
  %temp0.addr = alloca [9 x i8]*, align 8
  %temp1.addr = alloca [9 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %sum0 = alloca i32, align 4
  %sum1 = alloca i32, align 4
  %h0 = alloca i8, align 1
  %b0 = alloca i8, align 1
  %h1 = alloca i8, align 1
  %b1 = alloca i8, align 1
  %G0 = alloca i8, align 1
  %G1 = alloca i8, align 1
  %bitoff0 = alloca i8, align 1
  %bitoff1 = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %xfrac0, i8* %xfrac0.addr, align 1
  store i8 %yfrac0, i8* %yfrac0.addr, align 1
  store i8 %xfrac1, i8* %xfrac1.addr, align 1
  store i8 %yfrac1, i8* %yfrac1.addr, align 1
  store i8 %xoffset0, i8* %xoffset0.addr, align 1
  store i8 %yoffset0, i8* %yoffset0.addr, align 1
  store i8 %xoffset1, i8* %xoffset1.addr, align 1
  store i8 %yoffset1, i8* %yoffset1.addr, align 1
  store [9 x i8]* %temp0, [9 x i8]** %temp0.addr, align 8
  store [9 x i8]* %temp1, [9 x i8]** %temp1.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc525, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end527

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc522, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end524

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %yfrac0.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp sgt i32 %conv, 0
  br i1 %cmp4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body3
  %3 = load i8, i8* %xfrac0.addr, align 1
  %conv6 = zext i8 %3 to i32
  %cmp7 = icmp ne i32 %conv6, 2
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 2
  %6 = load i8, i8* %xoffset0.addr, align 1
  %conv9 = zext i8 %6 to i32
  %add10 = add nsw i32 %add, %conv9
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %7 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %9 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %10 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %10, 2
  %11 = load i8, i8* %xoffset0.addr, align 1
  %conv15 = zext i8 %11 to i32
  %add16 = add nsw i32 %add14, %conv15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds [9 x i8], [9 x i8]* %9, i64 %idxprom17
  %12 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %12, 1
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx18, i64 0, i64 %idxprom20
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %13 to i32
  %mul = mul nsw i32 5, %conv22
  %sub = sub nsw i32 %conv13, %mul
  %14 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %15, 2
  %16 = load i8, i8* %xoffset0.addr, align 1
  %conv24 = zext i8 %16 to i32
  %add25 = add nsw i32 %add23, %conv24
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom26
  %17 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %17, 2
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx27, i64 0, i64 %idxprom29
  %18 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %18 to i32
  %mul32 = mul nsw i32 20, %conv31
  %add33 = add nsw i32 %sub, %mul32
  %19 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add34 = add nsw i32 %20, 2
  %21 = load i8, i8* %xoffset0.addr, align 1
  %conv35 = zext i8 %21 to i32
  %add36 = add nsw i32 %add34, %conv35
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [9 x i8], [9 x i8]* %19, i64 %idxprom37
  %22 = load i32, i32* %j, align 4
  %add39 = add nsw i32 %22, 3
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx38, i64 0, i64 %idxprom40
  %23 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %23 to i32
  %mul43 = mul nsw i32 20, %conv42
  %add44 = add nsw i32 %add33, %mul43
  %24 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %25 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %25, 2
  %26 = load i8, i8* %xoffset0.addr, align 1
  %conv46 = zext i8 %26 to i32
  %add47 = add nsw i32 %add45, %conv46
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %24, i64 %idxprom48
  %27 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %27, 4
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %28 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %28 to i32
  %mul54 = mul nsw i32 5, %conv53
  %sub55 = sub nsw i32 %add44, %mul54
  %29 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %30 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %30, 2
  %31 = load i8, i8* %xoffset0.addr, align 1
  %conv57 = zext i8 %31 to i32
  %add58 = add nsw i32 %add56, %conv57
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [9 x i8], [9 x i8]* %29, i64 %idxprom59
  %32 = load i32, i32* %j, align 4
  %add61 = add nsw i32 %32, 5
  %idxprom62 = sext i32 %add61 to i64
  %arrayidx63 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx60, i64 0, i64 %idxprom62
  %33 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %33 to i32
  %add65 = add nsw i32 %sub55, %conv64
  %add66 = add nsw i32 %add65, 16
  %shr = ashr i32 %add66, 5
  %call = call i32 @Clip1y(i32 %shr)
  %conv67 = trunc i32 %call to i8
  store i8 %conv67, i8* %h0, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body3
  store i8 0, i8* %h0, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load i8, i8* %xfrac0.addr, align 1
  %conv68 = zext i8 %34 to i32
  %cmp69 = icmp sgt i32 %conv68, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.else142

land.lhs.true71:                                  ; preds = %if.end
  %35 = load i8, i8* %yfrac0.addr, align 1
  %conv72 = zext i8 %35 to i32
  %cmp73 = icmp ne i32 %conv72, 2
  br i1 %cmp73, label %if.then75, label %if.else142

if.then75:                                        ; preds = %land.lhs.true71
  %36 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %37 to i64
  %arrayidx77 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 %idxprom76
  %38 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %38, 2
  %39 = load i8, i8* %yoffset0.addr, align 1
  %conv79 = zext i8 %39 to i32
  %add80 = add nsw i32 %add78, %conv79
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx77, i64 0, i64 %idxprom81
  %40 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %40 to i32
  %41 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %42, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [9 x i8], [9 x i8]* %41, i64 %idxprom85
  %43 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %43, 2
  %44 = load i8, i8* %yoffset0.addr, align 1
  %conv88 = zext i8 %44 to i32
  %add89 = add nsw i32 %add87, %conv88
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx86, i64 0, i64 %idxprom90
  %45 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %45 to i32
  %mul93 = mul nsw i32 5, %conv92
  %sub94 = sub nsw i32 %conv83, %mul93
  %46 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %47 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %47, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [9 x i8], [9 x i8]* %46, i64 %idxprom96
  %48 = load i32, i32* %j, align 4
  %add98 = add nsw i32 %48, 2
  %49 = load i8, i8* %yoffset0.addr, align 1
  %conv99 = zext i8 %49 to i32
  %add100 = add nsw i32 %add98, %conv99
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx97, i64 0, i64 %idxprom101
  %50 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %50 to i32
  %mul104 = mul nsw i32 20, %conv103
  %add105 = add nsw i32 %sub94, %mul104
  %51 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %52, 3
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom107
  %53 = load i32, i32* %j, align 4
  %add109 = add nsw i32 %53, 2
  %54 = load i8, i8* %yoffset0.addr, align 1
  %conv110 = zext i8 %54 to i32
  %add111 = add nsw i32 %add109, %conv110
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx108, i64 0, i64 %idxprom112
  %55 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %55 to i32
  %mul115 = mul nsw i32 20, %conv114
  %add116 = add nsw i32 %add105, %mul115
  %56 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %57, 4
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom118
  %58 = load i32, i32* %j, align 4
  %add120 = add nsw i32 %58, 2
  %59 = load i8, i8* %yoffset0.addr, align 1
  %conv121 = zext i8 %59 to i32
  %add122 = add nsw i32 %add120, %conv121
  %idxprom123 = sext i32 %add122 to i64
  %arrayidx124 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx119, i64 0, i64 %idxprom123
  %60 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %60 to i32
  %mul126 = mul nsw i32 5, %conv125
  %sub127 = sub nsw i32 %add116, %mul126
  %61 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add128 = add nsw i32 %62, 5
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds [9 x i8], [9 x i8]* %61, i64 %idxprom129
  %63 = load i32, i32* %j, align 4
  %add131 = add nsw i32 %63, 2
  %64 = load i8, i8* %yoffset0.addr, align 1
  %conv132 = zext i8 %64 to i32
  %add133 = add nsw i32 %add131, %conv132
  %idxprom134 = sext i32 %add133 to i64
  %arrayidx135 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx130, i64 0, i64 %idxprom134
  %65 = load i8, i8* %arrayidx135, align 1
  %conv136 = zext i8 %65 to i32
  %add137 = add nsw i32 %sub127, %conv136
  %add138 = add nsw i32 %add137, 16
  %shr139 = ashr i32 %add138, 5
  %call140 = call i32 @Clip1y(i32 %shr139)
  %conv141 = trunc i32 %call140 to i8
  store i8 %conv141, i8* %b0, align 1
  br label %if.end143

if.else142:                                       ; preds = %land.lhs.true71, %if.end
  store i8 0, i8* %b0, align 1
  br label %if.end143

if.end143:                                        ; preds = %if.else142, %if.then75
  %66 = load i8, i8* %yfrac0.addr, align 1
  %conv144 = zext i8 %66 to i32
  %cmp145 = icmp sgt i32 %conv144, 0
  br i1 %cmp145, label %land.lhs.true147, label %lor.lhs.false

land.lhs.true147:                                 ; preds = %if.end143
  %67 = load i8, i8* %xfrac0.addr, align 1
  %conv148 = zext i8 %67 to i32
  %cmp149 = icmp eq i32 %conv148, 2
  br i1 %cmp149, label %if.then158, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true147, %if.end143
  %68 = load i8, i8* %xfrac0.addr, align 1
  %conv151 = zext i8 %68 to i32
  %cmp152 = icmp sgt i32 %conv151, 0
  br i1 %cmp152, label %land.lhs.true154, label %if.else185

land.lhs.true154:                                 ; preds = %lor.lhs.false
  %69 = load i8, i8* %yfrac0.addr, align 1
  %conv155 = zext i8 %69 to i32
  %cmp156 = icmp eq i32 %conv155, 2
  br i1 %cmp156, label %if.then158, label %if.else185

if.then158:                                       ; preds = %land.lhs.true154, %land.lhs.true147
  store i32 0, i32* %sum0, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc180, %if.then158
  %70 = load i32, i32* %x, align 4
  %cmp160 = icmp slt i32 %70, 6
  br i1 %cmp160, label %for.body162, label %for.end182

for.body162:                                      ; preds = %for.cond159
  store i32 0, i32* %y, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %71 = load i32, i32* %y, align 4
  %cmp164 = icmp slt i32 %71, 6
  br i1 %cmp164, label %for.body166, label %for.end

for.body166:                                      ; preds = %for.cond163
  %72 = load i32, i32* %sum0, align 4
  %73 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %74 = load i32, i32* %x, align 4
  %75 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %74, %75
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [9 x i8], [9 x i8]* %73, i64 %idxprom168
  %76 = load i32, i32* %y, align 4
  %77 = load i32, i32* %j, align 4
  %add170 = add nsw i32 %76, %77
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx169, i64 0, i64 %idxprom171
  %78 = load i8, i8* %arrayidx172, align 1
  %conv173 = zext i8 %78 to i32
  %79 = load i32, i32* %x, align 4
  %idxprom174 = sext i32 %79 to i64
  %arrayidx175 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom174
  %80 = load i32, i32* %y, align 4
  %idxprom176 = sext i32 %80 to i64
  %arrayidx177 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx175, i64 0, i64 %idxprom176
  %81 = load i32, i32* %arrayidx177, align 4
  %mul178 = mul nsw i32 %conv173, %81
  %add179 = add nsw i32 %72, %mul178
  store i32 %add179, i32* %sum0, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body166
  %82 = load i32, i32* %y, align 4
  %inc = add nsw i32 %82, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc180

for.inc180:                                       ; preds = %for.end
  %83 = load i32, i32* %x, align 4
  %inc181 = add nsw i32 %83, 1
  store i32 %inc181, i32* %x, align 4
  br label %for.cond159

for.end182:                                       ; preds = %for.cond159
  %84 = load i32, i32* %sum0, align 4
  %add183 = add nsw i32 %84, 512
  %shr184 = ashr i32 %add183, 10
  store i32 %shr184, i32* %sum0, align 4
  br label %if.end186

if.else185:                                       ; preds = %land.lhs.true154, %lor.lhs.false
  store i32 0, i32* %sum0, align 4
  br label %if.end186

if.end186:                                        ; preds = %if.else185, %for.end182
  %85 = load i8, i8* %yfrac0.addr, align 1
  %conv187 = zext i8 %85 to i32
  %cmp188 = icmp eq i32 %conv187, 0
  br i1 %cmp188, label %land.lhs.true190, label %lor.lhs.false194

land.lhs.true190:                                 ; preds = %if.end186
  %86 = load i8, i8* %xfrac0.addr, align 1
  %conv191 = zext i8 %86 to i32
  %cmp192 = icmp ne i32 %conv191, 2
  br i1 %cmp192, label %if.then210, label %lor.lhs.false194

lor.lhs.false194:                                 ; preds = %land.lhs.true190, %if.end186
  %87 = load i8, i8* %xfrac0.addr, align 1
  %conv195 = zext i8 %87 to i32
  %cmp196 = icmp eq i32 %conv195, 0
  br i1 %cmp196, label %land.lhs.true198, label %lor.lhs.false202

land.lhs.true198:                                 ; preds = %lor.lhs.false194
  %88 = load i8, i8* %yfrac0.addr, align 1
  %conv199 = zext i8 %88 to i32
  %cmp200 = icmp ne i32 %conv199, 2
  br i1 %cmp200, label %if.then210, label %lor.lhs.false202

lor.lhs.false202:                                 ; preds = %land.lhs.true198, %lor.lhs.false194
  %89 = load i8, i8* %xfrac0.addr, align 1
  %conv203 = zext i8 %89 to i32
  %cmp204 = icmp eq i32 %conv203, 0
  br i1 %cmp204, label %land.lhs.true206, label %if.else222

land.lhs.true206:                                 ; preds = %lor.lhs.false202
  %90 = load i8, i8* %yfrac0.addr, align 1
  %conv207 = zext i8 %90 to i32
  %cmp208 = icmp eq i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else222

if.then210:                                       ; preds = %land.lhs.true206, %land.lhs.true198, %land.lhs.true190
  %91 = load [9 x i8]*, [9 x i8]** %temp0.addr, align 8
  %92 = load i32, i32* %i, align 4
  %add211 = add nsw i32 %92, 2
  %93 = load i8, i8* %xfrac0.addr, align 1
  %conv212 = zext i8 %93 to i32
  %div = sdiv i32 %conv212, 2
  %add213 = add nsw i32 %add211, %div
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [9 x i8], [9 x i8]* %91, i64 %idxprom214
  %94 = load i32, i32* %j, align 4
  %add216 = add nsw i32 %94, 2
  %95 = load i8, i8* %yfrac0.addr, align 1
  %conv217 = zext i8 %95 to i32
  %div218 = sdiv i32 %conv217, 2
  %add219 = add nsw i32 %add216, %div218
  %idxprom220 = sext i32 %add219 to i64
  %arrayidx221 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx215, i64 0, i64 %idxprom220
  %96 = load i8, i8* %arrayidx221, align 1
  store i8 %96, i8* %G0, align 1
  br label %if.end223

if.else222:                                       ; preds = %land.lhs.true206, %lor.lhs.false202
  store i8 0, i8* %G0, align 1
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %if.then210
  %97 = load i8, i8* %xfrac0.addr, align 1
  %conv224 = zext i8 %97 to i32
  %rem = srem i32 %conv224, 2
  %cmp225 = icmp eq i32 %rem, 0
  br i1 %cmp225, label %land.lhs.true227, label %if.else233

land.lhs.true227:                                 ; preds = %if.end223
  %98 = load i8, i8* %yfrac0.addr, align 1
  %conv228 = zext i8 %98 to i32
  %rem229 = srem i32 %conv228, 2
  %cmp230 = icmp eq i32 %rem229, 0
  br i1 %cmp230, label %if.then232, label %if.else233

if.then232:                                       ; preds = %land.lhs.true227
  store i8 0, i8* %bitoff0, align 1
  br label %if.end234

if.else233:                                       ; preds = %land.lhs.true227, %if.end223
  store i8 1, i8* %bitoff0, align 1
  br label %if.end234

if.end234:                                        ; preds = %if.else233, %if.then232
  %99 = load i8, i8* %yfrac1.addr, align 1
  %conv235 = zext i8 %99 to i32
  %cmp236 = icmp sgt i32 %conv235, 0
  br i1 %cmp236, label %land.lhs.true238, label %if.else309

land.lhs.true238:                                 ; preds = %if.end234
  %100 = load i8, i8* %xfrac1.addr, align 1
  %conv239 = zext i8 %100 to i32
  %cmp240 = icmp ne i32 %conv239, 2
  br i1 %cmp240, label %if.then242, label %if.else309

if.then242:                                       ; preds = %land.lhs.true238
  %101 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %102 = load i32, i32* %i, align 4
  %add243 = add nsw i32 %102, 2
  %103 = load i8, i8* %xoffset1.addr, align 1
  %conv244 = zext i8 %103 to i32
  %add245 = add nsw i32 %add243, %conv244
  %idxprom246 = sext i32 %add245 to i64
  %arrayidx247 = getelementptr inbounds [9 x i8], [9 x i8]* %101, i64 %idxprom246
  %104 = load i32, i32* %j, align 4
  %idxprom248 = sext i32 %104 to i64
  %arrayidx249 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx247, i64 0, i64 %idxprom248
  %105 = load i8, i8* %arrayidx249, align 1
  %conv250 = zext i8 %105 to i32
  %106 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %107 = load i32, i32* %i, align 4
  %add251 = add nsw i32 %107, 2
  %108 = load i8, i8* %xoffset1.addr, align 1
  %conv252 = zext i8 %108 to i32
  %add253 = add nsw i32 %add251, %conv252
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds [9 x i8], [9 x i8]* %106, i64 %idxprom254
  %109 = load i32, i32* %j, align 4
  %add256 = add nsw i32 %109, 1
  %idxprom257 = sext i32 %add256 to i64
  %arrayidx258 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx255, i64 0, i64 %idxprom257
  %110 = load i8, i8* %arrayidx258, align 1
  %conv259 = zext i8 %110 to i32
  %mul260 = mul nsw i32 5, %conv259
  %sub261 = sub nsw i32 %conv250, %mul260
  %111 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %112 = load i32, i32* %i, align 4
  %add262 = add nsw i32 %112, 2
  %113 = load i8, i8* %xoffset1.addr, align 1
  %conv263 = zext i8 %113 to i32
  %add264 = add nsw i32 %add262, %conv263
  %idxprom265 = sext i32 %add264 to i64
  %arrayidx266 = getelementptr inbounds [9 x i8], [9 x i8]* %111, i64 %idxprom265
  %114 = load i32, i32* %j, align 4
  %add267 = add nsw i32 %114, 2
  %idxprom268 = sext i32 %add267 to i64
  %arrayidx269 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx266, i64 0, i64 %idxprom268
  %115 = load i8, i8* %arrayidx269, align 1
  %conv270 = zext i8 %115 to i32
  %mul271 = mul nsw i32 20, %conv270
  %add272 = add nsw i32 %sub261, %mul271
  %116 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %117 = load i32, i32* %i, align 4
  %add273 = add nsw i32 %117, 2
  %118 = load i8, i8* %xoffset1.addr, align 1
  %conv274 = zext i8 %118 to i32
  %add275 = add nsw i32 %add273, %conv274
  %idxprom276 = sext i32 %add275 to i64
  %arrayidx277 = getelementptr inbounds [9 x i8], [9 x i8]* %116, i64 %idxprom276
  %119 = load i32, i32* %j, align 4
  %add278 = add nsw i32 %119, 3
  %idxprom279 = sext i32 %add278 to i64
  %arrayidx280 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx277, i64 0, i64 %idxprom279
  %120 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %120 to i32
  %mul282 = mul nsw i32 20, %conv281
  %add283 = add nsw i32 %add272, %mul282
  %121 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %122 = load i32, i32* %i, align 4
  %add284 = add nsw i32 %122, 2
  %123 = load i8, i8* %xoffset1.addr, align 1
  %conv285 = zext i8 %123 to i32
  %add286 = add nsw i32 %add284, %conv285
  %idxprom287 = sext i32 %add286 to i64
  %arrayidx288 = getelementptr inbounds [9 x i8], [9 x i8]* %121, i64 %idxprom287
  %124 = load i32, i32* %j, align 4
  %add289 = add nsw i32 %124, 4
  %idxprom290 = sext i32 %add289 to i64
  %arrayidx291 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx288, i64 0, i64 %idxprom290
  %125 = load i8, i8* %arrayidx291, align 1
  %conv292 = zext i8 %125 to i32
  %mul293 = mul nsw i32 5, %conv292
  %sub294 = sub nsw i32 %add283, %mul293
  %126 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %127 = load i32, i32* %i, align 4
  %add295 = add nsw i32 %127, 2
  %128 = load i8, i8* %xoffset1.addr, align 1
  %conv296 = zext i8 %128 to i32
  %add297 = add nsw i32 %add295, %conv296
  %idxprom298 = sext i32 %add297 to i64
  %arrayidx299 = getelementptr inbounds [9 x i8], [9 x i8]* %126, i64 %idxprom298
  %129 = load i32, i32* %j, align 4
  %add300 = add nsw i32 %129, 5
  %idxprom301 = sext i32 %add300 to i64
  %arrayidx302 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx299, i64 0, i64 %idxprom301
  %130 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %130 to i32
  %add304 = add nsw i32 %sub294, %conv303
  %add305 = add nsw i32 %add304, 16
  %shr306 = ashr i32 %add305, 5
  %call307 = call i32 @Clip1y(i32 %shr306)
  %conv308 = trunc i32 %call307 to i8
  store i8 %conv308, i8* %h1, align 1
  br label %if.end310

if.else309:                                       ; preds = %land.lhs.true238, %if.end234
  store i8 0, i8* %h1, align 1
  br label %if.end310

if.end310:                                        ; preds = %if.else309, %if.then242
  %131 = load i8, i8* %xfrac1.addr, align 1
  %conv311 = zext i8 %131 to i32
  %cmp312 = icmp sgt i32 %conv311, 0
  br i1 %cmp312, label %land.lhs.true314, label %if.else385

land.lhs.true314:                                 ; preds = %if.end310
  %132 = load i8, i8* %yfrac1.addr, align 1
  %conv315 = zext i8 %132 to i32
  %cmp316 = icmp ne i32 %conv315, 2
  br i1 %cmp316, label %if.then318, label %if.else385

if.then318:                                       ; preds = %land.lhs.true314
  %133 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %134 = load i32, i32* %i, align 4
  %idxprom319 = sext i32 %134 to i64
  %arrayidx320 = getelementptr inbounds [9 x i8], [9 x i8]* %133, i64 %idxprom319
  %135 = load i32, i32* %j, align 4
  %add321 = add nsw i32 %135, 2
  %136 = load i8, i8* %yoffset1.addr, align 1
  %conv322 = zext i8 %136 to i32
  %add323 = add nsw i32 %add321, %conv322
  %idxprom324 = sext i32 %add323 to i64
  %arrayidx325 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx320, i64 0, i64 %idxprom324
  %137 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %137 to i32
  %138 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %139 = load i32, i32* %i, align 4
  %add327 = add nsw i32 %139, 1
  %idxprom328 = sext i32 %add327 to i64
  %arrayidx329 = getelementptr inbounds [9 x i8], [9 x i8]* %138, i64 %idxprom328
  %140 = load i32, i32* %j, align 4
  %add330 = add nsw i32 %140, 2
  %141 = load i8, i8* %yoffset1.addr, align 1
  %conv331 = zext i8 %141 to i32
  %add332 = add nsw i32 %add330, %conv331
  %idxprom333 = sext i32 %add332 to i64
  %arrayidx334 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx329, i64 0, i64 %idxprom333
  %142 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %142 to i32
  %mul336 = mul nsw i32 5, %conv335
  %sub337 = sub nsw i32 %conv326, %mul336
  %143 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %144 = load i32, i32* %i, align 4
  %add338 = add nsw i32 %144, 2
  %idxprom339 = sext i32 %add338 to i64
  %arrayidx340 = getelementptr inbounds [9 x i8], [9 x i8]* %143, i64 %idxprom339
  %145 = load i32, i32* %j, align 4
  %add341 = add nsw i32 %145, 2
  %146 = load i8, i8* %yoffset1.addr, align 1
  %conv342 = zext i8 %146 to i32
  %add343 = add nsw i32 %add341, %conv342
  %idxprom344 = sext i32 %add343 to i64
  %arrayidx345 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx340, i64 0, i64 %idxprom344
  %147 = load i8, i8* %arrayidx345, align 1
  %conv346 = zext i8 %147 to i32
  %mul347 = mul nsw i32 20, %conv346
  %add348 = add nsw i32 %sub337, %mul347
  %148 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %149 = load i32, i32* %i, align 4
  %add349 = add nsw i32 %149, 3
  %idxprom350 = sext i32 %add349 to i64
  %arrayidx351 = getelementptr inbounds [9 x i8], [9 x i8]* %148, i64 %idxprom350
  %150 = load i32, i32* %j, align 4
  %add352 = add nsw i32 %150, 2
  %151 = load i8, i8* %yoffset1.addr, align 1
  %conv353 = zext i8 %151 to i32
  %add354 = add nsw i32 %add352, %conv353
  %idxprom355 = sext i32 %add354 to i64
  %arrayidx356 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx351, i64 0, i64 %idxprom355
  %152 = load i8, i8* %arrayidx356, align 1
  %conv357 = zext i8 %152 to i32
  %mul358 = mul nsw i32 20, %conv357
  %add359 = add nsw i32 %add348, %mul358
  %153 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %154 = load i32, i32* %i, align 4
  %add360 = add nsw i32 %154, 4
  %idxprom361 = sext i32 %add360 to i64
  %arrayidx362 = getelementptr inbounds [9 x i8], [9 x i8]* %153, i64 %idxprom361
  %155 = load i32, i32* %j, align 4
  %add363 = add nsw i32 %155, 2
  %156 = load i8, i8* %yoffset1.addr, align 1
  %conv364 = zext i8 %156 to i32
  %add365 = add nsw i32 %add363, %conv364
  %idxprom366 = sext i32 %add365 to i64
  %arrayidx367 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx362, i64 0, i64 %idxprom366
  %157 = load i8, i8* %arrayidx367, align 1
  %conv368 = zext i8 %157 to i32
  %mul369 = mul nsw i32 5, %conv368
  %sub370 = sub nsw i32 %add359, %mul369
  %158 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %159 = load i32, i32* %i, align 4
  %add371 = add nsw i32 %159, 5
  %idxprom372 = sext i32 %add371 to i64
  %arrayidx373 = getelementptr inbounds [9 x i8], [9 x i8]* %158, i64 %idxprom372
  %160 = load i32, i32* %j, align 4
  %add374 = add nsw i32 %160, 2
  %161 = load i8, i8* %yoffset1.addr, align 1
  %conv375 = zext i8 %161 to i32
  %add376 = add nsw i32 %add374, %conv375
  %idxprom377 = sext i32 %add376 to i64
  %arrayidx378 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx373, i64 0, i64 %idxprom377
  %162 = load i8, i8* %arrayidx378, align 1
  %conv379 = zext i8 %162 to i32
  %add380 = add nsw i32 %sub370, %conv379
  %add381 = add nsw i32 %add380, 16
  %shr382 = ashr i32 %add381, 5
  %call383 = call i32 @Clip1y(i32 %shr382)
  %conv384 = trunc i32 %call383 to i8
  store i8 %conv384, i8* %b1, align 1
  br label %if.end386

if.else385:                                       ; preds = %land.lhs.true314, %if.end310
  store i8 0, i8* %b1, align 1
  br label %if.end386

if.end386:                                        ; preds = %if.else385, %if.then318
  %163 = load i8, i8* %yfrac1.addr, align 1
  %conv387 = zext i8 %163 to i32
  %cmp388 = icmp sgt i32 %conv387, 0
  br i1 %cmp388, label %land.lhs.true390, label %lor.lhs.false394

land.lhs.true390:                                 ; preds = %if.end386
  %164 = load i8, i8* %xfrac1.addr, align 1
  %conv391 = zext i8 %164 to i32
  %cmp392 = icmp eq i32 %conv391, 2
  br i1 %cmp392, label %if.then402, label %lor.lhs.false394

lor.lhs.false394:                                 ; preds = %land.lhs.true390, %if.end386
  %165 = load i8, i8* %xfrac1.addr, align 1
  %conv395 = zext i8 %165 to i32
  %cmp396 = icmp sgt i32 %conv395, 0
  br i1 %cmp396, label %land.lhs.true398, label %if.else432

land.lhs.true398:                                 ; preds = %lor.lhs.false394
  %166 = load i8, i8* %yfrac1.addr, align 1
  %conv399 = zext i8 %166 to i32
  %cmp400 = icmp eq i32 %conv399, 2
  br i1 %cmp400, label %if.then402, label %if.else432

if.then402:                                       ; preds = %land.lhs.true398, %land.lhs.true390
  store i32 0, i32* %sum1, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond403

for.cond403:                                      ; preds = %for.inc427, %if.then402
  %167 = load i32, i32* %x, align 4
  %cmp404 = icmp slt i32 %167, 6
  br i1 %cmp404, label %for.body406, label %for.end429

for.body406:                                      ; preds = %for.cond403
  store i32 0, i32* %y, align 4
  br label %for.cond407

for.cond407:                                      ; preds = %for.inc424, %for.body406
  %168 = load i32, i32* %y, align 4
  %cmp408 = icmp slt i32 %168, 6
  br i1 %cmp408, label %for.body410, label %for.end426

for.body410:                                      ; preds = %for.cond407
  %169 = load i32, i32* %sum1, align 4
  %170 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %171 = load i32, i32* %x, align 4
  %172 = load i32, i32* %i, align 4
  %add411 = add nsw i32 %171, %172
  %idxprom412 = sext i32 %add411 to i64
  %arrayidx413 = getelementptr inbounds [9 x i8], [9 x i8]* %170, i64 %idxprom412
  %173 = load i32, i32* %y, align 4
  %174 = load i32, i32* %j, align 4
  %add414 = add nsw i32 %173, %174
  %idxprom415 = sext i32 %add414 to i64
  %arrayidx416 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx413, i64 0, i64 %idxprom415
  %175 = load i8, i8* %arrayidx416, align 1
  %conv417 = zext i8 %175 to i32
  %176 = load i32, i32* %x, align 4
  %idxprom418 = sext i32 %176 to i64
  %arrayidx419 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom418
  %177 = load i32, i32* %y, align 4
  %idxprom420 = sext i32 %177 to i64
  %arrayidx421 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx419, i64 0, i64 %idxprom420
  %178 = load i32, i32* %arrayidx421, align 4
  %mul422 = mul nsw i32 %conv417, %178
  %add423 = add nsw i32 %169, %mul422
  store i32 %add423, i32* %sum1, align 4
  br label %for.inc424

for.inc424:                                       ; preds = %for.body410
  %179 = load i32, i32* %y, align 4
  %inc425 = add nsw i32 %179, 1
  store i32 %inc425, i32* %y, align 4
  br label %for.cond407

for.end426:                                       ; preds = %for.cond407
  br label %for.inc427

for.inc427:                                       ; preds = %for.end426
  %180 = load i32, i32* %x, align 4
  %inc428 = add nsw i32 %180, 1
  store i32 %inc428, i32* %x, align 4
  br label %for.cond403

for.end429:                                       ; preds = %for.cond403
  %181 = load i32, i32* %sum1, align 4
  %add430 = add nsw i32 %181, 512
  %shr431 = ashr i32 %add430, 10
  store i32 %shr431, i32* %sum1, align 4
  br label %if.end433

if.else432:                                       ; preds = %land.lhs.true398, %lor.lhs.false394
  store i32 0, i32* %sum1, align 4
  br label %if.end433

if.end433:                                        ; preds = %if.else432, %for.end429
  %182 = load i8, i8* %yfrac1.addr, align 1
  %conv434 = zext i8 %182 to i32
  %cmp435 = icmp eq i32 %conv434, 0
  br i1 %cmp435, label %land.lhs.true437, label %lor.lhs.false441

land.lhs.true437:                                 ; preds = %if.end433
  %183 = load i8, i8* %xfrac1.addr, align 1
  %conv438 = zext i8 %183 to i32
  %cmp439 = icmp ne i32 %conv438, 2
  br i1 %cmp439, label %if.then457, label %lor.lhs.false441

lor.lhs.false441:                                 ; preds = %land.lhs.true437, %if.end433
  %184 = load i8, i8* %xfrac1.addr, align 1
  %conv442 = zext i8 %184 to i32
  %cmp443 = icmp eq i32 %conv442, 0
  br i1 %cmp443, label %land.lhs.true445, label %lor.lhs.false449

land.lhs.true445:                                 ; preds = %lor.lhs.false441
  %185 = load i8, i8* %yfrac1.addr, align 1
  %conv446 = zext i8 %185 to i32
  %cmp447 = icmp ne i32 %conv446, 2
  br i1 %cmp447, label %if.then457, label %lor.lhs.false449

lor.lhs.false449:                                 ; preds = %land.lhs.true445, %lor.lhs.false441
  %186 = load i8, i8* %xfrac1.addr, align 1
  %conv450 = zext i8 %186 to i32
  %cmp451 = icmp eq i32 %conv450, 0
  br i1 %cmp451, label %land.lhs.true453, label %if.else470

land.lhs.true453:                                 ; preds = %lor.lhs.false449
  %187 = load i8, i8* %yfrac1.addr, align 1
  %conv454 = zext i8 %187 to i32
  %cmp455 = icmp eq i32 %conv454, 0
  br i1 %cmp455, label %if.then457, label %if.else470

if.then457:                                       ; preds = %land.lhs.true453, %land.lhs.true445, %land.lhs.true437
  %188 = load [9 x i8]*, [9 x i8]** %temp1.addr, align 8
  %189 = load i32, i32* %i, align 4
  %add458 = add nsw i32 %189, 2
  %190 = load i8, i8* %xfrac1.addr, align 1
  %conv459 = zext i8 %190 to i32
  %div460 = sdiv i32 %conv459, 2
  %add461 = add nsw i32 %add458, %div460
  %idxprom462 = sext i32 %add461 to i64
  %arrayidx463 = getelementptr inbounds [9 x i8], [9 x i8]* %188, i64 %idxprom462
  %191 = load i32, i32* %j, align 4
  %add464 = add nsw i32 %191, 2
  %192 = load i8, i8* %yfrac1.addr, align 1
  %conv465 = zext i8 %192 to i32
  %div466 = sdiv i32 %conv465, 2
  %add467 = add nsw i32 %add464, %div466
  %idxprom468 = sext i32 %add467 to i64
  %arrayidx469 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx463, i64 0, i64 %idxprom468
  %193 = load i8, i8* %arrayidx469, align 1
  store i8 %193, i8* %G1, align 1
  br label %if.end471

if.else470:                                       ; preds = %land.lhs.true453, %lor.lhs.false449
  store i8 0, i8* %G1, align 1
  br label %if.end471

if.end471:                                        ; preds = %if.else470, %if.then457
  %194 = load i8, i8* %xfrac1.addr, align 1
  %conv472 = zext i8 %194 to i32
  %rem473 = srem i32 %conv472, 2
  %cmp474 = icmp eq i32 %rem473, 0
  br i1 %cmp474, label %land.lhs.true476, label %if.else482

land.lhs.true476:                                 ; preds = %if.end471
  %195 = load i8, i8* %yfrac1.addr, align 1
  %conv477 = zext i8 %195 to i32
  %rem478 = srem i32 %conv477, 2
  %cmp479 = icmp eq i32 %rem478, 0
  br i1 %cmp479, label %if.then481, label %if.else482

if.then481:                                       ; preds = %land.lhs.true476
  store i8 0, i8* %bitoff1, align 1
  br label %if.end483

if.else482:                                       ; preds = %land.lhs.true476, %if.end471
  store i8 1, i8* %bitoff1, align 1
  br label %if.end483

if.end483:                                        ; preds = %if.else482, %if.then481
  %196 = load i8, i8* %rmbflag.addr, align 1
  %conv484 = zext i8 %196 to i32
  %197 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %198 = load i32, i32* %i, align 4
  %idxprom485 = sext i32 %198 to i64
  %arrayidx486 = getelementptr inbounds [4 x i32], [4 x i32]* %197, i64 %idxprom485
  %199 = load i32, i32* %j, align 4
  %idxprom487 = sext i32 %199 to i64
  %arrayidx488 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx486, i64 0, i64 %idxprom487
  %200 = load i32, i32* %arrayidx488, align 4
  %mul489 = mul nsw i32 %conv484, %200
  %201 = load i8, i8* %G0, align 1
  %conv490 = zext i8 %201 to i32
  %202 = load i8, i8* %h0, align 1
  %conv491 = zext i8 %202 to i32
  %add492 = add nsw i32 %conv490, %conv491
  %203 = load i8, i8* %b0, align 1
  %conv493 = zext i8 %203 to i32
  %add494 = add nsw i32 %add492, %conv493
  %204 = load i32, i32* %sum0, align 4
  %add495 = add nsw i32 %add494, %204
  %205 = load i8, i8* %bitoff0, align 1
  %conv496 = zext i8 %205 to i32
  %add497 = add nsw i32 %add495, %conv496
  %206 = load i8, i8* %bitoff0, align 1
  %conv498 = zext i8 %206 to i32
  %shr499 = ashr i32 %add497, %conv498
  %207 = load i8, i8* %G1, align 1
  %conv500 = zext i8 %207 to i32
  %208 = load i8, i8* %h1, align 1
  %conv501 = zext i8 %208 to i32
  %add502 = add nsw i32 %conv500, %conv501
  %209 = load i8, i8* %b1, align 1
  %conv503 = zext i8 %209 to i32
  %add504 = add nsw i32 %add502, %conv503
  %210 = load i32, i32* %sum1, align 4
  %add505 = add nsw i32 %add504, %210
  %211 = load i8, i8* %bitoff1, align 1
  %conv506 = zext i8 %211 to i32
  %add507 = add nsw i32 %add505, %conv506
  %212 = load i8, i8* %bitoff1, align 1
  %conv508 = zext i8 %212 to i32
  %shr509 = ashr i32 %add507, %conv508
  %add510 = add nsw i32 %shr499, %shr509
  %add511 = add nsw i32 %add510, 1
  %shr512 = ashr i32 %add511, 1
  %add513 = add nsw i32 %mul489, %shr512
  %call514 = call i32 @Clip1y(i32 %add513)
  %conv515 = trunc i32 %call514 to i8
  %213 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %214 = load i32, i32* %startx.addr, align 4
  %215 = load i32, i32* %i, align 4
  %add516 = add nsw i32 %214, %215
  %idxprom517 = sext i32 %add516 to i64
  %arrayidx518 = getelementptr inbounds [144 x i8], [144 x i8]* %213, i64 %idxprom517
  %216 = load i32, i32* %starty.addr, align 4
  %217 = load i32, i32* %j, align 4
  %add519 = add nsw i32 %216, %217
  %idxprom520 = sext i32 %add519 to i64
  %arrayidx521 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx518, i64 0, i64 %idxprom520
  store i8 %conv515, i8* %arrayidx521, align 1
  br label %for.inc522

for.inc522:                                       ; preds = %if.end483
  %218 = load i32, i32* %j, align 4
  %inc523 = add nsw i32 %218, 1
  store i32 %inc523, i32* %j, align 4
  br label %for.cond1

for.end524:                                       ; preds = %for.cond1
  br label %for.inc525

for.inc525:                                       ; preds = %for.end524
  %219 = load i32, i32* %i, align 4
  %inc526 = add nsw i32 %219, 1
  store i32 %inc526, i32* %i, align 4
  br label %for.cond

for.end527:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @inter_luma_single([144 x i8]* %Sluma_cur, [4 x i32]* %rMb, i32 %startx, i32 %starty, i8 zeroext %xfrac, i8 zeroext %yfrac, i8 zeroext %xoffset, i8 zeroext %yoffset, [9 x i8]* %temp, i8 zeroext %rmbflag) #0 !prof !146 {
entry:
  %Sluma_cur.addr = alloca [144 x i8]*, align 8
  %rMb.addr = alloca [4 x i32]*, align 8
  %startx.addr = alloca i32, align 4
  %starty.addr = alloca i32, align 4
  %xfrac.addr = alloca i8, align 1
  %yfrac.addr = alloca i8, align 1
  %xoffset.addr = alloca i8, align 1
  %yoffset.addr = alloca i8, align 1
  %temp.addr = alloca [9 x i8]*, align 8
  %rmbflag.addr = alloca i8, align 1
  %sum = alloca i32, align 4
  %h = alloca i8, align 1
  %b = alloca i8, align 1
  %G = alloca i8, align 1
  %bitoff = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store [144 x i8]* %Sluma_cur, [144 x i8]** %Sluma_cur.addr, align 8
  store [4 x i32]* %rMb, [4 x i32]** %rMb.addr, align 8
  store i32 %startx, i32* %startx.addr, align 4
  store i32 %starty, i32* %starty.addr, align 4
  store i8 %xfrac, i8* %xfrac.addr, align 1
  store i8 %yfrac, i8* %yfrac.addr, align 1
  store i8 %xoffset, i8* %xoffset.addr, align 1
  store i8 %yoffset, i8* %yoffset.addr, align 1
  store [9 x i8]* %temp, [9 x i8]** %temp.addr, align 8
  store i8 %rmbflag, i8* %rmbflag.addr, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc263, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end265, !prof !156

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc260, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end262, !prof !157

for.body3:                                        ; preds = %for.cond1
  %2 = load i8, i8* %yfrac.addr, align 1
  %conv = zext i8 %2 to i32
  %cmp4 = icmp sgt i32 %conv, 0
  br i1 %cmp4, label %land.lhs.true, label %if.else, !prof !158

land.lhs.true:                                    ; preds = %for.body3
  %3 = load i8, i8* %xfrac.addr, align 1
  %conv6 = zext i8 %3 to i32
  %cmp7 = icmp ne i32 %conv6, 2
  br i1 %cmp7, label %if.then, label %if.else, !prof !159

if.then:                                          ; preds = %land.lhs.true
  %4 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 2
  %6 = load i8, i8* %xoffset.addr, align 1
  %conv9 = zext i8 %6 to i32
  %add10 = add nsw i32 %add, %conv9
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 %idxprom
  %7 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %7 to i64
  %arrayidx12 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx, i64 0, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %9 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %10 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %10, 2
  %11 = load i8, i8* %xoffset.addr, align 1
  %conv15 = zext i8 %11 to i32
  %add16 = add nsw i32 %add14, %conv15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds [9 x i8], [9 x i8]* %9, i64 %idxprom17
  %12 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %12, 1
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx18, i64 0, i64 %idxprom20
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %13 to i32
  %mul = mul nsw i32 5, %conv22
  %sub = sub nsw i32 %conv13, %mul
  %14 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %15, 2
  %16 = load i8, i8* %xoffset.addr, align 1
  %conv24 = zext i8 %16 to i32
  %add25 = add nsw i32 %add23, %conv24
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [9 x i8], [9 x i8]* %14, i64 %idxprom26
  %17 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %17, 2
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx27, i64 0, i64 %idxprom29
  %18 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %18 to i32
  %mul32 = mul nsw i32 20, %conv31
  %add33 = add nsw i32 %sub, %mul32
  %19 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add34 = add nsw i32 %20, 2
  %21 = load i8, i8* %xoffset.addr, align 1
  %conv35 = zext i8 %21 to i32
  %add36 = add nsw i32 %add34, %conv35
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [9 x i8], [9 x i8]* %19, i64 %idxprom37
  %22 = load i32, i32* %j, align 4
  %add39 = add nsw i32 %22, 3
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx38, i64 0, i64 %idxprom40
  %23 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %23 to i32
  %mul43 = mul nsw i32 20, %conv42
  %add44 = add nsw i32 %add33, %mul43
  %24 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %25 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %25, 2
  %26 = load i8, i8* %xoffset.addr, align 1
  %conv46 = zext i8 %26 to i32
  %add47 = add nsw i32 %add45, %conv46
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds [9 x i8], [9 x i8]* %24, i64 %idxprom48
  %27 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %27, 4
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx49, i64 0, i64 %idxprom51
  %28 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %28 to i32
  %mul54 = mul nsw i32 5, %conv53
  %sub55 = sub nsw i32 %add44, %mul54
  %29 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %30 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %30, 2
  %31 = load i8, i8* %xoffset.addr, align 1
  %conv57 = zext i8 %31 to i32
  %add58 = add nsw i32 %add56, %conv57
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [9 x i8], [9 x i8]* %29, i64 %idxprom59
  %32 = load i32, i32* %j, align 4
  %add61 = add nsw i32 %32, 5
  %idxprom62 = sext i32 %add61 to i64
  %arrayidx63 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx60, i64 0, i64 %idxprom62
  %33 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %33 to i32
  %add65 = add nsw i32 %sub55, %conv64
  %add66 = add nsw i32 %add65, 16
  %shr = ashr i32 %add66, 5
  %call = call i32 @Clip1y(i32 %shr)
  %conv67 = trunc i32 %call to i8
  store i8 %conv67, i8* %h, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body3
  store i8 0, i8* %h, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load i8, i8* %xfrac.addr, align 1
  %conv68 = zext i8 %34 to i32
  %cmp69 = icmp sgt i32 %conv68, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.else142, !prof !160

land.lhs.true71:                                  ; preds = %if.end
  %35 = load i8, i8* %yfrac.addr, align 1
  %conv72 = zext i8 %35 to i32
  %cmp73 = icmp ne i32 %conv72, 2
  br i1 %cmp73, label %if.then75, label %if.else142, !prof !161

if.then75:                                        ; preds = %land.lhs.true71
  %36 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %37 to i64
  %arrayidx77 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 %idxprom76
  %38 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %38, 2
  %39 = load i8, i8* %yoffset.addr, align 1
  %conv79 = zext i8 %39 to i32
  %add80 = add nsw i32 %add78, %conv79
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx77, i64 0, i64 %idxprom81
  %40 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %40 to i32
  %41 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %42, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [9 x i8], [9 x i8]* %41, i64 %idxprom85
  %43 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %43, 2
  %44 = load i8, i8* %yoffset.addr, align 1
  %conv88 = zext i8 %44 to i32
  %add89 = add nsw i32 %add87, %conv88
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx86, i64 0, i64 %idxprom90
  %45 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %45 to i32
  %mul93 = mul nsw i32 5, %conv92
  %sub94 = sub nsw i32 %conv83, %mul93
  %46 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %47 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %47, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [9 x i8], [9 x i8]* %46, i64 %idxprom96
  %48 = load i32, i32* %j, align 4
  %add98 = add nsw i32 %48, 2
  %49 = load i8, i8* %yoffset.addr, align 1
  %conv99 = zext i8 %49 to i32
  %add100 = add nsw i32 %add98, %conv99
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx97, i64 0, i64 %idxprom101
  %50 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %50 to i32
  %mul104 = mul nsw i32 20, %conv103
  %add105 = add nsw i32 %sub94, %mul104
  %51 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %52, 3
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds [9 x i8], [9 x i8]* %51, i64 %idxprom107
  %53 = load i32, i32* %j, align 4
  %add109 = add nsw i32 %53, 2
  %54 = load i8, i8* %yoffset.addr, align 1
  %conv110 = zext i8 %54 to i32
  %add111 = add nsw i32 %add109, %conv110
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx108, i64 0, i64 %idxprom112
  %55 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %55 to i32
  %mul115 = mul nsw i32 20, %conv114
  %add116 = add nsw i32 %add105, %mul115
  %56 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %57, 4
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds [9 x i8], [9 x i8]* %56, i64 %idxprom118
  %58 = load i32, i32* %j, align 4
  %add120 = add nsw i32 %58, 2
  %59 = load i8, i8* %yoffset.addr, align 1
  %conv121 = zext i8 %59 to i32
  %add122 = add nsw i32 %add120, %conv121
  %idxprom123 = sext i32 %add122 to i64
  %arrayidx124 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx119, i64 0, i64 %idxprom123
  %60 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %60 to i32
  %mul126 = mul nsw i32 5, %conv125
  %sub127 = sub nsw i32 %add116, %mul126
  %61 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add128 = add nsw i32 %62, 5
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds [9 x i8], [9 x i8]* %61, i64 %idxprom129
  %63 = load i32, i32* %j, align 4
  %add131 = add nsw i32 %63, 2
  %64 = load i8, i8* %yoffset.addr, align 1
  %conv132 = zext i8 %64 to i32
  %add133 = add nsw i32 %add131, %conv132
  %idxprom134 = sext i32 %add133 to i64
  %arrayidx135 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx130, i64 0, i64 %idxprom134
  %65 = load i8, i8* %arrayidx135, align 1
  %conv136 = zext i8 %65 to i32
  %add137 = add nsw i32 %sub127, %conv136
  %add138 = add nsw i32 %add137, 16
  %shr139 = ashr i32 %add138, 5
  %call140 = call i32 @Clip1y(i32 %shr139)
  %conv141 = trunc i32 %call140 to i8
  store i8 %conv141, i8* %b, align 1
  br label %if.end143

if.else142:                                       ; preds = %land.lhs.true71, %if.end
  store i8 0, i8* %b, align 1
  br label %if.end143

if.end143:                                        ; preds = %if.else142, %if.then75
  %66 = load i8, i8* %yfrac.addr, align 1
  %conv144 = zext i8 %66 to i32
  %cmp145 = icmp sgt i32 %conv144, 0
  br i1 %cmp145, label %land.lhs.true147, label %lor.lhs.false, !prof !158

land.lhs.true147:                                 ; preds = %if.end143
  %67 = load i8, i8* %xfrac.addr, align 1
  %conv148 = zext i8 %67 to i32
  %cmp149 = icmp eq i32 %conv148, 2
  br i1 %cmp149, label %if.then158, label %lor.lhs.false, !prof !162

lor.lhs.false:                                    ; preds = %land.lhs.true147, %if.end143
  %68 = load i8, i8* %xfrac.addr, align 1
  %conv151 = zext i8 %68 to i32
  %cmp152 = icmp sgt i32 %conv151, 0
  br i1 %cmp152, label %land.lhs.true154, label %if.else185, !prof !160

land.lhs.true154:                                 ; preds = %lor.lhs.false
  %69 = load i8, i8* %yfrac.addr, align 1
  %conv155 = zext i8 %69 to i32
  %cmp156 = icmp eq i32 %conv155, 2
  br i1 %cmp156, label %if.then158, label %if.else185, !prof !163

if.then158:                                       ; preds = %land.lhs.true154, %land.lhs.true147
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc180, %if.then158
  %70 = load i32, i32* %x, align 4
  %cmp160 = icmp slt i32 %70, 6
  br i1 %cmp160, label %for.body162, label %for.end182

for.body162:                                      ; preds = %for.cond159
  store i32 0, i32* %y, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %71 = load i32, i32* %y, align 4
  %cmp164 = icmp slt i32 %71, 6
  br i1 %cmp164, label %for.body166, label %for.end

for.body166:                                      ; preds = %for.cond163
  %72 = load i32, i32* %sum, align 4
  %73 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %74 = load i32, i32* %x, align 4
  %75 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %74, %75
  %idxprom168 = sext i32 %add167 to i64
  %arrayidx169 = getelementptr inbounds [9 x i8], [9 x i8]* %73, i64 %idxprom168
  %76 = load i32, i32* %y, align 4
  %77 = load i32, i32* %j, align 4
  %add170 = add nsw i32 %76, %77
  %idxprom171 = sext i32 %add170 to i64
  %arrayidx172 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx169, i64 0, i64 %idxprom171
  %78 = load i8, i8* %arrayidx172, align 1
  %conv173 = zext i8 %78 to i32
  %79 = load i32, i32* %x, align 4
  %idxprom174 = sext i32 %79 to i64
  %arrayidx175 = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @inter_tab, i64 0, i64 %idxprom174
  %80 = load i32, i32* %y, align 4
  %idxprom176 = sext i32 %80 to i64
  %arrayidx177 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx175, i64 0, i64 %idxprom176
  %81 = load i32, i32* %arrayidx177, align 4
  %mul178 = mul nsw i32 %conv173, %81
  %add179 = add nsw i32 %72, %mul178
  store i32 %add179, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body166
  %82 = load i32, i32* %y, align 4
  %inc = add nsw i32 %82, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc180

for.inc180:                                       ; preds = %for.end
  %83 = load i32, i32* %x, align 4
  %inc181 = add nsw i32 %83, 1
  store i32 %inc181, i32* %x, align 4
  br label %for.cond159

for.end182:                                       ; preds = %for.cond159
  %84 = load i32, i32* %sum, align 4
  %add183 = add nsw i32 %84, 512
  %shr184 = ashr i32 %add183, 10
  store i32 %shr184, i32* %sum, align 4
  br label %if.end186

if.else185:                                       ; preds = %land.lhs.true154, %lor.lhs.false
  store i32 0, i32* %sum, align 4
  br label %if.end186

if.end186:                                        ; preds = %if.else185, %for.end182
  %85 = load i8, i8* %yfrac.addr, align 1
  %conv187 = zext i8 %85 to i32
  %cmp188 = icmp eq i32 %conv187, 0
  br i1 %cmp188, label %land.lhs.true190, label %lor.lhs.false194, !prof !164

land.lhs.true190:                                 ; preds = %if.end186
  %86 = load i8, i8* %xfrac.addr, align 1
  %conv191 = zext i8 %86 to i32
  %cmp192 = icmp ne i32 %conv191, 2
  br i1 %cmp192, label %if.then210, label %lor.lhs.false194, !prof !165

lor.lhs.false194:                                 ; preds = %land.lhs.true190, %if.end186
  %87 = load i8, i8* %xfrac.addr, align 1
  %conv195 = zext i8 %87 to i32
  %cmp196 = icmp eq i32 %conv195, 0
  br i1 %cmp196, label %land.lhs.true198, label %lor.lhs.false202, !prof !166

land.lhs.true198:                                 ; preds = %lor.lhs.false194
  %88 = load i8, i8* %yfrac.addr, align 1
  %conv199 = zext i8 %88 to i32
  %cmp200 = icmp ne i32 %conv199, 2
  br i1 %cmp200, label %if.then210, label %lor.lhs.false202, !prof !167

lor.lhs.false202:                                 ; preds = %land.lhs.true198, %lor.lhs.false194
  %89 = load i8, i8* %xfrac.addr, align 1
  %conv203 = zext i8 %89 to i32
  %cmp204 = icmp eq i32 %conv203, 0
  br i1 %cmp204, label %land.lhs.true206, label %if.else222, !prof !168

land.lhs.true206:                                 ; preds = %lor.lhs.false202
  %90 = load i8, i8* %yfrac.addr, align 1
  %conv207 = zext i8 %90 to i32
  %cmp208 = icmp eq i32 %conv207, 0
  br i1 %cmp208, label %if.then210, label %if.else222, !prof !169

if.then210:                                       ; preds = %land.lhs.true206, %land.lhs.true198, %land.lhs.true190
  %91 = load [9 x i8]*, [9 x i8]** %temp.addr, align 8
  %92 = load i32, i32* %i, align 4
  %add211 = add nsw i32 %92, 2
  %93 = load i8, i8* %xfrac.addr, align 1
  %conv212 = zext i8 %93 to i32
  %div = sdiv i32 %conv212, 2
  %add213 = add nsw i32 %add211, %div
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds [9 x i8], [9 x i8]* %91, i64 %idxprom214
  %94 = load i32, i32* %j, align 4
  %add216 = add nsw i32 %94, 2
  %95 = load i8, i8* %yfrac.addr, align 1
  %conv217 = zext i8 %95 to i32
  %div218 = sdiv i32 %conv217, 2
  %add219 = add nsw i32 %add216, %div218
  %idxprom220 = sext i32 %add219 to i64
  %arrayidx221 = getelementptr inbounds [9 x i8], [9 x i8]* %arrayidx215, i64 0, i64 %idxprom220
  %96 = load i8, i8* %arrayidx221, align 1
  store i8 %96, i8* %G, align 1
  br label %if.end223

if.else222:                                       ; preds = %land.lhs.true206, %lor.lhs.false202
  store i8 0, i8* %G, align 1
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %if.then210
  %97 = load i8, i8* %xfrac.addr, align 1
  %conv224 = zext i8 %97 to i32
  %rem = srem i32 %conv224, 2
  %cmp225 = icmp eq i32 %rem, 0
  br i1 %cmp225, label %land.lhs.true227, label %if.else233, !prof !170

land.lhs.true227:                                 ; preds = %if.end223
  %98 = load i8, i8* %yfrac.addr, align 1
  %conv228 = zext i8 %98 to i32
  %rem229 = srem i32 %conv228, 2
  %cmp230 = icmp eq i32 %rem229, 0
  br i1 %cmp230, label %if.then232, label %if.else233, !prof !171

if.then232:                                       ; preds = %land.lhs.true227
  store i8 0, i8* %bitoff, align 1
  br label %if.end234

if.else233:                                       ; preds = %land.lhs.true227, %if.end223
  store i8 1, i8* %bitoff, align 1
  br label %if.end234

if.end234:                                        ; preds = %if.else233, %if.then232
  %99 = load i8, i8* %rmbflag.addr, align 1
  %conv235 = zext i8 %99 to i32
  %100 = load [4 x i32]*, [4 x i32]** %rMb.addr, align 8
  %101 = load i32, i32* %i, align 4
  %idxprom236 = sext i32 %101 to i64
  %arrayidx237 = getelementptr inbounds [4 x i32], [4 x i32]* %100, i64 %idxprom236
  %102 = load i32, i32* %j, align 4
  %idxprom238 = sext i32 %102 to i64
  %arrayidx239 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx237, i64 0, i64 %idxprom238
  %103 = load i32, i32* %arrayidx239, align 4
  %mul240 = mul nsw i32 %conv235, %103
  %104 = load i8, i8* %G, align 1
  %conv241 = zext i8 %104 to i32
  %105 = load i8, i8* %h, align 1
  %conv242 = zext i8 %105 to i32
  %add243 = add nsw i32 %conv241, %conv242
  %106 = load i8, i8* %b, align 1
  %conv244 = zext i8 %106 to i32
  %add245 = add nsw i32 %add243, %conv244
  %107 = load i32, i32* %sum, align 4
  %add246 = add nsw i32 %add245, %107
  %108 = load i8, i8* %bitoff, align 1
  %conv247 = zext i8 %108 to i32
  %add248 = add nsw i32 %add246, %conv247
  %109 = load i8, i8* %bitoff, align 1
  %conv249 = zext i8 %109 to i32
  %shr250 = ashr i32 %add248, %conv249
  %add251 = add nsw i32 %mul240, %shr250
  %call252 = call i32 @Clip1y(i32 %add251)
  %conv253 = trunc i32 %call252 to i8
  %110 = load [144 x i8]*, [144 x i8]** %Sluma_cur.addr, align 8
  %111 = load i32, i32* %startx.addr, align 4
  %112 = load i32, i32* %i, align 4
  %add254 = add nsw i32 %111, %112
  %idxprom255 = sext i32 %add254 to i64
  %arrayidx256 = getelementptr inbounds [144 x i8], [144 x i8]* %110, i64 %idxprom255
  %113 = load i32, i32* %starty.addr, align 4
  %114 = load i32, i32* %j, align 4
  %add257 = add nsw i32 %113, %114
  %idxprom258 = sext i32 %add257 to i64
  %arrayidx259 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx256, i64 0, i64 %idxprom258
  store i8 %conv253, i8* %arrayidx259, align 1
  br label %for.inc260

for.inc260:                                       ; preds = %if.end234
  %115 = load i32, i32* %j, align 4
  %inc261 = add nsw i32 %115, 1
  store i32 %inc261, i32* %j, align 4
  br label %for.cond1

for.end262:                                       ; preds = %for.cond1
  br label %for.inc263

for.inc263:                                       ; preds = %for.end262
  %116 = load i32, i32* %i, align 4
  %inc264 = add nsw i32 %116, 1
  store i32 %inc264, i32* %i, align 4
  br label %for.cond

for.end265:                                       ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 297}
!30 = !{!"branch_weights", i32 1, i32 298}
!31 = !{!"branch_weights", i32 2, i32 297}
!32 = !{!"branch_weights", i32 3, i32 2}
!33 = !{!"branch_weights", i32 5, i32 3}
!34 = !{!"branch_weights", i32 198, i32 101}
!35 = !{!"branch_weights", i32 1, i32 101}
!36 = !{!"branch_weights", i32 81, i32 218}
!37 = !{!"branch_weights", i32 1, i32 218}
!38 = !{!"branch_weights", i32 161, i32 81}
!39 = !{!"branch_weights", i32 321, i32 161}
!40 = !{!"branch_weights", i32 199, i32 20}
!41 = !{!"branch_weights", i32 397, i32 199}
!42 = !{!"branch_weights", i32 793, i32 397}
!43 = !{!"branch_weights", i32 792, i32 2}
!44 = !{!"branch_weights", i32 2, i32 1}
!45 = !{!"branch_weights", i32 2, i32 2}
!46 = !{!"branch_weights", i32 39, i32 20}
!47 = !{!"branch_weights", i32 77, i32 39}
!48 = !{!"branch_weights", i32 218, i32 1}
!49 = !{!"branch_weights", i32 421, i32 218}
!50 = !{!"branch_weights", i32 820, i32 421}
!51 = !{!"branch_weights", i32 792, i32 29}
!52 = !{!"branch_weights", i32 1, i32 29}
!53 = !{!"branch_weights", i32 46, i32 29}
!54 = !{!"branch_weights", i32 78, i32 46}
!55 = !{!"branch_weights", i32 501, i32 298}
!56 = !{!"branch_weights", i32 900, i32 501}
!57 = !{!"branch_weights", i32 792, i32 109}
!58 = !{!"branch_weights", i32 1583, i32 792}
!59 = !{!"branch_weights", i32 3165, i32 1583}
!60 = !{!"branch_weights", i32 109, i32 1}
!61 = !{!"branch_weights", i32 109, i32 109}
!62 = !{!"branch_weights", i32 29, i32 81}
!63 = !{!"branch_weights", i32 419, i32 109}
!64 = !{!"branch_weights", i32 1589, i32 419}
!65 = !{!"branch_weights", i32 1, i32 109}
!66 = !{!"function_entry_count", i64 791}
!67 = !{!"branch_weights", i32 720, i32 73}
!68 = !{!"branch_weights", i32 704, i32 89}
!69 = !{!"branch_weights", i32 792, i32 1}
!70 = !{!"branch_weights", i32 9, i32 784}
!71 = !{!"branch_weights", i32 9, i32 1}
!72 = !{!"function_entry_count", i64 1690}
!73 = !{!"branch_weights", i32 1538, i32 154}
!74 = !{!"branch_weights", i32 1503, i32 189}
!75 = !{!"branch_weights", i32 1691, i32 1}
!76 = !{!"branch_weights", i32 81, i32 1611}
!77 = !{!"branch_weights", i32 7, i32 75}
!78 = !{!"branch_weights", i32 10, i32 66}
!79 = !{!"branch_weights", i32 9, i32 1668}
!80 = !{!"branch_weights", i32 8, i32 2}
!81 = !{!"branch_weights", i32 6, i32 1664}
!82 = !{!"branch_weights", i32 5, i32 2}
!83 = !{!"branch_weights", i32 4, i32 1662}
!84 = !{!"branch_weights", i32 180, i32 1484}
!85 = !{!"branch_weights", i32 180, i32 1}
!86 = !{!"branch_weights", i32 163, i32 18}
!87 = !{!"branch_weights", i32 1354, i32 148}
!88 = !{!"branch_weights", i32 1, i32 1354}
!89 = !{!"branch_weights", i32 148, i32 1354}
!90 = !{!"branch_weights", i32 131, i32 18}
!91 = !{!"branch_weights", i32 1, i32 131}
!92 = !{!"branch_weights", i32 18, i32 131}
!93 = !{!"branch_weights", i32 1, i32 18}
!94 = !{!"branch_weights", i32 18, i32 1484}
!95 = !{!"branch_weights", i32 66, i32 1436}
!96 = !{!"branch_weights", i32 66, i32 1}
!97 = !{!"branch_weights", i32 60, i32 7}
!98 = !{!"branch_weights", i32 54, i32 7}
!99 = !{!"branch_weights", i32 13, i32 1}
!100 = !{!"branch_weights", i32 12, i32 2}
!101 = !{!"branch_weights", i32 12, i32 1}
!102 = !{!"function_entry_count", i64 3164}
!103 = !{!"branch_weights", i32 1841, i32 1325}
!104 = !{!"branch_weights", i32 1841, i32 1}
!105 = !{!"branch_weights", i32 1825, i32 17}
!106 = !{!"branch_weights", i32 1825, i32 1}
!107 = !{!"branch_weights", i32 1817, i32 9}
!108 = !{!"branch_weights", i32 33, i32 3133}
!109 = !{!"branch_weights", i32 1, i32 3133}
!110 = !{!"branch_weights", i32 3133, i32 1}
!111 = !{!"branch_weights", i32 1801, i32 1333}
!112 = !{!"function_entry_count", i64 2481}
!113 = !{!"branch_weights", i32 1688, i32 795}
!114 = !{!"branch_weights", i32 7, i32 1682}
!115 = !{!"branch_weights", i32 2476, i32 1}
!116 = !{!"branch_weights", i32 795, i32 1682}
!117 = !{!"branch_weights", i32 1, i32 795}
!118 = !{!"branch_weights", i32 154, i32 2323}
!119 = !{!"function_entry_count", i64 794}
!120 = !{!"branch_weights", i32 1589, i32 795}
!121 = !{!"branch_weights", i32 3177, i32 1589}
!122 = !{!"branch_weights", i32 9529, i32 3177}
!123 = !{!"branch_weights", i32 28585, i32 9529}
!124 = !{!"branch_weights", i32 6353, i32 3177}
!125 = !{!"branch_weights", i32 12705, i32 6353}
!126 = !{!"function_entry_count", i64 1582}
!127 = !{!"branch_weights", i32 6329, i32 3165}
!128 = !{!"branch_weights", i32 18985, i32 6329}
!129 = !{!"branch_weights", i32 56953, i32 18985}
!130 = !{!"branch_weights", i32 12657, i32 6329}
!131 = !{!"branch_weights", i32 25313, i32 12657}
!132 = !{!"function_entry_count", i64 0}
!133 = !{!"function_entry_count", i64 56}
!134 = !{!"branch_weights", i32 505, i32 57}
!135 = !{!"branch_weights", i32 2017, i32 505}
!136 = !{!"function_entry_count", i64 1452}
!137 = !{!"branch_weights", i32 5809, i32 1453}
!138 = !{!"branch_weights", i32 52273, i32 5809}
!139 = !{!"function_entry_count", i64 80}
!140 = !{!"branch_weights", i32 721, i32 81}
!141 = !{!"branch_weights", i32 6481, i32 721}
!142 = !{!"branch_weights", i32 4897, i32 1585}
!143 = !{!"branch_weights", i32 2881, i32 2017}
!144 = !{!"branch_weights", i32 2681, i32 921}
!145 = !{!"branch_weights", i32 1601, i32 1081}
!146 = !{!"function_entry_count", i64 1588}
!147 = !{!"branch_weights", i32 1453, i32 137}
!148 = !{!"branch_weights", i32 1, i32 1453}
!149 = !{!"branch_weights", i32 57, i32 81}
!150 = !{!"branch_weights", i32 1, i32 57}
!151 = !{!"branch_weights", i32 81, i32 1}
!152 = !{!"branch_weights", i32 17, i32 65}
!153 = !{!"branch_weights", i32 25, i32 1}
!154 = !{!"branch_weights", i32 12657, i32 3165}
!155 = !{!"branch_weights", i32 50625, i32 12657}
!156 = !{!"branch_weights", i32 6353, i32 1589}
!157 = !{!"branch_weights", i32 25409, i32 6353}
!158 = !{!"branch_weights", i32 3457, i32 21953}
!159 = !{!"branch_weights", i32 3457, i32 1}
!160 = !{!"branch_weights", i32 2177, i32 23233}
!161 = !{!"branch_weights", i32 2177, i32 1}
!162 = !{!"branch_weights", i32 1, i32 3457}
!163 = !{!"branch_weights", i32 1, i32 2177}
!164 = !{!"branch_weights", i32 21953, i32 3457}
!165 = !{!"branch_weights", i32 21953, i32 1}
!166 = !{!"branch_weights", i32 2177, i32 1281}
!167 = !{!"branch_weights", i32 2049, i32 129}
!168 = !{!"branch_weights", i32 129, i32 1281}
!169 = !{!"branch_weights", i32 1, i32 129}
!170 = !{!"branch_weights", i32 23233, i32 2177}
!171 = !{!"branch_weights", i32 21185, i32 2049}
