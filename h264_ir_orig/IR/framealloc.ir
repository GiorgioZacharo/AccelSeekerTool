; ModuleID = '../src/framealloc.c'
source_filename = "../src/framealloc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.StorablePicture = type { i32, i8, i8, i8, i8 }

@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_listP(%struct.StorablePicture* %PicBff, i32* %listX, i32 %curFrame_NUM, i32 %maxframNUM) #0 !prof !29 {
entry:
  %PicBff.addr = alloca %struct.StorablePicture*, align 8
  %listX.addr = alloca i32*, align 8
  %curFrame_NUM.addr = alloca i32, align 4
  %maxframNUM.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca i32, align 4
  %tpvalue1 = alloca i32, align 4
  %tpvalue2 = alloca i32, align 4
  store %struct.StorablePicture* %PicBff, %struct.StorablePicture** %PicBff.addr, align 8
  store i32* %listX, i32** %listX.addr, align 8
  store i32 %curFrame_NUM, i32* %curFrame_NUM.addr, align 4
  store i32 %maxframNUM, i32* %maxframNUM.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %temp, align 4
  store i32 0, i32* %tpvalue1, align 4
  store i32 0, i32* %tpvalue2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end, !prof !30

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %listX.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  store i32 %1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc48, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 3
  br i1 %cmp2, label %for.body3, label %for.end50, !prof !30

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  store i32 %6, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc45, %for.body3
  %7 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %7, 2
  br i1 %cmp5, label %for.body6, label %for.end47, !prof !31

for.body6:                                        ; preds = %for.cond4
  %8 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %9 = load i32*, i32** %listX.addr, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom7
  %11 = load i32, i32* %arrayidx8, align 4
  %idxprom9 = sext i32 %11 to i64
  %arrayidx10 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %8, i64 %idxprom9
  %use_for_char = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx10, i32 0, i32 4
  %12 = load i8, i8* %use_for_char, align 1
  %tobool = icmp ne i8 %12, 0
  br i1 %tobool, label %if.then, label %if.else, !prof !32

if.then:                                          ; preds = %for.body6
  %13 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %14 = load i32*, i32** %listX.addr, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %15 to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %14, i64 %idxprom11
  %16 = load i32, i32* %arrayidx12, align 4
  %idxprom13 = sext i32 %16 to i64
  %arrayidx14 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %13, i64 %idxprom13
  %frame_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx14, i32 0, i32 2
  %17 = load i8, i8* %frame_num, align 1
  %conv = zext i8 %17 to i32
  store i32 %conv, i32* %tpvalue1, align 4
  br label %if.end

if.else:                                          ; preds = %for.body6
  store i32 -1, i32* %tpvalue1, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %19 = load i32*, i32** %listX.addr, align 8
  %20 = load i32, i32* %j, align 4
  %add = add nsw i32 %20, 1
  %idxprom15 = sext i32 %add to i64
  %arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
  %21 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %18, i64 %idxprom17
  %use_for_char19 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx18, i32 0, i32 4
  %22 = load i8, i8* %use_for_char19, align 1
  %tobool20 = icmp ne i8 %22, 0
  br i1 %tobool20, label %if.then21, label %if.else29, !prof !33

if.then21:                                        ; preds = %if.end
  %23 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %24 = load i32*, i32** %listX.addr, align 8
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %25, 1
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %24, i64 %idxprom23
  %26 = load i32, i32* %arrayidx24, align 4
  %idxprom25 = sext i32 %26 to i64
  %arrayidx26 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %23, i64 %idxprom25
  %frame_num27 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx26, i32 0, i32 2
  %27 = load i8, i8* %frame_num27, align 1
  %conv28 = zext i8 %27 to i32
  store i32 %conv28, i32* %tpvalue2, align 4
  br label %if.end30

if.else29:                                        ; preds = %if.end
  store i32 -1, i32* %tpvalue2, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then21
  %28 = load i32, i32* %tpvalue1, align 4
  %29 = load i32, i32* %tpvalue2, align 4
  %cmp31 = icmp slt i32 %28, %29
  br i1 %cmp31, label %if.then33, label %if.end44, !prof !33

if.then33:                                        ; preds = %if.end30
  %30 = load i32*, i32** %listX.addr, align 8
  %31 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %31 to i64
  %arrayidx35 = getelementptr inbounds i32, i32* %30, i64 %idxprom34
  %32 = load i32, i32* %arrayidx35, align 4
  store i32 %32, i32* %temp, align 4
  %33 = load i32*, i32** %listX.addr, align 8
  %34 = load i32, i32* %j, align 4
  %add36 = add nsw i32 %34, 1
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds i32, i32* %33, i64 %idxprom37
  %35 = load i32, i32* %arrayidx38, align 4
  %36 = load i32*, i32** %listX.addr, align 8
  %37 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %37 to i64
  %arrayidx40 = getelementptr inbounds i32, i32* %36, i64 %idxprom39
  store i32 %35, i32* %arrayidx40, align 4
  %38 = load i32, i32* %temp, align 4
  %39 = load i32*, i32** %listX.addr, align 8
  %40 = load i32, i32* %j, align 4
  %add41 = add nsw i32 %40, 1
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds i32, i32* %39, i64 %idxprom42
  store i32 %38, i32* %arrayidx43, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then33, %if.end30
  br label %for.inc45

for.inc45:                                        ; preds = %if.end44
  %41 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %41, 1
  store i32 %inc46, i32* %j, align 4
  br label %for.cond4

for.end47:                                        ; preds = %for.cond4
  br label %for.inc48

for.inc48:                                        ; preds = %for.end47
  %42 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %42, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond1

for.end50:                                        ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc65, %for.end50
  %43 = load i32, i32* %i, align 4
  %cmp52 = icmp slt i32 %43, 3
  br i1 %cmp52, label %for.body54, label %for.end67, !prof !30

for.body54:                                       ; preds = %for.cond51
  %44 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %45 = load i32*, i32** %listX.addr, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %46 to i64
  %arrayidx56 = getelementptr inbounds i32, i32* %45, i64 %idxprom55
  %47 = load i32, i32* %arrayidx56, align 4
  %idxprom57 = sext i32 %47 to i64
  %arrayidx58 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %44, i64 %idxprom57
  %use_for_char59 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx58, i32 0, i32 4
  %48 = load i8, i8* %use_for_char59, align 1
  %tobool60 = icmp ne i8 %48, 0
  br i1 %tobool60, label %if.end64, label %if.then61, !prof !32

if.then61:                                        ; preds = %for.body54
  %49 = load i32*, i32** %listX.addr, align 8
  %50 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %50 to i64
  %arrayidx63 = getelementptr inbounds i32, i32* %49, i64 %idxprom62
  store i32 -1, i32* %arrayidx63, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then61, %for.body54
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %51 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %51, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond51

for.end67:                                        ; preds = %for.cond51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_listB(%struct.StorablePicture* %PicBff, i32* %list0, i32* %list1, i32 %curPOC) #0 !prof !34 {
entry:
  %PicBff.addr = alloca %struct.StorablePicture*, align 8
  %list0.addr = alloca i32*, align 8
  %list1.addr = alloca i32*, align 8
  %curPOC.addr = alloca i32, align 4
  store %struct.StorablePicture* %PicBff, %struct.StorablePicture** %PicBff.addr, align 8
  store i32* %list0, i32** %list0.addr, align 8
  store i32* %list1, i32** %list1.addr, align 8
  store i32 %curPOC, i32* %curPOC.addr, align 4
  %0 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %arrayidx = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %0, i64 0
  %Picorder_num = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx, i32 0, i32 0
  %1 = load i32, i32* %Picorder_num, align 4
  %2 = load %struct.StorablePicture*, %struct.StorablePicture** %PicBff.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %2, i64 1
  %Picorder_num2 = getelementptr inbounds %struct.StorablePicture, %struct.StorablePicture* %arrayidx1, i32 0, i32 0
  %3 = load i32, i32* %Picorder_num2, align 4
  %cmp = icmp sgt i32 %1, %3
  br i1 %cmp, label %if.then, label %if.else, !prof !35

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %list1.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %4, i64 0
  store i32 0, i32* %arrayidx3, align 4
  %5 = load i32*, i32** %list1.addr, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %5, i64 1
  store i32 1, i32* %arrayidx4, align 4
  %6 = load i32*, i32** %list0.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %6, i64 0
  store i32 1, i32* %arrayidx5, align 4
  %7 = load i32*, i32** %list0.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %7, i64 1
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32*, i32** %list0.addr, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %8, i64 0
  store i32 0, i32* %arrayidx7, align 4
  %9 = load i32*, i32** %list1.addr, align 8
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 0
  store i32 1, i32* %arrayidx8, align 4
  %10 = load i32*, i32** %list0.addr, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %10, i64 1
  store i32 1, i32* %arrayidx9, align 4
  %11 = load i32*, i32** %list1.addr, align 8
  %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 0, i32* %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 1}
!30 = !{!"branch_weights", i32 4, i32 2}
!31 = !{!"branch_weights", i32 4, i32 4}
!32 = !{!"branch_weights", i32 2, i32 3}
!33 = !{!"branch_weights", i32 1, i32 4}
!34 = !{!"function_entry_count", i64 2}
!35 = !{!"branch_weights", i32 2, i32 2}
