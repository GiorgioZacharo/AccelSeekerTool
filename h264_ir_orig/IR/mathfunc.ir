; ModuleID = '../src/mathfunc.c'
source_filename = "../src/mathfunc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip1y(i32 %x) #0 !prof !29 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 255, %0
  br i1 %cmp, label %if.then, label %if.else, !prof !30

if.then:                                          ; preds = %entry
  store i32 255, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp sgt i32 0, %1
  br i1 %cmp1, label %if.then2, label %if.else3, !prof !31

if.then2:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip1c(i32 %x) #0 !prof !32 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 255, %0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 255, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %cmp1 = icmp sgt i32 0, %1
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Clip3(i32 %x, i32 %y, i32 %z) #0 !prof !33 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  %0 = load i32, i32* %z.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else, !prof !34

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %z.addr, align 4
  %4 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sgt i32 %3, %4
  br i1 %cmp1, label %if.then2, label %if.else3, !prof !35

if.then2:                                         ; preds = %if.else
  %5 = load i32, i32* %y.addr, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %if.else
  %6 = load i32, i32* %z.addr, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @minpositive(i32 %x, i32 %y) #0 !prof !36 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.else4, !prof !37

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sge i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.else4, !prof !38

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp2 = icmp sgt i32 %2, %3
  br i1 %cmp2, label %if.then3, label %if.else, !prof !39

if.then3:                                         ; preds = %if.then
  %4 = load i32, i32* %y.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %x.addr, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.else4:                                         ; preds = %land.lhs.true, %entry
  %6 = load i32, i32* %x.addr, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %if.then6, label %if.else7, !prof !40

if.then6:                                         ; preds = %if.else4
  %8 = load i32, i32* %y.addr, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.else7:                                         ; preds = %if.else4
  %9 = load i32, i32* %x.addr, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else7, %if.then6, %if.else, %if.then3
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @InverseRasterScan(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e) #0 !prof !32 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %e.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %e, i32* %e.addr, align 4
  %0 = load i32, i32* %e.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %d.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 %2, %3
  %rem = srem i32 %1, %div
  %4 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 %rem, %4
  store i32 %mul, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %a.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %div1 = sdiv i32 %6, %7
  %div2 = sdiv i32 %5, %div1
  %8 = load i32, i32* %c.addr, align 4
  %mul3 = mul nsw i32 %div2, %8
  store i32 %mul3, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @on_of_three(i8 zeroext %a, i8 zeroext %x, i8 zeroext %y, i8 zeroext %z) #0 !prof !32 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %x.addr = alloca i8, align 1
  %y.addr = alloca i8, align 1
  %z.addr = alloca i8, align 1
  store i8 %a, i8* %a.addr, align 1
  store i8 %x, i8* %x.addr, align 1
  store i8 %y, i8* %y.addr, align 1
  store i8 %z, i8* %z.addr, align 1
  %0 = load i8, i8* %x.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %a.addr, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %y.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %a.addr, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp ne i32 %conv3, %conv4
  br i1 %cmp5, label %land.lhs.true7, label %lor.lhs.false

land.lhs.true7:                                   ; preds = %land.lhs.true
  %4 = load i8, i8* %z.addr, align 1
  %conv8 = zext i8 %4 to i32
  %5 = load i8, i8* %a.addr, align 1
  %conv9 = zext i8 %5 to i32
  %cmp10 = icmp ne i32 %conv8, %conv9
  br i1 %cmp10, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %6 = load i8, i8* %x.addr, align 1
  %conv12 = zext i8 %6 to i32
  %7 = load i8, i8* %a.addr, align 1
  %conv13 = zext i8 %7 to i32
  %cmp14 = icmp ne i32 %conv12, %conv13
  br i1 %cmp14, label %land.lhs.true16, label %lor.lhs.false26

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %8 = load i8, i8* %y.addr, align 1
  %conv17 = zext i8 %8 to i32
  %9 = load i8, i8* %a.addr, align 1
  %conv18 = zext i8 %9 to i32
  %cmp19 = icmp eq i32 %conv17, %conv18
  br i1 %cmp19, label %land.lhs.true21, label %lor.lhs.false26

land.lhs.true21:                                  ; preds = %land.lhs.true16
  %10 = load i8, i8* %z.addr, align 1
  %conv22 = zext i8 %10 to i32
  %11 = load i8, i8* %a.addr, align 1
  %conv23 = zext i8 %11 to i32
  %cmp24 = icmp ne i32 %conv22, %conv23
  br i1 %cmp24, label %if.then, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %land.lhs.true21, %land.lhs.true16, %lor.lhs.false
  %12 = load i8, i8* %x.addr, align 1
  %conv27 = zext i8 %12 to i32
  %13 = load i8, i8* %a.addr, align 1
  %conv28 = zext i8 %13 to i32
  %cmp29 = icmp ne i32 %conv27, %conv28
  br i1 %cmp29, label %land.lhs.true31, label %if.else

land.lhs.true31:                                  ; preds = %lor.lhs.false26
  %14 = load i8, i8* %y.addr, align 1
  %conv32 = zext i8 %14 to i32
  %15 = load i8, i8* %a.addr, align 1
  %conv33 = zext i8 %15 to i32
  %cmp34 = icmp ne i32 %conv32, %conv33
  br i1 %cmp34, label %land.lhs.true36, label %if.else

land.lhs.true36:                                  ; preds = %land.lhs.true31
  %16 = load i8, i8* %z.addr, align 1
  %conv37 = zext i8 %16 to i32
  %17 = load i8, i8* %a.addr, align 1
  %conv38 = zext i8 %17 to i32
  %cmp39 = icmp eq i32 %conv37, %conv38
  br i1 %cmp39, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true36, %land.lhs.true21, %land.lhs.true7
  store i8 1, i8* %retval, align 1
  br label %return

if.else:                                          ; preds = %land.lhs.true36, %land.lhs.true31, %lor.lhs.false26
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.else, %if.then
  %18 = load i8, i8* %retval, align 1
  ret i8 %18
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @median(i32 %x, i32 %y, i32 %z) #0 !prof !41 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp sge i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else6, !prof !42

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %z.addr, align 4
  %cmp1 = icmp sge i32 %2, %3
  br i1 %cmp1, label %if.then2, label %if.else, !prof !43

if.then2:                                         ; preds = %if.then
  %4 = load i32, i32* %y.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %5 = load i32, i32* %x.addr, align 4
  %6 = load i32, i32* %z.addr, align 4
  %cmp3 = icmp sge i32 %5, %6
  br i1 %cmp3, label %if.then4, label %if.else5, !prof !44

if.then4:                                         ; preds = %if.else
  %7 = load i32, i32* %z.addr, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %if.else
  %8 = load i32, i32* %x.addr, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.else6:                                         ; preds = %entry
  %9 = load i32, i32* %x.addr, align 4
  %10 = load i32, i32* %z.addr, align 4
  %cmp7 = icmp sge i32 %9, %10
  br i1 %cmp7, label %if.then8, label %if.else9, !prof !45

if.then8:                                         ; preds = %if.else6
  %11 = load i32, i32* %x.addr, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

if.else9:                                         ; preds = %if.else6
  %12 = load i32, i32* %y.addr, align 4
  %13 = load i32, i32* %z.addr, align 4
  %cmp10 = icmp sge i32 %12, %13
  br i1 %cmp10, label %if.then11, label %if.else12, !prof !46

if.then11:                                        ; preds = %if.else9
  %14 = load i32, i32* %z.addr, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

if.else12:                                        ; preds = %if.else9
  %15 = load i32, i32* %y.addr, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else12, %if.then11, %if.then8, %if.else5, %if.then4, %if.then2
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @six_tab(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e, i32 %f) #0 !prof !32 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %e.addr = alloca i32, align 4
  %f.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %e, i32* %e.addr, align 4
  store i32 %f, i32* %f.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %mul = mul nsw i32 5, %1
  %sub = sub nsw i32 %0, %mul
  %2 = load i32, i32* %c.addr, align 4
  %mul1 = mul nsw i32 20, %2
  %add = add nsw i32 %sub, %mul1
  %3 = load i32, i32* %d.addr, align 4
  %mul2 = mul nsw i32 20, %3
  %add3 = add nsw i32 %add, %mul2
  %4 = load i32, i32* %e.addr, align 4
  %mul4 = mul nsw i32 5, %4
  %sub5 = sub nsw i32 %add3, %mul4
  %5 = load i32, i32* %f.addr, align 4
  %add6 = add nsw i32 %sub5, %5
  ret i32 %add6
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 195712}
!30 = !{!"branch_weights", i32 1, i32 195713}
!31 = !{!"branch_weights", i32 5, i32 195709}
!32 = !{!"function_entry_count", i64 0}
!33 = !{!"function_entry_count", i64 605205}
!34 = !{!"branch_weights", i32 477, i32 604730}
!35 = !{!"branch_weights", i32 2889, i32 601842}
!36 = !{!"function_entry_count", i64 3164}
!37 = !{!"branch_weights", i32 2845, i32 321}
!38 = !{!"branch_weights", i32 2685, i32 161}
!39 = !{!"branch_weights", i32 1, i32 2685}
!40 = !{!"branch_weights", i32 129, i32 353}
!41 = !{!"function_entry_count", i64 2872}
!42 = !{!"branch_weights", i32 2872, i32 2}
!43 = !{!"branch_weights", i32 2870, i32 3}
!44 = !{!"branch_weights", i32 2, i32 2}
!45 = !{!"branch_weights", i32 1, i32 2}
!46 = !{!"branch_weights", i32 2, i32 1}
