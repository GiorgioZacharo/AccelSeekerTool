; ModuleID = '../src/nalu.c'
source_filename = "../src/nalu.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }

@IsFirstByteStreamNALU = dso_local global i32 1, align 4
@LastAccessUnitExists = dso_local global i32 0, align 4
@NALUCount = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"not enough memory\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"GetAnnexbNALU can't read start code\0A\00", align 1
@.str.2 = private unnamed_addr constant [66 x i8] c"GetAnnexbNALU: no Start Code at the begin of the NALU, return -1\0A\00", align 1
@.str.3 = private unnamed_addr constant [111 x i8] c"GetAnnexbNALU: The leading_zero_8bits syntax can only be present in the first byte stream NAL unit, return -1\0A\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c" Panic: Error in next start code search \0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [54 x i8] c"GetAnnexbNALU: Cannot fseek %d in the bit stream file\00", align 1
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @GetAnnexbNALU(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct._IO_FILE* %bits) #0 !prof !29 {
entry:
  %retval = alloca i32, align 4
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %bits.addr = alloca %struct._IO_FILE*, align 8
  %info2 = alloca i32, align 4
  %info3 = alloca i32, align 4
  %pos = alloca i32, align 4
  %StartCodeFound = alloca i32, align 4
  %rewind = alloca i32, align 4
  %Buf = alloca i8*, align 8
  %LeadingZero8BitsCount = alloca i32, align 4
  %TrailingZero8Bits = alloca i32, align 4
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct._IO_FILE* %bits, %struct._IO_FILE** %bits.addr, align 8
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %LeadingZero8BitsCount, align 4
  store i32 0, i32* %TrailingZero8Bits, align 4
  %call = call noalias i8* @calloc(i64 2450, i64 1) #5
  store i8* %call, i8** %Buf, align 8
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end, !prof !30

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 -1) #6
  unreachable

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call2 = call i32 @feof(%struct._IO_FILE* %0) #5
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %land.end, label %land.rhs, !prof !31

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call3 = call i32 @fgetc(%struct._IO_FILE* %1)
  %conv = trunc i32 %call3 to i8
  %2 = load i8*, i8** %Buf, align 8
  %3 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pos, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  %conv4 = zext i8 %conv to i32
  %cmp5 = icmp eq i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp5, %land.rhs ]
  br i1 %4, label %while.body, label %while.end, !prof !32

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call7 = call i32 @feof(%struct._IO_FILE* %5) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then9, label %if.end14, !prof !33

if.then9:                                         ; preds = %while.end
  %6 = load i32, i32* %pos, align 4
  %cmp10 = icmp eq i32 %6, 0
  br i1 %cmp10, label %if.then12, label %if.else, !prof !34

if.then12:                                        ; preds = %if.then9
  %7 = load i8*, i8** %Buf, align 8
  call void @free(i8* %7) #5
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then9
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0))
  %8 = load i8*, i8** %Buf, align 8
  call void @free(i8* %8) #5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %while.end
  %9 = load i8*, i8** %Buf, align 8
  %10 = load i32, i32* %pos, align 4
  %sub = sub nsw i32 %10, 1
  %idxprom15 = sext i32 %sub to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 %idxprom15
  %11 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %11 to i32
  %cmp18 = icmp ne i32 %conv17, 1
  br i1 %cmp18, label %if.then20, label %if.end22, !prof !35

if.then20:                                        ; preds = %if.end14
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i32 0, i32 0))
  %12 = load i8*, i8** %Buf, align 8
  call void @free(i8* %12) #5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end14
  %13 = load i32, i32* %pos, align 4
  %cmp23 = icmp slt i32 %13, 3
  br i1 %cmp23, label %if.then25, label %if.else27, !prof !35

if.then25:                                        ; preds = %if.end22
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i32 0, i32 0))
  %14 = load i8*, i8** %Buf, align 8
  call void @free(i8* %14) #5
  store i32 -1, i32* %retval, align 4
  br label %return

if.else27:                                        ; preds = %if.end22
  %15 = load i32, i32* %pos, align 4
  %cmp28 = icmp eq i32 %15, 3
  br i1 %cmp28, label %if.then30, label %if.else31, !prof !35

if.then30:                                        ; preds = %if.else27
  %16 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %16, i32 0, i32 0
  store i32 3, i32* %startcodeprefix_len, align 8
  store i32 0, i32* %LeadingZero8BitsCount, align 4
  br label %if.end34

if.else31:                                        ; preds = %if.else27
  %17 = load i32, i32* %pos, align 4
  %sub32 = sub nsw i32 %17, 4
  store i32 %sub32, i32* %LeadingZero8BitsCount, align 4
  %18 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len33 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %18, i32 0, i32 0
  store i32 4, i32* %startcodeprefix_len33, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else31, %if.then30
  br label %if.end35

if.end35:                                         ; preds = %if.end34
  %19 = load i32, i32* @IsFirstByteStreamNALU, align 4
  %tobool36 = icmp ne i32 %19, 0
  br i1 %tobool36, label %if.end41, label %land.lhs.true, !prof !36

land.lhs.true:                                    ; preds = %if.end35
  %20 = load i32, i32* %LeadingZero8BitsCount, align 4
  %cmp37 = icmp sgt i32 %20, 0
  br i1 %cmp37, label %if.then39, label %if.end41, !prof !37

if.then39:                                        ; preds = %land.lhs.true
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i32 0, i32 0))
  %21 = load i8*, i8** %Buf, align 8
  call void @free(i8* %21) #5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end41:                                         ; preds = %land.lhs.true, %if.end35
  store i32 0, i32* @IsFirstByteStreamNALU, align 4
  store i32 0, i32* %StartCodeFound, align 4
  store i32 0, i32* %info2, align 4
  store i32 0, i32* %info3, align 4
  br label %while.cond42

while.cond42:                                     ; preds = %lor.end, %if.end41
  %22 = load i32, i32* %StartCodeFound, align 4
  %tobool43 = icmp ne i32 %22, 0
  %lnot = xor i1 %tobool43, true
  br i1 %lnot, label %while.body44, label %while.end106, !prof !38

while.body44:                                     ; preds = %while.cond42
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call45 = call i32 @feof(%struct._IO_FILE* %23) #5
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.then47, label %if.end84, !prof !39

if.then47:                                        ; preds = %while.body44
  br label %while.cond48

while.cond48:                                     ; preds = %while.body56, %if.then47
  %24 = load i8*, i8** %Buf, align 8
  %25 = load i32, i32* %pos, align 4
  %sub49 = sub nsw i32 %25, 2
  %26 = load i32, i32* %TrailingZero8Bits, align 4
  %sub50 = sub nsw i32 %sub49, %26
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %24, i64 %idxprom51
  %27 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %27 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %while.body56, label %while.end58, !prof !40

while.body56:                                     ; preds = %while.cond48
  %28 = load i32, i32* %TrailingZero8Bits, align 4
  %inc57 = add nsw i32 %28, 1
  store i32 %inc57, i32* %TrailingZero8Bits, align 4
  br label %while.cond48

while.end58:                                      ; preds = %while.cond48
  %29 = load i32, i32* %pos, align 4
  %sub59 = sub nsw i32 %29, 1
  %30 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len60 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %30, i32 0, i32 0
  %31 = load i32, i32* %startcodeprefix_len60, align 8
  %sub61 = sub nsw i32 %sub59, %31
  %32 = load i32, i32* %LeadingZero8BitsCount, align 4
  %sub62 = sub nsw i32 %sub61, %32
  %33 = load i32, i32* %TrailingZero8Bits, align 4
  %sub63 = sub nsw i32 %sub62, %33
  %34 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %34, i32 0, i32 1
  store i32 %sub63, i32* %len, align 4
  %35 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len64 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %35, i32 0, i32 1
  %36 = load i32, i32* %len64, align 4
  %cmp65 = icmp ugt i32 %36, 2450
  br i1 %cmp65, label %if.then67, label %if.end68, !prof !40

if.then67:                                        ; preds = %while.end58
  call void @exit(i32 -1) #6
  unreachable

if.end68:                                         ; preds = %while.end58
  %37 = load i8*, i8** %nalu_buf.addr, align 8
  %38 = load i8*, i8** %Buf, align 8
  %39 = load i32, i32* %LeadingZero8BitsCount, align 4
  %40 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len69 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %40, i32 0, i32 0
  %41 = load i32, i32* %startcodeprefix_len69, align 8
  %add = add nsw i32 %39, %41
  %idxprom70 = sext i32 %add to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %38, i64 %idxprom70
  %42 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len72 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %42, i32 0, i32 1
  %43 = load i32, i32* %len72, align 4
  %conv73 = zext i32 %43 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %arrayidx71, i64 %conv73, i1 false)
  %44 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %45 to i32
  %shr = ashr i32 %conv75, 7
  %and = and i32 %shr, 1
  %46 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %forbidden_bit = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %46, i32 0, i32 4
  store i32 %and, i32* %forbidden_bit, align 8
  %47 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %48 to i32
  %shr78 = ashr i32 %conv77, 5
  %and79 = and i32 %shr78, 3
  %49 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %49, i32 0, i32 3
  store i32 %and79, i32* %nal_reference_idc, align 4
  %50 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx80, align 1
  %conv81 = zext i8 %51 to i32
  %and82 = and i32 %conv81, 31
  %52 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %52, i32 0, i32 2
  store i32 %and82, i32* %nal_unit_type, align 8
  %53 = load i8*, i8** %Buf, align 8
  call void @free(i8* %53) #5
  %54 = load i32, i32* %pos, align 4
  %sub83 = sub nsw i32 %54, 1
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %while.body44
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %call85 = call i32 @fgetc(%struct._IO_FILE* %55)
  %conv86 = trunc i32 %call85 to i8
  %56 = load i8*, i8** %Buf, align 8
  %57 = load i32, i32* %pos, align 4
  %inc87 = add nsw i32 %57, 1
  store i32 %inc87, i32* %pos, align 4
  %idxprom88 = sext i32 %57 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %56, i64 %idxprom88
  store i8 %conv86, i8* %arrayidx89, align 1
  %58 = load i8*, i8** %Buf, align 8
  %59 = load i32, i32* %pos, align 4
  %sub90 = sub nsw i32 %59, 4
  %idxprom91 = sext i32 %sub90 to i64
  %arrayidx92 = getelementptr inbounds i8, i8* %58, i64 %idxprom91
  %call93 = call i32 @FindStartCode(i8* %arrayidx92, i32 3)
  store i32 %call93, i32* %info3, align 4
  %60 = load i32, i32* %info3, align 4
  %cmp94 = icmp ne i32 %60, 1
  br i1 %cmp94, label %if.then96, label %if.end101, !prof !41

if.then96:                                        ; preds = %if.end84
  %61 = load i8*, i8** %Buf, align 8
  %62 = load i32, i32* %pos, align 4
  %sub97 = sub nsw i32 %62, 3
  %idxprom98 = sext i32 %sub97 to i64
  %arrayidx99 = getelementptr inbounds i8, i8* %61, i64 %idxprom98
  %call100 = call i32 @FindStartCode(i8* %arrayidx99, i32 2)
  store i32 %call100, i32* %info2, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.then96, %if.end84
  %63 = load i32, i32* %info2, align 4
  %cmp102 = icmp eq i32 %63, 1
  br i1 %cmp102, label %lor.end, label %lor.rhs, !prof !42

lor.rhs:                                          ; preds = %if.end101
  %64 = load i32, i32* %info3, align 4
  %cmp104 = icmp eq i32 %64, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end101
  %65 = phi i1 [ true, %if.end101 ], [ %cmp104, %lor.rhs ]
  %lor.ext = zext i1 %65 to i32
  store i32 %lor.ext, i32* %StartCodeFound, align 4
  br label %while.cond42

while.end106:                                     ; preds = %while.cond42
  %66 = load i32, i32* %info3, align 4
  %cmp107 = icmp eq i32 %66, 1
  br i1 %cmp107, label %if.then109, label %if.end121, !prof !43

if.then109:                                       ; preds = %while.end106
  br label %while.cond110

while.cond110:                                    ; preds = %while.body118, %if.then109
  %67 = load i8*, i8** %Buf, align 8
  %68 = load i32, i32* %pos, align 4
  %sub111 = sub nsw i32 %68, 5
  %69 = load i32, i32* %TrailingZero8Bits, align 4
  %sub112 = sub nsw i32 %sub111, %69
  %idxprom113 = sext i32 %sub112 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %67, i64 %idxprom113
  %70 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %70 to i32
  %cmp116 = icmp eq i32 %conv115, 0
  br i1 %cmp116, label %while.body118, label %while.end120, !prof !37

while.body118:                                    ; preds = %while.cond110
  %71 = load i32, i32* %TrailingZero8Bits, align 4
  %inc119 = add nsw i32 %71, 1
  store i32 %inc119, i32* %TrailingZero8Bits, align 4
  br label %while.cond110

while.end120:                                     ; preds = %while.cond110
  br label %if.end121

if.end121:                                        ; preds = %while.end120, %while.end106
  store i32 0, i32* %rewind, align 4
  %72 = load i32, i32* %info3, align 4
  %cmp122 = icmp eq i32 %72, 1
  br i1 %cmp122, label %if.then124, label %if.else125, !prof !43

if.then124:                                       ; preds = %if.end121
  store i32 -4, i32* %rewind, align 4
  br label %if.end132

if.else125:                                       ; preds = %if.end121
  %73 = load i32, i32* %info2, align 4
  %cmp126 = icmp eq i32 %73, 1
  br i1 %cmp126, label %if.then128, label %if.else129

if.then128:                                       ; preds = %if.else125
  store i32 -3, i32* %rewind, align 4
  br label %if.end131

if.else129:                                       ; preds = %if.else125
  %call130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end131

if.end131:                                        ; preds = %if.else129, %if.then128
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.then124
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %bits.addr, align 8
  %75 = load i32, i32* %rewind, align 4
  %conv133 = sext i32 %75 to i64
  %call134 = call i32 @fseek(%struct._IO_FILE* %74, i64 %conv133, i32 1)
  %cmp135 = icmp ne i32 0, %call134
  br i1 %cmp135, label %if.then137, label %if.end139, !prof !37

if.then137:                                       ; preds = %if.end132
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %77 = load i32, i32* %rewind, align 4
  %call138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i32 0, i32 0), i32 %77)
  %78 = load i8*, i8** %Buf, align 8
  call void @free(i8* %78) #5
  call void @exit(i32 -2) #6
  unreachable

if.end139:                                        ; preds = %if.end132
  %79 = load i32, i32* %pos, align 4
  %80 = load i32, i32* %rewind, align 4
  %add140 = add nsw i32 %79, %80
  %81 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len141 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %81, i32 0, i32 0
  %82 = load i32, i32* %startcodeprefix_len141, align 8
  %sub142 = sub nsw i32 %add140, %82
  %83 = load i32, i32* %LeadingZero8BitsCount, align 4
  %sub143 = sub nsw i32 %sub142, %83
  %84 = load i32, i32* %TrailingZero8Bits, align 4
  %sub144 = sub nsw i32 %sub143, %84
  %85 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len145 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %85, i32 0, i32 1
  store i32 %sub144, i32* %len145, align 4
  %86 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len146 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %86, i32 0, i32 1
  %87 = load i32, i32* %len146, align 4
  %cmp147 = icmp ugt i32 %87, 2450
  br i1 %cmp147, label %if.then149, label %if.end150, !prof !37

if.then149:                                       ; preds = %if.end139
  call void @exit(i32 -1) #6
  unreachable

if.end150:                                        ; preds = %if.end139
  %88 = load i8*, i8** %nalu_buf.addr, align 8
  %89 = load i8*, i8** %Buf, align 8
  %90 = load i32, i32* %LeadingZero8BitsCount, align 4
  %91 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %startcodeprefix_len151 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %91, i32 0, i32 0
  %92 = load i32, i32* %startcodeprefix_len151, align 8
  %add152 = add nsw i32 %90, %92
  %idxprom153 = sext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds i8, i8* %89, i64 %idxprom153
  %93 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %len155 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %93, i32 0, i32 1
  %94 = load i32, i32* %len155, align 4
  %conv156 = zext i32 %94 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %arrayidx154, i64 %conv156, i1 false)
  %95 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx157 = getelementptr inbounds i8, i8* %95, i64 0
  %96 = load i8, i8* %arrayidx157, align 1
  %conv158 = zext i8 %96 to i32
  %shr159 = ashr i32 %conv158, 7
  %and160 = and i32 %shr159, 1
  %97 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %forbidden_bit161 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %97, i32 0, i32 4
  store i32 %and160, i32* %forbidden_bit161, align 8
  %98 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %98, i64 0
  %99 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %99 to i32
  %shr164 = ashr i32 %conv163, 5
  %and165 = and i32 %shr164, 3
  %100 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc166 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %100, i32 0, i32 3
  store i32 %and165, i32* %nal_reference_idc166, align 4
  %101 = load i8*, i8** %nalu_buf.addr, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %101, i64 0
  %102 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %102 to i32
  %and169 = and i32 %conv168, 31
  %103 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type170 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %103, i32 0, i32 2
  store i32 %and169, i32* %nal_unit_type170, align 8
  %104 = load i8*, i8** %Buf, align 8
  call void @free(i8* %104) #5
  %105 = load i32, i32* %pos, align 4
  %106 = load i32, i32* %rewind, align 4
  %add171 = add nsw i32 %105, %106
  store i32 %add171, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end150, %if.end68, %if.then39, %if.then25, %if.then20, %if.else, %if.then12
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #1

declare dso_local i32 @puts(i8*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @feof(%struct._IO_FILE*) #1

declare dso_local i32 @fgetc(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @FindStartCode(i8* %Buf, i32 %zeros_in_startcode) #0 !prof !44 !PGOFuncName !45 {
entry:
  %Buf.addr = alloca i8*, align 8
  %zeros_in_startcode.addr = alloca i32, align 4
  %info = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %Buf, i8** %Buf.addr, align 8
  store i32 %zeros_in_startcode, i32* %zeros_in_startcode.addr, align 4
  store i32 1, i32* %info, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %zeros_in_startcode.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end, !prof !46

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %Buf.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end, !prof !47

if.then:                                          ; preds = %for.body
  store i32 0, i32* %info, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i8*, i8** %Buf.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 %idxprom3
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  %cmp6 = icmp ne i32 %conv5, 1
  br i1 %cmp6, label %if.then8, label %if.end9, !prof !48

if.then8:                                         ; preds = %for.end
  store i32 0, i32* %info, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %for.end
  %9 = load i32, i32* %info, align 4
  ret i32 %9
}

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @EBSPtoRBSP(i8* %streamBuffer, i32 %end_bytepos, i32 %begin_bytepos) #0 !prof !49 {
entry:
  %retval = alloca i32, align 4
  %streamBuffer.addr = alloca i8*, align 8
  %end_bytepos.addr = alloca i32, align 4
  %begin_bytepos.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  store i8* %streamBuffer, i8** %streamBuffer.addr, align 8
  store i32 %end_bytepos, i32* %end_bytepos.addr, align 4
  store i32 %begin_bytepos, i32* %begin_bytepos.addr, align 4
  store i32 0, i32* %count, align 4
  %0 = load i32, i32* %end_bytepos.addr, align 4
  %1 = load i32, i32* %begin_bytepos.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end, !prof !35

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %end_bytepos.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %begin_bytepos.addr, align 4
  store i32 %3, i32* %j, align 4
  %4 = load i32, i32* %begin_bytepos.addr, align 4
  store i32 %4, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %end_bytepos.addr, align 4
  %cmp1 = icmp slt i32 %5, %6
  br i1 %cmp1, label %for.body, label %for.end, !prof !50

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %count, align 4
  %cmp2 = icmp eq i32 %7, 2
  br i1 %cmp2, label %land.lhs.true, label %if.end6, !prof !51

land.lhs.true:                                    ; preds = %for.body
  %8 = load i8*, i8** %streamBuffer.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i32
  %cmp3 = icmp eq i32 %conv, 3
  br i1 %cmp3, label %if.then5, label %if.end6, !prof !40

if.then5:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %for.body
  %12 = load i8*, i8** %streamBuffer.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %13 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %14 = load i8, i8* %arrayidx8, align 1
  %15 = load i8*, i8** %streamBuffer.addr, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %16 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %15, i64 %idxprom9
  store i8 %14, i8* %arrayidx10, align 1
  %17 = load i8*, i8** %streamBuffer.addr, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %18 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i64 %idxprom11
  %19 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %19 to i32
  %cmp14 = icmp eq i32 %conv13, 0
  br i1 %cmp14, label %if.then16, label %if.else, !prof !52

if.then16:                                        ; preds = %if.end6
  %20 = load i32, i32* %count, align 4
  %inc17 = add nsw i32 %20, 1
  store i32 %inc17, i32* %count, align 4
  br label %if.end18

if.else:                                          ; preds = %if.end6
  store i32 0, i32* %count, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  %21 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %22 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %j, align 4
  store i32 %23, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RBSPtoSODB(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, i32 %len) #0 !prof !49 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i8, align 1
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 8
  br i1 %cmp, label %for.body, label %for.end, !prof !53

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %nalu_buf.addr, align 8
  %2 = load i32, i32* %len.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %3 to i32
  %4 = load i8, i8* %i, align 1
  %conv3 = zext i8 %4 to i32
  %shl = shl i32 1, %conv3
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end, !prof !54

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i8, i8* %i, align 1
  %inc = add i8 %5, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %6 = load i32, i32* %len.addr, align 4
  %mul = mul nsw i32 %6, 8
  %add = add nsw i32 %mul, 7
  %7 = load i8, i8* %i, align 1
  %conv4 = zext i8 %7 to i32
  %sub = sub nsw i32 %add, %conv4
  %conv5 = sext i32 %sub to i64
  %8 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %bit_length = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %8, i32 0, i32 5
  store i64 %conv5, i64* %bit_length, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @more_rbsp_data(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset) #0 !prof !55 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  %0 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %1 = load i64, i64* %0, align 8
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %bit_length = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %2, i32 0, i32 5
  %3 = load i64, i64* %bit_length, align 8
  %cmp = icmp ult i64 %1, %3
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  ret i8 %conv1
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 8}
!30 = !{!"branch_weights", i32 1, i32 9}
!31 = !{!"branch_weights", i32 2, i32 29}
!32 = !{!"branch_weights", i32 22, i32 9}
!33 = !{!"branch_weights", i32 2, i32 8}
!34 = !{!"branch_weights", i32 2, i32 1}
!35 = !{!"branch_weights", i32 1, i32 8}
!36 = !{!"branch_weights", i32 2, i32 7}
!37 = !{!"branch_weights", i32 1, i32 7}
!38 = !{!"branch_weights", i32 4902, i32 7}
!39 = !{!"branch_weights", i32 2, i32 4901}
!40 = !{!"branch_weights", i32 1, i32 2}
!41 = !{!"branch_weights", i32 4895, i32 7}
!42 = !{!"branch_weights", i32 1, i32 4901}
!43 = !{!"branch_weights", i32 7, i32 1}
!44 = !{!"function_entry_count", i64 9794}
!45 = !{!"nalu.c:FindStartCode"}
!46 = !{!"branch_weights", i32 24489, i32 9795}
!47 = !{!"branch_weights", i32 24177, i32 313}
!48 = !{!"branch_weights", i32 9739, i32 57}
!49 = !{!"function_entry_count", i64 7}
!50 = !{!"branch_weights", i32 4869, i32 8}
!51 = !{!"branch_weights", i32 2, i32 4868}
!52 = !{!"branch_weights", i32 47, i32 4823}
!53 = !{!"branch_weights", i32 37, i32 1}
!54 = !{!"branch_weights", i32 8, i32 30}
!55 = !{!"function_entry_count", i64 0}
