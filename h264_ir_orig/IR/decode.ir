; ModuleID = '../src/decode.c'
source_filename = "../src/decode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.seq_parameter_set_rbsp_t = type { i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i32, i32, i32, [256 x i32], i32, i8, i32, i32, i8, i8, i8, i8, i32, i32, i32, i32, i8 }
%struct.pic_parameter_set_rbsp_t = type { i8, i32, i32, i8, i8, i32, i32, i32, i8, i8, i32, i32, i32, i8, i8, i8 }
%struct.slice_header_rbsp_t = type { i32, i8, i8, i32, i8, i8, i32, i32, i32, [2 x i32], i32, i8, i8, i8, i8, i8, i8, [5 x i8], [5 x i32], [5 x i8], [5 x i32], %struct.pred_weight_table_rbsp_t, %struct.dec_ref_pic_marking_rbsp_t, i8, i32, i8, i32, i32 }
%struct.pred_weight_table_rbsp_t = type { i32, i32, [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]], [3 x i8], [3 x i8], [3 x i8], [3 x i8], [3 x [2 x i8]], [3 x [2 x i8]] }
%struct.dec_ref_pic_marking_rbsp_t = type { i8, i8, i8, [10 x i8], [10 x i32] }
%struct.ImageParameters = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i8, [3 x i32], [3 x i32], i32, i32, i32, i32 }
%struct.NALU_t = type { i32, i32, i32, i32, i32, i64 }
%struct.StorablePicture = type { i32, i8, i8, i8, i8 }
%struct.StorablePictureInfo = type { [22 x [18 x i8]], [22 x [18 x i8]], [44 x [36 x [2 x i32]]], [44 x [36 x [2 x i32]]] }

@SPS_GLOBAL = common dso_local global %struct.seq_parameter_set_rbsp_t zeroinitializer, align 4
@PPS_GLOBAL = common dso_local global %struct.pic_parameter_set_rbsp_t zeroinitializer, align 4
@sliceHeader_inst = common dso_local global %struct.slice_header_rbsp_t zeroinitializer, align 4
@img_inst = common dso_local global %struct.ImageParameters* null, align 8
@Mb_prediction_type = common dso_local global [11 x [9 x i8]] zeroinitializer, align 16
@intra_pred_mode = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_luma = common dso_local global [44 x [36 x i8]] zeroinitializer, align 16
@nz_coeff_chroma = common dso_local global [2 x [22 x [18 x i8]]] zeroinitializer, align 16
@QPc = common dso_local global [52 x i8] zeroinitializer, align 16
@NCBP = common dso_local global [48 x [2 x i8]] zeroinitializer, align 16
@lentab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@codtab = common dso_local global [3 x [4 x [17 x i8]]] zeroinitializer, align 16
@SNGL_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@FIELD_SCAN = common dso_local global [16 x [2 x i8]] zeroinitializer, align 16
@decode_block_scan = common dso_local global [4 x [4 x i8]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decode_main(%struct.NALU_t* %nalu, i8* %nalu_buf, i64* %nalu_bit_offset, %struct.StorablePicture* %pic, [176 x [144 x i8]]* %pic_Sluma, [88 x [72 x i8]]* %pic_SChroma_0, [88 x [72 x i8]]* %pic_SChroma_1, %struct.StorablePictureInfo* %pic_info) #0 !prof !29 {
entry:
  %nalu.addr = alloca %struct.NALU_t*, align 8
  %nalu_buf.addr = alloca i8*, align 8
  %nalu_bit_offset.addr = alloca i64*, align 8
  %pic.addr = alloca %struct.StorablePicture*, align 8
  %pic_Sluma.addr = alloca [176 x [144 x i8]]*, align 8
  %pic_SChroma_0.addr = alloca [88 x [72 x i8]]*, align 8
  %pic_SChroma_1.addr = alloca [88 x [72 x i8]]*, align 8
  %pic_info.addr = alloca %struct.StorablePictureInfo*, align 8
  store %struct.NALU_t* %nalu, %struct.NALU_t** %nalu.addr, align 8
  store i8* %nalu_buf, i8** %nalu_buf.addr, align 8
  store i64* %nalu_bit_offset, i64** %nalu_bit_offset.addr, align 8
  store %struct.StorablePicture* %pic, %struct.StorablePicture** %pic.addr, align 8
  store [176 x [144 x i8]]* %pic_Sluma, [176 x [144 x i8]]** %pic_Sluma.addr, align 8
  store [88 x [72 x i8]]* %pic_SChroma_0, [88 x [72 x i8]]** %pic_SChroma_0.addr, align 8
  store [88 x [72 x i8]]* %pic_SChroma_1, [88 x [72 x i8]]** %pic_SChroma_1.addr, align 8
  store %struct.StorablePictureInfo* %pic_info, %struct.StorablePictureInfo** %pic_info.addr, align 8
  %0 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %0, i32 0, i32 2
  %1 = load i32, i32* %nal_unit_type, align 8
  switch i32 %1, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb1
    i32 5, label %sw.bb3
    i32 1, label %sw.bb3
  ], !prof !30

sw.bb:                                            ; preds = %entry
  %2 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %3 = load i8*, i8** %nalu_buf.addr, align 8
  %4 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call = call i32 @ProcessSPS(%struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.NALU_t* %2, i8* %3, i64* %4)
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %6 = load i8*, i8** %nalu_buf.addr, align 8
  %7 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %call2 = call i32 @ProcessPPS(%struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, %struct.NALU_t* %5, i8* %6, i64* %7)
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry, %entry
  %8 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %9 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %10 = load i8*, i8** %nalu_buf.addr, align 8
  %11 = load i64*, i64** %nalu_bit_offset.addr, align 8
  call void @ProcessSH(%struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, %struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.ImageParameters* %8, %struct.NALU_t* %9, i8* %10, i64* %11)
  %12 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_unit_type4 = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %12, i32 0, i32 2
  %13 = load i32, i32* %nal_unit_type4, align 8
  %conv = trunc i32 %13 to i8
  %14 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %nal_reference_idc = getelementptr inbounds %struct.NALU_t, %struct.NALU_t* %14, i32 0, i32 3
  %15 = load i32, i32* %nal_reference_idc, align 4
  %conv5 = trunc i32 %15 to i8
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  %17 = load %struct.StorablePicture*, %struct.StorablePicture** %pic.addr, align 8
  call void @intepretSLiceHeader(%struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.seq_parameter_set_rbsp_t* @SPS_GLOBAL, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, i8 zeroext %conv, i8 zeroext %conv5, %struct.ImageParameters* %16, %struct.StorablePicture* %17)
  %18 = load %struct.NALU_t*, %struct.NALU_t** %nalu.addr, align 8
  %19 = load i8*, i8** %nalu_buf.addr, align 8
  %20 = load i64*, i64** %nalu_bit_offset.addr, align 8
  %21 = load %struct.StorablePicture*, %struct.StorablePicture** %pic.addr, align 8
  %22 = load [176 x [144 x i8]]*, [176 x [144 x i8]]** %pic_Sluma.addr, align 8
  %23 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %pic_SChroma_0.addr, align 8
  %24 = load [88 x [72 x i8]]*, [88 x [72 x i8]]** %pic_SChroma_1.addr, align 8
  %25 = load %struct.StorablePictureInfo*, %struct.StorablePictureInfo** %pic_info.addr, align 8
  %26 = load i8, i8* getelementptr inbounds (%struct.pic_parameter_set_rbsp_t, %struct.pic_parameter_set_rbsp_t* @PPS_GLOBAL, i32 0, i32 14), align 1
  %27 = load %struct.ImageParameters*, %struct.ImageParameters** @img_inst, align 8
  call void @ProcessSlice(%struct.NALU_t* %18, i8* %19, i64* %20, %struct.StorablePicture* %21, [176 x [144 x i8]]* %22, [88 x [72 x i8]]* %23, [88 x [72 x i8]]* %24, %struct.StorablePictureInfo* %25, [9 x i8]* getelementptr inbounds ([11 x [9 x i8]], [11 x [9 x i8]]* @Mb_prediction_type, i32 0, i32 0), [36 x i8]* getelementptr inbounds ([44 x [36 x i8]], [44 x [36 x i8]]* @intra_pred_mode, i32 0, i32 0), [36 x i8]* getelementptr inbounds ([44 x [36 x i8]], [44 x [36 x i8]]* @nz_coeff_luma, i32 0, i32 0), [22 x [18 x i8]]* getelementptr inbounds ([2 x [22 x [18 x i8]]], [2 x [22 x [18 x i8]]]* @nz_coeff_chroma, i32 0, i32 0), i8 zeroext %26, %struct.slice_header_rbsp_t* @sliceHeader_inst, %struct.ImageParameters* %27)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb1, %sw.bb
  ret void
}

declare dso_local i32 @ProcessSPS(%struct.seq_parameter_set_rbsp_t*, %struct.NALU_t*, i8*, i64*) #1

declare dso_local i32 @ProcessPPS(%struct.pic_parameter_set_rbsp_t*, %struct.NALU_t*, i8*, i64*) #1

declare dso_local void @ProcessSH(%struct.seq_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t*, %struct.slice_header_rbsp_t*, %struct.ImageParameters*, %struct.NALU_t*, i8*, i64*) #1

declare dso_local void @intepretSLiceHeader(%struct.slice_header_rbsp_t*, %struct.seq_parameter_set_rbsp_t*, %struct.pic_parameter_set_rbsp_t*, i8 zeroext, i8 zeroext, %struct.ImageParameters*, %struct.StorablePicture*) #1

declare dso_local void @ProcessSlice(%struct.NALU_t*, i8*, i64*, %struct.StorablePicture*, [176 x [144 x i8]]*, [88 x [72 x i8]]*, [88 x [72 x i8]]*, %struct.StorablePictureInfo*, [9 x i8]*, [36 x i8]*, [36 x i8]*, [22 x [18 x i8]]*, i8 zeroext, %struct.slice_header_rbsp_t*, %struct.ImageParameters*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !27}
!llvm.ident = !{!28}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 3389984}
!4 = !{!"MaxCount", i64 605205}
!5 = !{!"MaxInternalCount", i64 274858}
!6 = !{!"MaxFunctionCount", i64 605205}
!7 = !{!"NumCounts", i64 730}
!8 = !{!"NumFunctions", i64 74}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!11 = !{i32 10000, i64 605205, i32 1}
!12 = !{i32 100000, i64 605205, i32 1}
!13 = !{i32 200000, i64 274858, i32 3}
!14 = !{i32 300000, i64 274858, i32 3}
!15 = !{i32 400000, i64 207400, i32 4}
!16 = !{i32 500000, i64 60608, i32 7}
!17 = !{i32 600000, i64 50048, i32 13}
!18 = !{i32 700000, i64 25408, i32 24}
!19 = !{i32 800000, i64 13581, i32 39}
!20 = !{i32 900000, i64 3166, i32 95}
!21 = !{i32 950000, i64 2176, i32 156}
!22 = !{i32 990000, i64 511, i32 268}
!23 = !{i32 999000, i64 80, i32 395}
!24 = !{i32 999900, i64 8, i32 463}
!25 = !{i32 999990, i64 2, i32 530}
!26 = !{i32 999999, i64 1, i32 557}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!29 = !{!"function_entry_count", i64 7}
!30 = !{!"branch_weights", i32 1, i32 2, i32 2, i32 6, i32 1}
